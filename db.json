{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/style.css","hash":"1d088e579ca1a5f65768de0b56c0a28703702aff","modified":1736217025274},{"_id":"source/_categories/index.md","hash":"09b41b607f794af2e4529f2032044be158090c81","modified":1736217024980},{"_id":"source/_data/link.yml","hash":"9c058841e72cfc89c2fb988a0de96d7629a35f52","modified":1736217024990},{"_id":"source/_posts/es62.md","hash":"68040eb48af5d986b2360425c91c393960cc5dc6","modified":1736217024998},{"_id":"source/_posts/1.generate 迭代器.md","hash":"6f63580de6b8d8548a699db680823132061b5d33","modified":1736217024991},{"_id":"source/_posts/git.md","hash":"82aeef03d719c530c4d54998298ccd4b1c74d83e","modified":1736217024998},{"_id":"source/_posts/Typescript学习.md","hash":"73a24f25656a8f9c4cabe4629edd1883d400c626","modified":1736217024998},{"_id":"source/_posts/ES6.md","hash":"49e9c2a055e5d584aade261f347029227caf8405","modified":1736217024991},{"_id":"source/_posts/js里面的事件执行顺序.md","hash":"9afe3f5895bc46596ed8ded31bcb62e537666fb6","modified":1736217025200},{"_id":"source/_posts/node入门.md","hash":"5949723201333afb6fbc5b75b5e5d7ab05348128","modified":1736217025201},{"_id":"source/_posts/react_first.md","hash":"dde314f28364a1a13e20e71461829a2de96daae2","modified":1736217025201},{"_id":"source/_posts/sql基础语法学习.md","hash":"dc2862b137183ec2ea70e42e77f91db39c772e15","modified":1736217025201},{"_id":"source/_posts/vue 3.0.md","hash":"b70c441af52767a4ab495e13c7c5fa13b8a15163","modified":1736217025201},{"_id":"source/_posts/webpack.md","hash":"7dae5a645a13d3d6abf05dedd8ae9b01e427e797","modified":1736217025202},{"_id":"source/_posts/组件通信.md","hash":"ecf6a173e8ab99ad18d56ab6d7633e925f03d010","modified":1736217025209},{"_id":"source/link/index.md","hash":"6cdbfc6465efae7c6d3b4b19faf320c3ba54d67c","modified":1736217025273},{"_id":"source/_posts/防抖与节流.md","hash":"3d42a107e0aa3fc485de1bf0a85cce1e035473c7","modified":1736217025209},{"_id":"source/play/index.md","hash":"a44e3a1ee5eeb40763ec7ee265df164a598cef25","modified":1736217025274},{"_id":"source/music/index.md","hash":"ed7ad647066d2506e4c64de03b260f75d468d8c5","modified":1736217025274},{"_id":"source/_posts/微信小程序开发.md","hash":"85c3685b2fb1fb1f7115b9583e3a7c34cbfcdd64","modified":1736217025204},{"_id":"source/_posts/面向对象以及原型.md","hash":"ae41b5d3f621307361b340fc5c55eaf92dc96265","modified":1736217025229},{"_id":"source/_posts/javascript入门.md","hash":"4dbe66dd59ea7fc362a27350263a67bc32b9d97c","modified":1736217025197},{"_id":"themes/butterfly/package.json","hash":"80ebdf46caa7266fc43cd51c96c97731adbc5694","modified":1736217025492},{"_id":"themes/butterfly/README.md","hash":"1e881aecb7899155f52824e4045f347178372f16","modified":1736217025288},{"_id":"themes/butterfly/_config.yml","hash":"8239544985a87481bf4c6c4775e8a3b4745d0bcb","modified":1736217025291},{"_id":"themes/butterfly/README_CN.md","hash":"c72625dcbced7a8664b78c069e50739fbee0aa05","modified":1736217025288},{"_id":"themes/butterfly/languages/en.yml","hash":"4b2c351f2b5fd4f8497e806085364928e1af0b5b","modified":1736217025292},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1736217025288},{"_id":"themes/butterfly/languages/default.yml","hash":"7fd2950554e99a6f15232267621f36f026a85380","modified":1736217025292},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ef035065ebb37fce3e56e51f8b56deb596db78b2","modified":1736217025292},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"6c35255c196ea8e9817b85b6d7729d00cf18f231","modified":1736217025292},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1736217025293},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1736217025491},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1736217025293},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1736217025492},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1736217025492},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1736217025492},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1736217025293},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1736217025293},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"847a5cbc13db1a435a4f762a7c0007d9bcbb79a2","modified":1736217025294},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1736217025461},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1736217025492},{"_id":"themes/butterfly/scripts/events/config.js","hash":"a72c2020c87c4998aa124a16e9f8560875b9f86d","modified":1736217025493},{"_id":"themes/butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1736217025495},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1736217025463},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1736217025495},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1736217025496},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1736217025495},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1736217025496},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1736217025501},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1736217025463},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1736217025500},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1736217025502},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1736217025502},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1736217025502},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1736217025502},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1736217025502},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1736217025502},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1736217025502},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1736217025502},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1736217025501},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1736217025502},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1736217025503},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1736217025503},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1736217025503},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1736217025293},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1736217025463},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1736217025515},{"_id":"themes/butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1736217025515},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1736217025515},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1736217025516},{"_id":"themes/butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1736217025516},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1736217025516},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1736217025517},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1736217025294},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1736217025517},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9e58c80af8bbd0c66ccb4f94d3781818cebf0d66","modified":1736217025295},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1736217025295},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1736217025295},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1736217025296},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1736217025296},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1736217025305},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1736217025296},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1736217025319},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1736217025319},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1736217025457},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1736217025461},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1736217025461},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1736217025461},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1736217025462},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1736217025463},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1736217025463},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1736217025463},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1736217025463},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1736217025463},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1736217025478},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1736217025461},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1736217025478},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1736217025462},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1736217025463},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1736217025488},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"d4072f9ab79f4ac49aa251ae470abc45a2fddbd6","modified":1736217025478},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1736217025489},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1736217025489},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"b63fd8ec48d782f51ee11226753fed1998bbf34a","modified":1736217025487},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1736217025489},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1736217025488},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1736217025489},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1736217025490},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1736217025489},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0380a1e048e6219ea4b4a8a4eadba960edf308f0","modified":1736217025489},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1736217025491},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1736217025490},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1736217025491},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1736217025505},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f7fd855593396b30932a06627287a73a407aff88","modified":1736217025504},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1736217025505},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1736217025508},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"2d3b0386c8b62a61734e10bab2cf86842cbb1673","modified":1736217025509},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1736217025509},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1736217025509},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1736217025509},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1736217025510},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1736217025510},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1736217025510},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"84d4f27fde933bdf839629eb3bddcbc0f4592836","modified":1736217025510},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1736217025511},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1736217025511},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e5008f43897d8482b4831cd4c13a0af40e496762","modified":1736217025511},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":1736217025511},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1736217025511},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1736217025512},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1736217025512},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1736217025512},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1736217025512},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1736217025512},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1736217025512},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1736217025513},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0290605c4984882990059eefe3ad18d2ac6a19ef","modified":1736217025514},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1736217025509},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1736217025510},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1736217025514},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1736217025514},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1736217025514},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1736217025511},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1736217025514},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1736217025515},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1736217025515},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1736217025515},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1736217025515},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1736217025515},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1736217025515},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1736217025515},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1736217025517},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1736217025517},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1736217025294},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1736217025489},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1736217025463},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1736217025465},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1736217025465},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe684aaad4c99b908dc4499c85afd9a2cd893aae","modified":1736217025465},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"0764709381fa29778f6390d645ed137d2f91228f","modified":1736217025465},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1736217025465},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7648e4cb0b224f480b5f1356d64f62c9235f6723","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1736217025462},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1736217025469},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1736217025468},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1736217025469},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1736217025464},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"ac811c1d6e0bf08aeb933ade1b9557e0c560d0c9","modified":1736217025470},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"9028efac78e4122acd734edd5ef9110ef3f05cd1","modified":1736217025471},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"5e32d903903c76db55a625640f9417d15a3a312f","modified":1736217025475},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1736217025466},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1736217025467},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1736217025467},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"0a7587a0211011b5942edba2aa80d51169561d30","modified":1736217025467},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1736217025481},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1736217025483},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1736217025484},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1736217025479},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1736217025479},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1736217025480},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1736217025505},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1736217025507},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1736217025508},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1736217025484},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1736217025508},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1736217025508},{"_id":"public/style.css","hash":"3a3837e6bf840a31d3bd334b33d083b35b6cc409","modified":1736217393656},{"_id":"public/link/index.html","hash":"2cbaebbe06dd945eec6a437ba9cbcdae09909532","modified":1736251872927},{"_id":"public/music/index.html","hash":"3f4f175bbff5973a4bd283837fef2486cf95c686","modified":1736251872927},{"_id":"public/play/index.html","hash":"31dea79df19a7c9100af9e45a2a3eed9a085d2f2","modified":1736251872927},{"_id":"public/2022/10/20/1.generate 迭代器/index.html","hash":"e0d7e8ed9b9b55ade2f9848e1b74293c95f955f4","modified":1736251872927},{"_id":"public/2022/06/30/sql基础语法学习/index.html","hash":"4165661fc652a173f0fef763e09dd77b220d5351","modified":1736251872927},{"_id":"public/2022/08/10/react_first/index.html","hash":"0d7551cc3c5c152e3cf7e81d09e9e6df099e3a18","modified":1736251872927},{"_id":"public/2022/06/10/node入门/index.html","hash":"dd1806e29a33a36b4c1af0ba82c10e0548d03221","modified":1736251872927},{"_id":"public/2022/05/20/Typescript学习/index.html","hash":"804c2d781d72ee38474b91f271b429fbcd7fc519","modified":1736251872927},{"_id":"public/2022/04/24/微信小程序开发/index.html","hash":"b69aa37536f47570b5e54bd57bce1f0b9845a8f3","modified":1736251872927},{"_id":"public/2022/04/22/防抖与节流/index.html","hash":"908263ca5f552f40d7a5978203656e0447dca470","modified":1736251872927},{"_id":"public/2022/04/18/webpack/index.html","hash":"04743625ab2fd7f81f30ec83a3a171d9ed7bda80","modified":1736251872927},{"_id":"public/2022/04/10/git/index.html","hash":"59d442234562403cafb9d8d100a3fc0c375a5a0f","modified":1736251872927},{"_id":"public/2022/03/15/es62/index.html","hash":"d82fe2562dcc2998905a29929785056d40d22f2c","modified":1736251872927},{"_id":"public/2022/03/07/ES6/index.html","hash":"4200cbcf515033b3755a0dd3257d75c734e895ad","modified":1736251872927},{"_id":"public/2022/02/15/vue 3.0/index.html","hash":"67fdc8877c5b32ea3a75c8ffad7d8771b4bed151","modified":1736251872927},{"_id":"public/2021/12/28/面向对象以及原型/index.html","hash":"b8f09ccc6349449caee89d2a55634353bbf08c6a","modified":1736251872927},{"_id":"public/2021/12/24/js里面的事件执行顺序/index.html","hash":"216bb85de141ca9ba3847b12237e978673572811","modified":1736251872927},{"_id":"public/2021/12/20/组件通信/index.html","hash":"b64db9204a2ae7c11ced017679e5db2bff46a4fd","modified":1736251872927},{"_id":"public/2021/12/11/javascript入门/index.html","hash":"4cb8f76c81ec4dd278804c310340011c5117fef0","modified":1736251872927},{"_id":"public/archives/index.html","hash":"d2e0357e86d4e68ce715952f4c191bf33e76dd26","modified":1736251872927},{"_id":"public/archives/page/2/index.html","hash":"69acbe447b3c9403b41a1ea255eab1b6e3b01dd0","modified":1736251872927},{"_id":"public/archives/2021/index.html","hash":"703cd2fae29c32c16990fd71a9e1e01cfacb734e","modified":1736251872927},{"_id":"public/archives/2021/12/index.html","hash":"49aceb73a3a46de82866a07c41cfb1c3edab0136","modified":1736251872927},{"_id":"public/archives/2022/index.html","hash":"dd0ee3342cda1a12a4ae4d4820fd6ed36e6021fa","modified":1736251872927},{"_id":"public/archives/2022/page/2/index.html","hash":"7516a29e6207168057401c20c6e750caf7b88440","modified":1736251872927},{"_id":"public/archives/2022/02/index.html","hash":"aef46812bb8845fdb19dde171c475c5ad55ea2eb","modified":1736251872927},{"_id":"public/archives/2022/03/index.html","hash":"5299cd691d0e2360445176425da6158148e5795a","modified":1736251872927},{"_id":"public/archives/2022/04/index.html","hash":"d49faeb7ed780ea979903916ef8e87f56fe3fc3e","modified":1736251872927},{"_id":"public/archives/2022/05/index.html","hash":"7bc8360ec557f2b5b55832ceb42bb3abcc84bac4","modified":1736251872927},{"_id":"public/archives/2022/06/index.html","hash":"933373190cf825a9fb5e93c146f6887bdfb2234c","modified":1736251872927},{"_id":"public/archives/2022/08/index.html","hash":"2ca6d55c3ee2ba98df08aefaa691c110b111294f","modified":1736251872927},{"_id":"public/archives/2022/10/index.html","hash":"9d3d36239f6c4f3075ce5403ffd5e12e0efef108","modified":1736251872927},{"_id":"public/index.html","hash":"73e91c3c8e20582967dc42ee46ba816dab9e490c","modified":1736251872927},{"_id":"public/page/2/index.html","hash":"01233ea3b3b47323a19f75f2d318f0515341c0d5","modified":1736251872927},{"_id":"public/tags/map/index.html","hash":"86f2abbf6accc59b7aa4e0c7cb18901e848d960d","modified":1736251872927},{"_id":"public/tags/set/index.html","hash":"1212c45f289149c6663ea9631b3358050aea5840","modified":1736251872927},{"_id":"public/tags/generate/index.html","hash":"ce26d703aa9beb225d4c6605213862c3d0646d2d","modified":1736251872927},{"_id":"public/tags/iterator/index.html","hash":"b1cd96a1dd72a0d26bd972238fcfeedfec3454ce","modified":1736251872927},{"_id":"public/tags/ts/index.html","hash":"6e8add7de3a2b0eeb9b773271518cbb133eff5c3","modified":1736251872927},{"_id":"public/tags/js/index.html","hash":"1225cebe0589985da7c02195ae6160828b19aa2c","modified":1736251872927},{"_id":"public/tags/箭头函数/index.html","hash":"37127631f76121d132e557eab4aa62438d5356ea","modified":1736251872927},{"_id":"public/tags/解构赋值/index.html","hash":"b501212c88424cba8db72295bc4875cfbf97a459","modified":1736251872927},{"_id":"public/tags/promise/index.html","hash":"cd0feab57850de9a5e443b106e964e1ad1d35eb7","modified":1736251872927},{"_id":"public/tags/git/index.html","hash":"fb03cde7c89e9836df155251c8895f75de55ed33","modified":1736251872927},{"_id":"public/tags/gitee/index.html","hash":"25db360ca3b485c96fed5a6e398458c6d25c65c0","modified":1736251872927},{"_id":"public/tags/javaScript/index.html","hash":"6a0781d6590ee1fdf8f268d9ddb87ca6d7cee823","modified":1736251872927},{"_id":"public/tags/宏任务/index.html","hash":"2321e6250e269df2baa90718450f201b77ef9bcd","modified":1736251872927},{"_id":"public/tags/微任务/index.html","hash":"42e16751bc3e9cab965bf7f8148d6aaf6e31e5d6","modified":1736251872927},{"_id":"public/tags/sql/index.html","hash":"9bb7e809db150afab7ca21980f1ea68ce393417e","modified":1736251872927},{"_id":"public/tags/mysql/index.html","hash":"6d370c6ca2c5d8d8f442c8d5b7adbdc02938580e","modified":1736251872927},{"_id":"public/tags/react-redux/index.html","hash":"46ee836cd382e5335215d46f37d96fed725e2428","modified":1736251872927},{"_id":"public/tags/node/index.html","hash":"8f4cdb815499c5e473d3e4c3cbde3872bee7756e","modified":1736251872927},{"_id":"public/tags/ref/index.html","hash":"fddbd60041b1ceb02b707ee81532c45995d9f3ee","modified":1736251872927},{"_id":"public/tags/reactive/index.html","hash":"4dde8c3e2ad38f45685fddfd9ef50cbd057e2b12","modified":1736251872927},{"_id":"public/tags/reandonly/index.html","hash":"f3c85d7f01f01eba31680e1c988f92bc2da3e415","modified":1736251872927},{"_id":"public/tags/vite/index.html","hash":"80d5099a87bb5c3de0288e2aa3c0d47497584ffa","modified":1736251872927},{"_id":"public/tags/Suspence/index.html","hash":"0282c831a2a3899d07971dd4daae395a40740956","modified":1736251872927},{"_id":"public/tags/provide/index.html","hash":"d1659568c718d04db7674edcba32cd2f90810bd0","modified":1736251872927},{"_id":"public/tags/Teleport/index.html","hash":"c79082ac3d6e1109164fcb8932fce05b7c10a476","modified":1736251872927},{"_id":"public/tags/webpack5/index.html","hash":"10f2006b84018582220012605c1bb3b5c933863c","modified":1736251872927},{"_id":"public/tags/vue/index.html","hash":"45f0af5b8af39a74d909bd6b9910d159d033d533","modified":1736251872927},{"_id":"public/tags/微信小程序/index.html","hash":"c16c5f4f15429fcc2d73e19dcd5ab1cab443d247","modified":1736251872927},{"_id":"public/tags/wx/index.html","hash":"c09dcda820ce7e9aa6523820cc278abff593a2a7","modified":1736251872927},{"_id":"public/tags/props/index.html","hash":"5a0bd48448f6eeef46458c6daeee403d80245e5f","modified":1736251872927},{"_id":"public/tags/emit/index.html","hash":"291e56f8f8beafe0775dbc36da1e2d5b578187e0","modified":1736251872927},{"_id":"public/tags/parents/index.html","hash":"65c33647e446b09c239febf31f8c30cdb473ccbc","modified":1736251872927},{"_id":"public/tags/prototype/index.html","hash":"75019dcd7c317e7bc98e5658e5b943883b062523","modified":1736251872927},{"_id":"public/tags/constrctor/index.html","hash":"0d80b6b44470ea4629856acf72bce6d07c58791f","modified":1736251872927},{"_id":"public/categories/js/index.html","hash":"2c2484c0ed978ade6733531dedb3dfa91f4c23b9","modified":1736251872927},{"_id":"public/categories/git/index.html","hash":"ed41901a240abbf68d52b138e937e0ff3847bfe7","modified":1736251872927},{"_id":"public/categories/extension/index.html","hash":"4273af782b643a4a6600627b93de276d8795284c","modified":1736251872927},{"_id":"public/categories/react/index.html","hash":"027066d91fa41ce7992d24645d4a121400c499b2","modified":1736251872927},{"_id":"public/categories/vue/index.html","hash":"680eea8075583f1066f8c1e2761604c0d56cc732","modified":1736251872927},{"_id":"public/categories/webpack/index.html","hash":"159e5d015023e6467d00a208c54180ea6f58c0e3","modified":1736251872927},{"_id":"public/categories/wx/index.html","hash":"3855dd6bbc4bd4ee71759f3a073154a85ce92b99","modified":1736251872927},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1736217393656},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1736217393656},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1736217393656},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1736217393656},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1736217393656},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1736217393656},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1736217393656},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1736217393656},{"_id":"public/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1736217393656},{"_id":"public/css/index.css","hash":"06f76278e0aeb17408b96bb01bcd1dd2c959cce8","modified":1736217393656},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1736217393656},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1736217393656},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1736217393656},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1736217393656},{"_id":"source/_posts/开发代码调试, 问题定位.md","hash":"6445cd5e8469fd271d5acd9681dc8ebc8bd7c97e","modified":1736251859659},{"_id":"public/2024/01/07/开发代码调试, 问题定位/index.html","hash":"f1a128694d5cd9a319f0c8d686c7b1bf2a8e2682","modified":1736251872927},{"_id":"public/archives/2024/index.html","hash":"da03871102e40f948613c66e40b9fb182e62b233","modified":1736251872927},{"_id":"public/archives/2024/01/index.html","hash":"9f318cf0adfc6f85991d8540a9a4b4c9411ed912","modified":1736251872927}],"Category":[{"name":"js","_id":"cm5lv0cgk0004572ohppah81p"},{"name":"git","_id":"cm5lv0ckv000k572o1zic8wk0"},{"name":"extension","_id":"cm5lv0cr8001i572oglpf8qs2"},{"name":"react","_id":"cm5lv0crb001n572oftsd9ybt"},{"name":"vue","_id":"cm5lv0crg001y572o05zx1kjv"},{"name":"webpack","_id":"cm5lv0crh0024572o39wi5qhd"},{"name":"wx","_id":"cm5lv0crz0029572ofxcqcbsv"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}],"Page":[{"title":"友情链接","top_img":"/img/cartoon.jpg","cover":"/img/cartoon.jpg","type":"link","_content":"\n\n\n\n\n\n","source":"link/index.md","raw":"---\ntitle: '友情链接'\ntop_img: /img/cartoon.jpg\ncover: /img/cartoon.jpg\ntype: \"link\"\n---\n\n\n\n\n\n\n","date":"2025-01-07T02:30:25.273Z","updated":"2025-01-07T02:30:25.273Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm5lv0ccq0000572ofd530s7f","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":""},{"_content":"body {\n    cursor: url(https://bu.dusays.com/2022/05/17/6283c365d20dd.png),pointer;\n  }\n  \n  .hide-block>.hide-button.open,\n  .hide-inline>.hide-button.open {\n    display: block\n  }\n  \n  a,\n  button,\n  img {\n    cursor: url(https://ts1.cn.mm.bing.net/th/id/R-C.a0601eeae9dd9f3ccf1162b98f9b67a7?rik=7tt6dxdGZG%2fBLA&riu=http%3a%2f%2fimages.shejidaren.com%2fwp-content%2fuploads%2f2014%2f08%2f044354Fb4.jpg&ehk=QvIQxB23T9lcEcZ%2bNcpj5eh2XM%2btlGgqszK%2bX3BgpBY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1),pointer\n  }","source":"style.css","raw":"body {\n    cursor: url(https://bu.dusays.com/2022/05/17/6283c365d20dd.png),pointer;\n  }\n  \n  .hide-block>.hide-button.open,\n  .hide-inline>.hide-button.open {\n    display: block\n  }\n  \n  a,\n  button,\n  img {\n    cursor: url(https://ts1.cn.mm.bing.net/th/id/R-C.a0601eeae9dd9f3ccf1162b98f9b67a7?rik=7tt6dxdGZG%2fBLA&riu=http%3a%2f%2fimages.shejidaren.com%2fwp-content%2fuploads%2f2014%2f08%2f044354Fb4.jpg&ehk=QvIQxB23T9lcEcZ%2bNcpj5eh2XM%2btlGgqszK%2bX3BgpBY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1),pointer\n  }","date":"2025-01-07T02:30:25.274Z","updated":"2025-01-07T02:30:25.274Z","path":"style.css","layout":"false","title":"","comments":1,"_id":"cm5lv0cfz0002572oe11cggd3","content":"body {\n    cursor: url(https://bu.dusays.com/2022/05/17/6283c365d20dd.png),pointer;\n  }\n  \n  .hide-block>.hide-button.open,\n  .hide-inline>.hide-button.open {\n    display: block\n  }\n  \n  a,\n  button,\n  img {\n    cursor: url(https://ts1.cn.mm.bing.net/th/id/R-C.a0601eeae9dd9f3ccf1162b98f9b67a7?rik=7tt6dxdGZG%2fBLA&riu=http%3a%2f%2fimages.shejidaren.com%2fwp-content%2fuploads%2f2014%2f08%2f044354Fb4.jpg&ehk=QvIQxB23T9lcEcZ%2bNcpj5eh2XM%2btlGgqszK%2bX3BgpBY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1),pointer\n  }","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"cover":"/img/9.jpg","excerpt":"","more":"body {\n    cursor: url(https://bu.dusays.com/2022/05/17/6283c365d20dd.png),pointer;\n  }\n  \n  .hide-block>.hide-button.open,\n  .hide-inline>.hide-button.open {\n    display: block\n  }\n  \n  a,\n  button,\n  img {\n    cursor: url(https://ts1.cn.mm.bing.net/th/id/R-C.a0601eeae9dd9f3ccf1162b98f9b67a7?rik=7tt6dxdGZG%2fBLA&riu=http%3a%2f%2fimages.shejidaren.com%2fwp-content%2fuploads%2f2014%2f08%2f044354Fb4.jpg&ehk=QvIQxB23T9lcEcZ%2bNcpj5eh2XM%2btlGgqszK%2bX3BgpBY%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1),pointer\n  }"},{"title":"友情链接","top_img":"/img/cartoon.jpg","cover":"/img/cartoon.jpg","_content":"## 等待维护\n![帽子戏法](https://mzxf1025.gitee.io/)\nhttps://mzxf1025.gitee.io/","source":"music/index.md","raw":"---\ntitle: '友情链接'\ntop_img: /img/cartoon.jpg\ncover: /img/cartoon.jpg\n---\n## 等待维护\n![帽子戏法](https://mzxf1025.gitee.io/)\nhttps://mzxf1025.gitee.io/","date":"2025-01-07T02:30:25.274Z","updated":"2025-01-07T02:30:25.274Z","path":"music/index.html","comments":1,"layout":"page","_id":"cm5lv0che0006572ofyywbb4q","content":"<h2 id=\"等待维护\"><a href=\"#等待维护\" class=\"headerlink\" title=\"等待维护\"></a>等待维护</h2><p><img src=\"https://mzxf1025.gitee.io/\" alt=\"帽子戏法\"><br><a href=\"https://mzxf1025.gitee.io/\">https://mzxf1025.gitee.io/</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<h2 id=\"等待维护\"><a href=\"#等待维护\" class=\"headerlink\" title=\"等待维护\"></a>等待维护</h2><p><img src=\"https://mzxf1025.gitee.io/\" alt=\"帽子戏法\"><br><a href=\"https://mzxf1025.gitee.io/\">https://mzxf1025.gitee.io/</a></p>\n"},{"_content":"**以下仅供个人学习使用，如有侵权请联系删除**\n\n## 花花\n\n[国王与乞丐](https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483889&idx=1&sn=e45758ab68d1d95b8d7151ee36d7049b&chksm=ea65bfdbdd1236cde31126fb73ba94a3678eb411fa1c1b2d1776db06d3a8c2ccc6febc737883&scene=21#wechat_redirect)\n\n[好想爱这个世界啊](https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247484182&idx=1&sn=c95a6816ae172942ed175eaced0b9d9d&chksm=ea65bd3cdd12342a71586c84d854c1c42367fe642479565439bcd39cf5754b12ff6b3081f776&scene=21#wechat_redirect)\n\n[烟火里地尘埃](https://www.jitabang.com/jitapu/8171.html)\n\n[与火星孩子的对话](http://www.kouqinpu.cn/tanchang/157.html)\n\n\n\n\n\n## 棱镜\n\n[这是我一生最勇敢的瞬间](http://www.kouqinpu.cn/jiaoxue/474.html)\n\n[总有一天你会出现在我身边](https://www.wanjita.com/jita-2428.html)\n\n\n\n## 其他\n\n[知足](https://www.jitabang.com/jitapu/2925.html)\n\n[世间美好与你环环相扣](https://www.wanjita.com/jita-3040.html)\n\n[假装](https://www.wanjita.com/jita-3465.html)\n\n[凄美地](https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483958&idx=1&sn=ebf1ea46b53e016653fc335c4c483455&chksm=ea65bc1cdd12350af0cc77caeadb41ef61016593987111909e62ed55953e62edb6f57868da3e&scene=21#wechat_redirect)\n\n[晴天](https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483937&idx=1&sn=aa7a7b2fa69ee6c2bd5fa146c71faad1&chksm=ea65bc0bdd12351d84739461653992c5469774863257faed0f5d219da1f878fe551faebd2c19&scene=21#wechat_redirect)\n\n [天空之城](https://www.wjita.com/opern/40201.html)\n\n[偏爱](https://www.wanjita.com/jita-3049.html)","source":"play/index.md","raw":"**以下仅供个人学习使用，如有侵权请联系删除**\n\n## 花花\n\n[国王与乞丐](https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483889&idx=1&sn=e45758ab68d1d95b8d7151ee36d7049b&chksm=ea65bfdbdd1236cde31126fb73ba94a3678eb411fa1c1b2d1776db06d3a8c2ccc6febc737883&scene=21#wechat_redirect)\n\n[好想爱这个世界啊](https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247484182&idx=1&sn=c95a6816ae172942ed175eaced0b9d9d&chksm=ea65bd3cdd12342a71586c84d854c1c42367fe642479565439bcd39cf5754b12ff6b3081f776&scene=21#wechat_redirect)\n\n[烟火里地尘埃](https://www.jitabang.com/jitapu/8171.html)\n\n[与火星孩子的对话](http://www.kouqinpu.cn/tanchang/157.html)\n\n\n\n\n\n## 棱镜\n\n[这是我一生最勇敢的瞬间](http://www.kouqinpu.cn/jiaoxue/474.html)\n\n[总有一天你会出现在我身边](https://www.wanjita.com/jita-2428.html)\n\n\n\n## 其他\n\n[知足](https://www.jitabang.com/jitapu/2925.html)\n\n[世间美好与你环环相扣](https://www.wanjita.com/jita-3040.html)\n\n[假装](https://www.wanjita.com/jita-3465.html)\n\n[凄美地](https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483958&idx=1&sn=ebf1ea46b53e016653fc335c4c483455&chksm=ea65bc1cdd12350af0cc77caeadb41ef61016593987111909e62ed55953e62edb6f57868da3e&scene=21#wechat_redirect)\n\n[晴天](https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483937&idx=1&sn=aa7a7b2fa69ee6c2bd5fa146c71faad1&chksm=ea65bc0bdd12351d84739461653992c5469774863257faed0f5d219da1f878fe551faebd2c19&scene=21#wechat_redirect)\n\n [天空之城](https://www.wjita.com/opern/40201.html)\n\n[偏爱](https://www.wanjita.com/jita-3049.html)","date":"2025-01-07T02:30:25.274Z","updated":"2025-01-07T02:30:25.274Z","path":"play/index.html","title":"","comments":1,"layout":"page","_id":"cm5lv0ck50008572o805rbv0l","content":"<p><strong>以下仅供个人学习使用，如有侵权请联系删除</strong></p>\n<h2 id=\"花花\"><a href=\"#花花\" class=\"headerlink\" title=\"花花\"></a>花花</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483889&idx=1&sn=e45758ab68d1d95b8d7151ee36d7049b&chksm=ea65bfdbdd1236cde31126fb73ba94a3678eb411fa1c1b2d1776db06d3a8c2ccc6febc737883&scene=21#wechat_redirect\">国王与乞丐</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247484182&idx=1&sn=c95a6816ae172942ed175eaced0b9d9d&chksm=ea65bd3cdd12342a71586c84d854c1c42367fe642479565439bcd39cf5754b12ff6b3081f776&scene=21#wechat_redirect\">好想爱这个世界啊</a></p>\n<p><a href=\"https://www.jitabang.com/jitapu/8171.html\">烟火里地尘埃</a></p>\n<p><a href=\"http://www.kouqinpu.cn/tanchang/157.html\">与火星孩子的对话</a></p>\n<h2 id=\"棱镜\"><a href=\"#棱镜\" class=\"headerlink\" title=\"棱镜\"></a>棱镜</h2><p><a href=\"http://www.kouqinpu.cn/jiaoxue/474.html\">这是我一生最勇敢的瞬间</a></p>\n<p><a href=\"https://www.wanjita.com/jita-2428.html\">总有一天你会出现在我身边</a></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><a href=\"https://www.jitabang.com/jitapu/2925.html\">知足</a></p>\n<p><a href=\"https://www.wanjita.com/jita-3040.html\">世间美好与你环环相扣</a></p>\n<p><a href=\"https://www.wanjita.com/jita-3465.html\">假装</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483958&idx=1&sn=ebf1ea46b53e016653fc335c4c483455&chksm=ea65bc1cdd12350af0cc77caeadb41ef61016593987111909e62ed55953e62edb6f57868da3e&scene=21#wechat_redirect\">凄美地</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483937&idx=1&sn=aa7a7b2fa69ee6c2bd5fa146c71faad1&chksm=ea65bc0bdd12351d84739461653992c5469774863257faed0f5d219da1f878fe551faebd2c19&scene=21#wechat_redirect\">晴天</a></p>\n<p> <a href=\"https://www.wjita.com/opern/40201.html\">天空之城</a></p>\n<p><a href=\"https://www.wanjita.com/jita-3049.html\">偏爱</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"cover":"/img/9.jpg","excerpt":"","more":"<p><strong>以下仅供个人学习使用，如有侵权请联系删除</strong></p>\n<h2 id=\"花花\"><a href=\"#花花\" class=\"headerlink\" title=\"花花\"></a>花花</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483889&idx=1&sn=e45758ab68d1d95b8d7151ee36d7049b&chksm=ea65bfdbdd1236cde31126fb73ba94a3678eb411fa1c1b2d1776db06d3a8c2ccc6febc737883&scene=21#wechat_redirect\">国王与乞丐</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247484182&idx=1&sn=c95a6816ae172942ed175eaced0b9d9d&chksm=ea65bd3cdd12342a71586c84d854c1c42367fe642479565439bcd39cf5754b12ff6b3081f776&scene=21#wechat_redirect\">好想爱这个世界啊</a></p>\n<p><a href=\"https://www.jitabang.com/jitapu/8171.html\">烟火里地尘埃</a></p>\n<p><a href=\"http://www.kouqinpu.cn/tanchang/157.html\">与火星孩子的对话</a></p>\n<h2 id=\"棱镜\"><a href=\"#棱镜\" class=\"headerlink\" title=\"棱镜\"></a>棱镜</h2><p><a href=\"http://www.kouqinpu.cn/jiaoxue/474.html\">这是我一生最勇敢的瞬间</a></p>\n<p><a href=\"https://www.wanjita.com/jita-2428.html\">总有一天你会出现在我身边</a></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><a href=\"https://www.jitabang.com/jitapu/2925.html\">知足</a></p>\n<p><a href=\"https://www.wanjita.com/jita-3040.html\">世间美好与你环环相扣</a></p>\n<p><a href=\"https://www.wanjita.com/jita-3465.html\">假装</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483958&idx=1&sn=ebf1ea46b53e016653fc335c4c483455&chksm=ea65bc1cdd12350af0cc77caeadb41ef61016593987111909e62ed55953e62edb6f57868da3e&scene=21#wechat_redirect\">凄美地</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI2MDc0NjA1Mw==&mid=2247483937&idx=1&sn=aa7a7b2fa69ee6c2bd5fa146c71faad1&chksm=ea65bc0bdd12351d84739461653992c5469774863257faed0f5d219da1f878fe551faebd2c19&scene=21#wechat_redirect\">晴天</a></p>\n<p> <a href=\"https://www.wjita.com/opern/40201.html\">天空之城</a></p>\n<p><a href=\"https://www.wanjita.com/jita-3049.html\">偏爱</a></p>\n"}],"Post":[{"title":"js内置对象map,set,generate,iterator","author":"codefish","date":"2022-10-20T08:20:34.000Z","top_img":"/img/13.jpg","cover":"/img/13.jpg","_content":"\n\n\n开发中用到最多的场景，父子组件通信，分发事件，组件传值。\n\n\n\n### 1.generate 迭代器\n\n可以暂停和开始\n\n- *function\n- yield\n- yield*\n\n\n\n#### 1.funtion* 定义一个迭代器函数\n\n1. generator.prototype.next()\n2. generator.prototype.return()\n3. generator.prototype.throw() 抛出错误\n\n```js\nfunction* generator(i) {\n  yield i;\n  yield i + 10;\n}\nconst gen = generator(10);\n```\n\n**生成器函数有一个next（）方法**\n\n`next()`方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 `yield` 表达式的返回值，done 属性为布尔类型，表示生成器后续是否还有 `yield` 语句，即生成器函数是否已经执行完毕并返回。\n\n\n\n调用 `next()`方法时，如果传入了参数，那么这个参数会传给**上一条执行的 yield 语句左边的变量**，例如下面例子中的`x`：\n\n```js\nfunction *gen(){\n    yield 10;\n    x=yield 'foo';\n    yield x;\n}\n\nvar gen_obj=gen();\nconsole.log(gen_obj.next());// 执行 yield 10，返回 10\nconsole.log(gen_obj.next());// 执行 yield 'foo'，返回 'foo'\nconsole.log(gen_obj.next(100));// 将 100 赋给上一条 yield 'foo' 的左值，即执行 x=100，返回 100\nconsole.log(gen_obj.next());// 执行完毕，value 为 undefined，done 为 true\n```\n\n**x=yield 'foo' 不同于 let x=yield 'foo'**\n\n后者不会将等号右边的赋值给左边\n\n```\nfunction *createIterator() {\n    let first = yield 1;\n    let second = yield first + 2; // 4 + 2\n                                  // first =4 是 next(4) 将参数赋给上一条的\n    yield second + 3;             // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next());    // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4));   // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5));   // \"{ value: 8, done: false }\"\nconsole.log(iterator.next());    // \"{ value: undefined, done: true }\"\n```\n\n\n\n**接收参数（可以多个**\n\n```js\nfunction* idMaker(){\n    console.log(arguments) //{'1':5,'2':7}\n    var index = arguments[0] || 0;\n    while(true)\n        yield index++;\n}\n\nvar gen = idMaker(5,7);\nconsole.log(gen.next().value); // 5\nconsole.log(gen.next().value); // 6\n```\n\n\n\n**显示返回**\n\nnext()的value变为返回的值，done的状态变为true\n\n**注意**\n\n1. 不能当构造器使用\n\n**应用**\n\n1. 使用迭代器遍历二维数组为一维数组、也可以多维转为一维数组\n\n\n\n#### 2.yield* \n\n**用于委托给另一个**generate或者可迭代对象\n\n`yield*` 表达式本身的值是当迭代器关闭时返回的值（即`done`为`true`时）。\n\n```js\nfunction* g1() {\n  yield 2;\n  yield 3;\n  yield 4;\n}\n\nfunction* g2() {\n  yield 1;\n  yield* g1();\n  yield 5;\n}\n\nvar iterator = g2();\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: 4, done: false }\nconsole.log(iterator.next()); // { value: 5, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n\n\n除了生成器对象这一种可迭代对象，`yield*` 还可以 `yield` 其它任意的可迭代对象，比如说数组、字符串、`arguments` 对象等等。\n\n```js\nfunction* g3() {\n  yield* [1, 2];\n  yield* \"34\";\n  yield* arguments;\n}\n\nvar iterator = g3(5, 6);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: \"3\", done: false }\nconsole.log(iterator.next()); // { value: \"4\", done: false }\nconsole.log(iterator.next()); // { value: 5, done: false }\nconsole.log(iterator.next()); // { value: 6, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n#### 3.迭代器Iterator\n\nES6 规定，默认的 Iterator 接口部署在数据结构的`Symbol.iterator`属性，Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数，其实就是我们上面写的myiteration函数，执行这个函数，就会返回一个带有next方法的遍历器对象。至于属性名Symbol.iterator，它是一个表达式，返回`Symbol`对象的`iterator`属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内。\n\n在js里原生具备 Iterator 接口的数据结构如下：\n\n- Array\n- Map\n- Set\n- String\n- TypedArray\n- 函数的 arguments 对象\n- NodeList 对象 因此，上面的任意一个数据类型都支持for...of遍历，也可以调用自身的\n\n\n\n### 2.判断类型\n\n**[参考](https://www.cnblogs.com/onepixel/p/5126046.html#:~:text=%E5%88%A4%E6%96%ADJS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%201%201%E3%80%81typeof%20typeof%20%E6%98%AF%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%8C%E5%85%B6%E5%8F%B3%E4%BE%A7%E8%B7%9F%E4%B8%80%E4%B8%AA%E4%B8%80%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%B9%B6%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%82%20...%202%202%E3%80%81instanceof,%28%29%20%E6%98%AF%20Object%20%E7%9A%84%E5%8E%9F%E5%9E%8B%E6%96%B9%E6%B3%95%EF%BC%8C%E8%B0%83%E7%94%A8%E8%AF%A5%E6%96%B9%E6%B3%95%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1%E7%9A%84%20%5B%20%5BClass%5D%5D%20%E3%80%82%20)**\n\n- Object.prototype.toString.call(args)\n- instanceof\n- typeof\n- constructor\n\n\n\n工具函数判断 isEmpty\n\n#### 1.Object.prototype.toString.call(args)\n\n```js\nObject.prototype.toString.call('') ;   // [object String]\nObject.prototype.toString.call(1) ;    // [object Number]\nObject.prototype.toString.call(true) ; // [object Boolean]\nObject.prototype.toString.call(Symbol()); //[object Symbol]\nObject.prototype.toString.call(undefined) ; // [object Undefined]\nObject.prototype.toString.call(null) ; // [object Null]\nObject.prototype.toString.call(new Function()) ; // [object Function]\nObject.prototype.toString.call(new Date()) ; // [object Date]\nObject.prototype.toString.call([]) ; // [object Array]\nObject.prototype.toString.call(new RegExp()) ; // [object RegExp]\nObject.prototype.toString.call(new Error()) ; // [object Error]\nObject.prototype.toString.call(document) ; // [object HTMLDocument]\nObject.prototype.toString.call(window) ; //[object global] window 是全局对象 global 的引用\n```\n\n#### 2.instanceof\n\ninstanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 在这里需要特别注意的是：**instanceof 检测的是原型**，我们用一段伪代码来模拟其内部执行过程：\n\n**instanceof 只能用来判断两个对象是否属于实例关系****， 而不能判断一个对象实例具体属于哪种类型。**\n\n#### 3.typeof\n\n**缺点：对象之间无法细分**\n\n```\ntypeof` `''``; ``// string 有效\ntypeof` `1; ``// number 有效\ntypeof` `Symbol(); ``// symbol 有效\ntypeof` `true``; ``//boolean 有效\ntypeof` `undefined; ``//undefined 有效\ntypeof` `null``; ``//object 无效\ntypeof` `[] ; ``//object 无效\ntypeof` `new` `Function(); ``// function 有效\ntypeof` `new` `Date(); ``//object 无效\ntypeof` `new` `RegExp(); ``//object 无效\n```\n\n- 对于基本类型，除 null 以外，均可以返回正确的结果。\n- 对于引用类型，除 function 以外，一律返回 object 类型。\n- 对于 null ，返回 object 类型。\n- 对于 function 返回  function 类型。\n\n#### 4.constructor\n\n定义变量的时候都隐式的调用了new关键字\n\n1. null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断。\n\n2. 函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object\n\n因此，**为了规范开发**，在重写对象原型时一般都需要重新给 constructor 赋值，以保证对象实例的类型不被篡改。\n\n#### 特殊判定\n\n1. 判定数组 Array.isArray()\n2. 判断 null 和 underfinded isNull ， isUnderfinded\n3. 判断空数组 JSON.stringify(obj) === '[]'\n4. \n\nArray.isArray() \n\n\n\n### 3.map\n\n**`Map`** 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者[基本类型](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)）都可以作为一个键或一个值。\n\n属性\n\n- size （无length属性，容易踩坑)\n\n方法\n\n1. clear()\n2. delete()\n3. entries()\n4. forEach\n5. get()\n6. has()\n7. keys()\n8. set()\n9. values()\n\n\n\n\n\n**set与object对比**\n\n[参考mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map)\n\n一个 `Object` 的键必须是一个 [`String`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String) 或是 [`Symbol`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)。\n\n一个 `Map` 的键可以是**任意值**，包括函数、对象或任意基本类型。\n\n一个 `Object` 有一个原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。\n\n`Map` 默认情况不包含任何键。只包含显式插入的键。\n\n虽然 `Object` 的键目前是有序的，但并不总是这样，而且这个顺序是复杂的。因此，最好不要依赖属性的顺序。\n\n`Map` 中的键是有序的。\n\n`Object` 的键值对个数只能手动计算。\n\n`Map` 的键值对个数可以轻易地通过 [`size`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size) 属性获取。\n\nJavaSctipt 的 [for...of](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of) 表达式并不能直接迭代对象。for of 配合 Object.keys()\n\n`Map` 是 [可迭代的](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols) 的，所以可以直接被迭代。\n\nSet在频繁增删键值对的场景下表现更好。\n\n\n\n#### 1.values()\n\n**`values()`** 方法返回一个新的[*迭代器*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)对象。它包含按顺序插入 `Map` 对象中每个元素的 `value` 值\n\n#### 2.keys\n\n**`keys()`** 返回一个引用的[*迭代器*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators)对象。它包含按照顺序插入 `Map` 对象中每个元素的 key 值。\n\n```js\nconst map1 = new Map();\n\nmap1.set('0', 'foo');\nmap1.set(1, 'bar');\n\nconst iterator1 = map1.keys();\n\nconsole.log(iterator1.next().value);\n// expected output: \"0\"\n\nconsole.log(iterator1.next().value);\n// expected output: 1\n\n```\n\n理解：作用类似于对象的Object.keys() 但它的实现方式（返回的是迭代器），对象返回的是数组\n\n#### 3.entries\n\n**`entries()`** 方法返回一个新的[*迭代器*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators)对象，其中包含 `Map` 对象中按插入顺序排列的每个元素的 `[key, value]` 对。在这种情况下，这个迭代器对象也是一个可迭代对象，因此可以使用 for-of 循环。当使用 `[Symbol.iterator]` 时，它返回一个函数，该函数在调用时返回迭代器本身。\n\n```js\nconst map1 = new Map();\n\nmap1.set('0', 'foo');\nmap1.set(1, 'bar');\n\nconst iterator1 = map1.entries();\n\nconsole.log(iterator1.next().value);\n// expected output: Array [\"0\", \"foo\"]\n\nconsole.log(iterator1.next().value);\n// expected output: Array [1, \"bar\"]\n\n```\n\n#### 4.set()\n\n设置值，如果存在值将被覆盖\n\n\n\n### 4.set\n\n属性\n\n- size （无length属性，容易踩坑)\n\n方法\n\n1. clear()\n2. delete()\n3. entries()\n4. forEach\n5. values()\n6. has()\n7. keys()\n\n#### 1.keys()\n\n返回迭代器对象，迭代的为key\n\n#### 2.values()\n\n返回迭代器对象，迭代的为value\n\n#### 3.entries()\n\n**`entries()`** 方法返回一个新的[迭代器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators)对象，这个对象包含的元素是类似 **`[value, value]` 形式的数组**，`value` 是集合对象中的每个元素，迭代器对象元素的顺序即集合对象中元素插入的顺序。由于集合对象不像 `Map` 对象那样拥有 `key`，然而，为了与 `Map` 对象的 API 形式保持一致，故使得每一个*条目*的 *key* 和 *value* 都拥有相同的值，因而最终返回一个 `[value, value]` 形式的数组。\n\n```js\nconst set1 = new Set();\nset1.add(42);\nset1.add('forty two');\n\nconst iterator1 = set1.entries();\n\nconsole.log(iterator1.next()) // { value: [ 42, 42 ], done: false } -- 结果无法理解\nfor (const entry of iterator1) {\n  console.log(entry);\n  // expected output: Array [42, 42]\n  // expected output: Array [\"forty two\", \"forty two\"]\n}\n\n```\n\n**console.log(iterator1.next()) **\n\n此处返回的迭代器对象，使用gen.next()打印，值会打印出两次\n\n\n\n#### 4.add()\n\n```js\nconst set1 = new Set();\n\nset1.add(42);\nset1.add(42);\nset1.add(13);\n\nfor (const item of set1) {\n  console.log(item);\n  // expected output: 42\n  // expected output: 13\n}\n```\n\n\n\n\n\n### 参考\n\n1. [js中的迭代器(Iterator)](https://juejin.cn/post/7018850645226569758)\n2. [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n\n\n### 思考\n\njs中的接口指的是什么\n\n接口：抽象对象，也具有方法\n\n此处实现功能：生成一个数组之后，定义一个迭代器函数，当调用for of的时候，调用之前定义的迭代器函数\n\n","source":"_posts/1.generate 迭代器.md","raw":"---\n\n\n\ntitle: js内置对象map,set,generate,iterator\n\ntags: [map,set,generate,iterator]\n\nauthor: codefish\n\ndate: 2022-10-20 16:20:34\n\ncategories: js\n\ntop_img: /img/13.jpg\n\ncover: /img/13.jpg\n\n\n\n---\n\n\n\n开发中用到最多的场景，父子组件通信，分发事件，组件传值。\n\n\n\n### 1.generate 迭代器\n\n可以暂停和开始\n\n- *function\n- yield\n- yield*\n\n\n\n#### 1.funtion* 定义一个迭代器函数\n\n1. generator.prototype.next()\n2. generator.prototype.return()\n3. generator.prototype.throw() 抛出错误\n\n```js\nfunction* generator(i) {\n  yield i;\n  yield i + 10;\n}\nconst gen = generator(10);\n```\n\n**生成器函数有一个next（）方法**\n\n`next()`方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 `yield` 表达式的返回值，done 属性为布尔类型，表示生成器后续是否还有 `yield` 语句，即生成器函数是否已经执行完毕并返回。\n\n\n\n调用 `next()`方法时，如果传入了参数，那么这个参数会传给**上一条执行的 yield 语句左边的变量**，例如下面例子中的`x`：\n\n```js\nfunction *gen(){\n    yield 10;\n    x=yield 'foo';\n    yield x;\n}\n\nvar gen_obj=gen();\nconsole.log(gen_obj.next());// 执行 yield 10，返回 10\nconsole.log(gen_obj.next());// 执行 yield 'foo'，返回 'foo'\nconsole.log(gen_obj.next(100));// 将 100 赋给上一条 yield 'foo' 的左值，即执行 x=100，返回 100\nconsole.log(gen_obj.next());// 执行完毕，value 为 undefined，done 为 true\n```\n\n**x=yield 'foo' 不同于 let x=yield 'foo'**\n\n后者不会将等号右边的赋值给左边\n\n```\nfunction *createIterator() {\n    let first = yield 1;\n    let second = yield first + 2; // 4 + 2\n                                  // first =4 是 next(4) 将参数赋给上一条的\n    yield second + 3;             // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next());    // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4));   // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5));   // \"{ value: 8, done: false }\"\nconsole.log(iterator.next());    // \"{ value: undefined, done: true }\"\n```\n\n\n\n**接收参数（可以多个**\n\n```js\nfunction* idMaker(){\n    console.log(arguments) //{'1':5,'2':7}\n    var index = arguments[0] || 0;\n    while(true)\n        yield index++;\n}\n\nvar gen = idMaker(5,7);\nconsole.log(gen.next().value); // 5\nconsole.log(gen.next().value); // 6\n```\n\n\n\n**显示返回**\n\nnext()的value变为返回的值，done的状态变为true\n\n**注意**\n\n1. 不能当构造器使用\n\n**应用**\n\n1. 使用迭代器遍历二维数组为一维数组、也可以多维转为一维数组\n\n\n\n#### 2.yield* \n\n**用于委托给另一个**generate或者可迭代对象\n\n`yield*` 表达式本身的值是当迭代器关闭时返回的值（即`done`为`true`时）。\n\n```js\nfunction* g1() {\n  yield 2;\n  yield 3;\n  yield 4;\n}\n\nfunction* g2() {\n  yield 1;\n  yield* g1();\n  yield 5;\n}\n\nvar iterator = g2();\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: 4, done: false }\nconsole.log(iterator.next()); // { value: 5, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n\n\n除了生成器对象这一种可迭代对象，`yield*` 还可以 `yield` 其它任意的可迭代对象，比如说数组、字符串、`arguments` 对象等等。\n\n```js\nfunction* g3() {\n  yield* [1, 2];\n  yield* \"34\";\n  yield* arguments;\n}\n\nvar iterator = g3(5, 6);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: \"3\", done: false }\nconsole.log(iterator.next()); // { value: \"4\", done: false }\nconsole.log(iterator.next()); // { value: 5, done: false }\nconsole.log(iterator.next()); // { value: 6, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n#### 3.迭代器Iterator\n\nES6 规定，默认的 Iterator 接口部署在数据结构的`Symbol.iterator`属性，Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数，其实就是我们上面写的myiteration函数，执行这个函数，就会返回一个带有next方法的遍历器对象。至于属性名Symbol.iterator，它是一个表达式，返回`Symbol`对象的`iterator`属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内。\n\n在js里原生具备 Iterator 接口的数据结构如下：\n\n- Array\n- Map\n- Set\n- String\n- TypedArray\n- 函数的 arguments 对象\n- NodeList 对象 因此，上面的任意一个数据类型都支持for...of遍历，也可以调用自身的\n\n\n\n### 2.判断类型\n\n**[参考](https://www.cnblogs.com/onepixel/p/5126046.html#:~:text=%E5%88%A4%E6%96%ADJS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%201%201%E3%80%81typeof%20typeof%20%E6%98%AF%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%8C%E5%85%B6%E5%8F%B3%E4%BE%A7%E8%B7%9F%E4%B8%80%E4%B8%AA%E4%B8%80%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%B9%B6%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%82%20...%202%202%E3%80%81instanceof,%28%29%20%E6%98%AF%20Object%20%E7%9A%84%E5%8E%9F%E5%9E%8B%E6%96%B9%E6%B3%95%EF%BC%8C%E8%B0%83%E7%94%A8%E8%AF%A5%E6%96%B9%E6%B3%95%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1%E7%9A%84%20%5B%20%5BClass%5D%5D%20%E3%80%82%20)**\n\n- Object.prototype.toString.call(args)\n- instanceof\n- typeof\n- constructor\n\n\n\n工具函数判断 isEmpty\n\n#### 1.Object.prototype.toString.call(args)\n\n```js\nObject.prototype.toString.call('') ;   // [object String]\nObject.prototype.toString.call(1) ;    // [object Number]\nObject.prototype.toString.call(true) ; // [object Boolean]\nObject.prototype.toString.call(Symbol()); //[object Symbol]\nObject.prototype.toString.call(undefined) ; // [object Undefined]\nObject.prototype.toString.call(null) ; // [object Null]\nObject.prototype.toString.call(new Function()) ; // [object Function]\nObject.prototype.toString.call(new Date()) ; // [object Date]\nObject.prototype.toString.call([]) ; // [object Array]\nObject.prototype.toString.call(new RegExp()) ; // [object RegExp]\nObject.prototype.toString.call(new Error()) ; // [object Error]\nObject.prototype.toString.call(document) ; // [object HTMLDocument]\nObject.prototype.toString.call(window) ; //[object global] window 是全局对象 global 的引用\n```\n\n#### 2.instanceof\n\ninstanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 在这里需要特别注意的是：**instanceof 检测的是原型**，我们用一段伪代码来模拟其内部执行过程：\n\n**instanceof 只能用来判断两个对象是否属于实例关系****， 而不能判断一个对象实例具体属于哪种类型。**\n\n#### 3.typeof\n\n**缺点：对象之间无法细分**\n\n```\ntypeof` `''``; ``// string 有效\ntypeof` `1; ``// number 有效\ntypeof` `Symbol(); ``// symbol 有效\ntypeof` `true``; ``//boolean 有效\ntypeof` `undefined; ``//undefined 有效\ntypeof` `null``; ``//object 无效\ntypeof` `[] ; ``//object 无效\ntypeof` `new` `Function(); ``// function 有效\ntypeof` `new` `Date(); ``//object 无效\ntypeof` `new` `RegExp(); ``//object 无效\n```\n\n- 对于基本类型，除 null 以外，均可以返回正确的结果。\n- 对于引用类型，除 function 以外，一律返回 object 类型。\n- 对于 null ，返回 object 类型。\n- 对于 function 返回  function 类型。\n\n#### 4.constructor\n\n定义变量的时候都隐式的调用了new关键字\n\n1. null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断。\n\n2. 函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object\n\n因此，**为了规范开发**，在重写对象原型时一般都需要重新给 constructor 赋值，以保证对象实例的类型不被篡改。\n\n#### 特殊判定\n\n1. 判定数组 Array.isArray()\n2. 判断 null 和 underfinded isNull ， isUnderfinded\n3. 判断空数组 JSON.stringify(obj) === '[]'\n4. \n\nArray.isArray() \n\n\n\n### 3.map\n\n**`Map`** 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者[基本类型](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)）都可以作为一个键或一个值。\n\n属性\n\n- size （无length属性，容易踩坑)\n\n方法\n\n1. clear()\n2. delete()\n3. entries()\n4. forEach\n5. get()\n6. has()\n7. keys()\n8. set()\n9. values()\n\n\n\n\n\n**set与object对比**\n\n[参考mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map)\n\n一个 `Object` 的键必须是一个 [`String`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String) 或是 [`Symbol`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)。\n\n一个 `Map` 的键可以是**任意值**，包括函数、对象或任意基本类型。\n\n一个 `Object` 有一个原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。\n\n`Map` 默认情况不包含任何键。只包含显式插入的键。\n\n虽然 `Object` 的键目前是有序的，但并不总是这样，而且这个顺序是复杂的。因此，最好不要依赖属性的顺序。\n\n`Map` 中的键是有序的。\n\n`Object` 的键值对个数只能手动计算。\n\n`Map` 的键值对个数可以轻易地通过 [`size`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size) 属性获取。\n\nJavaSctipt 的 [for...of](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of) 表达式并不能直接迭代对象。for of 配合 Object.keys()\n\n`Map` 是 [可迭代的](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols) 的，所以可以直接被迭代。\n\nSet在频繁增删键值对的场景下表现更好。\n\n\n\n#### 1.values()\n\n**`values()`** 方法返回一个新的[*迭代器*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)对象。它包含按顺序插入 `Map` 对象中每个元素的 `value` 值\n\n#### 2.keys\n\n**`keys()`** 返回一个引用的[*迭代器*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators)对象。它包含按照顺序插入 `Map` 对象中每个元素的 key 值。\n\n```js\nconst map1 = new Map();\n\nmap1.set('0', 'foo');\nmap1.set(1, 'bar');\n\nconst iterator1 = map1.keys();\n\nconsole.log(iterator1.next().value);\n// expected output: \"0\"\n\nconsole.log(iterator1.next().value);\n// expected output: 1\n\n```\n\n理解：作用类似于对象的Object.keys() 但它的实现方式（返回的是迭代器），对象返回的是数组\n\n#### 3.entries\n\n**`entries()`** 方法返回一个新的[*迭代器*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators)对象，其中包含 `Map` 对象中按插入顺序排列的每个元素的 `[key, value]` 对。在这种情况下，这个迭代器对象也是一个可迭代对象，因此可以使用 for-of 循环。当使用 `[Symbol.iterator]` 时，它返回一个函数，该函数在调用时返回迭代器本身。\n\n```js\nconst map1 = new Map();\n\nmap1.set('0', 'foo');\nmap1.set(1, 'bar');\n\nconst iterator1 = map1.entries();\n\nconsole.log(iterator1.next().value);\n// expected output: Array [\"0\", \"foo\"]\n\nconsole.log(iterator1.next().value);\n// expected output: Array [1, \"bar\"]\n\n```\n\n#### 4.set()\n\n设置值，如果存在值将被覆盖\n\n\n\n### 4.set\n\n属性\n\n- size （无length属性，容易踩坑)\n\n方法\n\n1. clear()\n2. delete()\n3. entries()\n4. forEach\n5. values()\n6. has()\n7. keys()\n\n#### 1.keys()\n\n返回迭代器对象，迭代的为key\n\n#### 2.values()\n\n返回迭代器对象，迭代的为value\n\n#### 3.entries()\n\n**`entries()`** 方法返回一个新的[迭代器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators)对象，这个对象包含的元素是类似 **`[value, value]` 形式的数组**，`value` 是集合对象中的每个元素，迭代器对象元素的顺序即集合对象中元素插入的顺序。由于集合对象不像 `Map` 对象那样拥有 `key`，然而，为了与 `Map` 对象的 API 形式保持一致，故使得每一个*条目*的 *key* 和 *value* 都拥有相同的值，因而最终返回一个 `[value, value]` 形式的数组。\n\n```js\nconst set1 = new Set();\nset1.add(42);\nset1.add('forty two');\n\nconst iterator1 = set1.entries();\n\nconsole.log(iterator1.next()) // { value: [ 42, 42 ], done: false } -- 结果无法理解\nfor (const entry of iterator1) {\n  console.log(entry);\n  // expected output: Array [42, 42]\n  // expected output: Array [\"forty two\", \"forty two\"]\n}\n\n```\n\n**console.log(iterator1.next()) **\n\n此处返回的迭代器对象，使用gen.next()打印，值会打印出两次\n\n\n\n#### 4.add()\n\n```js\nconst set1 = new Set();\n\nset1.add(42);\nset1.add(42);\nset1.add(13);\n\nfor (const item of set1) {\n  console.log(item);\n  // expected output: 42\n  // expected output: 13\n}\n```\n\n\n\n\n\n### 参考\n\n1. [js中的迭代器(Iterator)](https://juejin.cn/post/7018850645226569758)\n2. [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n\n\n### 思考\n\njs中的接口指的是什么\n\n接口：抽象对象，也具有方法\n\n此处实现功能：生成一个数组之后，定义一个迭代器函数，当调用for of的时候，调用之前定义的迭代器函数\n\n","slug":"1.generate 迭代器","published":1,"updated":"2025-01-07T02:30:24.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0ccy0001572oafu8ac4c","content":"<p>开发中用到最多的场景，父子组件通信，分发事件，组件传值。</p>\n<h3 id=\"1-generate-迭代器\"><a href=\"#1-generate-迭代器\" class=\"headerlink\" title=\"1.generate 迭代器\"></a>1.generate 迭代器</h3><p>可以暂停和开始</p>\n<ul>\n<li>*function</li>\n<li>yield</li>\n<li>yield*</li>\n</ul>\n<h4 id=\"1-funtion-定义一个迭代器函数\"><a href=\"#1-funtion-定义一个迭代器函数\" class=\"headerlink\" title=\"1.funtion* 定义一个迭代器函数\"></a>1.funtion* 定义一个迭代器函数</h4><ol>\n<li>generator.prototype.next()</li>\n<li>generator.prototype.return()</li>\n<li>generator.prototype.throw() 抛出错误</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">generator</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"title function_\">generator</span>(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>生成器函数有一个next（）方法</strong></p>\n<p><code>next()</code>方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 <code>yield</code> 表达式的返回值，done 属性为布尔类型，表示生成器后续是否还有 <code>yield</code> 语句，即生成器函数是否已经执行完毕并返回。</p>\n<p>调用 <code>next()</code>方法时，如果传入了参数，那么这个参数会传给<strong>上一条执行的 yield 语句左边的变量</strong>，例如下面例子中的<code>x</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title function_\">gen</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    x=<span class=\"keyword\">yield</span> <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen_obj=<span class=\"title function_\">gen</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen_obj.<span class=\"title function_\">next</span>());<span class=\"comment\">// 执行 yield 10，返回 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen_obj.<span class=\"title function_\">next</span>());<span class=\"comment\">// 执行 yield &#x27;foo&#x27;，返回 &#x27;foo&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen_obj.<span class=\"title function_\">next</span>(<span class=\"number\">100</span>));<span class=\"comment\">// 将 100 赋给上一条 yield &#x27;foo&#x27; 的左值，即执行 x=100，返回 100</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen_obj.<span class=\"title function_\">next</span>());<span class=\"comment\">// 执行完毕，value 为 undefined，done 为 true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>x&#x3D;yield ‘foo’ 不同于 let x&#x3D;yield ‘foo’</strong></p>\n<p>后者不会将等号右边的赋值给左边</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function *createIterator() &#123;</span><br><span class=\"line\">    let first = yield 1;</span><br><span class=\"line\">    let second = yield first + 2; // 4 + 2</span><br><span class=\"line\">                                  // first =4 是 next(4) 将参数赋给上一条的</span><br><span class=\"line\">    yield second + 3;             // 5 + 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(iterator.next());    // &quot;&#123; value: 1, done: false &#125;&quot;</span><br><span class=\"line\">console.log(iterator.next(4));   // &quot;&#123; value: 6, done: false &#125;&quot;</span><br><span class=\"line\">console.log(iterator.next(5));   // &quot;&#123; value: 8, done: false &#125;&quot;</span><br><span class=\"line\">console.log(iterator.next());    // &quot;&#123; value: undefined, done: true &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>接收参数（可以多个</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">idMaker</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>) <span class=\"comment\">//&#123;&#x27;1&#x27;:5,&#x27;2&#x27;:7&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> index++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"title function_\">idMaker</span>(<span class=\"number\">5</span>,<span class=\"number\">7</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>显示返回</strong></p>\n<p>next()的value变为返回的值，done的状态变为true</p>\n<p><strong>注意</strong></p>\n<ol>\n<li>不能当构造器使用</li>\n</ol>\n<p><strong>应用</strong></p>\n<ol>\n<li>使用迭代器遍历二维数组为一维数组、也可以多维转为一维数组</li>\n</ol>\n<h4 id=\"2-yield\"><a href=\"#2-yield\" class=\"headerlink\" title=\"2.yield*\"></a>2.yield*</h4><p><strong>用于委托给另一个</strong>generate或者可迭代对象</p>\n<p><code>yield*</code> 表达式本身的值是当迭代器关闭时返回的值（即<code>done</code>为<code>true</code>时）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"title function_\">g1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">g2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>除了生成器对象这一种可迭代对象，<code>yield*</code> 还可以 <code>yield</code> 其它任意的可迭代对象，比如说数组、字符串、<code>arguments</code> 对象等等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">&quot;34&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">g3</span>(<span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: &quot;3&quot;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: &quot;4&quot;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 6, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-迭代器Iterator\"><a href=\"#3-迭代器Iterator\" class=\"headerlink\" title=\"3.迭代器Iterator\"></a>3.迭代器Iterator</h4><p>ES6 规定，默认的 Iterator 接口部署在数据结构的<code>Symbol.iterator</code>属性，Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数，其实就是我们上面写的myiteration函数，执行这个函数，就会返回一个带有next方法的遍历器对象。至于属性名Symbol.iterator，它是一个表达式，返回<code>Symbol</code>对象的<code>iterator</code>属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内。</p>\n<p>在js里原生具备 Iterator 接口的数据结构如下：</p>\n<ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>函数的 arguments 对象</li>\n<li>NodeList 对象 因此，上面的任意一个数据类型都支持for…of遍历，也可以调用自身的</li>\n</ul>\n<h3 id=\"2-判断类型\"><a href=\"#2-判断类型\" class=\"headerlink\" title=\"2.判断类型\"></a>2.判断类型</h3><p><strong><a href=\"https://www.cnblogs.com/onepixel/p/5126046.html#:~:text=%E5%88%A4%E6%96%ADJS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%201%201%E3%80%81typeof%20typeof%20%E6%98%AF%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%8C%E5%85%B6%E5%8F%B3%E4%BE%A7%E8%B7%9F%E4%B8%80%E4%B8%AA%E4%B8%80%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%B9%B6%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%82%20...%202%202%E3%80%81instanceof,%28%29%20%E6%98%AF%20Object%20%E7%9A%84%E5%8E%9F%E5%9E%8B%E6%96%B9%E6%B3%95%EF%BC%8C%E8%B0%83%E7%94%A8%E8%AF%A5%E6%96%B9%E6%B3%95%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1%E7%9A%84%20%5B%20%5BClass%5D%5D%20%E3%80%82%20\">参考</a></strong></p>\n<ul>\n<li>Object.prototype.toString.call(args)</li>\n<li>instanceof</li>\n<li>typeof</li>\n<li>constructor</li>\n</ul>\n<p>工具函数判断 isEmpty</p>\n<h4 id=\"1-Object-prototype-toString-call-args\"><a href=\"#1-Object-prototype-toString-call-args\" class=\"headerlink\" title=\"1.Object.prototype.toString.call(args)\"></a>1.Object.prototype.toString.call(args)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;&#x27;</span>) ;   <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">1</span>) ;    <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>) ; <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"title class_\">Symbol</span>()); <span class=\"comment\">//[object Symbol]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>) ; <span class=\"comment\">// [object Undefined]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>) ; <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>()) ; <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) ; <span class=\"comment\">// [object Date]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([]) ; <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>()) ; <span class=\"comment\">// [object RegExp]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>()) ; <span class=\"comment\">// [object Error]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">document</span>) ; <span class=\"comment\">// [object HTMLDocument]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">window</span>) ; <span class=\"comment\">//[object global] window 是全局对象 global 的引用</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-instanceof\"><a href=\"#2-instanceof\" class=\"headerlink\" title=\"2.instanceof\"></a>2.instanceof</h4><p>instanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 在这里需要特别注意的是：<strong>instanceof 检测的是原型</strong>，我们用一段伪代码来模拟其内部执行过程：</p>\n<p><strong>instanceof 只能用来判断两个对象是否属于实例关系****， 而不能判断一个对象实例具体属于哪种类型。</strong></p>\n<h4 id=\"3-typeof\"><a href=\"#3-typeof\" class=\"headerlink\" title=\"3.typeof\"></a>3.typeof</h4><p><strong>缺点：对象之间无法细分</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof` `&#x27;&#x27;``; ``// string 有效</span><br><span class=\"line\">typeof` `1; ``// number 有效</span><br><span class=\"line\">typeof` `Symbol(); ``// symbol 有效</span><br><span class=\"line\">typeof` `true``; ``//boolean 有效</span><br><span class=\"line\">typeof` `undefined; ``//undefined 有效</span><br><span class=\"line\">typeof` `null``; ``//object 无效</span><br><span class=\"line\">typeof` `[] ; ``//object 无效</span><br><span class=\"line\">typeof` `new` `Function(); ``// function 有效</span><br><span class=\"line\">typeof` `new` `Date(); ``//object 无效</span><br><span class=\"line\">typeof` `new` `RegExp(); ``//object 无效</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对于基本类型，除 null 以外，均可以返回正确的结果。</li>\n<li>对于引用类型，除 function 以外，一律返回 object 类型。</li>\n<li>对于 null ，返回 object 类型。</li>\n<li>对于 function 返回  function 类型。</li>\n</ul>\n<h4 id=\"4-constructor\"><a href=\"#4-constructor\" class=\"headerlink\" title=\"4.constructor\"></a>4.constructor</h4><p>定义变量的时候都隐式的调用了new关键字</p>\n<ol>\n<li><p>null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断。</p>\n</li>\n<li><p>函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object</p>\n</li>\n</ol>\n<p>因此，<strong>为了规范开发</strong>，在重写对象原型时一般都需要重新给 constructor 赋值，以保证对象实例的类型不被篡改。</p>\n<h4 id=\"特殊判定\"><a href=\"#特殊判定\" class=\"headerlink\" title=\"特殊判定\"></a>特殊判定</h4><ol>\n<li>判定数组 Array.isArray()</li>\n<li>判断 null 和 underfinded isNull ， isUnderfinded</li>\n<li>判断空数组 JSON.stringify(obj) &#x3D;&#x3D;&#x3D; ‘[]’</li>\n<li></li>\n</ol>\n<p>Array.isArray() </p>\n<h3 id=\"3-map\"><a href=\"#3-map\" class=\"headerlink\" title=\"3.map\"></a>3.map</h3><p><strong><code>Map</code></strong> 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive\">基本类型</a>）都可以作为一个键或一个值。</p>\n<p>属性</p>\n<ul>\n<li>size （无length属性，容易踩坑)</li>\n</ul>\n<p>方法</p>\n<ol>\n<li>clear()</li>\n<li>delete()</li>\n<li>entries()</li>\n<li>forEach</li>\n<li>get()</li>\n<li>has()</li>\n<li>keys()</li>\n<li>set()</li>\n<li>values()</li>\n</ol>\n<p><strong>set与object对比</strong></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\">参考mdn</a></p>\n<p>一个 <code>Object</code> 的键必须是一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> 或是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>。</p>\n<p>一个 <code>Map</code> 的键可以是<strong>任意值</strong>，包括函数、对象或任意基本类型。</p>\n<p>一个 <code>Object</code> 有一个原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</p>\n<p><code>Map</code> 默认情况不包含任何键。只包含显式插入的键。</p>\n<p>虽然 <code>Object</code> 的键目前是有序的，但并不总是这样，而且这个顺序是复杂的。因此，最好不要依赖属性的顺序。</p>\n<p><code>Map</code> 中的键是有序的。</p>\n<p><code>Object</code> 的键值对个数只能手动计算。</p>\n<p><code>Map</code> 的键值对个数可以轻易地通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>size</code></a> 属性获取。</p>\n<p>JavaSctipt 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">for…of</a> 表达式并不能直接迭代对象。for of 配合 Object.keys()</p>\n<p><code>Map</code> 是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\">可迭代的</a> 的，所以可以直接被迭代。</p>\n<p>Set在频繁增删键值对的场景下表现更好。</p>\n<h4 id=\"1-values\"><a href=\"#1-values\" class=\"headerlink\" title=\"1.values()\"></a>1.values()</h4><p><strong><code>values()</code></strong> 方法返回一个新的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>迭代器</em></a>对象。它包含按顺序插入 <code>Map</code> 对象中每个元素的 <code>value</code> 值</p>\n<h4 id=\"2-keys\"><a href=\"#2-keys\" class=\"headerlink\" title=\"2.keys\"></a>2.keys</h4><p><strong><code>keys()</code></strong> 返回一个引用的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>迭代器</em></a>对象。它包含按照顺序插入 <code>Map</code> 对象中每个元素的 key 值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">map1.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">map1.<span class=\"title function_\">set</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;bar&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator1 = map1.<span class=\"title function_\">keys</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: &quot;0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>理解：作用类似于对象的Object.keys() 但它的实现方式（返回的是迭代器），对象返回的是数组</p>\n<h4 id=\"3-entries\"><a href=\"#3-entries\" class=\"headerlink\" title=\"3.entries\"></a>3.entries</h4><p><strong><code>entries()</code></strong> 方法返回一个新的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>迭代器</em></a>对象，其中包含 <code>Map</code> 对象中按插入顺序排列的每个元素的 <code>[key, value]</code> 对。在这种情况下，这个迭代器对象也是一个可迭代对象，因此可以使用 for-of 循环。当使用 <code>[Symbol.iterator]</code> 时，它返回一个函数，该函数在调用时返回迭代器本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">map1.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">map1.<span class=\"title function_\">set</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;bar&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator1 = map1.<span class=\"title function_\">entries</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [&quot;0&quot;, &quot;foo&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [1, &quot;bar&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-set\"><a href=\"#4-set\" class=\"headerlink\" title=\"4.set()\"></a>4.set()</h4><p>设置值，如果存在值将被覆盖</p>\n<h3 id=\"4-set-1\"><a href=\"#4-set-1\" class=\"headerlink\" title=\"4.set\"></a>4.set</h3><p>属性</p>\n<ul>\n<li>size （无length属性，容易踩坑)</li>\n</ul>\n<p>方法</p>\n<ol>\n<li>clear()</li>\n<li>delete()</li>\n<li>entries()</li>\n<li>forEach</li>\n<li>values()</li>\n<li>has()</li>\n<li>keys()</li>\n</ol>\n<h4 id=\"1-keys\"><a href=\"#1-keys\" class=\"headerlink\" title=\"1.keys()\"></a>1.keys()</h4><p>返回迭代器对象，迭代的为key</p>\n<h4 id=\"2-values\"><a href=\"#2-values\" class=\"headerlink\" title=\"2.values()\"></a>2.values()</h4><p>返回迭代器对象，迭代的为value</p>\n<h4 id=\"3-entries-1\"><a href=\"#3-entries-1\" class=\"headerlink\" title=\"3.entries()\"></a>3.entries()</h4><p><strong><code>entries()</code></strong> 方法返回一个新的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\">迭代器</a>对象，这个对象包含的元素是类似 <strong><code>[value, value]</code> 形式的数组</strong>，<code>value</code> 是集合对象中的每个元素，迭代器对象元素的顺序即集合对象中元素插入的顺序。由于集合对象不像 <code>Map</code> 对象那样拥有 <code>key</code>，然而，为了与 <code>Map</code> 对象的 API 形式保持一致，故使得每一个<em>条目</em>的 <em>key</em> 和 <em>value</em> 都拥有相同的值，因而最终返回一个 <code>[value, value]</code> 形式的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;forty two&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator1 = set1.<span class=\"title function_\">entries</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: [ 42, 42 ], done: false &#125; -- 结果无法理解</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> entry <span class=\"keyword\">of</span> iterator1) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(entry);</span><br><span class=\"line\">  <span class=\"comment\">// expected output: Array [42, 42]</span></span><br><span class=\"line\">  <span class=\"comment\">// expected output: Array [&quot;forty two&quot;, &quot;forty two&quot;]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>**console.log(iterator1.next()) **</p>\n<p>此处返回的迭代器对象，使用gen.next()打印，值会打印出两次</p>\n<h4 id=\"4-add\"><a href=\"#4-add\" class=\"headerlink\" title=\"4.add()\"></a>4.add()</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set1) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 42</span></span><br><span class=\"line\">  <span class=\"comment\">// expected output: 13</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://juejin.cn/post/7018850645226569758\">js中的迭代器(Iterator)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">mdn</a></li>\n</ol>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>js中的接口指的是什么</p>\n<p>接口：抽象对象，也具有方法</p>\n<p>此处实现功能：生成一个数组之后，定义一个迭代器函数，当调用for of的时候，调用之前定义的迭代器函数</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>开发中用到最多的场景，父子组件通信，分发事件，组件传值。</p>\n<h3 id=\"1-generate-迭代器\"><a href=\"#1-generate-迭代器\" class=\"headerlink\" title=\"1.generate 迭代器\"></a>1.generate 迭代器</h3><p>可以暂停和开始</p>\n<ul>\n<li>*function</li>\n<li>yield</li>\n<li>yield*</li>\n</ul>\n<h4 id=\"1-funtion-定义一个迭代器函数\"><a href=\"#1-funtion-定义一个迭代器函数\" class=\"headerlink\" title=\"1.funtion* 定义一个迭代器函数\"></a>1.funtion* 定义一个迭代器函数</h4><ol>\n<li>generator.prototype.next()</li>\n<li>generator.prototype.return()</li>\n<li>generator.prototype.throw() 抛出错误</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">generator</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"title function_\">generator</span>(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>生成器函数有一个next（）方法</strong></p>\n<p><code>next()</code>方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 <code>yield</code> 表达式的返回值，done 属性为布尔类型，表示生成器后续是否还有 <code>yield</code> 语句，即生成器函数是否已经执行完毕并返回。</p>\n<p>调用 <code>next()</code>方法时，如果传入了参数，那么这个参数会传给<strong>上一条执行的 yield 语句左边的变量</strong>，例如下面例子中的<code>x</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title function_\">gen</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    x=<span class=\"keyword\">yield</span> <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen_obj=<span class=\"title function_\">gen</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen_obj.<span class=\"title function_\">next</span>());<span class=\"comment\">// 执行 yield 10，返回 10</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen_obj.<span class=\"title function_\">next</span>());<span class=\"comment\">// 执行 yield &#x27;foo&#x27;，返回 &#x27;foo&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen_obj.<span class=\"title function_\">next</span>(<span class=\"number\">100</span>));<span class=\"comment\">// 将 100 赋给上一条 yield &#x27;foo&#x27; 的左值，即执行 x=100，返回 100</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen_obj.<span class=\"title function_\">next</span>());<span class=\"comment\">// 执行完毕，value 为 undefined，done 为 true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>x&#x3D;yield ‘foo’ 不同于 let x&#x3D;yield ‘foo’</strong></p>\n<p>后者不会将等号右边的赋值给左边</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function *createIterator() &#123;</span><br><span class=\"line\">    let first = yield 1;</span><br><span class=\"line\">    let second = yield first + 2; // 4 + 2</span><br><span class=\"line\">                                  // first =4 是 next(4) 将参数赋给上一条的</span><br><span class=\"line\">    yield second + 3;             // 5 + 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(iterator.next());    // &quot;&#123; value: 1, done: false &#125;&quot;</span><br><span class=\"line\">console.log(iterator.next(4));   // &quot;&#123; value: 6, done: false &#125;&quot;</span><br><span class=\"line\">console.log(iterator.next(5));   // &quot;&#123; value: 8, done: false &#125;&quot;</span><br><span class=\"line\">console.log(iterator.next());    // &quot;&#123; value: undefined, done: true &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>接收参数（可以多个</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">idMaker</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>) <span class=\"comment\">//&#123;&#x27;1&#x27;:5,&#x27;2&#x27;:7&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> index++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"title function_\">idMaker</span>(<span class=\"number\">5</span>,<span class=\"number\">7</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>显示返回</strong></p>\n<p>next()的value变为返回的值，done的状态变为true</p>\n<p><strong>注意</strong></p>\n<ol>\n<li>不能当构造器使用</li>\n</ol>\n<p><strong>应用</strong></p>\n<ol>\n<li>使用迭代器遍历二维数组为一维数组、也可以多维转为一维数组</li>\n</ol>\n<h4 id=\"2-yield\"><a href=\"#2-yield\" class=\"headerlink\" title=\"2.yield*\"></a>2.yield*</h4><p><strong>用于委托给另一个</strong>generate或者可迭代对象</p>\n<p><code>yield*</code> 表达式本身的值是当迭代器关闭时返回的值（即<code>done</code>为<code>true</code>时）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"title function_\">g1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">g2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>除了生成器对象这一种可迭代对象，<code>yield*</code> 还可以 <code>yield</code> 其它任意的可迭代对象，比如说数组、字符串、<code>arguments</code> 对象等等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g3</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">&quot;34&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"title function_\">g3</span>(<span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: &quot;3&quot;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: &quot;4&quot;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: 6, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-迭代器Iterator\"><a href=\"#3-迭代器Iterator\" class=\"headerlink\" title=\"3.迭代器Iterator\"></a>3.迭代器Iterator</h4><p>ES6 规定，默认的 Iterator 接口部署在数据结构的<code>Symbol.iterator</code>属性，Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数，其实就是我们上面写的myiteration函数，执行这个函数，就会返回一个带有next方法的遍历器对象。至于属性名Symbol.iterator，它是一个表达式，返回<code>Symbol</code>对象的<code>iterator</code>属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内。</p>\n<p>在js里原生具备 Iterator 接口的数据结构如下：</p>\n<ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>函数的 arguments 对象</li>\n<li>NodeList 对象 因此，上面的任意一个数据类型都支持for…of遍历，也可以调用自身的</li>\n</ul>\n<h3 id=\"2-判断类型\"><a href=\"#2-判断类型\" class=\"headerlink\" title=\"2.判断类型\"></a>2.判断类型</h3><p><strong><a href=\"https://www.cnblogs.com/onepixel/p/5126046.html#:~:text=%E5%88%A4%E6%96%ADJS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%201%201%E3%80%81typeof%20typeof%20%E6%98%AF%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%8C%E5%85%B6%E5%8F%B3%E4%BE%A7%E8%B7%9F%E4%B8%80%E4%B8%AA%E4%B8%80%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%B9%B6%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%82%20...%202%202%E3%80%81instanceof,%28%29%20%E6%98%AF%20Object%20%E7%9A%84%E5%8E%9F%E5%9E%8B%E6%96%B9%E6%B3%95%EF%BC%8C%E8%B0%83%E7%94%A8%E8%AF%A5%E6%96%B9%E6%B3%95%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1%E7%9A%84%20%5B%20%5BClass%5D%5D%20%E3%80%82%20\">参考</a></strong></p>\n<ul>\n<li>Object.prototype.toString.call(args)</li>\n<li>instanceof</li>\n<li>typeof</li>\n<li>constructor</li>\n</ul>\n<p>工具函数判断 isEmpty</p>\n<h4 id=\"1-Object-prototype-toString-call-args\"><a href=\"#1-Object-prototype-toString-call-args\" class=\"headerlink\" title=\"1.Object.prototype.toString.call(args)\"></a>1.Object.prototype.toString.call(args)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;&#x27;</span>) ;   <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">1</span>) ;    <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>) ; <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"title class_\">Symbol</span>()); <span class=\"comment\">//[object Symbol]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>) ; <span class=\"comment\">// [object Undefined]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>) ; <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>()) ; <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) ; <span class=\"comment\">// [object Date]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([]) ; <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>()) ; <span class=\"comment\">// [object RegExp]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>()) ; <span class=\"comment\">// [object Error]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">document</span>) ; <span class=\"comment\">// [object HTMLDocument]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">window</span>) ; <span class=\"comment\">//[object global] window 是全局对象 global 的引用</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-instanceof\"><a href=\"#2-instanceof\" class=\"headerlink\" title=\"2.instanceof\"></a>2.instanceof</h4><p>instanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 在这里需要特别注意的是：<strong>instanceof 检测的是原型</strong>，我们用一段伪代码来模拟其内部执行过程：</p>\n<p><strong>instanceof 只能用来判断两个对象是否属于实例关系****， 而不能判断一个对象实例具体属于哪种类型。</strong></p>\n<h4 id=\"3-typeof\"><a href=\"#3-typeof\" class=\"headerlink\" title=\"3.typeof\"></a>3.typeof</h4><p><strong>缺点：对象之间无法细分</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof` `&#x27;&#x27;``; ``// string 有效</span><br><span class=\"line\">typeof` `1; ``// number 有效</span><br><span class=\"line\">typeof` `Symbol(); ``// symbol 有效</span><br><span class=\"line\">typeof` `true``; ``//boolean 有效</span><br><span class=\"line\">typeof` `undefined; ``//undefined 有效</span><br><span class=\"line\">typeof` `null``; ``//object 无效</span><br><span class=\"line\">typeof` `[] ; ``//object 无效</span><br><span class=\"line\">typeof` `new` `Function(); ``// function 有效</span><br><span class=\"line\">typeof` `new` `Date(); ``//object 无效</span><br><span class=\"line\">typeof` `new` `RegExp(); ``//object 无效</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对于基本类型，除 null 以外，均可以返回正确的结果。</li>\n<li>对于引用类型，除 function 以外，一律返回 object 类型。</li>\n<li>对于 null ，返回 object 类型。</li>\n<li>对于 function 返回  function 类型。</li>\n</ul>\n<h4 id=\"4-constructor\"><a href=\"#4-constructor\" class=\"headerlink\" title=\"4.constructor\"></a>4.constructor</h4><p>定义变量的时候都隐式的调用了new关键字</p>\n<ol>\n<li><p>null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断。</p>\n</li>\n<li><p>函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object</p>\n</li>\n</ol>\n<p>因此，<strong>为了规范开发</strong>，在重写对象原型时一般都需要重新给 constructor 赋值，以保证对象实例的类型不被篡改。</p>\n<h4 id=\"特殊判定\"><a href=\"#特殊判定\" class=\"headerlink\" title=\"特殊判定\"></a>特殊判定</h4><ol>\n<li>判定数组 Array.isArray()</li>\n<li>判断 null 和 underfinded isNull ， isUnderfinded</li>\n<li>判断空数组 JSON.stringify(obj) &#x3D;&#x3D;&#x3D; ‘[]’</li>\n<li></li>\n</ol>\n<p>Array.isArray() </p>\n<h3 id=\"3-map\"><a href=\"#3-map\" class=\"headerlink\" title=\"3.map\"></a>3.map</h3><p><strong><code>Map</code></strong> 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive\">基本类型</a>）都可以作为一个键或一个值。</p>\n<p>属性</p>\n<ul>\n<li>size （无length属性，容易踩坑)</li>\n</ul>\n<p>方法</p>\n<ol>\n<li>clear()</li>\n<li>delete()</li>\n<li>entries()</li>\n<li>forEach</li>\n<li>get()</li>\n<li>has()</li>\n<li>keys()</li>\n<li>set()</li>\n<li>values()</li>\n</ol>\n<p><strong>set与object对比</strong></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\">参考mdn</a></p>\n<p>一个 <code>Object</code> 的键必须是一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> 或是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>。</p>\n<p>一个 <code>Map</code> 的键可以是<strong>任意值</strong>，包括函数、对象或任意基本类型。</p>\n<p>一个 <code>Object</code> 有一个原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</p>\n<p><code>Map</code> 默认情况不包含任何键。只包含显式插入的键。</p>\n<p>虽然 <code>Object</code> 的键目前是有序的，但并不总是这样，而且这个顺序是复杂的。因此，最好不要依赖属性的顺序。</p>\n<p><code>Map</code> 中的键是有序的。</p>\n<p><code>Object</code> 的键值对个数只能手动计算。</p>\n<p><code>Map</code> 的键值对个数可以轻易地通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>size</code></a> 属性获取。</p>\n<p>JavaSctipt 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">for…of</a> 表达式并不能直接迭代对象。for of 配合 Object.keys()</p>\n<p><code>Map</code> 是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\">可迭代的</a> 的，所以可以直接被迭代。</p>\n<p>Set在频繁增删键值对的场景下表现更好。</p>\n<h4 id=\"1-values\"><a href=\"#1-values\" class=\"headerlink\" title=\"1.values()\"></a>1.values()</h4><p><strong><code>values()</code></strong> 方法返回一个新的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>迭代器</em></a>对象。它包含按顺序插入 <code>Map</code> 对象中每个元素的 <code>value</code> 值</p>\n<h4 id=\"2-keys\"><a href=\"#2-keys\" class=\"headerlink\" title=\"2.keys\"></a>2.keys</h4><p><strong><code>keys()</code></strong> 返回一个引用的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>迭代器</em></a>对象。它包含按照顺序插入 <code>Map</code> 对象中每个元素的 key 值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">map1.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">map1.<span class=\"title function_\">set</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;bar&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator1 = map1.<span class=\"title function_\">keys</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: &quot;0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>理解：作用类似于对象的Object.keys() 但它的实现方式（返回的是迭代器），对象返回的是数组</p>\n<h4 id=\"3-entries\"><a href=\"#3-entries\" class=\"headerlink\" title=\"3.entries\"></a>3.entries</h4><p><strong><code>entries()</code></strong> 方法返回一个新的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\"><em>迭代器</em></a>对象，其中包含 <code>Map</code> 对象中按插入顺序排列的每个元素的 <code>[key, value]</code> 对。在这种情况下，这个迭代器对象也是一个可迭代对象，因此可以使用 for-of 循环。当使用 <code>[Symbol.iterator]</code> 时，它返回一个函数，该函数在调用时返回迭代器本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">map1.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">map1.<span class=\"title function_\">set</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;bar&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator1 = map1.<span class=\"title function_\">entries</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [&quot;0&quot;, &quot;foo&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [1, &quot;bar&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-set\"><a href=\"#4-set\" class=\"headerlink\" title=\"4.set()\"></a>4.set()</h4><p>设置值，如果存在值将被覆盖</p>\n<h3 id=\"4-set-1\"><a href=\"#4-set-1\" class=\"headerlink\" title=\"4.set\"></a>4.set</h3><p>属性</p>\n<ul>\n<li>size （无length属性，容易踩坑)</li>\n</ul>\n<p>方法</p>\n<ol>\n<li>clear()</li>\n<li>delete()</li>\n<li>entries()</li>\n<li>forEach</li>\n<li>values()</li>\n<li>has()</li>\n<li>keys()</li>\n</ol>\n<h4 id=\"1-keys\"><a href=\"#1-keys\" class=\"headerlink\" title=\"1.keys()\"></a>1.keys()</h4><p>返回迭代器对象，迭代的为key</p>\n<h4 id=\"2-values\"><a href=\"#2-values\" class=\"headerlink\" title=\"2.values()\"></a>2.values()</h4><p>返回迭代器对象，迭代的为value</p>\n<h4 id=\"3-entries-1\"><a href=\"#3-entries-1\" class=\"headerlink\" title=\"3.entries()\"></a>3.entries()</h4><p><strong><code>entries()</code></strong> 方法返回一个新的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\">迭代器</a>对象，这个对象包含的元素是类似 <strong><code>[value, value]</code> 形式的数组</strong>，<code>value</code> 是集合对象中的每个元素，迭代器对象元素的顺序即集合对象中元素插入的顺序。由于集合对象不像 <code>Map</code> 对象那样拥有 <code>key</code>，然而，为了与 <code>Map</code> 对象的 API 形式保持一致，故使得每一个<em>条目</em>的 <em>key</em> 和 <em>value</em> 都拥有相同的值，因而最终返回一个 <code>[value, value]</code> 形式的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;forty two&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator1 = set1.<span class=\"title function_\">entries</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator1.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: [ 42, 42 ], done: false &#125; -- 结果无法理解</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> entry <span class=\"keyword\">of</span> iterator1) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(entry);</span><br><span class=\"line\">  <span class=\"comment\">// expected output: Array [42, 42]</span></span><br><span class=\"line\">  <span class=\"comment\">// expected output: Array [&quot;forty two&quot;, &quot;forty two&quot;]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>**console.log(iterator1.next()) **</p>\n<p>此处返回的迭代器对象，使用gen.next()打印，值会打印出两次</p>\n<h4 id=\"4-add\"><a href=\"#4-add\" class=\"headerlink\" title=\"4.add()\"></a>4.add()</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> set1) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 42</span></span><br><span class=\"line\">  <span class=\"comment\">// expected output: 13</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://juejin.cn/post/7018850645226569758\">js中的迭代器(Iterator)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">mdn</a></li>\n</ol>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>js中的接口指的是什么</p>\n<p>接口：抽象对象，也具有方法</p>\n<p>此处实现功能：生成一个数组之后，定义一个迭代器函数，当调用for of的时候，调用之前定义的迭代器函数</p>\n"},{"title":"typeScript入门","author":"codefish","date":"2022-05-20T02:34:07.000Z","top_img":"/img/justin.jpg","cover":"/img/justin.jpg","_content":"## ---\n\ntypeScript作为js的超集，主要是加了类型限制，对于面向对象的使用多于js,学习ts是后面学习node框架koa,express,nest等的基础\n\n[toc]\n\n### 1.类型\n\n```js\nlet a:number\n// a为number，以后的使用a的值只能为数字\n\n```\n\n**ts-可以编译为任何js版本 tsc**\n\n```js\nlet c:boolean = false\n```\n\n如果变量声明时，直接赋值（同时进行），它可以自动判断\n\n```js\nfunction sum(a,b) {\n\treturn a+b\n}\n//sum(123,456)\n//sum('123',456)\n\n//改善\nfunction sum(a:number,b:number) {\n\treturn a+b\n}\nsum(123,'456') //提示错误\n\n//函数返回值的类型\nfunction sum(a:number,b:number):number {\n\treturn a+b\n}\n```\n\n类型的都为小写 number,boolean,string\n\n- １．number 任意数字\n- ２．string 任意字符串\n- ３．boolean 任意布尔值\n- ４.字面量类型说明\n\n​\t\n\n```js\nlet a:10\n//赋值一次不能修改\n\n//可以使用｜来连接多个类型\nlet b:boolean|string\n\n```\n\n- ５．any\n\n  ```js\n  //表示可以为任意类型－\n  let　ｄ　//－－变量只声明不赋值，自动判断为ａｎｙ\n  //设置ａｎｙ后，相当于关闭类型检测\n  let d:any\n  \n  let s:string\n  s = d  -- s:string\n  s = d  -- s将变为any\n  \n  ```\n\n  \n\n- ６．unknown -- 效果和any一致\n\n  ```js\n  //any 类型的变量可以赋值给任意类型的变量\n  let s:string\n  let d:any\n  s = d -- s变为any\n  \n  let n:unkonwn\n  n = 'hello'\n  s = n //将一个unkonwn赋给string--报错\n  \n  //解决\n  if(typeof s===\"string\"){\n  \ts = n\n  }\n  ```\n\n  **为一个安全的ａｎｙ，不能赋值给其他变量**\n\n- 7.类型断言\n\n  ```js\n  //告诉解析器变量的实际类型\n  s = e as string\n  s = <string>e;\n  ```\n\n  \n\n- 8.void-函数返回值\n\n  ```js\n  function fn(num):number{}\n  function fn(nunm):number|boolean{} \n  function fn(num):void {}   //没有返回值\n  ```\n\n  \n\n- 9.never--永远不会返回结果\n\n  ```js\n  function fn():never{} \n  //甚至不需要return\n  function fn():void{\n      return\n  }\n  ```\n\n  \n\n- 10.object - js一切皆对象\n\n  ```js\n  let a:object;\n  a = {}\n  \n  //限制对象里面的属性\n  let b:{name:string};\n  //对象b必须有一个属性name-类型为string\n  b = {name:''}     //结构和上面一致\n  \n  //加上一个？表示为可选属性\n  let b:{name:string,age?:number}\n  b = {name:'',age:18}\n  b = {name:''}\n         \n  //一个必须属性，其他根据需要来\n  let c = {name:string,[propName:string]:any};\n  //propName可以为任意字段\n  let c = {name:string,[name:string]:any};\n         \n  c = {name:'',age:''}\n  c = {name:'',age:''，email:''}\n         \n  //限制函数类型\n   let d: (a:number, b:number)=>number\n   //两参数一返回值\n   d = function (n1:string,n2:string):number{}\n  ```\n\n  \n\n- 11.array\n\n  限定数组里面值的类型\n\n  ```js\n  let e:string[];\n  e = ['a','s']\n  \n  let f:number[]\n  let g:array<number>\n  ```\n\n  \n\n- 12.tuple 元组\n\n  固定长度的数组\n\n  ```js\n  let h:[string,string]\n  h = ['hello',123]\n  \n  let h:[number,number]\n  h = [1,2]\n  ```\n\n  \n\n- 13.enum 枚举\n\n  ```js\n  let i :{name:string,gender:string}\n  i = {\n      name:'孙悟空',\n      gender:'男' //固定的male\n  }\n  \n  //let i :{name:string,gender:1|0}\n  =>{\n      gender:1\n  }\n  enum Gender = {\n      Male = 0,\n      Female = 1\n  }\n  let i:{naem:string,gender:Gender}\n  i = {\n  \tname:'孙悟空'，\n      gender:Gender.Male\n  }\n  ```\n\n  \n\n- 数组可以为-any任意类型\n\n  ```js\n  let arr:ant = [1,2,true,'a']\n  ```\n\n### 函数\n\n```js\n//可选参数\nfunction myone(age:string='zhangsan',x?:string,):string{\n    return age+x;\n}\n//可选参数需要写在必选参数之后\n\n//默认值\nconsole.log(myone());\nconsole.log(myone('wangwu','heihei'))\n```\n\n\n\n**shift + space 切换全半角**\n\n![image-20220506112117432](C:\\Users\\admin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220506112117432.png)\n\n\n\n### 1.ts编译事项\n\n1. ts是不不可以直接使用的，需要编译为js才能使用\n\n2. ts文件里面的形参，如果使用了某个类型进行修饰，那么最终在编译后的js文件里面，是没有这个类型的。\n\n3. ts文件中的变量使用的let修饰，编译的js文件中的修饰符就变成了var\n\n4. vs-code 自动编译\n\n5. **接口的定义与使用**\n\n   ```js\n   //接口-一种能力一种约束\n   (function () {\n     interface Person {\n       name: string;\n       age: number;\n     }\n     console.log(\"这里是2.ts\");\n     function a(person: Person): void {\n       console.log(person.name + \" \" + person.age, \"-n-a-m-e\");\n     }\n     const person = {\n       name: \"wangwu\",\n       age: 23,\n     };\n     //将接口接口作为函数参数\n     a(person);\n   })();\n   ```\n\n   \n\n6. ts里面使用一个类\n\n   ```js\n   (function () {\n     console.log(\"class-ts\");\n     interface Person {\n       firstName: string;\n       lastName: string;\n     }\n     //定义一个类\n     class PersonOne {\n       //定义公共的字段\n       public firstname: string;\n       lastname: string;\n       fullname: string;\n       constructor(firstname: string, lastname: string) {\n         this.firstname = firstname;\n         this.lastname = lastname;\n         this.fullname = firstname + lastname;\n       }\n     }\n   \n     //实例化对象\n     const person = new PersonOne(\"诸葛\", \"孔明\");\n   })();\n   \n   ```\n\n### 2.webpack 打包ts\n\n1. 初始化npm init -y\n\n2. 初始化tsc\n\n3. 命令\n\n   ```js\n   npm i webpack-cli\n   npm i webpack-dev-server\n   npm i html-webpack-plugin clean-webpack-plugin\n   npm i ts-loader\n   npm i cross-env\n   ```\n\n   \n\n**报错1 **\n\nwebpack报错 TypeError: Cannot read property ‘tap‘ of undefined\n\n原因：全局和局部版本不一样\n\n\n\n---\n\nwebpack 配置\n\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin')\nconst path = require('path');\n\nmodule.exports = {\n  entry: './1.ts', // 注意这里原来是 './src/index.js'，需要改成 ts 结尾！\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js'],\n  },\n  output: {\n    filename: '[contenthash:8].js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  plugins:[\n    new HtmlWebpackPlugin({\n      template:'./a.html'\n    }),\n    // new CleanWebpackPlugin()\n  ]\n};\n\n```\n\n\n\nclean-webpack-plugin写法\n\n```js\n\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nplugins: [\n    new CleanWebpackPlugin()\n]\n \n\n//错误写法\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\nplugins: [\n    new CleanWebpackPlugin(['dist'])\n]\n\n\n//\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\nplugins: [\n    new CleanWebpackPlugin(['dist'], {\n        root: path.resolve(__dirname, '../'),   //根目录\n    })\n\n```\n\n\n\n**\" --config build/webpack.config.js\"配置**\n\n配置配置文件的路径\n\n```txt\nwebpack默认使用同目录下的webpack.config.js文件,也可以自定义指定文件位置\n在package.json文件中配置:\n\n```\n\n\n\n### 3.ts接口\n\n/*是对对象的状态（属性）和行为（方法）的抽象（描述）*/\n\n/*是一种类型，是一种规范，是一种规则，是一个能力，是一种约束*/\n\n//*定义一个接口，该接口作为person对象的限制使用，限制或者约束该对象中的属性数据*//\n\n```js\ninterface Dog {\n      readonly id:number,\n      name:string,\n      age:number,\n      sex?:string\n   }\n      \n const kite:Dog = {\n      id:1,\n      name:'hurry',\n      age:3,\n      sex:'公'\n   }\n    \n    //readonly:只读属性\n    //  ?  非必要/可选\n    \n```\n\n\n\n### 4.函数类型\n\n*为了使用接口表示函数类型，我们需要给接口定义一个调用签名*\n\n*它就是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型*\n\n```js\n//函数类型-通过接口的方式作为函数的类型来使用\n//定义一个接口，用来作为某个函数使用\n\ninterface fnsign{\n      //签名\n      //定义一个调用签名\n      (source:string,subString:string):boolean\n   }\n   const fn:fnsign = function(source:string,subString:string):boolean{\n      return source.search(subString)> -1\n   }\n```\n\n\n\n### 5.类-class\n\n\n\n*定义一个类，这个类的类型就是上面定义的接口，实际上也可以理解为，ifly接口约束了当前的这个person类*\n\n```ts\nconsole.log(\"04-class-ts\");\n    interface IFLY{\n        fly()\n    }\n\n    class Person implements IFLY{\n        fly() {\n            console.log('super cam flu ,OMG!')\n        }\n    }\n\n    const one = new Person()\n    one.fly()\n```\n\n\n\n\n\n\n\n**编译打包问题**\n\n```txt\n新增文件在服务器不会在页面实现\n需要重新打包--npm run dev\n```\n\n因为使用`webpack-dev-server`是webpack5以前的方式了，如果使用，就会在`npm run start`运行时发生报错，错误信息为： `Error: Cannot find module 'webpack-cli/bin/config-yargs'\n\n\n\n#### 打包ts原理\n\n```js\n配置一个tsconfig.js\n当ts文件改变时，就会自动编译ts到一个指定目录\n在index.js中引入ts打包后的路径\n\n当ts文件修改时，会自动对其编译，造成打包后的js文件改变，js文件一旦改变，webpack就会立即打包\n\n```\n\n\n\n\n\nps:**类可以通过当前接口的方式，定义当前这个类的类型**\n\n*类可以实现一个接口，类可以实现多个接口，要注意，接口中的内容都要真正实现*\n\n那么可以定义一个类，继承其他需要的接口，然后再继承这个接口。\n\n**接口和接口之间叫做继承**\n\n**类和接口之间叫实现**\n\n\n\n\n\n//类：可以理解为模板。通过模板可以实例化对象\n\n```js\nclass Fish{\n        name:string\n        age:number\n        size:string\n        type:string\n        constructor(name:string='汗汗',age:number,size:string,type:string){\n            this.name = name\n            this.age = age\n            this.size = size\n            this.type = type\n        }\n        say(){\n            console.log(this.name+' '+this.age+' '+ this.size+' '+ this.type+' ')\n        }\n    }\n    const big = new Fish('',2,'big','鲫鱼')\n    console.log(big.say())\n```\n\n\n\n\n\n### 6.类的继承\n\n*继承：类与类之间的关系*\n\n*继承后类与类的叫法*\n\nA类继承了B这个类，那么此时A类叫子类，B叫基类\n\n子类--- > 派生类\n\n基类 ---> 超类（父类\n\n\n\n### 7.存取器\n\n```js\n(() => {\n  //存取器-有效的控制对对象中成员的访问\n  //外部可以传入姓氏和名字，同时使用set,get控制姓名的属性，外部也可以进行修改\n  class Person {\n    private _name: string;\n    _lastName: string;\n    constructor(name: string, lastName: string) {\n      this._name = name;\n      this._lastName = lastName;\n    }\n    public get name() {\n      return this._name;\n    }\n    public set name(val){\n        this._name = val\n     }\n  }\n  const peter = new Person(\"东方\", \"不败\");\n  console.log(peter, \"111\");\n  console.log(peter.name, \"peter-name\");\n  peter.name = \"西方\";\n  console.log(peter.name, \"peter-name\");\n})();\n\n```\n\n\n\n### 8.静态成员\n\n```js\n//通过static修饰的属性或者方法，那么就是静态的属性及静态的方法，也称作未静态成员\n//静态成员在使用的时候是使用类目的这种语法来调用的\n\n//static namea 爆红\n//类中默认有一个内置的namea属性\n(()=>{\n    class Person7 {\n        static namea:string;\n        constructor(namea:string){\n            //当namea被static修饰之后。namea是静态属性，不能通过实例对象直接调用静态属性来使用\n            //通过类名.静态属性的方式来访问该成员变量\n            //通过类目.静态属性的方式来修改成员变量\n            //通过类名.静态方法的方式调用内部的属性和方法\n            //构造函数不能使用static-- 构造函数不能使用static来修饰\n            //优点：可以不实例化对象来调用类的属性和方法\n\n\n            // this.namea = namea;\n        }\n        sayhi(){\n            // console.log(this.namea,'-t-h-i-s-namea---:')\n        }\n    }\n    const sweet = new Person7('霄汉')\n    console.log(Person7.namea,'n-amea')   //underfinded\n    sweet.sayhi()\n})()\n```\n\n\n\n### 9.抽象类\n\n```js\n//抽象类和抽象方法\n//抽象类包含抽象方法和实例方法，抽象类不可以被实例化\n//作用化-为了让子类进行实例化以及实现内部的抽象方法\n//抽象方法不能具体实现\n//抽象类中的属性和方法都是为子类服务\n(() => {\n  abstract class Animal {\n      abstract name:string;\n    // abstract eat(): void {\n    //     console.log('all-animals-eat')\n    // }\n    abstract eat()\n    run(){\n        console.log('非抽象方法，run')\n    }\n    sayhi(){\n        console.log('hi-evnery')\n    }\n  }\n//   const ani:Animal = new Animal()  //\n//   抽象类并不能被直接实例化\nclass dog extends Animal{\n    //重新实现抽象类中的方法\n    //此时这个方法是当前dog的实例方法\n    name:string = \"pet\"\n    eat() {\n        console.log(this.name+'-dog-eat')\n    }\n}\nconst erdog = new dog();\nerdog.eat()\n})();\n\n```\n\n\n\n### 10.函数\n\n```js\n(() => {\n  //函数\n  //封装一些重复使用的代码，在需要时候直接调用既可\n  //函数声明-表达式-返回值\n  //ts中的书写可以定义参数类型\n  //ts支持函数重载\n\n  function add(x: number, y: number): number {\n    return x + y;\n  }\n  // function add(x:number):number{}\n  console.log(add(3, 4), \"add-result\");\n  //函数的完整写法\n  const addone: (x: number, y: number) => number = function (\n    x: number,\n    y: number\n  ): number {\n    return x + y;\n  };\n})();\n\n```\n\n\n\n\n\n### 11.可选参数和默认参数\n\n1. webpack 入口文件超过大小限制\n\n```js\nperformance: {\n    hints: \"warning\", // 枚举\n    maxAssetSize: 30000000, // 整数类型（以字节为单位）\n    maxEntrypointSize: 50000000, // 整数类型（以字节为单位）\n    assetFilter: function (assetFilename) {\n      // 提供资源文件名的断言函数\n      return assetFilename.endsWith(\".css\") || assetFilename.endsWith(\".js\");\n    },\n  },\n```\n\n\n\n### 12.剩余参数\n\n```js\n(()=>{\n    //函数剩余参数\n    //剩余参数是放在函数声明的时候所有的参数的最后\n    function showMsg(str:string,...args:string[]){\n        console.log(str)  //a\n        console.log(args) //剩余参数\n    }   \n    showMsg('a','b','c')\n})()\n```\n\n\n\n### 13.函数重载\n\n```js\n(()=>{\n    //ts的函数重载不同于其他语言\n    //函数重载声明\n    function add(x:number,y:number):number\n    function add(x:string,y:string):string\n    //未被声明的则会报错\n\n    function add(x: number|string, y: number|string): number|string {\n        if(typeof(x)=='number'&&typeof(y)=='number')\n        {return x + y;}\n        else if(typeof(x)=='string'&&typeof(y)=='string'){\n            return +x+y;\n        }\n      }\n      console.log(add(3, 4), \"add-result\");\n      //7\n      console.log(add('诸葛', '亮'), \"add-result\");\n      //34\n      console.log(add('3', 4), \"add-result\");\n      //underfinded\n})()\n```\n\n\n\n### 14.多个泛型参数的函数\n\n```js\n(() => {\n  function getMsg<k, v>(value1: k, value2: v): [ k, v ] {\n    return [value1, value2];\n  }\n  console.log(getMsg('a',1))\n  console.log(getMsg(1,true))\n})();\n\n```\n\n\n\n### 15.泛型接口\n\n\n\n# \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Typescript学习.md","raw":"---\ntitle: typeScript入门\n\nauthor: codefish\ndate: 2022-5-20 10:34:07\ncategories: js\ntags: [ts,js]\ntop_img: /img/justin.jpg\ncover: /img/justin.jpg\n---\n## ---\n\ntypeScript作为js的超集，主要是加了类型限制，对于面向对象的使用多于js,学习ts是后面学习node框架koa,express,nest等的基础\n\n[toc]\n\n### 1.类型\n\n```js\nlet a:number\n// a为number，以后的使用a的值只能为数字\n\n```\n\n**ts-可以编译为任何js版本 tsc**\n\n```js\nlet c:boolean = false\n```\n\n如果变量声明时，直接赋值（同时进行），它可以自动判断\n\n```js\nfunction sum(a,b) {\n\treturn a+b\n}\n//sum(123,456)\n//sum('123',456)\n\n//改善\nfunction sum(a:number,b:number) {\n\treturn a+b\n}\nsum(123,'456') //提示错误\n\n//函数返回值的类型\nfunction sum(a:number,b:number):number {\n\treturn a+b\n}\n```\n\n类型的都为小写 number,boolean,string\n\n- １．number 任意数字\n- ２．string 任意字符串\n- ３．boolean 任意布尔值\n- ４.字面量类型说明\n\n​\t\n\n```js\nlet a:10\n//赋值一次不能修改\n\n//可以使用｜来连接多个类型\nlet b:boolean|string\n\n```\n\n- ５．any\n\n  ```js\n  //表示可以为任意类型－\n  let　ｄ　//－－变量只声明不赋值，自动判断为ａｎｙ\n  //设置ａｎｙ后，相当于关闭类型检测\n  let d:any\n  \n  let s:string\n  s = d  -- s:string\n  s = d  -- s将变为any\n  \n  ```\n\n  \n\n- ６．unknown -- 效果和any一致\n\n  ```js\n  //any 类型的变量可以赋值给任意类型的变量\n  let s:string\n  let d:any\n  s = d -- s变为any\n  \n  let n:unkonwn\n  n = 'hello'\n  s = n //将一个unkonwn赋给string--报错\n  \n  //解决\n  if(typeof s===\"string\"){\n  \ts = n\n  }\n  ```\n\n  **为一个安全的ａｎｙ，不能赋值给其他变量**\n\n- 7.类型断言\n\n  ```js\n  //告诉解析器变量的实际类型\n  s = e as string\n  s = <string>e;\n  ```\n\n  \n\n- 8.void-函数返回值\n\n  ```js\n  function fn(num):number{}\n  function fn(nunm):number|boolean{} \n  function fn(num):void {}   //没有返回值\n  ```\n\n  \n\n- 9.never--永远不会返回结果\n\n  ```js\n  function fn():never{} \n  //甚至不需要return\n  function fn():void{\n      return\n  }\n  ```\n\n  \n\n- 10.object - js一切皆对象\n\n  ```js\n  let a:object;\n  a = {}\n  \n  //限制对象里面的属性\n  let b:{name:string};\n  //对象b必须有一个属性name-类型为string\n  b = {name:''}     //结构和上面一致\n  \n  //加上一个？表示为可选属性\n  let b:{name:string,age?:number}\n  b = {name:'',age:18}\n  b = {name:''}\n         \n  //一个必须属性，其他根据需要来\n  let c = {name:string,[propName:string]:any};\n  //propName可以为任意字段\n  let c = {name:string,[name:string]:any};\n         \n  c = {name:'',age:''}\n  c = {name:'',age:''，email:''}\n         \n  //限制函数类型\n   let d: (a:number, b:number)=>number\n   //两参数一返回值\n   d = function (n1:string,n2:string):number{}\n  ```\n\n  \n\n- 11.array\n\n  限定数组里面值的类型\n\n  ```js\n  let e:string[];\n  e = ['a','s']\n  \n  let f:number[]\n  let g:array<number>\n  ```\n\n  \n\n- 12.tuple 元组\n\n  固定长度的数组\n\n  ```js\n  let h:[string,string]\n  h = ['hello',123]\n  \n  let h:[number,number]\n  h = [1,2]\n  ```\n\n  \n\n- 13.enum 枚举\n\n  ```js\n  let i :{name:string,gender:string}\n  i = {\n      name:'孙悟空',\n      gender:'男' //固定的male\n  }\n  \n  //let i :{name:string,gender:1|0}\n  =>{\n      gender:1\n  }\n  enum Gender = {\n      Male = 0,\n      Female = 1\n  }\n  let i:{naem:string,gender:Gender}\n  i = {\n  \tname:'孙悟空'，\n      gender:Gender.Male\n  }\n  ```\n\n  \n\n- 数组可以为-any任意类型\n\n  ```js\n  let arr:ant = [1,2,true,'a']\n  ```\n\n### 函数\n\n```js\n//可选参数\nfunction myone(age:string='zhangsan',x?:string,):string{\n    return age+x;\n}\n//可选参数需要写在必选参数之后\n\n//默认值\nconsole.log(myone());\nconsole.log(myone('wangwu','heihei'))\n```\n\n\n\n**shift + space 切换全半角**\n\n![image-20220506112117432](C:\\Users\\admin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220506112117432.png)\n\n\n\n### 1.ts编译事项\n\n1. ts是不不可以直接使用的，需要编译为js才能使用\n\n2. ts文件里面的形参，如果使用了某个类型进行修饰，那么最终在编译后的js文件里面，是没有这个类型的。\n\n3. ts文件中的变量使用的let修饰，编译的js文件中的修饰符就变成了var\n\n4. vs-code 自动编译\n\n5. **接口的定义与使用**\n\n   ```js\n   //接口-一种能力一种约束\n   (function () {\n     interface Person {\n       name: string;\n       age: number;\n     }\n     console.log(\"这里是2.ts\");\n     function a(person: Person): void {\n       console.log(person.name + \" \" + person.age, \"-n-a-m-e\");\n     }\n     const person = {\n       name: \"wangwu\",\n       age: 23,\n     };\n     //将接口接口作为函数参数\n     a(person);\n   })();\n   ```\n\n   \n\n6. ts里面使用一个类\n\n   ```js\n   (function () {\n     console.log(\"class-ts\");\n     interface Person {\n       firstName: string;\n       lastName: string;\n     }\n     //定义一个类\n     class PersonOne {\n       //定义公共的字段\n       public firstname: string;\n       lastname: string;\n       fullname: string;\n       constructor(firstname: string, lastname: string) {\n         this.firstname = firstname;\n         this.lastname = lastname;\n         this.fullname = firstname + lastname;\n       }\n     }\n   \n     //实例化对象\n     const person = new PersonOne(\"诸葛\", \"孔明\");\n   })();\n   \n   ```\n\n### 2.webpack 打包ts\n\n1. 初始化npm init -y\n\n2. 初始化tsc\n\n3. 命令\n\n   ```js\n   npm i webpack-cli\n   npm i webpack-dev-server\n   npm i html-webpack-plugin clean-webpack-plugin\n   npm i ts-loader\n   npm i cross-env\n   ```\n\n   \n\n**报错1 **\n\nwebpack报错 TypeError: Cannot read property ‘tap‘ of undefined\n\n原因：全局和局部版本不一样\n\n\n\n---\n\nwebpack 配置\n\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin')\nconst path = require('path');\n\nmodule.exports = {\n  entry: './1.ts', // 注意这里原来是 './src/index.js'，需要改成 ts 结尾！\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js'],\n  },\n  output: {\n    filename: '[contenthash:8].js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  plugins:[\n    new HtmlWebpackPlugin({\n      template:'./a.html'\n    }),\n    // new CleanWebpackPlugin()\n  ]\n};\n\n```\n\n\n\nclean-webpack-plugin写法\n\n```js\n\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nplugins: [\n    new CleanWebpackPlugin()\n]\n \n\n//错误写法\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\nplugins: [\n    new CleanWebpackPlugin(['dist'])\n]\n\n\n//\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\nplugins: [\n    new CleanWebpackPlugin(['dist'], {\n        root: path.resolve(__dirname, '../'),   //根目录\n    })\n\n```\n\n\n\n**\" --config build/webpack.config.js\"配置**\n\n配置配置文件的路径\n\n```txt\nwebpack默认使用同目录下的webpack.config.js文件,也可以自定义指定文件位置\n在package.json文件中配置:\n\n```\n\n\n\n### 3.ts接口\n\n/*是对对象的状态（属性）和行为（方法）的抽象（描述）*/\n\n/*是一种类型，是一种规范，是一种规则，是一个能力，是一种约束*/\n\n//*定义一个接口，该接口作为person对象的限制使用，限制或者约束该对象中的属性数据*//\n\n```js\ninterface Dog {\n      readonly id:number,\n      name:string,\n      age:number,\n      sex?:string\n   }\n      \n const kite:Dog = {\n      id:1,\n      name:'hurry',\n      age:3,\n      sex:'公'\n   }\n    \n    //readonly:只读属性\n    //  ?  非必要/可选\n    \n```\n\n\n\n### 4.函数类型\n\n*为了使用接口表示函数类型，我们需要给接口定义一个调用签名*\n\n*它就是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型*\n\n```js\n//函数类型-通过接口的方式作为函数的类型来使用\n//定义一个接口，用来作为某个函数使用\n\ninterface fnsign{\n      //签名\n      //定义一个调用签名\n      (source:string,subString:string):boolean\n   }\n   const fn:fnsign = function(source:string,subString:string):boolean{\n      return source.search(subString)> -1\n   }\n```\n\n\n\n### 5.类-class\n\n\n\n*定义一个类，这个类的类型就是上面定义的接口，实际上也可以理解为，ifly接口约束了当前的这个person类*\n\n```ts\nconsole.log(\"04-class-ts\");\n    interface IFLY{\n        fly()\n    }\n\n    class Person implements IFLY{\n        fly() {\n            console.log('super cam flu ,OMG!')\n        }\n    }\n\n    const one = new Person()\n    one.fly()\n```\n\n\n\n\n\n\n\n**编译打包问题**\n\n```txt\n新增文件在服务器不会在页面实现\n需要重新打包--npm run dev\n```\n\n因为使用`webpack-dev-server`是webpack5以前的方式了，如果使用，就会在`npm run start`运行时发生报错，错误信息为： `Error: Cannot find module 'webpack-cli/bin/config-yargs'\n\n\n\n#### 打包ts原理\n\n```js\n配置一个tsconfig.js\n当ts文件改变时，就会自动编译ts到一个指定目录\n在index.js中引入ts打包后的路径\n\n当ts文件修改时，会自动对其编译，造成打包后的js文件改变，js文件一旦改变，webpack就会立即打包\n\n```\n\n\n\n\n\nps:**类可以通过当前接口的方式，定义当前这个类的类型**\n\n*类可以实现一个接口，类可以实现多个接口，要注意，接口中的内容都要真正实现*\n\n那么可以定义一个类，继承其他需要的接口，然后再继承这个接口。\n\n**接口和接口之间叫做继承**\n\n**类和接口之间叫实现**\n\n\n\n\n\n//类：可以理解为模板。通过模板可以实例化对象\n\n```js\nclass Fish{\n        name:string\n        age:number\n        size:string\n        type:string\n        constructor(name:string='汗汗',age:number,size:string,type:string){\n            this.name = name\n            this.age = age\n            this.size = size\n            this.type = type\n        }\n        say(){\n            console.log(this.name+' '+this.age+' '+ this.size+' '+ this.type+' ')\n        }\n    }\n    const big = new Fish('',2,'big','鲫鱼')\n    console.log(big.say())\n```\n\n\n\n\n\n### 6.类的继承\n\n*继承：类与类之间的关系*\n\n*继承后类与类的叫法*\n\nA类继承了B这个类，那么此时A类叫子类，B叫基类\n\n子类--- > 派生类\n\n基类 ---> 超类（父类\n\n\n\n### 7.存取器\n\n```js\n(() => {\n  //存取器-有效的控制对对象中成员的访问\n  //外部可以传入姓氏和名字，同时使用set,get控制姓名的属性，外部也可以进行修改\n  class Person {\n    private _name: string;\n    _lastName: string;\n    constructor(name: string, lastName: string) {\n      this._name = name;\n      this._lastName = lastName;\n    }\n    public get name() {\n      return this._name;\n    }\n    public set name(val){\n        this._name = val\n     }\n  }\n  const peter = new Person(\"东方\", \"不败\");\n  console.log(peter, \"111\");\n  console.log(peter.name, \"peter-name\");\n  peter.name = \"西方\";\n  console.log(peter.name, \"peter-name\");\n})();\n\n```\n\n\n\n### 8.静态成员\n\n```js\n//通过static修饰的属性或者方法，那么就是静态的属性及静态的方法，也称作未静态成员\n//静态成员在使用的时候是使用类目的这种语法来调用的\n\n//static namea 爆红\n//类中默认有一个内置的namea属性\n(()=>{\n    class Person7 {\n        static namea:string;\n        constructor(namea:string){\n            //当namea被static修饰之后。namea是静态属性，不能通过实例对象直接调用静态属性来使用\n            //通过类名.静态属性的方式来访问该成员变量\n            //通过类目.静态属性的方式来修改成员变量\n            //通过类名.静态方法的方式调用内部的属性和方法\n            //构造函数不能使用static-- 构造函数不能使用static来修饰\n            //优点：可以不实例化对象来调用类的属性和方法\n\n\n            // this.namea = namea;\n        }\n        sayhi(){\n            // console.log(this.namea,'-t-h-i-s-namea---:')\n        }\n    }\n    const sweet = new Person7('霄汉')\n    console.log(Person7.namea,'n-amea')   //underfinded\n    sweet.sayhi()\n})()\n```\n\n\n\n### 9.抽象类\n\n```js\n//抽象类和抽象方法\n//抽象类包含抽象方法和实例方法，抽象类不可以被实例化\n//作用化-为了让子类进行实例化以及实现内部的抽象方法\n//抽象方法不能具体实现\n//抽象类中的属性和方法都是为子类服务\n(() => {\n  abstract class Animal {\n      abstract name:string;\n    // abstract eat(): void {\n    //     console.log('all-animals-eat')\n    // }\n    abstract eat()\n    run(){\n        console.log('非抽象方法，run')\n    }\n    sayhi(){\n        console.log('hi-evnery')\n    }\n  }\n//   const ani:Animal = new Animal()  //\n//   抽象类并不能被直接实例化\nclass dog extends Animal{\n    //重新实现抽象类中的方法\n    //此时这个方法是当前dog的实例方法\n    name:string = \"pet\"\n    eat() {\n        console.log(this.name+'-dog-eat')\n    }\n}\nconst erdog = new dog();\nerdog.eat()\n})();\n\n```\n\n\n\n### 10.函数\n\n```js\n(() => {\n  //函数\n  //封装一些重复使用的代码，在需要时候直接调用既可\n  //函数声明-表达式-返回值\n  //ts中的书写可以定义参数类型\n  //ts支持函数重载\n\n  function add(x: number, y: number): number {\n    return x + y;\n  }\n  // function add(x:number):number{}\n  console.log(add(3, 4), \"add-result\");\n  //函数的完整写法\n  const addone: (x: number, y: number) => number = function (\n    x: number,\n    y: number\n  ): number {\n    return x + y;\n  };\n})();\n\n```\n\n\n\n\n\n### 11.可选参数和默认参数\n\n1. webpack 入口文件超过大小限制\n\n```js\nperformance: {\n    hints: \"warning\", // 枚举\n    maxAssetSize: 30000000, // 整数类型（以字节为单位）\n    maxEntrypointSize: 50000000, // 整数类型（以字节为单位）\n    assetFilter: function (assetFilename) {\n      // 提供资源文件名的断言函数\n      return assetFilename.endsWith(\".css\") || assetFilename.endsWith(\".js\");\n    },\n  },\n```\n\n\n\n### 12.剩余参数\n\n```js\n(()=>{\n    //函数剩余参数\n    //剩余参数是放在函数声明的时候所有的参数的最后\n    function showMsg(str:string,...args:string[]){\n        console.log(str)  //a\n        console.log(args) //剩余参数\n    }   \n    showMsg('a','b','c')\n})()\n```\n\n\n\n### 13.函数重载\n\n```js\n(()=>{\n    //ts的函数重载不同于其他语言\n    //函数重载声明\n    function add(x:number,y:number):number\n    function add(x:string,y:string):string\n    //未被声明的则会报错\n\n    function add(x: number|string, y: number|string): number|string {\n        if(typeof(x)=='number'&&typeof(y)=='number')\n        {return x + y;}\n        else if(typeof(x)=='string'&&typeof(y)=='string'){\n            return +x+y;\n        }\n      }\n      console.log(add(3, 4), \"add-result\");\n      //7\n      console.log(add('诸葛', '亮'), \"add-result\");\n      //34\n      console.log(add('3', 4), \"add-result\");\n      //underfinded\n})()\n```\n\n\n\n### 14.多个泛型参数的函数\n\n```js\n(() => {\n  function getMsg<k, v>(value1: k, value2: v): [ k, v ] {\n    return [value1, value2];\n  }\n  console.log(getMsg('a',1))\n  console.log(getMsg(1,true))\n})();\n\n```\n\n\n\n### 15.泛型接口\n\n\n\n# \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Typescript学习","published":1,"updated":"2025-01-07T02:30:24.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0cg00003572oelfa6ubb","content":"<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><p>typeScript作为js的超集，主要是加了类型限制，对于面向对象的使用多于js,学习ts是后面学习node框架koa,express,nest等的基础</p>\n<p>[toc]</p>\n<h3 id=\"1-类型\"><a href=\"#1-类型\" class=\"headerlink\" title=\"1.类型\"></a>1.类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:number</span><br><span class=\"line\"><span class=\"comment\">// a为number，以后的使用a的值只能为数字</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>ts-可以编译为任何js版本 tsc</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>:boolean = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>如果变量声明时，直接赋值（同时进行），它可以自动判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//sum(123,456)</span></span><br><span class=\"line\"><span class=\"comment\">//sum(&#x27;123&#x27;,456)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//改善</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a:number,b:number</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">123</span>,<span class=\"string\">&#x27;456&#x27;</span>) <span class=\"comment\">//提示错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数返回值的类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a:number,b:number</span>):number &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>类型的都为小写 number,boolean,string</p>\n<ul>\n<li>１．number 任意数字</li>\n<li>２．string 任意字符串</li>\n<li>３．boolean 任意布尔值</li>\n<li>４.字面量类型说明</li>\n</ul>\n<p>​    </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">//赋值一次不能修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以使用｜来连接多个类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:boolean|string</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>５．any</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表示可以为任意类型－</span></span><br><span class=\"line\"><span class=\"keyword\">let</span>　ｄ　<span class=\"comment\">//－－变量只声明不赋值，自动判断为ａｎｙ</span></span><br><span class=\"line\"><span class=\"comment\">//设置ａｎｙ后，相当于关闭类型检测</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">d</span>:any</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>:string</span><br><span class=\"line\">s = d  -- <span class=\"attr\">s</span>:string</span><br><span class=\"line\">s = d  -- s将变为any</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>６．unknown – 效果和any一致</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//any 类型的变量可以赋值给任意类型的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>:string</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">d</span>:any</span><br><span class=\"line\">s = d -- s变为any</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>:unkonwn</span><br><span class=\"line\">n = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">s = n <span class=\"comment\">//将一个unkonwn赋给string--报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解决</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> s===<span class=\"string\">&quot;string&quot;</span>)&#123;</span><br><span class=\"line\">\ts = n</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>为一个安全的ａｎｙ，不能赋值给其他变量</strong></p>\n</li>\n<li><p>7.类型断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//告诉解析器变量的实际类型</span></span><br><span class=\"line\">s = e <span class=\"keyword\">as</span> string</span><br><span class=\"line\">s = &lt;string&gt;e;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>8.void-函数返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num</span>):number&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">nunm</span>):number|boolean&#123;&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num</span>):<span class=\"keyword\">void</span> &#123;&#125;   <span class=\"comment\">//没有返回值</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>9.never–永远不会返回结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>):never&#123;&#125; </span><br><span class=\"line\"><span class=\"comment\">//甚至不需要return</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>):<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>10.object - js一切皆对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:object;</span><br><span class=\"line\">a = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//限制对象里面的属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:&#123;<span class=\"attr\">name</span>:string&#125;;</span><br><span class=\"line\"><span class=\"comment\">//对象b必须有一个属性name-类型为string</span></span><br><span class=\"line\">b = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;     <span class=\"comment\">//结构和上面一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加上一个？表示为可选属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:&#123;<span class=\"attr\">name</span>:string,age?:number&#125;</span><br><span class=\"line\">b = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\">b = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"comment\">//一个必须属性，其他根据需要来</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"attr\">name</span>:string,[<span class=\"attr\">propName</span>:string]:any&#125;;</span><br><span class=\"line\"><span class=\"comment\">//propName可以为任意字段</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"attr\">name</span>:string,[<span class=\"attr\">name</span>:string]:any&#125;;</span><br><span class=\"line\">       </span><br><span class=\"line\">c = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">c = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;&#x27;</span>，<span class=\"attr\">email</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"comment\">//限制函数类型</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> <span class=\"attr\">d</span>: <span class=\"function\">(<span class=\"params\">a:number, b:number</span>)=&gt;</span>number</span><br><span class=\"line\"> <span class=\"comment\">//两参数一返回值</span></span><br><span class=\"line\"> d = <span class=\"keyword\">function</span> (<span class=\"params\">n1:string,n2:string</span>):number&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>11.array</p>\n<p>限定数组里面值的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">e</span>:string[];</span><br><span class=\"line\">e = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;s&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">f</span>:number[]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">g</span>:array&lt;number&gt;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>12.tuple 元组</p>\n<p>固定长度的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">h</span>:[string,string]</span><br><span class=\"line\">h = [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">123</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">h</span>:[number,number]</span><br><span class=\"line\">h = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>13.enum 枚举</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i :&#123;<span class=\"attr\">name</span>:string,<span class=\"attr\">gender</span>:string&#125;</span><br><span class=\"line\">i = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;孙悟空&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&#x27;男&#x27;</span> <span class=\"comment\">//固定的male</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//let i :&#123;name:string,gender:1|0&#125;</span></span><br><span class=\"line\">=&gt;&#123;</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum <span class=\"title class_\">Gender</span> = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Male</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Female</span> = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">i</span>:&#123;<span class=\"attr\">naem</span>:string,<span class=\"attr\">gender</span>:<span class=\"title class_\">Gender</span>&#125;</span><br><span class=\"line\">i = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;孙悟空&#x27;</span>，</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"title class_\">Gender</span>.<span class=\"property\">Male</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>数组可以为-any任意类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:ant = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"literal\">true</span>,<span class=\"string\">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可选参数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myone</span>(<span class=\"params\">age:string=<span class=\"string\">&#x27;zhangsan&#x27;</span>,x?:string,</span>):string&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age+x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可选参数需要写在必选参数之后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">myone</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">myone</span>(<span class=\"string\">&#x27;wangwu&#x27;</span>,<span class=\"string\">&#x27;heihei&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>shift + space 切换全半角</strong></p>\n<p><img src=\"C:\\Users\\admin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220506112117432.png\" alt=\"image-20220506112117432\"></p>\n<h3 id=\"1-ts编译事项\"><a href=\"#1-ts编译事项\" class=\"headerlink\" title=\"1.ts编译事项\"></a>1.ts编译事项</h3><ol>\n<li><p>ts是不不可以直接使用的，需要编译为js才能使用</p>\n</li>\n<li><p>ts文件里面的形参，如果使用了某个类型进行修饰，那么最终在编译后的js文件里面，是没有这个类型的。</p>\n</li>\n<li><p>ts文件中的变量使用的let修饰，编译的js文件中的修饰符就变成了var</p>\n</li>\n<li><p>vs-code 自动编译</p>\n</li>\n<li><p><strong>接口的定义与使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接口-一种能力一种约束</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  interface <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: number;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;这里是2.ts&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\">person: Person</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span> + <span class=\"string\">&quot; &quot;</span> + person.<span class=\"property\">age</span>, <span class=\"string\">&quot;-n-a-m-e&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;wangwu&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//将接口接口作为函数参数</span></span><br><span class=\"line\">  <span class=\"title function_\">a</span>(person);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>ts里面使用一个类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;class-ts&quot;</span>);</span><br><span class=\"line\">  interface <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: string;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//定义一个类</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">PersonOne</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义公共的字段</span></span><br><span class=\"line\">    public <span class=\"attr\">firstname</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">lastname</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">fullname</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">firstname: string, lastname: string</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span> = firstname;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span> = lastname;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fullname</span> = firstname + lastname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//实例化对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">PersonOne</span>(<span class=\"string\">&quot;诸葛&quot;</span>, <span class=\"string\">&quot;孔明&quot;</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-webpack-打包ts\"><a href=\"#2-webpack-打包ts\" class=\"headerlink\" title=\"2.webpack 打包ts\"></a>2.webpack 打包ts</h3><ol>\n<li><p>初始化npm init -y</p>\n</li>\n<li><p>初始化tsc</p>\n</li>\n<li><p>命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-cli</span><br><span class=\"line\">npm i webpack-dev-server</span><br><span class=\"line\">npm i html-webpack-plugin clean-webpack-plugin</span><br><span class=\"line\">npm i ts-loader</span><br><span class=\"line\">npm i cross-env</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>**报错1 **</p>\n<p>webpack报错 TypeError: Cannot read property ‘tap‘ of undefined</p>\n<p>原因：全局和局部版本不一样</p>\n<hr>\n<p>webpack 配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleanWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./1.ts&#x27;</span>, <span class=\"comment\">// 注意这里原来是 &#x27;./src/index.js&#x27;，需要改成 ts 结尾！</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: <span class=\"string\">&#x27;ts-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.tsx&#x27;</span>, <span class=\"string\">&#x27;.ts&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[contenthash:8].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>:<span class=\"string\">&#x27;./a.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// new CleanWebpackPlugin()</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>clean-webpack-plugin写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">CleanWebpackPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>()</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleanWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>([<span class=\"string\">&#x27;dist&#x27;</span>])</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleanWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>([<span class=\"string\">&#x27;dist&#x27;</span>], &#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../&#x27;</span>),   <span class=\"comment\">//根目录</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>“ –config build&#x2F;webpack.config.js”配置</strong></p>\n<p>配置配置文件的路径</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack默认使用同目录下的webpack.config.js文件,也可以自定义指定文件位置</span><br><span class=\"line\">在package.json文件中配置:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-ts接口\"><a href=\"#3-ts接口\" class=\"headerlink\" title=\"3.ts接口\"></a>3.ts接口</h3><p>&#x2F;<em>是对对象的状态（属性）和行为（方法）的抽象（描述）</em>&#x2F;</p>\n<p>&#x2F;<em>是一种类型，是一种规范，是一种规则，是一个能力，是一种约束</em>&#x2F;</p>\n<p>&#x2F;&#x2F;<em>定义一个接口，该接口作为person对象的限制使用，限制或者约束该对象中的属性数据</em>&#x2F;&#x2F;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">      readonly <span class=\"attr\">id</span>:number,</span><br><span class=\"line\">      <span class=\"attr\">name</span>:string,</span><br><span class=\"line\">      <span class=\"attr\">age</span>:number,</span><br><span class=\"line\">      sex?:string</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"attr\">kite</span>:<span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;hurry&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">age</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;公&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//readonly:只读属性</span></span><br><span class=\"line\">    <span class=\"comment\">//  ?  非必要/可选</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-函数类型\"><a href=\"#4-函数类型\" class=\"headerlink\" title=\"4.函数类型\"></a>4.函数类型</h3><p><em>为了使用接口表示函数类型，我们需要给接口定义一个调用签名</em></p>\n<p><em>它就是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数类型-通过接口的方式作为函数的类型来使用</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个接口，用来作为某个函数使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">interface fnsign&#123;</span><br><span class=\"line\">      <span class=\"comment\">//签名</span></span><br><span class=\"line\">      <span class=\"comment\">//定义一个调用签名</span></span><br><span class=\"line\">      (<span class=\"attr\">source</span>:string,<span class=\"attr\">subString</span>:string):boolean</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"attr\">fn</span>:fnsign = <span class=\"keyword\">function</span>(<span class=\"params\">source:string,subString:string</span>):boolean&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> source.<span class=\"title function_\">search</span>(subString)&gt; -<span class=\"number\">1</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-类-class\"><a href=\"#5-类-class\" class=\"headerlink\" title=\"5.类-class\"></a>5.类-class</h3><p><em>定义一个类，这个类的类型就是上面定义的接口，实际上也可以理解为，ifly接口约束了当前的这个person类</em></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;04-class-ts&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">interface</span> IFLY&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fly</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"variable constant_\">IFLY</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fly</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;super cam flu ,OMG!&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> one = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\">    one.<span class=\"title function_\">fly</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>编译打包问题</strong></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新增文件在服务器不会在页面实现</span><br><span class=\"line\">需要重新打包--npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>因为使用<code>webpack-dev-server</code>是webpack5以前的方式了，如果使用，就会在<code>npm run start</code>运行时发生报错，错误信息为： &#96;Error: Cannot find module ‘webpack-cli&#x2F;bin&#x2F;config-yargs’</p>\n<h4 id=\"打包ts原理\"><a href=\"#打包ts原理\" class=\"headerlink\" title=\"打包ts原理\"></a>打包ts原理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置一个tsconfig.<span class=\"property\">js</span></span><br><span class=\"line\">当ts文件改变时，就会自动编译ts到一个指定目录</span><br><span class=\"line\">在index.<span class=\"property\">js</span>中引入ts打包后的路径</span><br><span class=\"line\"></span><br><span class=\"line\">当ts文件修改时，会自动对其编译，造成打包后的js文件改变，js文件一旦改变，webpack就会立即打包</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>ps:<strong>类可以通过当前接口的方式，定义当前这个类的类型</strong></p>\n<p><em>类可以实现一个接口，类可以实现多个接口，要注意，接口中的内容都要真正实现</em></p>\n<p>那么可以定义一个类，继承其他需要的接口，然后再继承这个接口。</p>\n<p><strong>接口和接口之间叫做继承</strong></p>\n<p><strong>类和接口之间叫实现</strong></p>\n<p>&#x2F;&#x2F;类：可以理解为模板。通过模板可以实例化对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fish</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:string</span><br><span class=\"line\">        <span class=\"attr\">age</span>:number</span><br><span class=\"line\">        <span class=\"attr\">size</span>:string</span><br><span class=\"line\">        <span class=\"attr\">type</span>:string</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\">name:string=<span class=\"string\">&#x27;汗汗&#x27;</span>,age:number,size:string,type:string</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = size</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = type</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">say</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>+<span class=\"string\">&#x27; &#x27;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>+<span class=\"string\">&#x27; &#x27;</span>+ <span class=\"variable language_\">this</span>.<span class=\"property\">size</span>+<span class=\"string\">&#x27; &#x27;</span>+ <span class=\"variable language_\">this</span>.<span class=\"property\">type</span>+<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> big = <span class=\"keyword\">new</span> <span class=\"title class_\">Fish</span>(<span class=\"string\">&#x27;&#x27;</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;big&#x27;</span>,<span class=\"string\">&#x27;鲫鱼&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(big.<span class=\"title function_\">say</span>())</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"6-类的继承\"><a href=\"#6-类的继承\" class=\"headerlink\" title=\"6.类的继承\"></a>6.类的继承</h3><p><em>继承：类与类之间的关系</em></p>\n<p><em>继承后类与类的叫法</em></p>\n<p>A类继承了B这个类，那么此时A类叫子类，B叫基类</p>\n<p>子类— &gt; 派生类</p>\n<p>基类 —&gt; 超类（父类</p>\n<h3 id=\"7-存取器\"><a href=\"#7-存取器\" class=\"headerlink\" title=\"7.存取器\"></a>7.存取器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//存取器-有效的控制对对象中成员的访问</span></span><br><span class=\"line\">  <span class=\"comment\">//外部可以传入姓氏和名字，同时使用set,get控制姓名的属性，外部也可以进行修改</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">_name</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">_lastName</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: string, lastName: string</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_lastName</span> = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">set</span> <span class=\"title function_\">name</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = val</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> peter = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;东方&quot;</span>, <span class=\"string\">&quot;不败&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(peter, <span class=\"string\">&quot;111&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(peter.<span class=\"property\">name</span>, <span class=\"string\">&quot;peter-name&quot;</span>);</span><br><span class=\"line\">  peter.<span class=\"property\">name</span> = <span class=\"string\">&quot;西方&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(peter.<span class=\"property\">name</span>, <span class=\"string\">&quot;peter-name&quot;</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-静态成员\"><a href=\"#8-静态成员\" class=\"headerlink\" title=\"8.静态成员\"></a>8.静态成员</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过static修饰的属性或者方法，那么就是静态的属性及静态的方法，也称作未静态成员</span></span><br><span class=\"line\"><span class=\"comment\">//静态成员在使用的时候是使用类目的这种语法来调用的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//static namea 爆红</span></span><br><span class=\"line\"><span class=\"comment\">//类中默认有一个内置的namea属性</span></span><br><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Person7</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"attr\">namea</span>:string;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\">namea:string</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//当namea被static修饰之后。namea是静态属性，不能通过实例对象直接调用静态属性来使用</span></span><br><span class=\"line\">            <span class=\"comment\">//通过类名.静态属性的方式来访问该成员变量</span></span><br><span class=\"line\">            <span class=\"comment\">//通过类目.静态属性的方式来修改成员变量</span></span><br><span class=\"line\">            <span class=\"comment\">//通过类名.静态方法的方式调用内部的属性和方法</span></span><br><span class=\"line\">            <span class=\"comment\">//构造函数不能使用static-- 构造函数不能使用static来修饰</span></span><br><span class=\"line\">            <span class=\"comment\">//优点：可以不实例化对象来调用类的属性和方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// this.namea = namea;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">sayhi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(this.namea,&#x27;-t-h-i-s-namea---:&#x27;)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sweet = <span class=\"keyword\">new</span> <span class=\"title class_\">Person7</span>(<span class=\"string\">&#x27;霄汉&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person7</span>.<span class=\"property\">namea</span>,<span class=\"string\">&#x27;n-amea&#x27;</span>)   <span class=\"comment\">//underfinded</span></span><br><span class=\"line\">    sweet.<span class=\"title function_\">sayhi</span>()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"9-抽象类\"><a href=\"#9-抽象类\" class=\"headerlink\" title=\"9.抽象类\"></a>9.抽象类</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象类和抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">//抽象类包含抽象方法和实例方法，抽象类不可以被实例化</span></span><br><span class=\"line\"><span class=\"comment\">//作用化-为了让子类进行实例化以及实现内部的抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">//抽象方法不能具体实现</span></span><br><span class=\"line\"><span class=\"comment\">//抽象类中的属性和方法都是为子类服务</span></span><br><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  abstract <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">      abstract <span class=\"attr\">name</span>:string;</span><br><span class=\"line\">    <span class=\"comment\">// abstract eat(): void &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(&#x27;all-animals-eat&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    abstract <span class=\"title function_\">eat</span>()</span><br><span class=\"line\">    <span class=\"title function_\">run</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;非抽象方法，run&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayhi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hi-evnery&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//   const ani:Animal = new Animal()  //</span></span><br><span class=\"line\"><span class=\"comment\">//   抽象类并不能被直接实例化</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//重新实现抽象类中的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//此时这个方法是当前dog的实例方法</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:string = <span class=\"string\">&quot;pet&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>+<span class=\"string\">&#x27;-dog-eat&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> erdog = <span class=\"keyword\">new</span> <span class=\"title function_\">dog</span>();</span><br><span class=\"line\">erdog.<span class=\"title function_\">eat</span>()</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-函数\"><a href=\"#10-函数\" class=\"headerlink\" title=\"10.函数\"></a>10.函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//函数</span></span><br><span class=\"line\">  <span class=\"comment\">//封装一些重复使用的代码，在需要时候直接调用既可</span></span><br><span class=\"line\">  <span class=\"comment\">//函数声明-表达式-返回值</span></span><br><span class=\"line\">  <span class=\"comment\">//ts中的书写可以定义参数类型</span></span><br><span class=\"line\">  <span class=\"comment\">//ts支持函数重载</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x: number, y: number</span>): number &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// function add(x:number):number&#123;&#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>), <span class=\"string\">&quot;add-result&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">//函数的完整写法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">addone</span>: <span class=\"function\">(<span class=\"params\">x: number, y: number</span>) =&gt;</span> number = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: number,</span></span><br><span class=\"line\"><span class=\"params\">    y: number</span></span><br><span class=\"line\"><span class=\"params\">  </span>): number &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"11-可选参数和默认参数\"><a href=\"#11-可选参数和默认参数\" class=\"headerlink\" title=\"11.可选参数和默认参数\"></a>11.可选参数和默认参数</h3><ol>\n<li>webpack 入口文件超过大小限制</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">performance</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">hints</span>: <span class=\"string\">&quot;warning&quot;</span>, <span class=\"comment\">// 枚举</span></span><br><span class=\"line\">    <span class=\"attr\">maxAssetSize</span>: <span class=\"number\">30000000</span>, <span class=\"comment\">// 整数类型（以字节为单位）</span></span><br><span class=\"line\">    <span class=\"attr\">maxEntrypointSize</span>: <span class=\"number\">50000000</span>, <span class=\"comment\">// 整数类型（以字节为单位）</span></span><br><span class=\"line\">    <span class=\"attr\">assetFilter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">assetFilename</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 提供资源文件名的断言函数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> assetFilename.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&quot;.css&quot;</span>) || assetFilename.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&quot;.js&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"12-剩余参数\"><a href=\"#12-剩余参数\" class=\"headerlink\" title=\"12.剩余参数\"></a>12.剩余参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数剩余参数</span></span><br><span class=\"line\">    <span class=\"comment\">//剩余参数是放在函数声明的时候所有的参数的最后</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">showMsg</span>(<span class=\"params\">str:string,...args:string[]</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str)  <span class=\"comment\">//a</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args) <span class=\"comment\">//剩余参数</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"title function_\">showMsg</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"13-函数重载\"><a href=\"#13-函数重载\" class=\"headerlink\" title=\"13.函数重载\"></a>13.函数重载</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ts的函数重载不同于其他语言</span></span><br><span class=\"line\">    <span class=\"comment\">//函数重载声明</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x:number,y:number</span>):number</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x:string,y:string</span>):string</span><br><span class=\"line\">    <span class=\"comment\">//未被声明的则会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x: number|string, y: number|string</span>): number|string &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_\">typeof</span>(x)==<span class=\"string\">&#x27;number&#x27;</span>&amp;&amp;<span class=\"title function_\">typeof</span>(y)==<span class=\"string\">&#x27;number&#x27;</span>)</span><br><span class=\"line\">        &#123;<span class=\"keyword\">return</span> x + y;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_\">typeof</span>(x)==<span class=\"string\">&#x27;string&#x27;</span>&amp;&amp;<span class=\"title function_\">typeof</span>(y)==<span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> +x+y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>), <span class=\"string\">&quot;add-result&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//7</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;诸葛&#x27;</span>, <span class=\"string\">&#x27;亮&#x27;</span>), <span class=\"string\">&quot;add-result&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//34</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"number\">4</span>), <span class=\"string\">&quot;add-result&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//underfinded</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"14-多个泛型参数的函数\"><a href=\"#14-多个泛型参数的函数\" class=\"headerlink\" title=\"14.多个泛型参数的函数\"></a>14.多个泛型参数的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> getMsg&lt;k, v&gt;(<span class=\"attr\">value1</span>: k, <span class=\"attr\">value2</span>: v): [ k, v ] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [value1, value2];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMsg</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMsg</span>(<span class=\"number\">1</span>,<span class=\"literal\">true</span>))</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"15-泛型接口\"><a href=\"#15-泛型接口\" class=\"headerlink\" title=\"15.泛型接口\"></a>15.泛型接口</h3><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><p>typeScript作为js的超集，主要是加了类型限制，对于面向对象的使用多于js,学习ts是后面学习node框架koa,express,nest等的基础</p>\n<p>[toc]</p>\n<h3 id=\"1-类型\"><a href=\"#1-类型\" class=\"headerlink\" title=\"1.类型\"></a>1.类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:number</span><br><span class=\"line\"><span class=\"comment\">// a为number，以后的使用a的值只能为数字</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>ts-可以编译为任何js版本 tsc</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>:boolean = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>如果变量声明时，直接赋值（同时进行），它可以自动判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//sum(123,456)</span></span><br><span class=\"line\"><span class=\"comment\">//sum(&#x27;123&#x27;,456)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//改善</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a:number,b:number</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">123</span>,<span class=\"string\">&#x27;456&#x27;</span>) <span class=\"comment\">//提示错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数返回值的类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a:number,b:number</span>):number &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>类型的都为小写 number,boolean,string</p>\n<ul>\n<li>１．number 任意数字</li>\n<li>２．string 任意字符串</li>\n<li>３．boolean 任意布尔值</li>\n<li>４.字面量类型说明</li>\n</ul>\n<p>​    </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">//赋值一次不能修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以使用｜来连接多个类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:boolean|string</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>５．any</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表示可以为任意类型－</span></span><br><span class=\"line\"><span class=\"keyword\">let</span>　ｄ　<span class=\"comment\">//－－变量只声明不赋值，自动判断为ａｎｙ</span></span><br><span class=\"line\"><span class=\"comment\">//设置ａｎｙ后，相当于关闭类型检测</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">d</span>:any</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>:string</span><br><span class=\"line\">s = d  -- <span class=\"attr\">s</span>:string</span><br><span class=\"line\">s = d  -- s将变为any</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>６．unknown – 效果和any一致</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//any 类型的变量可以赋值给任意类型的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">s</span>:string</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">d</span>:any</span><br><span class=\"line\">s = d -- s变为any</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>:unkonwn</span><br><span class=\"line\">n = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">s = n <span class=\"comment\">//将一个unkonwn赋给string--报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解决</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> s===<span class=\"string\">&quot;string&quot;</span>)&#123;</span><br><span class=\"line\">\ts = n</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>为一个安全的ａｎｙ，不能赋值给其他变量</strong></p>\n</li>\n<li><p>7.类型断言</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//告诉解析器变量的实际类型</span></span><br><span class=\"line\">s = e <span class=\"keyword\">as</span> string</span><br><span class=\"line\">s = &lt;string&gt;e;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>8.void-函数返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num</span>):number&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">nunm</span>):number|boolean&#123;&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num</span>):<span class=\"keyword\">void</span> &#123;&#125;   <span class=\"comment\">//没有返回值</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>9.never–永远不会返回结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>):never&#123;&#125; </span><br><span class=\"line\"><span class=\"comment\">//甚至不需要return</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>):<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>10.object - js一切皆对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:object;</span><br><span class=\"line\">a = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//限制对象里面的属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:&#123;<span class=\"attr\">name</span>:string&#125;;</span><br><span class=\"line\"><span class=\"comment\">//对象b必须有一个属性name-类型为string</span></span><br><span class=\"line\">b = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;     <span class=\"comment\">//结构和上面一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加上一个？表示为可选属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:&#123;<span class=\"attr\">name</span>:string,age?:number&#125;</span><br><span class=\"line\">b = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\">b = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"comment\">//一个必须属性，其他根据需要来</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"attr\">name</span>:string,[<span class=\"attr\">propName</span>:string]:any&#125;;</span><br><span class=\"line\"><span class=\"comment\">//propName可以为任意字段</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"attr\">name</span>:string,[<span class=\"attr\">name</span>:string]:any&#125;;</span><br><span class=\"line\">       </span><br><span class=\"line\">c = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">c = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;&#x27;</span>，<span class=\"attr\">email</span>:<span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"comment\">//限制函数类型</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> <span class=\"attr\">d</span>: <span class=\"function\">(<span class=\"params\">a:number, b:number</span>)=&gt;</span>number</span><br><span class=\"line\"> <span class=\"comment\">//两参数一返回值</span></span><br><span class=\"line\"> d = <span class=\"keyword\">function</span> (<span class=\"params\">n1:string,n2:string</span>):number&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>11.array</p>\n<p>限定数组里面值的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">e</span>:string[];</span><br><span class=\"line\">e = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;s&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">f</span>:number[]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">g</span>:array&lt;number&gt;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>12.tuple 元组</p>\n<p>固定长度的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">h</span>:[string,string]</span><br><span class=\"line\">h = [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">123</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">h</span>:[number,number]</span><br><span class=\"line\">h = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>13.enum 枚举</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i :&#123;<span class=\"attr\">name</span>:string,<span class=\"attr\">gender</span>:string&#125;</span><br><span class=\"line\">i = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;孙悟空&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&#x27;男&#x27;</span> <span class=\"comment\">//固定的male</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//let i :&#123;name:string,gender:1|0&#125;</span></span><br><span class=\"line\">=&gt;&#123;</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum <span class=\"title class_\">Gender</span> = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Male</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Female</span> = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">i</span>:&#123;<span class=\"attr\">naem</span>:string,<span class=\"attr\">gender</span>:<span class=\"title class_\">Gender</span>&#125;</span><br><span class=\"line\">i = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;孙悟空&#x27;</span>，</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"title class_\">Gender</span>.<span class=\"property\">Male</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>数组可以为-any任意类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:ant = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"literal\">true</span>,<span class=\"string\">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可选参数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myone</span>(<span class=\"params\">age:string=<span class=\"string\">&#x27;zhangsan&#x27;</span>,x?:string,</span>):string&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age+x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可选参数需要写在必选参数之后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">myone</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">myone</span>(<span class=\"string\">&#x27;wangwu&#x27;</span>,<span class=\"string\">&#x27;heihei&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>shift + space 切换全半角</strong></p>\n<p><img src=\"C:\\Users\\admin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220506112117432.png\" alt=\"image-20220506112117432\"></p>\n<h3 id=\"1-ts编译事项\"><a href=\"#1-ts编译事项\" class=\"headerlink\" title=\"1.ts编译事项\"></a>1.ts编译事项</h3><ol>\n<li><p>ts是不不可以直接使用的，需要编译为js才能使用</p>\n</li>\n<li><p>ts文件里面的形参，如果使用了某个类型进行修饰，那么最终在编译后的js文件里面，是没有这个类型的。</p>\n</li>\n<li><p>ts文件中的变量使用的let修饰，编译的js文件中的修饰符就变成了var</p>\n</li>\n<li><p>vs-code 自动编译</p>\n</li>\n<li><p><strong>接口的定义与使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接口-一种能力一种约束</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  interface <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: number;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;这里是2.ts&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\">person: Person</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span> + <span class=\"string\">&quot; &quot;</span> + person.<span class=\"property\">age</span>, <span class=\"string\">&quot;-n-a-m-e&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;wangwu&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//将接口接口作为函数参数</span></span><br><span class=\"line\">  <span class=\"title function_\">a</span>(person);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>ts里面使用一个类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;class-ts&quot;</span>);</span><br><span class=\"line\">  interface <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: string;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//定义一个类</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">PersonOne</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义公共的字段</span></span><br><span class=\"line\">    public <span class=\"attr\">firstname</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">lastname</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">fullname</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">firstname: string, lastname: string</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">firstname</span> = firstname;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">lastname</span> = lastname;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fullname</span> = firstname + lastname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//实例化对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">PersonOne</span>(<span class=\"string\">&quot;诸葛&quot;</span>, <span class=\"string\">&quot;孔明&quot;</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-webpack-打包ts\"><a href=\"#2-webpack-打包ts\" class=\"headerlink\" title=\"2.webpack 打包ts\"></a>2.webpack 打包ts</h3><ol>\n<li><p>初始化npm init -y</p>\n</li>\n<li><p>初始化tsc</p>\n</li>\n<li><p>命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack-cli</span><br><span class=\"line\">npm i webpack-dev-server</span><br><span class=\"line\">npm i html-webpack-plugin clean-webpack-plugin</span><br><span class=\"line\">npm i ts-loader</span><br><span class=\"line\">npm i cross-env</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>**报错1 **</p>\n<p>webpack报错 TypeError: Cannot read property ‘tap‘ of undefined</p>\n<p>原因：全局和局部版本不一样</p>\n<hr>\n<p>webpack 配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleanWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./1.ts&#x27;</span>, <span class=\"comment\">// 注意这里原来是 &#x27;./src/index.js&#x27;，需要改成 ts 结尾！</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: <span class=\"string\">&#x27;ts-loader&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.tsx&#x27;</span>, <span class=\"string\">&#x27;.ts&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[contenthash:8].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>:<span class=\"string\">&#x27;./a.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// new CleanWebpackPlugin()</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>clean-webpack-plugin写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">CleanWebpackPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>()</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleanWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>([<span class=\"string\">&#x27;dist&#x27;</span>])</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleanWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>([<span class=\"string\">&#x27;dist&#x27;</span>], &#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;../&#x27;</span>),   <span class=\"comment\">//根目录</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>“ –config build&#x2F;webpack.config.js”配置</strong></p>\n<p>配置配置文件的路径</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack默认使用同目录下的webpack.config.js文件,也可以自定义指定文件位置</span><br><span class=\"line\">在package.json文件中配置:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-ts接口\"><a href=\"#3-ts接口\" class=\"headerlink\" title=\"3.ts接口\"></a>3.ts接口</h3><p>&#x2F;<em>是对对象的状态（属性）和行为（方法）的抽象（描述）</em>&#x2F;</p>\n<p>&#x2F;<em>是一种类型，是一种规范，是一种规则，是一个能力，是一种约束</em>&#x2F;</p>\n<p>&#x2F;&#x2F;<em>定义一个接口，该接口作为person对象的限制使用，限制或者约束该对象中的属性数据</em>&#x2F;&#x2F;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">      readonly <span class=\"attr\">id</span>:number,</span><br><span class=\"line\">      <span class=\"attr\">name</span>:string,</span><br><span class=\"line\">      <span class=\"attr\">age</span>:number,</span><br><span class=\"line\">      sex?:string</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"attr\">kite</span>:<span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">&#x27;hurry&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">age</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;公&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//readonly:只读属性</span></span><br><span class=\"line\">    <span class=\"comment\">//  ?  非必要/可选</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-函数类型\"><a href=\"#4-函数类型\" class=\"headerlink\" title=\"4.函数类型\"></a>4.函数类型</h3><p><em>为了使用接口表示函数类型，我们需要给接口定义一个调用签名</em></p>\n<p><em>它就是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数类型-通过接口的方式作为函数的类型来使用</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个接口，用来作为某个函数使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">interface fnsign&#123;</span><br><span class=\"line\">      <span class=\"comment\">//签名</span></span><br><span class=\"line\">      <span class=\"comment\">//定义一个调用签名</span></span><br><span class=\"line\">      (<span class=\"attr\">source</span>:string,<span class=\"attr\">subString</span>:string):boolean</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"attr\">fn</span>:fnsign = <span class=\"keyword\">function</span>(<span class=\"params\">source:string,subString:string</span>):boolean&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> source.<span class=\"title function_\">search</span>(subString)&gt; -<span class=\"number\">1</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-类-class\"><a href=\"#5-类-class\" class=\"headerlink\" title=\"5.类-class\"></a>5.类-class</h3><p><em>定义一个类，这个类的类型就是上面定义的接口，实际上也可以理解为，ifly接口约束了当前的这个person类</em></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;04-class-ts&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">interface</span> IFLY&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fly</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"variable constant_\">IFLY</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fly</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;super cam flu ,OMG!&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> one = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\">    one.<span class=\"title function_\">fly</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>编译打包问题</strong></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新增文件在服务器不会在页面实现</span><br><span class=\"line\">需要重新打包--npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>因为使用<code>webpack-dev-server</code>是webpack5以前的方式了，如果使用，就会在<code>npm run start</code>运行时发生报错，错误信息为： &#96;Error: Cannot find module ‘webpack-cli&#x2F;bin&#x2F;config-yargs’</p>\n<h4 id=\"打包ts原理\"><a href=\"#打包ts原理\" class=\"headerlink\" title=\"打包ts原理\"></a>打包ts原理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置一个tsconfig.<span class=\"property\">js</span></span><br><span class=\"line\">当ts文件改变时，就会自动编译ts到一个指定目录</span><br><span class=\"line\">在index.<span class=\"property\">js</span>中引入ts打包后的路径</span><br><span class=\"line\"></span><br><span class=\"line\">当ts文件修改时，会自动对其编译，造成打包后的js文件改变，js文件一旦改变，webpack就会立即打包</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>ps:<strong>类可以通过当前接口的方式，定义当前这个类的类型</strong></p>\n<p><em>类可以实现一个接口，类可以实现多个接口，要注意，接口中的内容都要真正实现</em></p>\n<p>那么可以定义一个类，继承其他需要的接口，然后再继承这个接口。</p>\n<p><strong>接口和接口之间叫做继承</strong></p>\n<p><strong>类和接口之间叫实现</strong></p>\n<p>&#x2F;&#x2F;类：可以理解为模板。通过模板可以实例化对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Fish</span>&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:string</span><br><span class=\"line\">        <span class=\"attr\">age</span>:number</span><br><span class=\"line\">        <span class=\"attr\">size</span>:string</span><br><span class=\"line\">        <span class=\"attr\">type</span>:string</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\">name:string=<span class=\"string\">&#x27;汗汗&#x27;</span>,age:number,size:string,type:string</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = size</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = type</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">say</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>+<span class=\"string\">&#x27; &#x27;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>+<span class=\"string\">&#x27; &#x27;</span>+ <span class=\"variable language_\">this</span>.<span class=\"property\">size</span>+<span class=\"string\">&#x27; &#x27;</span>+ <span class=\"variable language_\">this</span>.<span class=\"property\">type</span>+<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> big = <span class=\"keyword\">new</span> <span class=\"title class_\">Fish</span>(<span class=\"string\">&#x27;&#x27;</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;big&#x27;</span>,<span class=\"string\">&#x27;鲫鱼&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(big.<span class=\"title function_\">say</span>())</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"6-类的继承\"><a href=\"#6-类的继承\" class=\"headerlink\" title=\"6.类的继承\"></a>6.类的继承</h3><p><em>继承：类与类之间的关系</em></p>\n<p><em>继承后类与类的叫法</em></p>\n<p>A类继承了B这个类，那么此时A类叫子类，B叫基类</p>\n<p>子类— &gt; 派生类</p>\n<p>基类 —&gt; 超类（父类</p>\n<h3 id=\"7-存取器\"><a href=\"#7-存取器\" class=\"headerlink\" title=\"7.存取器\"></a>7.存取器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//存取器-有效的控制对对象中成员的访问</span></span><br><span class=\"line\">  <span class=\"comment\">//外部可以传入姓氏和名字，同时使用set,get控制姓名的属性，外部也可以进行修改</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">_name</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">_lastName</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: string, lastName: string</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_lastName</span> = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">set</span> <span class=\"title function_\">name</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = val</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> peter = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;东方&quot;</span>, <span class=\"string\">&quot;不败&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(peter, <span class=\"string\">&quot;111&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(peter.<span class=\"property\">name</span>, <span class=\"string\">&quot;peter-name&quot;</span>);</span><br><span class=\"line\">  peter.<span class=\"property\">name</span> = <span class=\"string\">&quot;西方&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(peter.<span class=\"property\">name</span>, <span class=\"string\">&quot;peter-name&quot;</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-静态成员\"><a href=\"#8-静态成员\" class=\"headerlink\" title=\"8.静态成员\"></a>8.静态成员</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过static修饰的属性或者方法，那么就是静态的属性及静态的方法，也称作未静态成员</span></span><br><span class=\"line\"><span class=\"comment\">//静态成员在使用的时候是使用类目的这种语法来调用的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//static namea 爆红</span></span><br><span class=\"line\"><span class=\"comment\">//类中默认有一个内置的namea属性</span></span><br><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Person7</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"attr\">namea</span>:string;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\">namea:string</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//当namea被static修饰之后。namea是静态属性，不能通过实例对象直接调用静态属性来使用</span></span><br><span class=\"line\">            <span class=\"comment\">//通过类名.静态属性的方式来访问该成员变量</span></span><br><span class=\"line\">            <span class=\"comment\">//通过类目.静态属性的方式来修改成员变量</span></span><br><span class=\"line\">            <span class=\"comment\">//通过类名.静态方法的方式调用内部的属性和方法</span></span><br><span class=\"line\">            <span class=\"comment\">//构造函数不能使用static-- 构造函数不能使用static来修饰</span></span><br><span class=\"line\">            <span class=\"comment\">//优点：可以不实例化对象来调用类的属性和方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// this.namea = namea;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">sayhi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(this.namea,&#x27;-t-h-i-s-namea---:&#x27;)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sweet = <span class=\"keyword\">new</span> <span class=\"title class_\">Person7</span>(<span class=\"string\">&#x27;霄汉&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person7</span>.<span class=\"property\">namea</span>,<span class=\"string\">&#x27;n-amea&#x27;</span>)   <span class=\"comment\">//underfinded</span></span><br><span class=\"line\">    sweet.<span class=\"title function_\">sayhi</span>()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"9-抽象类\"><a href=\"#9-抽象类\" class=\"headerlink\" title=\"9.抽象类\"></a>9.抽象类</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象类和抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">//抽象类包含抽象方法和实例方法，抽象类不可以被实例化</span></span><br><span class=\"line\"><span class=\"comment\">//作用化-为了让子类进行实例化以及实现内部的抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">//抽象方法不能具体实现</span></span><br><span class=\"line\"><span class=\"comment\">//抽象类中的属性和方法都是为子类服务</span></span><br><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  abstract <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">      abstract <span class=\"attr\">name</span>:string;</span><br><span class=\"line\">    <span class=\"comment\">// abstract eat(): void &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     console.log(&#x27;all-animals-eat&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    abstract <span class=\"title function_\">eat</span>()</span><br><span class=\"line\">    <span class=\"title function_\">run</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;非抽象方法，run&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayhi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hi-evnery&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//   const ani:Animal = new Animal()  //</span></span><br><span class=\"line\"><span class=\"comment\">//   抽象类并不能被直接实例化</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//重新实现抽象类中的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//此时这个方法是当前dog的实例方法</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:string = <span class=\"string\">&quot;pet&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>+<span class=\"string\">&#x27;-dog-eat&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> erdog = <span class=\"keyword\">new</span> <span class=\"title function_\">dog</span>();</span><br><span class=\"line\">erdog.<span class=\"title function_\">eat</span>()</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-函数\"><a href=\"#10-函数\" class=\"headerlink\" title=\"10.函数\"></a>10.函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//函数</span></span><br><span class=\"line\">  <span class=\"comment\">//封装一些重复使用的代码，在需要时候直接调用既可</span></span><br><span class=\"line\">  <span class=\"comment\">//函数声明-表达式-返回值</span></span><br><span class=\"line\">  <span class=\"comment\">//ts中的书写可以定义参数类型</span></span><br><span class=\"line\">  <span class=\"comment\">//ts支持函数重载</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x: number, y: number</span>): number &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// function add(x:number):number&#123;&#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>), <span class=\"string\">&quot;add-result&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">//函数的完整写法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">addone</span>: <span class=\"function\">(<span class=\"params\">x: number, y: number</span>) =&gt;</span> number = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: number,</span></span><br><span class=\"line\"><span class=\"params\">    y: number</span></span><br><span class=\"line\"><span class=\"params\">  </span>): number &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"11-可选参数和默认参数\"><a href=\"#11-可选参数和默认参数\" class=\"headerlink\" title=\"11.可选参数和默认参数\"></a>11.可选参数和默认参数</h3><ol>\n<li>webpack 入口文件超过大小限制</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">performance</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">hints</span>: <span class=\"string\">&quot;warning&quot;</span>, <span class=\"comment\">// 枚举</span></span><br><span class=\"line\">    <span class=\"attr\">maxAssetSize</span>: <span class=\"number\">30000000</span>, <span class=\"comment\">// 整数类型（以字节为单位）</span></span><br><span class=\"line\">    <span class=\"attr\">maxEntrypointSize</span>: <span class=\"number\">50000000</span>, <span class=\"comment\">// 整数类型（以字节为单位）</span></span><br><span class=\"line\">    <span class=\"attr\">assetFilter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">assetFilename</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 提供资源文件名的断言函数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> assetFilename.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&quot;.css&quot;</span>) || assetFilename.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&quot;.js&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"12-剩余参数\"><a href=\"#12-剩余参数\" class=\"headerlink\" title=\"12.剩余参数\"></a>12.剩余参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数剩余参数</span></span><br><span class=\"line\">    <span class=\"comment\">//剩余参数是放在函数声明的时候所有的参数的最后</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">showMsg</span>(<span class=\"params\">str:string,...args:string[]</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str)  <span class=\"comment\">//a</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args) <span class=\"comment\">//剩余参数</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"title function_\">showMsg</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"13-函数重载\"><a href=\"#13-函数重载\" class=\"headerlink\" title=\"13.函数重载\"></a>13.函数重载</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ts的函数重载不同于其他语言</span></span><br><span class=\"line\">    <span class=\"comment\">//函数重载声明</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x:number,y:number</span>):number</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x:string,y:string</span>):string</span><br><span class=\"line\">    <span class=\"comment\">//未被声明的则会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x: number|string, y: number|string</span>): number|string &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_\">typeof</span>(x)==<span class=\"string\">&#x27;number&#x27;</span>&amp;&amp;<span class=\"title function_\">typeof</span>(y)==<span class=\"string\">&#x27;number&#x27;</span>)</span><br><span class=\"line\">        &#123;<span class=\"keyword\">return</span> x + y;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_\">typeof</span>(x)==<span class=\"string\">&#x27;string&#x27;</span>&amp;&amp;<span class=\"title function_\">typeof</span>(y)==<span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> +x+y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>), <span class=\"string\">&quot;add-result&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//7</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;诸葛&#x27;</span>, <span class=\"string\">&#x27;亮&#x27;</span>), <span class=\"string\">&quot;add-result&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//34</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"number\">4</span>), <span class=\"string\">&quot;add-result&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//underfinded</span></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"14-多个泛型参数的函数\"><a href=\"#14-多个泛型参数的函数\" class=\"headerlink\" title=\"14.多个泛型参数的函数\"></a>14.多个泛型参数的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> getMsg&lt;k, v&gt;(<span class=\"attr\">value1</span>: k, <span class=\"attr\">value2</span>: v): [ k, v ] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [value1, value2];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMsg</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMsg</span>(<span class=\"number\">1</span>,<span class=\"literal\">true</span>))</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"15-泛型接口\"><a href=\"#15-泛型接口\" class=\"headerlink\" title=\"15.泛型接口\"></a>15.泛型接口</h3><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"ES6概述","author":"codefish","date":"2022-03-07T02:16:41.000Z","top_img":"/img/5.jpg","cover":"/img/5.jpg","_content":"### ES6\n\nES6 内容补充，当看到一个没见过或者不熟悉的语法时，无法拒绝对于它的学习\n\n#### 1.箭头函数\n\n​\t本质是一个语法糖\n\n```js\nfunction() {}\n\n() => {}\n\n//1.如果箭头函数只有一个参数，则括号可以省略\nitem => {}   //形如\n//2如果函数体只有一条语句，则可以省略{}括号\n() => return 'hello'\n\n(a, b) => a + b\n\n(a) => {\n  a = a + 1\n  return a\n}\n\n\n\n//如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：\n// SyntaxError:\nx => { foo: x }\n//因为和函数体的{ ... }有语法冲突，所以要改为：\n\n// ok:\nx => ({ foo: x })\n\n\n\n\n\n```\n\n(1). 箭头函数this为父作用域的this，不是调用时的this\n箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。\n普通函数的this指向调用它的那个对象。\n\n(2). 箭头函数不能作为构造函数，不能使用new\n\n(3). 箭头函数没有arguments，caller，callee\n\n箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。\n\n箭头函数中要想接收不定参数，应该使用rest参数...解决。\n\n (4). 箭头函数通过call和apply调用，不会改变this指向，只会传入参数\n\n(5). 箭头函数没有原型属性\n\n(6). 箭头函数不能作为Generator函数，不能使用yield关键字\n\n(7). 箭头函数返回对象时，要加一个小括号\n\n(8). 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法\n\n(9). 多重箭头函数就是一个高阶函数，相当于内嵌函数\n\n**ps:注意**\n\n​\t若箭头函数只有一个return语句，可以省略return 和 {};如果想加上{}的话，必须也加上return语句\n\n```js\n(10). 箭头函数常见错误\nlet a = {\n  foo: 1,\n  bar: () => console.log(this.foo)\n}\n\na.bar()  //undefined\nbar函数中的this指向父作用域，而a对象没有作用域，因此this不是a，打印结果为undefined\n\nfunction A() {\n  this.foo = 1\n}\n\nA.prototype.bar = () => console.log(this.foo)\nlet a = new A()\na.bar()  //undefined\n原型上使用箭头函数，this指向是其父作用域，并不是对象a，因此得不到预期结果\n\n3.一些this的指向实例\nvar obj = {\n  birth: 1990,\n  getAge: function(){\n    console.log(new Date().getFullYear() - this.birth); //this指向obj对象\n  },\n}\nobj.getAge(); // 29\n\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = function () {\n            return new Date().getFullYear() - this.birth; // this指向window或undefined\n        };\n        return fn();\n    }\n};\nobj.getAge();// NaN\n\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象\n        return fn();\n    }\n};\nobj.getAge(); // 29\n\nvar obj = {\n       getAge: () => {\n            console.log(this); // window\n        }\n    };\n\nobj.getAge(); //window\n作为对象的属性时，this的指向则不再是对象本身了，箭头函数捕获的是obj{}这个对象的环境，然后这个环境的this指向的是window\n```\n\n\n\n#### 2. let 和 const 命令\n\nlet 声明的变量只在**块级作用域**有效。\n\n- 只能声明一次\n- 无变量声明提升\n- 块级作用域\n\n会形成暂时性死区  --->  **声明之前无法使用，声明之后不能重新定义**\n\n\n\nconst 声明的变量 为一个常量变量\n\n- 声明之后只读不可修改\n  - 只能声明一次\n  - 无变量声明提升\n  - 块级作用域\n    - 相当于在栈区上锁，当其为引用数据时候，只要不改地址就不会报错（即赋值）\n\n\n\n- **在ES5 中未经声明的变量会挂载到window ，归 window 所有。而let 和 const 则不会自动挂载到 window 上**\n\n\n\n#### 3.重绘和重排\n\n重绘（repaint 或 redraw）：**当盒子的位置、大小以及其他属性，例如颜色、字体大小**等 都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面 上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根**据元素的新属性重 新绘制，使元素呈现新的外观。** 触发重绘的条件：改变元素外观属性。如：color，background-color 等。 注意：table 及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，**比 同等元素要多花两倍时间，这就是我们尽量避免使用 table 布局页面的原因之一。** \n\n重排（重构/回流/reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局， 隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是 在页面第一次加载的时候。 **重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新 构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称 为重绘。所以，重排必定会引发重绘，但重绘不一定会引发重排。**\n\n\n\n#### 4.rest 参数\n\n概述：\n\n   Rest就是为解决传入的参数数量不一定， rest parameter(Rest 参数) 本身就是数组，数组的相关的方法都可以用。\n\n```javascript\nfunction f(a, b, ...theArgs) {\n  // ...\n}\n```\n\n\n\n描述\n\n- 区分rest参数和 参数对象\n  rest参数不会为每个变量给一个单独的名称，参数对象包含所有参数传递给函数\n  参数对象不是真正的数组，rest参数是真实的数组实例。例如数组sort、map、forEach、pop的方法都可以直接使用\n  参数对象有他自己额外的特性（例如callee 属性）\n\n- ```js\n  \n  //以前函数\n  function f(a, b) {\n    var args = Array.prototype.slice.call(arguments, f.length);\n   \n    // …\n  }\n  // 等效于现在\n  function f(a, b, ...args) {}\n  ```\n\n- ```js\n  \n  function fun1(...theArgs) {\n    console.log(theArgs.length);\n  }\n   \n  fun1();  // 0\n  fun1(5); // 1\n  fun1(5, 6, 7); // 3\n  \n  ```\n\n- ````js\n  排序\n  function sortRestArgs(...theArgs) {\n    var sortedArgs = theArgs.sort();\n    return sortedArgs;\n  }\n  //好像一位和两位混合不能进行排序，这需要看一下为甚？主要第一个为主\n  console.log(sortRestArgs(5, 3, 7, 1)); // shows 1, 3, 5, 7\n  //参数对象arguments不能排序\n  ````\n\n- 箭头函数通过rest查看参数\n\n\n\n#### 5.严格模式\n\n严格模式主要有以下限制。\n\n- 变量必须声明后再使用\n- 函数的参数不能有同名属性，否则报错\n- 不能使用with语句\n- 不能对只读属性赋值，否则报错\n- 不能使用前缀0表示八进制数，否则报错\n- 不能删除不可删除的属性，否则报错\n- 不能删除变量delete prop，会报错，只能删除属性delete global[prop]\n- eval不会在它的外层作用域引入变量\n- eval和arguments不能被重新赋值\n- arguments不会自动反映函数参数的变化\n- 不能使用arguments.callee\n- 不能使用arguments.caller\n- 禁止this指向全局对象\n- 不能使用fn.caller和fn.arguments获取函数调用的堆栈\n- 增加了保留字（比如protected、static和interface）\n\n- 其中，尤其需要注意this的限制。ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。\n\n\n\n```txt\n 1. 块级函数\n es5中严格模式下禁止声明块级函数，而在es6的严格模式中可以声明块级函数，并可以在块级作用\n 2. 箭头函数\n\n箭头函数是es6中新增的一种特殊函数，不管是否处于严格模式下，箭头函数的参数都不能有同名的。而ES5中，只有在严格模式下函数的参数才不能有同名\n\n3.字面量对象重复属性问题\n\nes5的严格模式中，如果对象属性重名则会报错，es6则不管是不是严格模式，如果有同名属性，则后面的属性覆盖前面的\n\n4.模块模式\n\n采用es6的模块化开发时，代码自动运行在严格模式下且没有任何办法跳出严格模式\n\n5.类模式\n\n在es6中不管是类声明还是类表达式，其内部使用的都是严格模式。\n```\n\n\n\n#### 6.Symbol\n\n​\tES6 新增 一种数据类型Symbol，专门为了给对象的key赋值，这样对象的key不相同，则值不会被覆盖。\n\n​\t它的功能类似于一种标识唯一性的ID。通常情况下，我们可以通过调用Symbol()函数来创建一个Symbol实例：\n\n```js\nlet s1 = Symbol()\n\t\n\t//或者，你也可以在调用Symbol()函数时传入一个可选的字符串参数，相当于给你创建的Symbol实例一个描述信息：\n\tlet s2 = Symbol('another symbol')\n```\n\n**Symbol 方法接收一个参数，表示对生成的 symbol 值的一种描述**\n\nObject.keys( )  不能拿到symbol\n\nReflect.ownkeys( ) 可以拿到symbol\n\nSymbol.for 方法可以检测上下文中是否已经存在使用该方法且相同参数创建的 symbol 值，如果存在则返回已经存在的值，如果不存在则新建。\n\n```js\nconst s1 = Symbol.for('foo');\nconst s2 = Symbol.for('foo');\n\nconsole.log(s1 === s2); // true\n复制代码\n```\n\nSymbol.keyFor 方法返回一个使用 Symbol.for 方法创建的 symbol 值的 key\n\n```js\nconst foo = Symbol.for(\"foo\");\nconst key = Symbol.keyFor(foo);\n\nconsole.log(key) // \"foo\"\n```\n\n`Symbol.for()`与`Symbol()`这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。`Symbol.for()`不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的`key`是否已经存在，如果不存在才会新建一个值。比如，如果你调用`Symbol.for(\"cat\")`30 次，每次都会返回同一个 Symbol 值，但是调用`Symbol(\"cat\")`30 次，会返回 30 个不同的 Symbol 值。\n\n\n\n#### 7.模板字符串\n\n在ES6之前，我们只能用加号连接变量表达式，代码如下：\n\n```javascript\nvar a = 20;\nvar b = 10;\nvar c = \"JavaScript\";\nvar str = \"My age is \" + (a + b) + \" and I love \" + c;\nconsole.log(str);\n```\n\n使用模板字符串嵌入表达式，代码如下：\n\n```javascript\nconst a = 20;\nconst b = 10;\nconst c = \"JavaScript\";\nconst str = `My age is ${a+b} and I love ${c}`;\nconsole.log(str);\n```\n\n多行字符串\n\nEs6的模板字符串给我们提供了一种创建多行文本字符串的新方法。在ES6之前我们只能使用\"\\n“在字符串中进行换行，代码如下：\n\n```javascript\nconsole.log(\"1\\n2\\n3\");\n//output\n//1\n//2\n//3\n```\n\n在es6中，我们可以直接输入回车进行换行，如下段代码所示：\n\n```javascript\nconsole.log(`1\n2\n3`);\n```\n\n原始字符串(Raw strings)\n\n原始字符串是一个普通字符串，其中不会解释转义字符。我们可以使用模板字符串创建原始字符串。我们可以使用String.raw来获取原始字符串，代码如下：\n\n```javascript\nlet s = String.raw `xy\\n${ 1 + 1 }z`;\nconsole.log(s); \n//output \"xy\\n2z\"\n```\n\n- 任何以\\u开头的内容都将被视为Unicode转义\n- 以\\x开头的任何内容都将被视为十六进制转义\n- 任何以\\开头然后跟着一个数字将被视为八进制转义\n\nJavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。\n\n- U+005C：反斜杠（reverse solidus)\n- U+000D：回车（carriage return）\n- U+2028：行分隔符（line separator）\n- U+2029：段分隔符（paragraph separator）\n- U+000A：换行符（line feed）\n\n#### 8.运算符\n\n拓展运算符\n\n- ES2016 新增了一个指数运算符（`**`）。\n\n  ```javascript\n  2 ** 2 // 4\n  2 ** 3 // 8\n  ```\n\n逻辑赋值运算符\n\n```javascript\n// 或赋值运算符\nx ||= y\n// 等同于\nx || (x = y)\n\n// 与赋值运算符\nx &&= y\n// 等同于\nx && (x = y)\n\n// Null 赋值运算符\nx ??= y\n// 等同于\nx ?? (x = y)\n```\n\n**但是只有运算符左侧的值为`null`或`undefined`时，才会返回右侧的值。**\n\n\n\n#### 9.解构赋值\n\n##### 1.数组的解构赋值\n\n- ```javascript\n  let [a, b, c] = [1, 2, 3];\n  ```\n\n本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。\n\n```js\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n\n```\n\n如果解构不成功，变量的值就等于`undefined`。\n\n```javascript\nlet [foo] = [];\nlet [bar, foo] = [1];\n```\n\n以上两种情况都属于解构不成功，`foo`的值都会等于`undefined`。\n\n不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n```\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n\n```javascript\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n```\n\n上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。\n\n对于 Set 结构，也可以使用数组的解构赋值。\n\n```javascript\nlet [x, y, z] = new Set(['a', 'b', 'c']);\nx // \"a\"\n```\n\n默认值\n\n解构赋值允许指定默认值。\n\n```javascript\nlet [foo = true] = [];\nfoo // true\n\nlet [x, y = 'b'] = ['a']; // x='a', y='b'\nlet [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n```\n\n注意，ES6 内部使用严格相等运算符（`===`），判断一个位置是否有值。所以，只有当一个数组成员严格等于`undefined`，默认值才会生效。\n\n```javascript\nlet [x = 1] = [undefined];\nx // 1\n\nlet [x = 1] = [null];\nx // null\n```\n\n上面代码中，如果一个数组成员是`null`，默认值就不会生效，因为`null`不严格等于`undefined`。\n\n##### 2.对象的解构赋值\n\n- ​\t基本用法\n\n  - ```js\n    let { foo, bar } = { foo: 'aaa', bar: 'bbb' };\n    foo // \"aaa\"\n    bar // \"bbb\"\n    ```\n\n- 解构不仅可以用于数组，还可以用于对象。\n\n  ```javascript\n  let { foo, bar } = { foo: 'aaa', bar: 'bbb' };\n  foo // \"aaa\"\n  bar // \"bbb\"\n  ```\n\n  对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n  ```javascript\n  let { bar, foo } = { foo: 'aaa', bar: 'bbb' };\n  foo // \"aaa\"\n  bar // \"bbb\"\n  \n  let { baz } = { foo: 'aaa', bar: 'bbb' };\n  baz // undefined\n  ```\n\n- 如果变量名与属性名不一致，必须写成下面这样。\n\n  ```javascript\n  let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\n  baz // \"aaa\"\n  \n  let obj = { first: 'hello', last: 'world' };\n  let { first: f, last: l } = obj;\n  f // 'hello'\n  l // 'world'\n  ```\n\n  ```javascript\n  let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\n  baz // \"aaa\"\n  foo // error: foo is not defined\n  ```\n\n  上面代码中，`foo`是匹配的模式，`baz`才是变量。真正被赋值的是变量`baz`，而不是模式`foo`。\n\n- 与数组一样，解构也可以用于嵌套结构的对象。\n\n  ```javascript\n  let obj = {\n    p: [\n      'Hello',\n      { y: 'World' }\n    ]\n  };\n  \n  let { p: [x, { y }] } = obj;\n  x // \"Hello\"\n  y // \"World\"\n  ```\n\n- 默认值\n\n对象的解构也可以指定默认值。\n\n```javascript\nvar {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar {x: y = 3} = {};\ny // 3\n\nvar {x: y = 3} = {x: 5};\ny // 5\n\nvar { message: msg = 'Something went wrong' } = {};\nmsg // \"Something went wrong\"\n```\n\n默认值生效的条件是，对象的属性值严格等于`undefined`\n\n```javascript\nvar {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n```\n\n上面代码中，属性`x`等于`null`，因为`null`与`undefined`不严格相等，所以是个有效的赋值，导致默认值`3`不会生效。\n\n注意\n\n（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n```javascript\n// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n```\n\n上面代码的写法会报错，因为 JavaScript 引擎会将`{x}`理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n```javascript\n// 正确的写法\nlet x;\n({x} = {x: 1});\n```\n\n（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n\n```javascript\n({} = [true, false]);\n({} = 'abc');\n({} = []);\n```\n\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n```javascript\nlet arr = [1, 2, 3];\nlet {0 : first, [arr.length - 1] : last} = arr;\nfirst // 1\nlast // 3\n```\n\n上面代码对数组进行对象解构。数组`arr`的`0`键对应的值是`1`，`[arr.length - 1]`就是`2`键，对应的值是`3`。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。\n\n##### 3.字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n\n类似数组的对象都有一个`length`属性，因此还可以对这个属性解构赋值。\n\n```javascript\nlet {length : len} = 'hello';\nlen // 5\n```\n\n##### 4.数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n```javascript\nlet {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n```\n\n上面代码中，数值和布尔值的包装对象都有`toString`属性，因此变量`s`都能取到值。\n\n解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于`undefined`和`null`无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined; // TypeError\nlet { prop: y } = null; // TypeError\n```\n\n##### 5.函数参数的解构赋值\n\n函数的参数也可以使用解构赋值。\n\n```javascript\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n```\n\n上面代码中，函数`add`的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量`x`和`y`。对于函数内部的代码来说，它们能感受到的参数就是`x`和`y`。\n\n函数参数的解构也可以使用默认值。\n\n```javascript\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n```\n\n上面代码中，函数`move`的参数是一个对象，通过对这个对象进行解构，得到变量`x`和`y`的值。如果解构失败，`x`和`y`等于默认值。\n\n##### 6.圆括号问题\n\n解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\n\n由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\n\n但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。\n\n###### 1.不能使用圆括号的情况\n\n以下三种解构赋值不得使用圆括号。\n\n（1）变量声明语句\n\n```javascript\n// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n```\n\n上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\n\n（2）函数参数\n\n函数参数也属于变量声明，因此不能带有圆括号。\n\n```javascript\n// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n```\n\n（3）赋值语句的模式\n\n```javascript\n// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n```\n\n上面代码将整个模式放在圆括号之中，导致报错。\n\n```javascript\n// 报错\n[({ p: a }), { x: c }] = [{}, {}];\n```\n\n上面代码将一部分模式放在圆括号之中，导致报错。\n\n###### 2.可以使用圆括号的情况\n\n可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。\n\n```javascript\n[(b)] = [3]; // 正确\n({ p: (d) } = {}); // 正确\n[(parseInt.prop)] = [3]; // 正确\n```\n\n上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是`p`，而不是`d`；第三行语句与第一行语句的性质一致。\n\n##### 7.用途\n\n变量的解构赋值用途很多。\n\n**（1）交换变量的值**\n\n```javascript\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n**（2）从函数返回多个值**\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```javascript\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n```\n\n**（3）函数参数的定义**\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n**（4）提取 JSON 数据**\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```javascript\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n**（5）函数参数的默认值**\n\n```javascript\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n} = {}) {\n  // ... do stuff\n};\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n**（6）遍历 Map 结构**\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nconst map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```javascript\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n```\n\n**（7）输入模块的指定方法**\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```javascript\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```\n\n## \n\n#### 10.面向对象\n\n​\t\t将所有的物体抽象为一个类，每一个具体的个体是类的实例化对象。构造函数是创建类的方法，可以无限制创建类，相当于工厂。\n\n​\t\t数据类型中的类是一种数据类型，而面向对象是一种编程思想，更高级的还有函数式编程。面向对象里面也有属性和方法。有构造函数创建。为了避免资源的浪费，再构造函数里面创建实例化对象的属性，再构造函数的原型上创建对象的方法。\n\n- ​\t模板： ——> 构造函数是用来生成对象的，\n- ​    php python 是一种面向对象的编程语言     ->    以类为创建对象的模板\n- ​     JavaScript 是基于对象的编程语言   ->    以构造函数为模板 ->动态语言：没有定义数据类型，需要时才会去处理\n\n\n\n##### 1.构造函数\n\n创建构造函数\n\n- 不能使用箭头函数\n- 首字符大写的函数\n- 建议不使用函数表达式，如果以函数表达式创建箭头函数，后面进行继承操作的时候，由于需要给子的构造函数还原，若没有名字，则还原之后他的constructor 不具名。\n\n```js\nconst Animal = function(){}\nconst Cat = function(){}\n```\n\n\n\n- 在构造函数中，一般只写实例化对象的属性，将实例化对象的方法写在构造函数的原型上，形如\n\n- ```js\n  function Animal(name,sex){\n      this.name = name;\n      this.sex = sex;\n  }\n  \n  Animal.prototype.play = function(){\n      console.log('play');\n  }\n  ```\n\n\n\nnew 关键字\n\n- ​\t\t原理：\n\n  - 创建一个空对象 \n  - 空的原型\n  - this 的指向变为空对象\n\n- ```js \n  const cat = new Cat('实际参数')\n  //若不需要传递参数，则后面的（）可以省略\n  //形如\n  const cat = new Car\n  ```\n\n  在构造函数中使用this 关键字，this 指向未来即将生成的实例化对象\n\n  ```js\n  //为了保证实例化对象的时候，使用new 关键字，可以在构造函数内部使用，严格模式\n  //如果在实例化对象的时候，没有使用new 关键字系统就会报错\n  'use strict'    ....\n  若实例化时没有加new，实例化对象为未定义，而对象的属性直接报错\n  ```\n\n  ```js\n  function Car(){\n      this.name = 'nem';\n      this.sex = 'cute';\n  }\n  \n  const car =Car();\n  console.log(car);\n  // underfinded\n  ```\n\n\n\n- 构造函数返回值\n  - 构造函数的返回值如果时基础数据类型，对实例化对象没有影响。\n  - 如果构造函数的返回值是引用数据类型，则会覆盖掉构造函数内部的属性。\n    - 故构造函数不能有返回值\n\nnew.target命令\n\n函数内部可以使用`new.target`属性。如果当前函数是`new`命令调用，`new.target`指向当前函数，否则为`undefined`。\n\n```js\nfunction f() {\n  console.log(new.target === f);\n}\nf() // false\nnew f() // true\n```\n\n使用这个属性，可以判断函数调用的时候，是否使用`new`命令。\n\n```js\nfunction f() {\n  if (!new.target) {\n    throw new Error('请使用 new 命令调用！');\n  }\n  // ...\n}\nf() // Uncaught Error: 请使用 new 命令调用！\n```\n\n上面代码中，构造函数`f`调用时，没有使用`new`命令，就抛出一个错误。\n\n\n\nObject.create( ) 创建实例对象\n\n通过 Object.create 创建的对象原型为空。\n\n```js\n//用于继承\nFn1.prototype = Oject.create( Fn2.prototype )\n```\n\n- 如果需要一个构造函数的内容的部分包含另一个构造函数的内容，并且又有自己的\n\n  属性，该怎么写\n\n  ```js\n  function Animal(name,sex){\n      this.name = name;\n      this.sex = sex;\n  }\n  \n  function Cat(name,sex,scorlls){\n      Animal.call(this,name,sex);\n      this.scorlls = scorlls;\n  }\n  \n  //此处的call也可替换为apply，但后面参数要写成数组的形式\n  Animal.apply( this,[name,sex])\n  ```\n\n\n\n##### 2.原型和原型链\n\n一、prototype\n\n在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。并且这个属性是一个对象数据类型的值.\n\n除了underfinded 和 null 以外，所有的数据类型的原型都是Oject\n\n\n\n`Person           ------     prototype ---\t\t\t\t\tPerosn.prototype`\n\n`(构造函数)\t\t\t\t\t\t\t\t           --->   \t\t\t\t\t\t(实现原理)`\n\n\n\n二、__proto__\n\n这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。\n\n\n\n三、constructor\n\n每个原型都有一个constructor属性，指向该关联的构造函数。\n\n```js\nfunction Person() {\n\n}\nconsole.log(Person===Person.prototype.constructor)  //true\n\n//现在基本已不被使用\nobj.__proto__ = obj.construcror.prototype\n被右边的写法替代\n```\n\n\n\n![image-20211222192440398](%E5%AD%A6%E4%B9%A0/mdimages/image-20211222192440398.png)\n\n四、实例与原型\n\n 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。\n\n五、原型的原型\n\n 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：\n\n```\nvar obj = new Object();\nobj.name = 'Kevin'\nconsole.log(obj.name) // Kevin\n```\n\n其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 __proto__ 指向构造函数的 prototype ，所以我们再更新下关系图：\n\n```js\n//原型的最上面是object\n//object 的上面是 null\n```\n\n\n\n六、原型链\n\n 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》\n\n```js\n//而原型链中就是实例对象和原型对象之间的链接。每个函数都有一个prototype属性，这个prototype属性就是我们的原型对象，我们拿这个函数通过new构造函数创建出来的实例对象，这个实例对象自己会有一个指针(_proto_)指向他的构造函数的原型对象！这样构造函数和实例对象之间就通过( _proto_ )连接在一起形成了一条链子。\n```\n\n在JavaScript中 实例化对象与原型之间的链接，叫做原型链，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法，然后层层递进，就构成了实例与原型的链条，这就是所谓的原型链\n\n###### 为什么要使用原型链呢？\n\n1.为了实现继承，简化代码，实现代码重用！\n2.只要是这个链条上的内容，都可以被访问和使用到！\n\n###### 使用原型链有什么作用？\n继承\nprototype用来实现基于原型的继承与属性的共享\n避免了代码冗余，公用的属性和方法，可以放到原型对象中，这样，通过该构造函数实例化的所有对象都可以使用该对象的构造函数中的属性和方法！\n减少了内存占用\n\n###### 原型链的特点\n**就近原则**，当我们要使用一个值时，程序会优先查找离自己最近的，也就是本身有没有，如果自己没有，他就会沿着原型链向上查找，如果还没有找到，它还会沿着原型链继续向上查找，找到到达Object\n**引用类型，**当我们使用或者修改原型链上的值时，其实使用的是同一个值！\nJS中每个函数都存在原型对象属性prototype。并且所有函数的默认原型都是Object的实例。\n每个继承父函数的实例对象都包含一个内部属性_proto_。该属性包含一个指针，指向父函数的prototype。若父函数的原型对象的_proto_属性为再上一层函数。在此过程中就形成了原型链。\n\n###### ES5继承\n\n```js\n//Es5 继承时，函数尽量不使用函数声明语法\nfunction Animal(name,sex){\n    this.name = name;\n    this.sex = sex;\n}\n\nAnimal.prototype.play = function(){\n    console.log('play');\n}\n\nfunction Cat(name,sex,scorlls){\n    Animal.call(this,name,sex);\n    this.scorlls = scorlls;\n}\n\nCat.prototype = Object.create(Animal.prototype);\n// Cat.prototype.constructor = Cat;\nCat.prototype.constructor = Cat;\n\nconst cat = new Cat('cat','like','ball');\nconst ani = new Animal('any','dislike')\n\n\n// Cat.prototype.constructor = Cat;\ncat.play();\n// Animal.play()\nani.play()\nconsole.log(cat,ani.constructor.prototype)\n\n//如果子对象存在自己的方法，则应该写在\nCat.prototype = Object.create(Animal.prototype)\n//写在前面的话一旦赋值给空白对象，方法就会丢失\n```\n\n###### ES6继承（语法糖）\n\n```js\nclass Animal{\n    constructor(name,sex){\n\t\tthis.name = name;\n        this.sex = sex;\n    }\n    eat(){\n\t  console.log('吃东西');\n    }\n}\n\nclass cat extends Animal {\n\tconstructor(pz,name,sex){\n\tsuper(name,sex);\n    this.pz = pz;\n    }\n    miao(){\n\t\tconsole.log('喵...');\n    }\n}\n\nconstructor(pz,name,sex){\n\tsuper(name,sex);\n  //  里面的参数不需要对应，可以是任意顺序\n```\n\n\n\n##### static \n\n```js\n//凡是被static修饰的属性和方法都是静态方法和属性,只能被类名调用,不能被实例化对象调用.同时也不能被子类继承,换句话说它属于当前这个类的.\n//若是被实例化对象调用结果为underfinded\n\n//使用static修饰属性和方法\n\n    class A {\n      // 静态属性\n      static info = '见过你的美,还能爱上谁?';\n      // 静态方法\n      static love() {\n        console.log('小姐姐,看见你就犯困,为情所困,为你所困!');\n​\n      }\n    }\n    // 直接使用类名调用\n    console.log(A.info);\n    A.love();\n\n```\n\n能被继承\n\nextends的主要用于子类继承父类,继承之后子类拥有父类的的所有方法包括,静态方法和属性\n\n```js\n class A {\n      // 静态属性\n      static info = '见过你的美,还能爱上谁?';\n      // 静态方法\n      static love() {\n        console.log('小姐姐,看见你就犯困,为情所困,为你所困!');\n      }\n      // 普通方法,调用静态属性\n      say() {\n        console.log('小姐姐,' + A.info);\n      }\n    }\n    class B extends A {\n      run() {\n        console.log('类B的方法..');\n      }\n    }\n    //使用类名 父类中普通方法调用\n    B.love();\n```\n\n##### 原型链覆盖\n\n```js\nfn.prototype = { ...}\n//这样写原来对象上的方法和属性都被覆盖掉\n```\n\n\n\n#### 11.字符串方法\n\n##### 1.ES6 String.raw()\n\nES6 还为原生的 String 对象，提供了一个`raw()`方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。\n\n```javascript\nString.raw`Hi\\n${2+3}!`\n// 实际返回 \"Hi\\\\n5!\"，显示的是转义后的结果 \"Hi\\n5!\"\n\nString.raw`Hi\\u000A!`;\n// 实际返回 \"Hi\\\\u000A!\"，显示的是转义后的结果 \"Hi\\u000A!\"\n```\n\n如果原字符串的斜杠已经转义，那么`String.raw()`会进行再次转义。\n\n```javascript\nString.raw`Hi\\\\n`\n// 返回 \"Hi\\\\\\\\n\"\n\nString.raw`Hi\\\\n` === \"Hi\\\\\\\\n\" // true\n```\n\n`String.raw()`方法可以**作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。**\n\n##### 2.String.fromCodePoint()\n\nES6 提供了`String.fromCodePoint()`方法，可以识别大于`0xFFFF`的字符，弥补了`String.fromCharCode()`方法的不足。在作用上，**正好与下面的`codePointAt()`方法相反**。\n\n```javascript\nString.fromCodePoint(0x20BB7)\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\\uD83D\\uDE80y'\n// true\n```\n\n上面代码中，如果`String.fromCodePoint`方法有多个参数，则它们会被合并成一个字符串返回。\n\n注意，`fromCodePoint`方法定义在`String`对象上，而`codePointAt`方法定义在字符串的实例对象上。\n\n##### 3.实例方法：codePointAt() \n\nJavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为`2`个字节。对于那些需要`4`个字节储存的字符（Unicode 码点大于`0xFFFF`的字符），JavaScript 会认为它们是两个字符。\n\n```javascript\nvar s = \"𠮷\";\n\ns.length // 2\ns.charAt(0) // ''\ns.charAt(1) // ''\ns.charCodeAt(0) // 55362\ns.charCodeAt(1) // 57271\n```\n\n上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是`0x20BB7`，UTF-16 编码为`0xD842 0xDFB7`（十进制为`55362 57271`），需要`4`个字节储存。对于这种`4`个字节的字符，JavaScript 不能正确处理，字符串长度会误判为`2`，而且`charAt()`方法无法读取整个字符，`charCodeAt()`方法只能分别返回前两个字节和后两个字节的值。\n\nES6 提供了`codePointAt()`方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。\n\n```javascript\nlet s = '𠮷a';\n\ns.codePointAt(0) // 134071\ns.codePointAt(1) // 57271\n\ns.codePointAt(2) // 97\n```\n\n`codePointAt()`方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的`20BB7`）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，`codePointAt()`方法的结果与`charCodeAt()`方法相同。\n","source":"_posts/ES6.md","raw":"---\ntitle: ES6概述\n\nauthor: codefish\ndate: 2022-3-7 10:16:41\ncategories: js\ntags: [箭头函数,解构赋值,promise]\ntop_img: /img/5.jpg\ncover: /img/5.jpg\n---\n### ES6\n\nES6 内容补充，当看到一个没见过或者不熟悉的语法时，无法拒绝对于它的学习\n\n#### 1.箭头函数\n\n​\t本质是一个语法糖\n\n```js\nfunction() {}\n\n() => {}\n\n//1.如果箭头函数只有一个参数，则括号可以省略\nitem => {}   //形如\n//2如果函数体只有一条语句，则可以省略{}括号\n() => return 'hello'\n\n(a, b) => a + b\n\n(a) => {\n  a = a + 1\n  return a\n}\n\n\n\n//如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：\n// SyntaxError:\nx => { foo: x }\n//因为和函数体的{ ... }有语法冲突，所以要改为：\n\n// ok:\nx => ({ foo: x })\n\n\n\n\n\n```\n\n(1). 箭头函数this为父作用域的this，不是调用时的this\n箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。\n普通函数的this指向调用它的那个对象。\n\n(2). 箭头函数不能作为构造函数，不能使用new\n\n(3). 箭头函数没有arguments，caller，callee\n\n箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。\n\n箭头函数中要想接收不定参数，应该使用rest参数...解决。\n\n (4). 箭头函数通过call和apply调用，不会改变this指向，只会传入参数\n\n(5). 箭头函数没有原型属性\n\n(6). 箭头函数不能作为Generator函数，不能使用yield关键字\n\n(7). 箭头函数返回对象时，要加一个小括号\n\n(8). 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法\n\n(9). 多重箭头函数就是一个高阶函数，相当于内嵌函数\n\n**ps:注意**\n\n​\t若箭头函数只有一个return语句，可以省略return 和 {};如果想加上{}的话，必须也加上return语句\n\n```js\n(10). 箭头函数常见错误\nlet a = {\n  foo: 1,\n  bar: () => console.log(this.foo)\n}\n\na.bar()  //undefined\nbar函数中的this指向父作用域，而a对象没有作用域，因此this不是a，打印结果为undefined\n\nfunction A() {\n  this.foo = 1\n}\n\nA.prototype.bar = () => console.log(this.foo)\nlet a = new A()\na.bar()  //undefined\n原型上使用箭头函数，this指向是其父作用域，并不是对象a，因此得不到预期结果\n\n3.一些this的指向实例\nvar obj = {\n  birth: 1990,\n  getAge: function(){\n    console.log(new Date().getFullYear() - this.birth); //this指向obj对象\n  },\n}\nobj.getAge(); // 29\n\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = function () {\n            return new Date().getFullYear() - this.birth; // this指向window或undefined\n        };\n        return fn();\n    }\n};\nobj.getAge();// NaN\n\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象\n        return fn();\n    }\n};\nobj.getAge(); // 29\n\nvar obj = {\n       getAge: () => {\n            console.log(this); // window\n        }\n    };\n\nobj.getAge(); //window\n作为对象的属性时，this的指向则不再是对象本身了，箭头函数捕获的是obj{}这个对象的环境，然后这个环境的this指向的是window\n```\n\n\n\n#### 2. let 和 const 命令\n\nlet 声明的变量只在**块级作用域**有效。\n\n- 只能声明一次\n- 无变量声明提升\n- 块级作用域\n\n会形成暂时性死区  --->  **声明之前无法使用，声明之后不能重新定义**\n\n\n\nconst 声明的变量 为一个常量变量\n\n- 声明之后只读不可修改\n  - 只能声明一次\n  - 无变量声明提升\n  - 块级作用域\n    - 相当于在栈区上锁，当其为引用数据时候，只要不改地址就不会报错（即赋值）\n\n\n\n- **在ES5 中未经声明的变量会挂载到window ，归 window 所有。而let 和 const 则不会自动挂载到 window 上**\n\n\n\n#### 3.重绘和重排\n\n重绘（repaint 或 redraw）：**当盒子的位置、大小以及其他属性，例如颜色、字体大小**等 都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面 上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根**据元素的新属性重 新绘制，使元素呈现新的外观。** 触发重绘的条件：改变元素外观属性。如：color，background-color 等。 注意：table 及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，**比 同等元素要多花两倍时间，这就是我们尽量避免使用 table 布局页面的原因之一。** \n\n重排（重构/回流/reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局， 隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是 在页面第一次加载的时候。 **重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新 构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称 为重绘。所以，重排必定会引发重绘，但重绘不一定会引发重排。**\n\n\n\n#### 4.rest 参数\n\n概述：\n\n   Rest就是为解决传入的参数数量不一定， rest parameter(Rest 参数) 本身就是数组，数组的相关的方法都可以用。\n\n```javascript\nfunction f(a, b, ...theArgs) {\n  // ...\n}\n```\n\n\n\n描述\n\n- 区分rest参数和 参数对象\n  rest参数不会为每个变量给一个单独的名称，参数对象包含所有参数传递给函数\n  参数对象不是真正的数组，rest参数是真实的数组实例。例如数组sort、map、forEach、pop的方法都可以直接使用\n  参数对象有他自己额外的特性（例如callee 属性）\n\n- ```js\n  \n  //以前函数\n  function f(a, b) {\n    var args = Array.prototype.slice.call(arguments, f.length);\n   \n    // …\n  }\n  // 等效于现在\n  function f(a, b, ...args) {}\n  ```\n\n- ```js\n  \n  function fun1(...theArgs) {\n    console.log(theArgs.length);\n  }\n   \n  fun1();  // 0\n  fun1(5); // 1\n  fun1(5, 6, 7); // 3\n  \n  ```\n\n- ````js\n  排序\n  function sortRestArgs(...theArgs) {\n    var sortedArgs = theArgs.sort();\n    return sortedArgs;\n  }\n  //好像一位和两位混合不能进行排序，这需要看一下为甚？主要第一个为主\n  console.log(sortRestArgs(5, 3, 7, 1)); // shows 1, 3, 5, 7\n  //参数对象arguments不能排序\n  ````\n\n- 箭头函数通过rest查看参数\n\n\n\n#### 5.严格模式\n\n严格模式主要有以下限制。\n\n- 变量必须声明后再使用\n- 函数的参数不能有同名属性，否则报错\n- 不能使用with语句\n- 不能对只读属性赋值，否则报错\n- 不能使用前缀0表示八进制数，否则报错\n- 不能删除不可删除的属性，否则报错\n- 不能删除变量delete prop，会报错，只能删除属性delete global[prop]\n- eval不会在它的外层作用域引入变量\n- eval和arguments不能被重新赋值\n- arguments不会自动反映函数参数的变化\n- 不能使用arguments.callee\n- 不能使用arguments.caller\n- 禁止this指向全局对象\n- 不能使用fn.caller和fn.arguments获取函数调用的堆栈\n- 增加了保留字（比如protected、static和interface）\n\n- 其中，尤其需要注意this的限制。ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。\n\n\n\n```txt\n 1. 块级函数\n es5中严格模式下禁止声明块级函数，而在es6的严格模式中可以声明块级函数，并可以在块级作用\n 2. 箭头函数\n\n箭头函数是es6中新增的一种特殊函数，不管是否处于严格模式下，箭头函数的参数都不能有同名的。而ES5中，只有在严格模式下函数的参数才不能有同名\n\n3.字面量对象重复属性问题\n\nes5的严格模式中，如果对象属性重名则会报错，es6则不管是不是严格模式，如果有同名属性，则后面的属性覆盖前面的\n\n4.模块模式\n\n采用es6的模块化开发时，代码自动运行在严格模式下且没有任何办法跳出严格模式\n\n5.类模式\n\n在es6中不管是类声明还是类表达式，其内部使用的都是严格模式。\n```\n\n\n\n#### 6.Symbol\n\n​\tES6 新增 一种数据类型Symbol，专门为了给对象的key赋值，这样对象的key不相同，则值不会被覆盖。\n\n​\t它的功能类似于一种标识唯一性的ID。通常情况下，我们可以通过调用Symbol()函数来创建一个Symbol实例：\n\n```js\nlet s1 = Symbol()\n\t\n\t//或者，你也可以在调用Symbol()函数时传入一个可选的字符串参数，相当于给你创建的Symbol实例一个描述信息：\n\tlet s2 = Symbol('another symbol')\n```\n\n**Symbol 方法接收一个参数，表示对生成的 symbol 值的一种描述**\n\nObject.keys( )  不能拿到symbol\n\nReflect.ownkeys( ) 可以拿到symbol\n\nSymbol.for 方法可以检测上下文中是否已经存在使用该方法且相同参数创建的 symbol 值，如果存在则返回已经存在的值，如果不存在则新建。\n\n```js\nconst s1 = Symbol.for('foo');\nconst s2 = Symbol.for('foo');\n\nconsole.log(s1 === s2); // true\n复制代码\n```\n\nSymbol.keyFor 方法返回一个使用 Symbol.for 方法创建的 symbol 值的 key\n\n```js\nconst foo = Symbol.for(\"foo\");\nconst key = Symbol.keyFor(foo);\n\nconsole.log(key) // \"foo\"\n```\n\n`Symbol.for()`与`Symbol()`这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。`Symbol.for()`不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的`key`是否已经存在，如果不存在才会新建一个值。比如，如果你调用`Symbol.for(\"cat\")`30 次，每次都会返回同一个 Symbol 值，但是调用`Symbol(\"cat\")`30 次，会返回 30 个不同的 Symbol 值。\n\n\n\n#### 7.模板字符串\n\n在ES6之前，我们只能用加号连接变量表达式，代码如下：\n\n```javascript\nvar a = 20;\nvar b = 10;\nvar c = \"JavaScript\";\nvar str = \"My age is \" + (a + b) + \" and I love \" + c;\nconsole.log(str);\n```\n\n使用模板字符串嵌入表达式，代码如下：\n\n```javascript\nconst a = 20;\nconst b = 10;\nconst c = \"JavaScript\";\nconst str = `My age is ${a+b} and I love ${c}`;\nconsole.log(str);\n```\n\n多行字符串\n\nEs6的模板字符串给我们提供了一种创建多行文本字符串的新方法。在ES6之前我们只能使用\"\\n“在字符串中进行换行，代码如下：\n\n```javascript\nconsole.log(\"1\\n2\\n3\");\n//output\n//1\n//2\n//3\n```\n\n在es6中，我们可以直接输入回车进行换行，如下段代码所示：\n\n```javascript\nconsole.log(`1\n2\n3`);\n```\n\n原始字符串(Raw strings)\n\n原始字符串是一个普通字符串，其中不会解释转义字符。我们可以使用模板字符串创建原始字符串。我们可以使用String.raw来获取原始字符串，代码如下：\n\n```javascript\nlet s = String.raw `xy\\n${ 1 + 1 }z`;\nconsole.log(s); \n//output \"xy\\n2z\"\n```\n\n- 任何以\\u开头的内容都将被视为Unicode转义\n- 以\\x开头的任何内容都将被视为十六进制转义\n- 任何以\\开头然后跟着一个数字将被视为八进制转义\n\nJavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。\n\n- U+005C：反斜杠（reverse solidus)\n- U+000D：回车（carriage return）\n- U+2028：行分隔符（line separator）\n- U+2029：段分隔符（paragraph separator）\n- U+000A：换行符（line feed）\n\n#### 8.运算符\n\n拓展运算符\n\n- ES2016 新增了一个指数运算符（`**`）。\n\n  ```javascript\n  2 ** 2 // 4\n  2 ** 3 // 8\n  ```\n\n逻辑赋值运算符\n\n```javascript\n// 或赋值运算符\nx ||= y\n// 等同于\nx || (x = y)\n\n// 与赋值运算符\nx &&= y\n// 等同于\nx && (x = y)\n\n// Null 赋值运算符\nx ??= y\n// 等同于\nx ?? (x = y)\n```\n\n**但是只有运算符左侧的值为`null`或`undefined`时，才会返回右侧的值。**\n\n\n\n#### 9.解构赋值\n\n##### 1.数组的解构赋值\n\n- ```javascript\n  let [a, b, c] = [1, 2, 3];\n  ```\n\n本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。\n\n```js\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n\n```\n\n如果解构不成功，变量的值就等于`undefined`。\n\n```javascript\nlet [foo] = [];\nlet [bar, foo] = [1];\n```\n\n以上两种情况都属于解构不成功，`foo`的值都会等于`undefined`。\n\n不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n```\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n\n```javascript\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n```\n\n上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。\n\n对于 Set 结构，也可以使用数组的解构赋值。\n\n```javascript\nlet [x, y, z] = new Set(['a', 'b', 'c']);\nx // \"a\"\n```\n\n默认值\n\n解构赋值允许指定默认值。\n\n```javascript\nlet [foo = true] = [];\nfoo // true\n\nlet [x, y = 'b'] = ['a']; // x='a', y='b'\nlet [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n```\n\n注意，ES6 内部使用严格相等运算符（`===`），判断一个位置是否有值。所以，只有当一个数组成员严格等于`undefined`，默认值才会生效。\n\n```javascript\nlet [x = 1] = [undefined];\nx // 1\n\nlet [x = 1] = [null];\nx // null\n```\n\n上面代码中，如果一个数组成员是`null`，默认值就不会生效，因为`null`不严格等于`undefined`。\n\n##### 2.对象的解构赋值\n\n- ​\t基本用法\n\n  - ```js\n    let { foo, bar } = { foo: 'aaa', bar: 'bbb' };\n    foo // \"aaa\"\n    bar // \"bbb\"\n    ```\n\n- 解构不仅可以用于数组，还可以用于对象。\n\n  ```javascript\n  let { foo, bar } = { foo: 'aaa', bar: 'bbb' };\n  foo // \"aaa\"\n  bar // \"bbb\"\n  ```\n\n  对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n  ```javascript\n  let { bar, foo } = { foo: 'aaa', bar: 'bbb' };\n  foo // \"aaa\"\n  bar // \"bbb\"\n  \n  let { baz } = { foo: 'aaa', bar: 'bbb' };\n  baz // undefined\n  ```\n\n- 如果变量名与属性名不一致，必须写成下面这样。\n\n  ```javascript\n  let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\n  baz // \"aaa\"\n  \n  let obj = { first: 'hello', last: 'world' };\n  let { first: f, last: l } = obj;\n  f // 'hello'\n  l // 'world'\n  ```\n\n  ```javascript\n  let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\n  baz // \"aaa\"\n  foo // error: foo is not defined\n  ```\n\n  上面代码中，`foo`是匹配的模式，`baz`才是变量。真正被赋值的是变量`baz`，而不是模式`foo`。\n\n- 与数组一样，解构也可以用于嵌套结构的对象。\n\n  ```javascript\n  let obj = {\n    p: [\n      'Hello',\n      { y: 'World' }\n    ]\n  };\n  \n  let { p: [x, { y }] } = obj;\n  x // \"Hello\"\n  y // \"World\"\n  ```\n\n- 默认值\n\n对象的解构也可以指定默认值。\n\n```javascript\nvar {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar {x: y = 3} = {};\ny // 3\n\nvar {x: y = 3} = {x: 5};\ny // 5\n\nvar { message: msg = 'Something went wrong' } = {};\nmsg // \"Something went wrong\"\n```\n\n默认值生效的条件是，对象的属性值严格等于`undefined`\n\n```javascript\nvar {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n```\n\n上面代码中，属性`x`等于`null`，因为`null`与`undefined`不严格相等，所以是个有效的赋值，导致默认值`3`不会生效。\n\n注意\n\n（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n```javascript\n// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n```\n\n上面代码的写法会报错，因为 JavaScript 引擎会将`{x}`理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n```javascript\n// 正确的写法\nlet x;\n({x} = {x: 1});\n```\n\n（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n\n```javascript\n({} = [true, false]);\n({} = 'abc');\n({} = []);\n```\n\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n```javascript\nlet arr = [1, 2, 3];\nlet {0 : first, [arr.length - 1] : last} = arr;\nfirst // 1\nlast // 3\n```\n\n上面代码对数组进行对象解构。数组`arr`的`0`键对应的值是`1`，`[arr.length - 1]`就是`2`键，对应的值是`3`。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。\n\n##### 3.字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n\n类似数组的对象都有一个`length`属性，因此还可以对这个属性解构赋值。\n\n```javascript\nlet {length : len} = 'hello';\nlen // 5\n```\n\n##### 4.数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n```javascript\nlet {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n```\n\n上面代码中，数值和布尔值的包装对象都有`toString`属性，因此变量`s`都能取到值。\n\n解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于`undefined`和`null`无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined; // TypeError\nlet { prop: y } = null; // TypeError\n```\n\n##### 5.函数参数的解构赋值\n\n函数的参数也可以使用解构赋值。\n\n```javascript\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n```\n\n上面代码中，函数`add`的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量`x`和`y`。对于函数内部的代码来说，它们能感受到的参数就是`x`和`y`。\n\n函数参数的解构也可以使用默认值。\n\n```javascript\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n```\n\n上面代码中，函数`move`的参数是一个对象，通过对这个对象进行解构，得到变量`x`和`y`的值。如果解构失败，`x`和`y`等于默认值。\n\n##### 6.圆括号问题\n\n解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\n\n由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\n\n但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。\n\n###### 1.不能使用圆括号的情况\n\n以下三种解构赋值不得使用圆括号。\n\n（1）变量声明语句\n\n```javascript\n// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n```\n\n上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\n\n（2）函数参数\n\n函数参数也属于变量声明，因此不能带有圆括号。\n\n```javascript\n// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n```\n\n（3）赋值语句的模式\n\n```javascript\n// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n```\n\n上面代码将整个模式放在圆括号之中，导致报错。\n\n```javascript\n// 报错\n[({ p: a }), { x: c }] = [{}, {}];\n```\n\n上面代码将一部分模式放在圆括号之中，导致报错。\n\n###### 2.可以使用圆括号的情况\n\n可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。\n\n```javascript\n[(b)] = [3]; // 正确\n({ p: (d) } = {}); // 正确\n[(parseInt.prop)] = [3]; // 正确\n```\n\n上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是`p`，而不是`d`；第三行语句与第一行语句的性质一致。\n\n##### 7.用途\n\n变量的解构赋值用途很多。\n\n**（1）交换变量的值**\n\n```javascript\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n**（2）从函数返回多个值**\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```javascript\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n```\n\n**（3）函数参数的定义**\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n**（4）提取 JSON 数据**\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```javascript\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n**（5）函数参数的默认值**\n\n```javascript\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n} = {}) {\n  // ... do stuff\n};\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n**（6）遍历 Map 结构**\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nconst map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```javascript\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n```\n\n**（7）输入模块的指定方法**\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```javascript\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```\n\n## \n\n#### 10.面向对象\n\n​\t\t将所有的物体抽象为一个类，每一个具体的个体是类的实例化对象。构造函数是创建类的方法，可以无限制创建类，相当于工厂。\n\n​\t\t数据类型中的类是一种数据类型，而面向对象是一种编程思想，更高级的还有函数式编程。面向对象里面也有属性和方法。有构造函数创建。为了避免资源的浪费，再构造函数里面创建实例化对象的属性，再构造函数的原型上创建对象的方法。\n\n- ​\t模板： ——> 构造函数是用来生成对象的，\n- ​    php python 是一种面向对象的编程语言     ->    以类为创建对象的模板\n- ​     JavaScript 是基于对象的编程语言   ->    以构造函数为模板 ->动态语言：没有定义数据类型，需要时才会去处理\n\n\n\n##### 1.构造函数\n\n创建构造函数\n\n- 不能使用箭头函数\n- 首字符大写的函数\n- 建议不使用函数表达式，如果以函数表达式创建箭头函数，后面进行继承操作的时候，由于需要给子的构造函数还原，若没有名字，则还原之后他的constructor 不具名。\n\n```js\nconst Animal = function(){}\nconst Cat = function(){}\n```\n\n\n\n- 在构造函数中，一般只写实例化对象的属性，将实例化对象的方法写在构造函数的原型上，形如\n\n- ```js\n  function Animal(name,sex){\n      this.name = name;\n      this.sex = sex;\n  }\n  \n  Animal.prototype.play = function(){\n      console.log('play');\n  }\n  ```\n\n\n\nnew 关键字\n\n- ​\t\t原理：\n\n  - 创建一个空对象 \n  - 空的原型\n  - this 的指向变为空对象\n\n- ```js \n  const cat = new Cat('实际参数')\n  //若不需要传递参数，则后面的（）可以省略\n  //形如\n  const cat = new Car\n  ```\n\n  在构造函数中使用this 关键字，this 指向未来即将生成的实例化对象\n\n  ```js\n  //为了保证实例化对象的时候，使用new 关键字，可以在构造函数内部使用，严格模式\n  //如果在实例化对象的时候，没有使用new 关键字系统就会报错\n  'use strict'    ....\n  若实例化时没有加new，实例化对象为未定义，而对象的属性直接报错\n  ```\n\n  ```js\n  function Car(){\n      this.name = 'nem';\n      this.sex = 'cute';\n  }\n  \n  const car =Car();\n  console.log(car);\n  // underfinded\n  ```\n\n\n\n- 构造函数返回值\n  - 构造函数的返回值如果时基础数据类型，对实例化对象没有影响。\n  - 如果构造函数的返回值是引用数据类型，则会覆盖掉构造函数内部的属性。\n    - 故构造函数不能有返回值\n\nnew.target命令\n\n函数内部可以使用`new.target`属性。如果当前函数是`new`命令调用，`new.target`指向当前函数，否则为`undefined`。\n\n```js\nfunction f() {\n  console.log(new.target === f);\n}\nf() // false\nnew f() // true\n```\n\n使用这个属性，可以判断函数调用的时候，是否使用`new`命令。\n\n```js\nfunction f() {\n  if (!new.target) {\n    throw new Error('请使用 new 命令调用！');\n  }\n  // ...\n}\nf() // Uncaught Error: 请使用 new 命令调用！\n```\n\n上面代码中，构造函数`f`调用时，没有使用`new`命令，就抛出一个错误。\n\n\n\nObject.create( ) 创建实例对象\n\n通过 Object.create 创建的对象原型为空。\n\n```js\n//用于继承\nFn1.prototype = Oject.create( Fn2.prototype )\n```\n\n- 如果需要一个构造函数的内容的部分包含另一个构造函数的内容，并且又有自己的\n\n  属性，该怎么写\n\n  ```js\n  function Animal(name,sex){\n      this.name = name;\n      this.sex = sex;\n  }\n  \n  function Cat(name,sex,scorlls){\n      Animal.call(this,name,sex);\n      this.scorlls = scorlls;\n  }\n  \n  //此处的call也可替换为apply，但后面参数要写成数组的形式\n  Animal.apply( this,[name,sex])\n  ```\n\n\n\n##### 2.原型和原型链\n\n一、prototype\n\n在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。并且这个属性是一个对象数据类型的值.\n\n除了underfinded 和 null 以外，所有的数据类型的原型都是Oject\n\n\n\n`Person           ------     prototype ---\t\t\t\t\tPerosn.prototype`\n\n`(构造函数)\t\t\t\t\t\t\t\t           --->   \t\t\t\t\t\t(实现原理)`\n\n\n\n二、__proto__\n\n这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。\n\n\n\n三、constructor\n\n每个原型都有一个constructor属性，指向该关联的构造函数。\n\n```js\nfunction Person() {\n\n}\nconsole.log(Person===Person.prototype.constructor)  //true\n\n//现在基本已不被使用\nobj.__proto__ = obj.construcror.prototype\n被右边的写法替代\n```\n\n\n\n![image-20211222192440398](%E5%AD%A6%E4%B9%A0/mdimages/image-20211222192440398.png)\n\n四、实例与原型\n\n 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。\n\n五、原型的原型\n\n 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：\n\n```\nvar obj = new Object();\nobj.name = 'Kevin'\nconsole.log(obj.name) // Kevin\n```\n\n其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 __proto__ 指向构造函数的 prototype ，所以我们再更新下关系图：\n\n```js\n//原型的最上面是object\n//object 的上面是 null\n```\n\n\n\n六、原型链\n\n 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》\n\n```js\n//而原型链中就是实例对象和原型对象之间的链接。每个函数都有一个prototype属性，这个prototype属性就是我们的原型对象，我们拿这个函数通过new构造函数创建出来的实例对象，这个实例对象自己会有一个指针(_proto_)指向他的构造函数的原型对象！这样构造函数和实例对象之间就通过( _proto_ )连接在一起形成了一条链子。\n```\n\n在JavaScript中 实例化对象与原型之间的链接，叫做原型链，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法，然后层层递进，就构成了实例与原型的链条，这就是所谓的原型链\n\n###### 为什么要使用原型链呢？\n\n1.为了实现继承，简化代码，实现代码重用！\n2.只要是这个链条上的内容，都可以被访问和使用到！\n\n###### 使用原型链有什么作用？\n继承\nprototype用来实现基于原型的继承与属性的共享\n避免了代码冗余，公用的属性和方法，可以放到原型对象中，这样，通过该构造函数实例化的所有对象都可以使用该对象的构造函数中的属性和方法！\n减少了内存占用\n\n###### 原型链的特点\n**就近原则**，当我们要使用一个值时，程序会优先查找离自己最近的，也就是本身有没有，如果自己没有，他就会沿着原型链向上查找，如果还没有找到，它还会沿着原型链继续向上查找，找到到达Object\n**引用类型，**当我们使用或者修改原型链上的值时，其实使用的是同一个值！\nJS中每个函数都存在原型对象属性prototype。并且所有函数的默认原型都是Object的实例。\n每个继承父函数的实例对象都包含一个内部属性_proto_。该属性包含一个指针，指向父函数的prototype。若父函数的原型对象的_proto_属性为再上一层函数。在此过程中就形成了原型链。\n\n###### ES5继承\n\n```js\n//Es5 继承时，函数尽量不使用函数声明语法\nfunction Animal(name,sex){\n    this.name = name;\n    this.sex = sex;\n}\n\nAnimal.prototype.play = function(){\n    console.log('play');\n}\n\nfunction Cat(name,sex,scorlls){\n    Animal.call(this,name,sex);\n    this.scorlls = scorlls;\n}\n\nCat.prototype = Object.create(Animal.prototype);\n// Cat.prototype.constructor = Cat;\nCat.prototype.constructor = Cat;\n\nconst cat = new Cat('cat','like','ball');\nconst ani = new Animal('any','dislike')\n\n\n// Cat.prototype.constructor = Cat;\ncat.play();\n// Animal.play()\nani.play()\nconsole.log(cat,ani.constructor.prototype)\n\n//如果子对象存在自己的方法，则应该写在\nCat.prototype = Object.create(Animal.prototype)\n//写在前面的话一旦赋值给空白对象，方法就会丢失\n```\n\n###### ES6继承（语法糖）\n\n```js\nclass Animal{\n    constructor(name,sex){\n\t\tthis.name = name;\n        this.sex = sex;\n    }\n    eat(){\n\t  console.log('吃东西');\n    }\n}\n\nclass cat extends Animal {\n\tconstructor(pz,name,sex){\n\tsuper(name,sex);\n    this.pz = pz;\n    }\n    miao(){\n\t\tconsole.log('喵...');\n    }\n}\n\nconstructor(pz,name,sex){\n\tsuper(name,sex);\n  //  里面的参数不需要对应，可以是任意顺序\n```\n\n\n\n##### static \n\n```js\n//凡是被static修饰的属性和方法都是静态方法和属性,只能被类名调用,不能被实例化对象调用.同时也不能被子类继承,换句话说它属于当前这个类的.\n//若是被实例化对象调用结果为underfinded\n\n//使用static修饰属性和方法\n\n    class A {\n      // 静态属性\n      static info = '见过你的美,还能爱上谁?';\n      // 静态方法\n      static love() {\n        console.log('小姐姐,看见你就犯困,为情所困,为你所困!');\n​\n      }\n    }\n    // 直接使用类名调用\n    console.log(A.info);\n    A.love();\n\n```\n\n能被继承\n\nextends的主要用于子类继承父类,继承之后子类拥有父类的的所有方法包括,静态方法和属性\n\n```js\n class A {\n      // 静态属性\n      static info = '见过你的美,还能爱上谁?';\n      // 静态方法\n      static love() {\n        console.log('小姐姐,看见你就犯困,为情所困,为你所困!');\n      }\n      // 普通方法,调用静态属性\n      say() {\n        console.log('小姐姐,' + A.info);\n      }\n    }\n    class B extends A {\n      run() {\n        console.log('类B的方法..');\n      }\n    }\n    //使用类名 父类中普通方法调用\n    B.love();\n```\n\n##### 原型链覆盖\n\n```js\nfn.prototype = { ...}\n//这样写原来对象上的方法和属性都被覆盖掉\n```\n\n\n\n#### 11.字符串方法\n\n##### 1.ES6 String.raw()\n\nES6 还为原生的 String 对象，提供了一个`raw()`方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。\n\n```javascript\nString.raw`Hi\\n${2+3}!`\n// 实际返回 \"Hi\\\\n5!\"，显示的是转义后的结果 \"Hi\\n5!\"\n\nString.raw`Hi\\u000A!`;\n// 实际返回 \"Hi\\\\u000A!\"，显示的是转义后的结果 \"Hi\\u000A!\"\n```\n\n如果原字符串的斜杠已经转义，那么`String.raw()`会进行再次转义。\n\n```javascript\nString.raw`Hi\\\\n`\n// 返回 \"Hi\\\\\\\\n\"\n\nString.raw`Hi\\\\n` === \"Hi\\\\\\\\n\" // true\n```\n\n`String.raw()`方法可以**作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。**\n\n##### 2.String.fromCodePoint()\n\nES6 提供了`String.fromCodePoint()`方法，可以识别大于`0xFFFF`的字符，弥补了`String.fromCharCode()`方法的不足。在作用上，**正好与下面的`codePointAt()`方法相反**。\n\n```javascript\nString.fromCodePoint(0x20BB7)\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\\uD83D\\uDE80y'\n// true\n```\n\n上面代码中，如果`String.fromCodePoint`方法有多个参数，则它们会被合并成一个字符串返回。\n\n注意，`fromCodePoint`方法定义在`String`对象上，而`codePointAt`方法定义在字符串的实例对象上。\n\n##### 3.实例方法：codePointAt() \n\nJavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为`2`个字节。对于那些需要`4`个字节储存的字符（Unicode 码点大于`0xFFFF`的字符），JavaScript 会认为它们是两个字符。\n\n```javascript\nvar s = \"𠮷\";\n\ns.length // 2\ns.charAt(0) // ''\ns.charAt(1) // ''\ns.charCodeAt(0) // 55362\ns.charCodeAt(1) // 57271\n```\n\n上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是`0x20BB7`，UTF-16 编码为`0xD842 0xDFB7`（十进制为`55362 57271`），需要`4`个字节储存。对于这种`4`个字节的字符，JavaScript 不能正确处理，字符串长度会误判为`2`，而且`charAt()`方法无法读取整个字符，`charCodeAt()`方法只能分别返回前两个字节和后两个字节的值。\n\nES6 提供了`codePointAt()`方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。\n\n```javascript\nlet s = '𠮷a';\n\ns.codePointAt(0) // 134071\ns.codePointAt(1) // 57271\n\ns.codePointAt(2) // 97\n```\n\n`codePointAt()`方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的`20BB7`）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，`codePointAt()`方法的结果与`charCodeAt()`方法相同。\n","slug":"ES6","published":1,"updated":"2025-01-07T02:30:24.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0chh0007572oczevb3ke","content":"<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><p>ES6 内容补充，当看到一个没见过或者不熟悉的语法时，无法拒绝对于它的学习</p>\n<h4 id=\"1-箭头函数\"><a href=\"#1-箭头函数\" class=\"headerlink\" title=\"1.箭头函数\"></a>1.箭头函数</h4><p>​    本质是一个语法糖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">() =&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.如果箭头函数只有一个参数，则括号可以省略</span></span><br><span class=\"line\">item =&gt; &#123;&#125;   <span class=\"comment\">//形如</span></span><br><span class=\"line\"><span class=\"comment\">//2如果函数体只有一条语句，则可以省略&#123;&#125;括号</span></span><br><span class=\"line\">() =&gt; <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">(a, b) =&gt; a + b</span><br><span class=\"line\"></span><br><span class=\"line\">(a) =&gt; &#123;</span><br><span class=\"line\">  a = a + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</span></span><br><span class=\"line\"><span class=\"comment\">// SyntaxError:</span></span><br><span class=\"line\">x =&gt; &#123; <span class=\"attr\">foo</span>: x &#125;</span><br><span class=\"line\"><span class=\"comment\">//因为和函数体的&#123; ... &#125;有语法冲突，所以要改为：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ok:</span></span><br><span class=\"line\">x =&gt; (&#123; <span class=\"attr\">foo</span>: x &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(1). 箭头函数this为父作用域的this，不是调用时的this<br>箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。<br>普通函数的this指向调用它的那个对象。</p>\n<p>(2). 箭头函数不能作为构造函数，不能使用new</p>\n<p>(3). 箭头函数没有arguments，caller，callee</p>\n<p>箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。</p>\n<p>箭头函数中要想接收不定参数，应该使用rest参数…解决。</p>\n<p> (4). 箭头函数通过call和apply调用，不会改变this指向，只会传入参数</p>\n<p>(5). 箭头函数没有原型属性</p>\n<p>(6). 箭头函数不能作为Generator函数，不能使用yield关键字</p>\n<p>(7). 箭头函数返回对象时，要加一个小括号</p>\n<p>(8). 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法</p>\n<p>(9). 多重箭头函数就是一个高阶函数，相当于内嵌函数</p>\n<p><strong>ps:注意</strong></p>\n<p>​    若箭头函数只有一个return语句，可以省略return 和 {};如果想加上{}的话，必须也加上return语句</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">10</span>). 箭头函数常见错误</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"title function_\">bar</span>()  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">bar函数中的<span class=\"variable language_\">this</span>指向父作用域，而a对象没有作用域，因此<span class=\"variable language_\">this</span>不是a，打印结果为<span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bar</span> = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">a.<span class=\"title function_\">bar</span>()  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">原型上使用箭头函数，<span class=\"variable language_\">this</span>指向是其父作用域，并不是对象a，因此得不到预期结果</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>一些<span class=\"variable language_\">this</span>的指向实例</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">  <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>); <span class=\"comment\">//this指向obj对象</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// 1990</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// this指向window或undefined</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>();<span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// 1990</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// this指向obj对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">       <span class=\"attr\">getAge</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">//window</span></span><br><span class=\"line\">作为对象的属性时，<span class=\"variable language_\">this</span>的指向则不再是对象本身了，箭头函数捕获的是obj&#123;&#125;这个对象的环境，然后这个环境的<span class=\"variable language_\">this</span>指向的是<span class=\"variable language_\">window</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-let-和-const-命令\"><a href=\"#2-let-和-const-命令\" class=\"headerlink\" title=\"2. let 和 const 命令\"></a>2. let 和 const 命令</h4><p>let 声明的变量只在<strong>块级作用域</strong>有效。</p>\n<ul>\n<li>只能声明一次</li>\n<li>无变量声明提升</li>\n<li>块级作用域</li>\n</ul>\n<p>会形成暂时性死区  —&gt;  <strong>声明之前无法使用，声明之后不能重新定义</strong></p>\n<p>const 声明的变量 为一个常量变量</p>\n<ul>\n<li><p>声明之后只读不可修改</p>\n<ul>\n<li>只能声明一次</li>\n<li>无变量声明提升</li>\n<li>块级作用域<ul>\n<li>相当于在栈区上锁，当其为引用数据时候，只要不改地址就不会报错（即赋值）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>在ES5 中未经声明的变量会挂载到window ，归 window 所有。而let 和 const 则不会自动挂载到 window 上</strong></p>\n</li>\n</ul>\n<h4 id=\"3-重绘和重排\"><a href=\"#3-重绘和重排\" class=\"headerlink\" title=\"3.重绘和重排\"></a>3.重绘和重排</h4><p>重绘（repaint 或 redraw）：<strong>当盒子的位置、大小以及其他属性，例如颜色、字体大小</strong>等 都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面 上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根<strong>据元素的新属性重 新绘制，使元素呈现新的外观。</strong> 触发重绘的条件：改变元素外观属性。如：color，background-color 等。 注意：table 及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，<strong>比 同等元素要多花两倍时间，这就是我们尽量避免使用 table 布局页面的原因之一。</strong> </p>\n<p>重排（重构&#x2F;回流&#x2F;reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局， 隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是 在页面第一次加载的时候。 <strong>重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新 构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称 为重绘。所以，重排必定会引发重绘，但重绘不一定会引发重排。</strong></p>\n<h4 id=\"4-rest-参数\"><a href=\"#4-rest-参数\" class=\"headerlink\" title=\"4.rest 参数\"></a>4.rest 参数</h4><p>概述：</p>\n<p>   Rest就是为解决传入的参数数量不一定， rest parameter(Rest 参数) 本身就是数组，数组的相关的方法都可以用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">a, b, ...theArgs</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>描述</p>\n<ul>\n<li><p>区分rest参数和 参数对象<br>rest参数不会为每个变量给一个单独的名称，参数对象包含所有参数传递给函数<br>参数对象不是真正的数组，rest参数是真实的数组实例。例如数组sort、map、forEach、pop的方法都可以直接使用<br>参数对象有他自己额外的特性（例如callee 属性）</p>\n</li>\n<li><pre><code class=\"js\">\n//以前函数\nfunction f(a, b) &#123;\n  var args = Array.prototype.slice.call(arguments, f.length);\n \n  // …\n&#125;\n// 等效于现在\nfunction f(a, b, ...args) &#123;&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```js</span><br><span class=\"line\">  </span><br><span class=\"line\">  function fun1(...theArgs) &#123;</span><br><span class=\"line\">    console.log(theArgs.length);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  fun1();  // 0</span><br><span class=\"line\">  fun1(5); // 1</span><br><span class=\"line\">  fun1(5, 6, 7); // 3</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><pre><code class=\"js\">排序\nfunction sortRestArgs(...theArgs) &#123;\n  var sortedArgs = theArgs.sort();\n  return sortedArgs;\n&#125;\n//好像一位和两位混合不能进行排序，这需要看一下为甚？主要第一个为主\nconsole.log(sortRestArgs(5, 3, 7, 1)); // shows 1, 3, 5, 7\n//参数对象arguments不能排序\n</code></pre>\n</li>\n<li><p>箭头函数通过rest查看参数</p>\n</li>\n</ul>\n<h4 id=\"5-严格模式\"><a href=\"#5-严格模式\" class=\"headerlink\" title=\"5.严格模式\"></a>5.严格模式</h4><p>严格模式主要有以下限制。</p>\n<ul>\n<li><p>变量必须声明后再使用</p>\n</li>\n<li><p>函数的参数不能有同名属性，否则报错</p>\n</li>\n<li><p>不能使用with语句</p>\n</li>\n<li><p>不能对只读属性赋值，否则报错</p>\n</li>\n<li><p>不能使用前缀0表示八进制数，否则报错</p>\n</li>\n<li><p>不能删除不可删除的属性，否则报错</p>\n</li>\n<li><p>不能删除变量delete prop，会报错，只能删除属性delete global[prop]</p>\n</li>\n<li><p>eval不会在它的外层作用域引入变量</p>\n</li>\n<li><p>eval和arguments不能被重新赋值</p>\n</li>\n<li><p>arguments不会自动反映函数参数的变化</p>\n</li>\n<li><p>不能使用arguments.callee</p>\n</li>\n<li><p>不能使用arguments.caller</p>\n</li>\n<li><p>禁止this指向全局对象</p>\n</li>\n<li><p>不能使用fn.caller和fn.arguments获取函数调用的堆栈</p>\n</li>\n<li><p>增加了保留字（比如protected、static和interface）</p>\n</li>\n<li><p>其中，尤其需要注意this的限制。ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。</p>\n</li>\n</ul>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1. 块级函数</span><br><span class=\"line\"> es5中严格模式下禁止声明块级函数，而在es6的严格模式中可以声明块级函数，并可以在块级作用</span><br><span class=\"line\"> 2. 箭头函数</span><br><span class=\"line\"></span><br><span class=\"line\">箭头函数是es6中新增的一种特殊函数，不管是否处于严格模式下，箭头函数的参数都不能有同名的。而ES5中，只有在严格模式下函数的参数才不能有同名</span><br><span class=\"line\"></span><br><span class=\"line\">3.字面量对象重复属性问题</span><br><span class=\"line\"></span><br><span class=\"line\">es5的严格模式中，如果对象属性重名则会报错，es6则不管是不是严格模式，如果有同名属性，则后面的属性覆盖前面的</span><br><span class=\"line\"></span><br><span class=\"line\">4.模块模式</span><br><span class=\"line\"></span><br><span class=\"line\">采用es6的模块化开发时，代码自动运行在严格模式下且没有任何办法跳出严格模式</span><br><span class=\"line\"></span><br><span class=\"line\">5.类模式</span><br><span class=\"line\"></span><br><span class=\"line\">在es6中不管是类声明还是类表达式，其内部使用的都是严格模式。</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"6-Symbol\"><a href=\"#6-Symbol\" class=\"headerlink\" title=\"6.Symbol\"></a>6.Symbol</h4><p>​    ES6 新增 一种数据类型Symbol，专门为了给对象的key赋值，这样对象的key不相同，则值不会被覆盖。</p>\n<p>​    它的功能类似于一种标识唯一性的ID。通常情况下，我们可以通过调用Symbol()函数来创建一个Symbol实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"title class_\">Symbol</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//或者，你也可以在调用Symbol()函数时传入一个可选的字符串参数，相当于给你创建的Symbol实例一个描述信息：</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;another symbol&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>Symbol 方法接收一个参数，表示对生成的 symbol 值的一种描述</strong></p>\n<p>Object.keys( )  不能拿到symbol</p>\n<p>Reflect.ownkeys( ) 可以拿到symbol</p>\n<p>Symbol.for 方法可以检测上下文中是否已经存在使用该方法且相同参数创建的 symbol 值，如果存在则返回已经存在的值，如果不存在则新建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1 === s2); <span class=\"comment\">// true</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>Symbol.keyFor 方法返回一个使用 Symbol.for 方法创建的 symbol 值的 key</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;foo&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">keyFor</span>(foo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key) <span class=\"comment\">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Symbol.for()</code>与<code>Symbol()</code>这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。<code>Symbol.for()</code>不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的<code>key</code>是否已经存在，如果不存在才会新建一个值。比如，如果你调用<code>Symbol.for(&quot;cat&quot;)</code>30 次，每次都会返回同一个 Symbol 值，但是调用<code>Symbol(&quot;cat&quot;)</code>30 次，会返回 30 个不同的 Symbol 值。</p>\n<h4 id=\"7-模板字符串\"><a href=\"#7-模板字符串\" class=\"headerlink\" title=\"7.模板字符串\"></a>7.模板字符串</h4><p>在ES6之前，我们只能用加号连接变量表达式，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">&quot;JavaScript&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;My age is &quot;</span> + (a + b) + <span class=\"string\">&quot; and I love &quot;</span> + c;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br></pre></td></tr></table></figure>\n\n<p>使用模板字符串嵌入表达式，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">&quot;JavaScript&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">`My age is <span class=\"subst\">$&#123;a+b&#125;</span> and I love <span class=\"subst\">$&#123;c&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br></pre></td></tr></table></figure>\n\n<p>多行字符串</p>\n<p>Es6的模板字符串给我们提供了一种创建多行文本字符串的新方法。在ES6之前我们只能使用”\\n“在字符串中进行换行，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1\\n2\\n3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>在es6中，我们可以直接输入回车进行换行，如下段代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`1</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">3`</span>);</span><br></pre></td></tr></table></figure>\n\n<p>原始字符串(Raw strings)</p>\n<p>原始字符串是一个普通字符串，其中不会解释转义字符。我们可以使用模板字符串创建原始字符串。我们可以使用String.raw来获取原始字符串，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"title class_\">String</span>.<span class=\"property\">raw</span> <span class=\"string\">`xy\\n<span class=\"subst\">$&#123; <span class=\"number\">1</span> + <span class=\"number\">1</span> &#125;</span>z`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); </span><br><span class=\"line\"><span class=\"comment\">//output &quot;xy\\n2z&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>任何以\\u开头的内容都将被视为Unicode转义</li>\n<li>以\\x开头的任何内容都将被视为十六进制转义</li>\n<li>任何以\\开头然后跟着一个数字将被视为八进制转义</li>\n</ul>\n<p>JavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。</p>\n<ul>\n<li>U+005C：反斜杠（reverse solidus)</li>\n<li>U+000D：回车（carriage return）</li>\n<li>U+2028：行分隔符（line separator）</li>\n<li>U+2029：段分隔符（paragraph separator）</li>\n<li>U+000A：换行符（line feed）</li>\n</ul>\n<h4 id=\"8-运算符\"><a href=\"#8-运算符\" class=\"headerlink\" title=\"8.运算符\"></a>8.运算符</h4><p>拓展运算符</p>\n<ul>\n<li><p>ES2016 新增了一个指数运算符（<code>**</code>）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>逻辑赋值运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 或赋值运算符</span></span><br><span class=\"line\">x ||= y</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">x || (x = y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 与赋值运算符</span></span><br><span class=\"line\">x &amp;&amp;= y</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">x &amp;&amp; (x = y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Null 赋值运算符</span></span><br><span class=\"line\">x ??= y</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">x ?? (x = y)</span><br></pre></td></tr></table></figure>\n\n<p><strong>但是只有运算符左侧的值为<code>null</code>或<code>undefined</code>时，才会返回右侧的值。</strong></p>\n<h4 id=\"9-解构赋值\"><a href=\"#9-解构赋值\" class=\"headerlink\" title=\"9.解构赋值\"></a>9.解构赋值</h4><h5 id=\"1-数组的解构赋值\"><a href=\"#1-数组的解构赋值\" class=\"headerlink\" title=\"1.数组的解构赋值\"></a>1.数组的解构赋值</h5><ul>\n<li>&#96;&#96;&#96;javascript<br>let [a, b, c] &#x3D; [1, 2, 3];<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">let [foo, [[bar], baz]] = [1, [[2], 3]];</span><br><span class=\"line\">foo // 1</span><br><span class=\"line\">bar // 2</span><br><span class=\"line\">baz // 3</span><br><span class=\"line\"></span><br><span class=\"line\">let [ , , third] = [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;];</span><br><span class=\"line\">third // &quot;baz&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">let [x, , y] = [1, 2, 3];</span><br><span class=\"line\">x // 1</span><br><span class=\"line\">y // 3</span><br><span class=\"line\"></span><br><span class=\"line\">let [head, ...tail] = [1, 2, 3, 4];</span><br><span class=\"line\">head // 1</span><br><span class=\"line\">tail // [2, 3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">let [x, y, ...z] = [&#x27;a&#x27;];</span><br><span class=\"line\">x // &quot;a&quot;</span><br><span class=\"line\">y // undefined</span><br><span class=\"line\">z // []</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"title class_\">NaN</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]);</span><br><span class=\"line\">x <span class=\"comment\">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值</p>\n<p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">&#x27;b&#x27;</span>] = [<span class=\"string\">&#x27;a&#x27;</span>]; <span class=\"comment\">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">&#x27;b&#x27;</span>] = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"literal\">undefined</span>]; <span class=\"comment\">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<h5 id=\"2-对象的解构赋值\"><a href=\"#2-对象的解构赋值\" class=\"headerlink\" title=\"2.对象的解构赋值\"></a>2.对象的解构赋值</h5><ul>\n<li><p>​    基本用法</p>\n<ul>\n<li>&#96;&#96;&#96;js<br>let { foo, bar } &#x3D; { foo: ‘aaa’, bar: ‘bbb’ };<br>foo &#x2F;&#x2F; “aaa”<br>bar &#x2F;&#x2F; “bbb”<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 解构不仅可以用于数组，还可以用于对象。</span><br><span class=\"line\"></span><br><span class=\"line\">  ```javascript</span><br><span class=\"line\">  let &#123; foo, bar &#125; = &#123; foo: &#x27;aaa&#x27;, bar: &#x27;bbb&#x27; &#125;;</span><br><span class=\"line\">  foo // &quot;aaa&quot;</span><br><span class=\"line\">  bar // &quot;bbb&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">bar <span class=\"comment\">// &quot;bbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">last</span>: <span class=\"string\">&#x27;world&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// &#x27;hello&#x27;</span></span><br><span class=\"line\">l <span class=\"comment\">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n</li>\n<li><p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">p</span>: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;Hello&#x27;</span>,</span><br><span class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">&#x27;World&#x27;</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class=\"line\">x <span class=\"comment\">// &quot;Hello&quot;</span></span><br><span class=\"line\">y <span class=\"comment\">// &quot;World&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认值</p>\n</li>\n</ul>\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">null</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<p>注意</p>\n<p>（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>&#123;x&#125;</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>]);</span><br><span class=\"line\">(&#123;&#125; = <span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\">(&#123;&#125; = []);</span><br></pre></td></tr></table></figure>\n\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"number\">0</span> : first, [arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>] : last&#125; = arr;</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h5 id=\"3-字符串的解构赋值\"><a href=\"#3-字符串的解构赋值\" class=\"headerlink\" title=\"3.字符串的解构赋值\"></a>3.字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">a <span class=\"comment\">// &quot;h&quot;</span></span><br><span class=\"line\">b <span class=\"comment\">// &quot;e&quot;</span></span><br><span class=\"line\">c <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">d <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">e <span class=\"comment\">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;length : len&#125; = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-数值和布尔值的解构赋值\"><a href=\"#4-数值和布尔值的解构赋值\" class=\"headerlink\" title=\"4.数值和布尔值的解构赋值\"></a>4.数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"number\">123</span>;</span><br><span class=\"line\">s === <span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"literal\">true</span>;</span><br><span class=\"line\">s === <span class=\"title class_\">Boolean</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span>; <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span>; <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-函数参数的解构赋值\"><a href=\"#5-函数参数的解构赋值\" class=\"headerlink\" title=\"5.函数参数的解构赋值\"></a>5.函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">[x, y]</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">add</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">move</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\"><span class=\"title function_\">move</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\"><span class=\"title function_\">move</span>(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\"><span class=\"title function_\">move</span>(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<h5 id=\"6-圆括号问题\"><a href=\"#6-圆括号问题\" class=\"headerlink\" title=\"6.圆括号问题\"></a>6.圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h6 id=\"1-不能使用圆括号的情况\"><a href=\"#1-不能使用圆括号的情况\" class=\"headerlink\" title=\"1.不能使用圆括号的情况\"></a>1.不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(<span class=\"attr\">x</span>: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[(z)]</span>) &#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[z,(x)]</span>) &#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">[(&#123; <span class=\"attr\">p</span>: a &#125;), &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h6 id=\"2-可以使用圆括号的情况\"><a href=\"#2-可以使用圆括号的情况\" class=\"headerlink\" title=\"2.可以使用圆括号的情况\"></a>2.可以使用圆括号的情况</h6><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(b)] = [<span class=\"number\">3</span>]; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: (d) &#125; = &#123;&#125;); <span class=\"comment\">// 正确</span></span><br><span class=\"line\">[(<span class=\"built_in\">parseInt</span>.<span class=\"property\">prop</span>)] = [<span class=\"number\">3</span>]; <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h5 id=\"7-用途\"><a href=\"#7-用途\" class=\"headerlink\" title=\"7.用途\"></a>7.用途</h5><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = <span class=\"title function_\">example</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = <span class=\"title function_\">example</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[x, y, z]</span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"string\">&quot;OK&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, &quot;OK&quot;, [867, 5309]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.<span class=\"property\">ajax</span> = <span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"params\">  beforeSend = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"params\">  cache = <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"params\">  complete = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"params\">  crossDomain = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"variable language_\">global</span> = <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"params\">  // ... more config</span></span><br><span class=\"line\"><span class=\"params\">&#125; = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;second&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&quot; is &quot;</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SourceMapConsumer</span>, <span class=\"title class_\">SourceNode</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;source-map&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h4 id=\"10-面向对象\"><a href=\"#10-面向对象\" class=\"headerlink\" title=\"10.面向对象\"></a>10.面向对象</h4><p>​        将所有的物体抽象为一个类，每一个具体的个体是类的实例化对象。构造函数是创建类的方法，可以无限制创建类，相当于工厂。</p>\n<p>​        数据类型中的类是一种数据类型，而面向对象是一种编程思想，更高级的还有函数式编程。面向对象里面也有属性和方法。有构造函数创建。为了避免资源的浪费，再构造函数里面创建实例化对象的属性，再构造函数的原型上创建对象的方法。</p>\n<ul>\n<li>​    模板： ——&gt; 构造函数是用来生成对象的，</li>\n<li>​    php python 是一种面向对象的编程语言     -&gt;    以类为创建对象的模板</li>\n<li>​     JavaScript 是基于对象的编程语言   -&gt;    以构造函数为模板 -&gt;动态语言：没有定义数据类型，需要时才会去处理</li>\n</ul>\n<h5 id=\"1-构造函数\"><a href=\"#1-构造函数\" class=\"headerlink\" title=\"1.构造函数\"></a>1.构造函数</h5><p>创建构造函数</p>\n<ul>\n<li>不能使用箭头函数</li>\n<li>首字符大写的函数</li>\n<li>建议不使用函数表达式，如果以函数表达式创建箭头函数，后面进行继承操作的时候，由于需要给子的构造函数还原，若没有名字，则还原之后他的constructor 不具名。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Animal</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Cat</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>在构造函数中，一般只写实例化对象的属性，将实例化对象的方法写在构造函数的原型上，形如</p>\n</li>\n<li><pre><code class=\"js\">function Animal(name,sex)&#123;\n    this.name = name;\n    this.sex = sex;\n&#125;\n\nAnimal.prototype.play = function()&#123;\n    console.log(&#39;play&#39;);\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new 关键字</span><br><span class=\"line\"></span><br><span class=\"line\">- ​\t\t原理：</span><br><span class=\"line\"></span><br><span class=\"line\">  - 创建一个空对象 </span><br><span class=\"line\">  - 空的原型</span><br><span class=\"line\">  - this 的指向变为空对象</span><br><span class=\"line\"></span><br><span class=\"line\">- ```js </span><br><span class=\"line\">  const cat = new Cat(&#x27;实际参数&#x27;)</span><br><span class=\"line\">  //若不需要传递参数，则后面的（）可以省略</span><br><span class=\"line\">  //形如</span><br><span class=\"line\">  const cat = new Car</span><br></pre></td></tr></table></figure>\n\n在构造函数中使用this 关键字，this 指向未来即将生成的实例化对象\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了保证实例化对象的时候，使用new 关键字，可以在构造函数内部使用，严格模式</span></span><br><span class=\"line\"><span class=\"comment\">//如果在实例化对象的时候，没有使用new 关键字系统就会报错</span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>    ....</span><br><span class=\"line\">若实例化时没有加<span class=\"keyword\">new</span>，实例化对象为未定义，而对象的属性直接报错</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;nem&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = <span class=\"string\">&#x27;cute&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> car =<span class=\"title class_\">Car</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car);</span><br><span class=\"line\"><span class=\"comment\">// underfinded</span></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n<li><p>构造函数返回值</p>\n<ul>\n<li>构造函数的返回值如果时基础数据类型，对实例化对象没有影响。</li>\n<li>如果构造函数的返回值是引用数据类型，则会覆盖掉构造函数内部的属性。<ul>\n<li>故构造函数不能有返回值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>new.target命令</p>\n<p>函数内部可以使用<code>new.target</code>属性。如果当前函数是<code>new</code>命令调用，<code>new.target</code>指向当前函数，否则为<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span>.<span class=\"property\">target</span> === f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">f</span>() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用这个属性，可以判断函数调用的时候，是否使用<code>new</code>命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">new</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请使用 new 命令调用！&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// Uncaught Error: 请使用 new 命令调用！</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，构造函数<code>f</code>调用时，没有使用<code>new</code>命令，就抛出一个错误。</p>\n<p>Object.create( ) 创建实例对象</p>\n<p>通过 Object.create 创建的对象原型为空。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于继承</span></span><br><span class=\"line\"><span class=\"title class_\">Fn1</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Oject</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Fn2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> )</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果需要一个构造函数的内容的部分包含另一个构造函数的内容，并且又有自己的</p>\n<p>属性，该怎么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cat</span>(<span class=\"params\">name,sex,scorlls</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">scorlls</span> = scorlls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//此处的call也可替换为apply，但后面参数要写成数组的形式</span></span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"title function_\">apply</span>( <span class=\"variable language_\">this</span>,[name,sex])</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"2-原型和原型链\"><a href=\"#2-原型和原型链\" class=\"headerlink\" title=\"2.原型和原型链\"></a>2.原型和原型链</h5><p>一、prototype</p>\n<p>在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。并且这个属性是一个对象数据类型的值.</p>\n<p>除了underfinded 和 null 以外，所有的数据类型的原型都是Oject</p>\n<p><code>Person           ------     prototype ---                    Perosn.prototype</code></p>\n<p><code>(构造函数)                                           ---&gt;                           (实现原理)</code></p>\n<p>二、<strong>proto</strong></p>\n<p>这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。</p>\n<p>三、constructor</p>\n<p>每个原型都有一个constructor属性，指向该关联的构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>===<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//现在基本已不被使用</span></span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span> = obj.<span class=\"property\">construcror</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">被右边的写法替代</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20211222192440398.png\" alt=\"image-20211222192440398\"></p>\n<p>四、实例与原型</p>\n<p> 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p>\n<p>五、原型的原型</p>\n<p> 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = new Object();</span><br><span class=\"line\">obj.name = &#x27;Kevin&#x27;</span><br><span class=\"line\">console.log(obj.name) // Kevin</span><br></pre></td></tr></table></figure>\n\n<p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>proto</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原型的最上面是object</span></span><br><span class=\"line\"><span class=\"comment\">//object 的上面是 null</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>六、原型链</p>\n<p> 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//而原型链中就是实例对象和原型对象之间的链接。每个函数都有一个prototype属性，这个prototype属性就是我们的原型对象，我们拿这个函数通过new构造函数创建出来的实例对象，这个实例对象自己会有一个指针(_proto_)指向他的构造函数的原型对象！这样构造函数和实例对象之间就通过( _proto_ )连接在一起形成了一条链子。</span></span><br></pre></td></tr></table></figure>\n\n<p>在JavaScript中 实例化对象与原型之间的链接，叫做原型链，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法，然后层层递进，就构成了实例与原型的链条，这就是所谓的原型链</p>\n<h6 id=\"为什么要使用原型链呢？\"><a href=\"#为什么要使用原型链呢？\" class=\"headerlink\" title=\"为什么要使用原型链呢？\"></a>为什么要使用原型链呢？</h6><p>1.为了实现继承，简化代码，实现代码重用！<br>2.只要是这个链条上的内容，都可以被访问和使用到！</p>\n<h6 id=\"使用原型链有什么作用？\"><a href=\"#使用原型链有什么作用？\" class=\"headerlink\" title=\"使用原型链有什么作用？\"></a>使用原型链有什么作用？</h6><p>继承<br>prototype用来实现基于原型的继承与属性的共享<br>避免了代码冗余，公用的属性和方法，可以放到原型对象中，这样，通过该构造函数实例化的所有对象都可以使用该对象的构造函数中的属性和方法！<br>减少了内存占用</p>\n<h6 id=\"原型链的特点\"><a href=\"#原型链的特点\" class=\"headerlink\" title=\"原型链的特点\"></a>原型链的特点</h6><p><strong>就近原则</strong>，当我们要使用一个值时，程序会优先查找离自己最近的，也就是本身有没有，如果自己没有，他就会沿着原型链向上查找，如果还没有找到，它还会沿着原型链继续向上查找，找到到达Object<br><strong>引用类型，</strong>当我们使用或者修改原型链上的值时，其实使用的是同一个值！<br>JS中每个函数都存在原型对象属性prototype。并且所有函数的默认原型都是Object的实例。<br>每个继承父函数的实例对象都包含一个内部属性_proto_。该属性包含一个指针，指向父函数的prototype。若父函数的原型对象的_proto_属性为再上一层函数。在此过程中就形成了原型链。</p>\n<h6 id=\"ES5继承\"><a href=\"#ES5继承\" class=\"headerlink\" title=\"ES5继承\"></a>ES5继承</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Es5 继承时，函数尽量不使用函数声明语法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">play</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;play&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cat</span>(<span class=\"params\">name,sex,scorlls</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">scorlls</span> = scorlls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"comment\">// Cat.prototype.constructor = Cat;</span></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>(<span class=\"string\">&#x27;cat&#x27;</span>,<span class=\"string\">&#x27;like&#x27;</span>,<span class=\"string\">&#x27;ball&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ani = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;any&#x27;</span>,<span class=\"string\">&#x27;dislike&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cat.prototype.constructor = Cat;</span></span><br><span class=\"line\">cat.<span class=\"title function_\">play</span>();</span><br><span class=\"line\"><span class=\"comment\">// Animal.play()</span></span><br><span class=\"line\">ani.<span class=\"title function_\">play</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cat,ani.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果子对象存在自己的方法，则应该写在</span></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"><span class=\"comment\">//写在前面的话一旦赋值给空白对象，方法就会丢失</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ES6继承（语法糖）\"><a href=\"#ES6继承（语法糖）\" class=\"headerlink\" title=\"ES6继承（语法糖）\"></a>ES6继承（语法糖）</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;吃东西&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">pz,name,sex</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>(name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pz</span> = pz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">miao</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;喵...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">pz,name,sex</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>(name,sex);</span><br><span class=\"line\">  <span class=\"comment\">//  里面的参数不需要对应，可以是任意顺序</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//凡是被static修饰的属性和方法都是静态方法和属性,只能被类名调用,不能被实例化对象调用.同时也不能被子类继承,换句话说它属于当前这个类的.</span></span><br><span class=\"line\"><span class=\"comment\">//若是被实例化对象调用结果为underfinded</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用static修饰属性和方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 静态属性</span></span><br><span class=\"line\">      <span class=\"keyword\">static</span> info = <span class=\"string\">&#x27;见过你的美,还能爱上谁?&#x27;</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">      <span class=\"keyword\">static</span> <span class=\"title function_\">love</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,看见你就犯困,为情所困,为你所困!&#x27;</span>);</span><br><span class=\"line\">​</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 直接使用类名调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A.<span class=\"property\">info</span>);</span><br><span class=\"line\">    A.<span class=\"title function_\">love</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>能被继承</p>\n<p>extends的主要用于子类继承父类,继承之后子类拥有父类的的所有方法包括,静态方法和属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 静态属性</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> info = <span class=\"string\">&#x27;见过你的美,还能爱上谁?&#x27;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"title function_\">love</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,看见你就犯困,为情所困,为你所困!&#x27;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 普通方法,调用静态属性</span></span><br><span class=\"line\">     <span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,&#x27;</span> + A.<span class=\"property\">info</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;类B的方法..&#x27;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//使用类名 父类中普通方法调用</span></span><br><span class=\"line\">   B.<span class=\"title function_\">love</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"原型链覆盖\"><a href=\"#原型链覆盖\" class=\"headerlink\" title=\"原型链覆盖\"></a>原型链覆盖</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123; ...&#125;</span><br><span class=\"line\"><span class=\"comment\">//这样写原来对象上的方法和属性都被覆盖掉</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"11-字符串方法\"><a href=\"#11-字符串方法\" class=\"headerlink\" title=\"11.字符串方法\"></a>11.字符串方法</h4><h5 id=\"1-ES6-String-raw\"><a href=\"#1-ES6-String-raw\" class=\"headerlink\" title=\"1.ES6 String.raw()\"></a>1.ES6 String.raw()</h5><p>ES6 还为原生的 String 对象，提供了一个<code>raw()</code>方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\">raw</span><span class=\"string\">`Hi\\n<span class=\"subst\">$&#123;<span class=\"number\">2</span>+<span class=\"number\">3</span>&#125;</span>!`</span></span><br><span class=\"line\"><span class=\"comment\">// 实际返回 &quot;Hi\\\\n5!&quot;，显示的是转义后的结果 &quot;Hi\\n5!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\">raw</span><span class=\"string\">`Hi\\u000A!`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实际返回 &quot;Hi\\\\u000A!&quot;，显示的是转义后的结果 &quot;Hi\\u000A!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果原字符串的斜杠已经转义，那么<code>String.raw()</code>会进行再次转义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\">raw</span><span class=\"string\">`Hi\\\\n`</span></span><br><span class=\"line\"><span class=\"comment\">// 返回 &quot;Hi\\\\\\\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\">raw</span><span class=\"string\">`Hi\\\\n`</span> === <span class=\"string\">&quot;Hi\\\\\\\\n&quot;</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>String.raw()</code>方法可以<strong>作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</strong></p>\n<h5 id=\"2-String-fromCodePoint\"><a href=\"#2-String-fromCodePoint\" class=\"headerlink\" title=\"2.String.fromCodePoint()\"></a>2.String.fromCodePoint()</h5><p>ES6 提供了<code>String.fromCodePoint()</code>方法，可以识别大于<code>0xFFFF</code>的字符，弥补了<code>String.fromCharCode()</code>方法的不足。在作用上，<strong>正好与下面的<code>codePointAt()</code>方法相反</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"title function_\">fromCodePoint</span>(<span class=\"number\">0x20BB7</span>)</span><br><span class=\"line\"><span class=\"comment\">// &quot;𠮷&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"title function_\">fromCodePoint</span>(<span class=\"number\">0x78</span>, <span class=\"number\">0x1f680</span>, <span class=\"number\">0x79</span>) === <span class=\"string\">&#x27;x\\uD83D\\uDE80y&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果<code>String.fromCodePoint</code>方法有多个参数，则它们会被合并成一个字符串返回。</p>\n<p>注意，<code>fromCodePoint</code>方法定义在<code>String</code>对象上，而<code>codePointAt</code>方法定义在字符串的实例对象上。</p>\n<h5 id=\"3-实例方法：codePointAt\"><a href=\"#3-实例方法：codePointAt\" class=\"headerlink\" title=\"3.实例方法：codePointAt()\"></a>3.实例方法：codePointAt()</h5><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为<code>2</code>个字节。对于那些需要<code>4</code>个字节储存的字符（Unicode 码点大于<code>0xFFFF</code>的字符），JavaScript 会认为它们是两个字符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&quot;𠮷&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"property\">length</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\">s.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>) <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\">s.<span class=\"title function_\">charAt</span>(<span class=\"number\">1</span>) <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\">s.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">0</span>) <span class=\"comment\">// 55362</span></span><br><span class=\"line\">s.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 57271</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是<code>0x20BB7</code>，UTF-16 编码为<code>0xD842 0xDFB7</code>（十进制为<code>55362 57271</code>），需要<code>4</code>个字节储存。对于这种<code>4</code>个字节的字符，JavaScript 不能正确处理，字符串长度会误判为<code>2</code>，而且<code>charAt()</code>方法无法读取整个字符，<code>charCodeAt()</code>方法只能分别返回前两个字节和后两个字节的值。</p>\n<p>ES6 提供了<code>codePointAt()</code>方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">&#x27;𠮷a&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_\">codePointAt</span>(<span class=\"number\">0</span>) <span class=\"comment\">// 134071</span></span><br><span class=\"line\">s.<span class=\"title function_\">codePointAt</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 57271</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_\">codePointAt</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 97</span></span><br></pre></td></tr></table></figure>\n\n<p><code>codePointAt()</code>方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的<code>20BB7</code>）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，<code>codePointAt()</code>方法的结果与<code>charCodeAt()</code>方法相同。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><p>ES6 内容补充，当看到一个没见过或者不熟悉的语法时，无法拒绝对于它的学习</p>\n<h4 id=\"1-箭头函数\"><a href=\"#1-箭头函数\" class=\"headerlink\" title=\"1.箭头函数\"></a>1.箭头函数</h4><p>​    本质是一个语法糖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">() =&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.如果箭头函数只有一个参数，则括号可以省略</span></span><br><span class=\"line\">item =&gt; &#123;&#125;   <span class=\"comment\">//形如</span></span><br><span class=\"line\"><span class=\"comment\">//2如果函数体只有一条语句，则可以省略&#123;&#125;括号</span></span><br><span class=\"line\">() =&gt; <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">(a, b) =&gt; a + b</span><br><span class=\"line\"></span><br><span class=\"line\">(a) =&gt; &#123;</span><br><span class=\"line\">  a = a + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</span></span><br><span class=\"line\"><span class=\"comment\">// SyntaxError:</span></span><br><span class=\"line\">x =&gt; &#123; <span class=\"attr\">foo</span>: x &#125;</span><br><span class=\"line\"><span class=\"comment\">//因为和函数体的&#123; ... &#125;有语法冲突，所以要改为：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ok:</span></span><br><span class=\"line\">x =&gt; (&#123; <span class=\"attr\">foo</span>: x &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(1). 箭头函数this为父作用域的this，不是调用时的this<br>箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。<br>普通函数的this指向调用它的那个对象。</p>\n<p>(2). 箭头函数不能作为构造函数，不能使用new</p>\n<p>(3). 箭头函数没有arguments，caller，callee</p>\n<p>箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。</p>\n<p>箭头函数中要想接收不定参数，应该使用rest参数…解决。</p>\n<p> (4). 箭头函数通过call和apply调用，不会改变this指向，只会传入参数</p>\n<p>(5). 箭头函数没有原型属性</p>\n<p>(6). 箭头函数不能作为Generator函数，不能使用yield关键字</p>\n<p>(7). 箭头函数返回对象时，要加一个小括号</p>\n<p>(8). 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法</p>\n<p>(9). 多重箭头函数就是一个高阶函数，相当于内嵌函数</p>\n<p><strong>ps:注意</strong></p>\n<p>​    若箭头函数只有一个return语句，可以省略return 和 {};如果想加上{}的话，必须也加上return语句</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">10</span>). 箭头函数常见错误</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"title function_\">bar</span>()  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">bar函数中的<span class=\"variable language_\">this</span>指向父作用域，而a对象没有作用域，因此<span class=\"variable language_\">this</span>不是a，打印结果为<span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bar</span> = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">a.<span class=\"title function_\">bar</span>()  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">原型上使用箭头函数，<span class=\"variable language_\">this</span>指向是其父作用域，并不是对象a，因此得不到预期结果</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>一些<span class=\"variable language_\">this</span>的指向实例</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">  <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>); <span class=\"comment\">//this指向obj对象</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// 1990</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// this指向window或undefined</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>();<span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// 1990</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// this指向obj对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">       <span class=\"attr\">getAge</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">//window</span></span><br><span class=\"line\">作为对象的属性时，<span class=\"variable language_\">this</span>的指向则不再是对象本身了，箭头函数捕获的是obj&#123;&#125;这个对象的环境，然后这个环境的<span class=\"variable language_\">this</span>指向的是<span class=\"variable language_\">window</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-let-和-const-命令\"><a href=\"#2-let-和-const-命令\" class=\"headerlink\" title=\"2. let 和 const 命令\"></a>2. let 和 const 命令</h4><p>let 声明的变量只在<strong>块级作用域</strong>有效。</p>\n<ul>\n<li>只能声明一次</li>\n<li>无变量声明提升</li>\n<li>块级作用域</li>\n</ul>\n<p>会形成暂时性死区  —&gt;  <strong>声明之前无法使用，声明之后不能重新定义</strong></p>\n<p>const 声明的变量 为一个常量变量</p>\n<ul>\n<li><p>声明之后只读不可修改</p>\n<ul>\n<li>只能声明一次</li>\n<li>无变量声明提升</li>\n<li>块级作用域<ul>\n<li>相当于在栈区上锁，当其为引用数据时候，只要不改地址就不会报错（即赋值）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>在ES5 中未经声明的变量会挂载到window ，归 window 所有。而let 和 const 则不会自动挂载到 window 上</strong></p>\n</li>\n</ul>\n<h4 id=\"3-重绘和重排\"><a href=\"#3-重绘和重排\" class=\"headerlink\" title=\"3.重绘和重排\"></a>3.重绘和重排</h4><p>重绘（repaint 或 redraw）：<strong>当盒子的位置、大小以及其他属性，例如颜色、字体大小</strong>等 都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面 上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根<strong>据元素的新属性重 新绘制，使元素呈现新的外观。</strong> 触发重绘的条件：改变元素外观属性。如：color，background-color 等。 注意：table 及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，<strong>比 同等元素要多花两倍时间，这就是我们尽量避免使用 table 布局页面的原因之一。</strong> </p>\n<p>重排（重构&#x2F;回流&#x2F;reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局， 隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是 在页面第一次加载的时候。 <strong>重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新 构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称 为重绘。所以，重排必定会引发重绘，但重绘不一定会引发重排。</strong></p>\n<h4 id=\"4-rest-参数\"><a href=\"#4-rest-参数\" class=\"headerlink\" title=\"4.rest 参数\"></a>4.rest 参数</h4><p>概述：</p>\n<p>   Rest就是为解决传入的参数数量不一定， rest parameter(Rest 参数) 本身就是数组，数组的相关的方法都可以用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">a, b, ...theArgs</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>描述</p>\n<ul>\n<li><p>区分rest参数和 参数对象<br>rest参数不会为每个变量给一个单独的名称，参数对象包含所有参数传递给函数<br>参数对象不是真正的数组，rest参数是真实的数组实例。例如数组sort、map、forEach、pop的方法都可以直接使用<br>参数对象有他自己额外的特性（例如callee 属性）</p>\n</li>\n<li><pre><code class=\"js\">\n//以前函数\nfunction f(a, b) &#123;\n  var args = Array.prototype.slice.call(arguments, f.length);\n \n  // …\n&#125;\n// 等效于现在\nfunction f(a, b, ...args) &#123;&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```js</span><br><span class=\"line\">  </span><br><span class=\"line\">  function fun1(...theArgs) &#123;</span><br><span class=\"line\">    console.log(theArgs.length);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  fun1();  // 0</span><br><span class=\"line\">  fun1(5); // 1</span><br><span class=\"line\">  fun1(5, 6, 7); // 3</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><pre><code class=\"js\">排序\nfunction sortRestArgs(...theArgs) &#123;\n  var sortedArgs = theArgs.sort();\n  return sortedArgs;\n&#125;\n//好像一位和两位混合不能进行排序，这需要看一下为甚？主要第一个为主\nconsole.log(sortRestArgs(5, 3, 7, 1)); // shows 1, 3, 5, 7\n//参数对象arguments不能排序\n</code></pre>\n</li>\n<li><p>箭头函数通过rest查看参数</p>\n</li>\n</ul>\n<h4 id=\"5-严格模式\"><a href=\"#5-严格模式\" class=\"headerlink\" title=\"5.严格模式\"></a>5.严格模式</h4><p>严格模式主要有以下限制。</p>\n<ul>\n<li><p>变量必须声明后再使用</p>\n</li>\n<li><p>函数的参数不能有同名属性，否则报错</p>\n</li>\n<li><p>不能使用with语句</p>\n</li>\n<li><p>不能对只读属性赋值，否则报错</p>\n</li>\n<li><p>不能使用前缀0表示八进制数，否则报错</p>\n</li>\n<li><p>不能删除不可删除的属性，否则报错</p>\n</li>\n<li><p>不能删除变量delete prop，会报错，只能删除属性delete global[prop]</p>\n</li>\n<li><p>eval不会在它的外层作用域引入变量</p>\n</li>\n<li><p>eval和arguments不能被重新赋值</p>\n</li>\n<li><p>arguments不会自动反映函数参数的变化</p>\n</li>\n<li><p>不能使用arguments.callee</p>\n</li>\n<li><p>不能使用arguments.caller</p>\n</li>\n<li><p>禁止this指向全局对象</p>\n</li>\n<li><p>不能使用fn.caller和fn.arguments获取函数调用的堆栈</p>\n</li>\n<li><p>增加了保留字（比如protected、static和interface）</p>\n</li>\n<li><p>其中，尤其需要注意this的限制。ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。</p>\n</li>\n</ul>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1. 块级函数</span><br><span class=\"line\"> es5中严格模式下禁止声明块级函数，而在es6的严格模式中可以声明块级函数，并可以在块级作用</span><br><span class=\"line\"> 2. 箭头函数</span><br><span class=\"line\"></span><br><span class=\"line\">箭头函数是es6中新增的一种特殊函数，不管是否处于严格模式下，箭头函数的参数都不能有同名的。而ES5中，只有在严格模式下函数的参数才不能有同名</span><br><span class=\"line\"></span><br><span class=\"line\">3.字面量对象重复属性问题</span><br><span class=\"line\"></span><br><span class=\"line\">es5的严格模式中，如果对象属性重名则会报错，es6则不管是不是严格模式，如果有同名属性，则后面的属性覆盖前面的</span><br><span class=\"line\"></span><br><span class=\"line\">4.模块模式</span><br><span class=\"line\"></span><br><span class=\"line\">采用es6的模块化开发时，代码自动运行在严格模式下且没有任何办法跳出严格模式</span><br><span class=\"line\"></span><br><span class=\"line\">5.类模式</span><br><span class=\"line\"></span><br><span class=\"line\">在es6中不管是类声明还是类表达式，其内部使用的都是严格模式。</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"6-Symbol\"><a href=\"#6-Symbol\" class=\"headerlink\" title=\"6.Symbol\"></a>6.Symbol</h4><p>​    ES6 新增 一种数据类型Symbol，专门为了给对象的key赋值，这样对象的key不相同，则值不会被覆盖。</p>\n<p>​    它的功能类似于一种标识唯一性的ID。通常情况下，我们可以通过调用Symbol()函数来创建一个Symbol实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"title class_\">Symbol</span>()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//或者，你也可以在调用Symbol()函数时传入一个可选的字符串参数，相当于给你创建的Symbol实例一个描述信息：</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;another symbol&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>Symbol 方法接收一个参数，表示对生成的 symbol 值的一种描述</strong></p>\n<p>Object.keys( )  不能拿到symbol</p>\n<p>Reflect.ownkeys( ) 可以拿到symbol</p>\n<p>Symbol.for 方法可以检测上下文中是否已经存在使用该方法且相同参数创建的 symbol 值，如果存在则返回已经存在的值，如果不存在则新建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1 === s2); <span class=\"comment\">// true</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>Symbol.keyFor 方法返回一个使用 Symbol.for 方法创建的 symbol 值的 key</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;foo&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">keyFor</span>(foo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key) <span class=\"comment\">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Symbol.for()</code>与<code>Symbol()</code>这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。<code>Symbol.for()</code>不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的<code>key</code>是否已经存在，如果不存在才会新建一个值。比如，如果你调用<code>Symbol.for(&quot;cat&quot;)</code>30 次，每次都会返回同一个 Symbol 值，但是调用<code>Symbol(&quot;cat&quot;)</code>30 次，会返回 30 个不同的 Symbol 值。</p>\n<h4 id=\"7-模板字符串\"><a href=\"#7-模板字符串\" class=\"headerlink\" title=\"7.模板字符串\"></a>7.模板字符串</h4><p>在ES6之前，我们只能用加号连接变量表达式，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">&quot;JavaScript&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;My age is &quot;</span> + (a + b) + <span class=\"string\">&quot; and I love &quot;</span> + c;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br></pre></td></tr></table></figure>\n\n<p>使用模板字符串嵌入表达式，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">&quot;JavaScript&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">`My age is <span class=\"subst\">$&#123;a+b&#125;</span> and I love <span class=\"subst\">$&#123;c&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br></pre></td></tr></table></figure>\n\n<p>多行字符串</p>\n<p>Es6的模板字符串给我们提供了一种创建多行文本字符串的新方法。在ES6之前我们只能使用”\\n“在字符串中进行换行，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1\\n2\\n3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//output</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>在es6中，我们可以直接输入回车进行换行，如下段代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`1</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">3`</span>);</span><br></pre></td></tr></table></figure>\n\n<p>原始字符串(Raw strings)</p>\n<p>原始字符串是一个普通字符串，其中不会解释转义字符。我们可以使用模板字符串创建原始字符串。我们可以使用String.raw来获取原始字符串，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"title class_\">String</span>.<span class=\"property\">raw</span> <span class=\"string\">`xy\\n<span class=\"subst\">$&#123; <span class=\"number\">1</span> + <span class=\"number\">1</span> &#125;</span>z`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); </span><br><span class=\"line\"><span class=\"comment\">//output &quot;xy\\n2z&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>任何以\\u开头的内容都将被视为Unicode转义</li>\n<li>以\\x开头的任何内容都将被视为十六进制转义</li>\n<li>任何以\\开头然后跟着一个数字将被视为八进制转义</li>\n</ul>\n<p>JavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。</p>\n<ul>\n<li>U+005C：反斜杠（reverse solidus)</li>\n<li>U+000D：回车（carriage return）</li>\n<li>U+2028：行分隔符（line separator）</li>\n<li>U+2029：段分隔符（paragraph separator）</li>\n<li>U+000A：换行符（line feed）</li>\n</ul>\n<h4 id=\"8-运算符\"><a href=\"#8-运算符\" class=\"headerlink\" title=\"8.运算符\"></a>8.运算符</h4><p>拓展运算符</p>\n<ul>\n<li><p>ES2016 新增了一个指数运算符（<code>**</code>）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>逻辑赋值运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 或赋值运算符</span></span><br><span class=\"line\">x ||= y</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">x || (x = y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 与赋值运算符</span></span><br><span class=\"line\">x &amp;&amp;= y</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">x &amp;&amp; (x = y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Null 赋值运算符</span></span><br><span class=\"line\">x ??= y</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">x ?? (x = y)</span><br></pre></td></tr></table></figure>\n\n<p><strong>但是只有运算符左侧的值为<code>null</code>或<code>undefined</code>时，才会返回右侧的值。</strong></p>\n<h4 id=\"9-解构赋值\"><a href=\"#9-解构赋值\" class=\"headerlink\" title=\"9.解构赋值\"></a>9.解构赋值</h4><h5 id=\"1-数组的解构赋值\"><a href=\"#1-数组的解构赋值\" class=\"headerlink\" title=\"1.数组的解构赋值\"></a>1.数组的解构赋值</h5><ul>\n<li>&#96;&#96;&#96;javascript<br>let [a, b, c] &#x3D; [1, 2, 3];<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">let [foo, [[bar], baz]] = [1, [[2], 3]];</span><br><span class=\"line\">foo // 1</span><br><span class=\"line\">bar // 2</span><br><span class=\"line\">baz // 3</span><br><span class=\"line\"></span><br><span class=\"line\">let [ , , third] = [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;];</span><br><span class=\"line\">third // &quot;baz&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">let [x, , y] = [1, 2, 3];</span><br><span class=\"line\">x // 1</span><br><span class=\"line\">y // 3</span><br><span class=\"line\"></span><br><span class=\"line\">let [head, ...tail] = [1, 2, 3, 4];</span><br><span class=\"line\">head // 1</span><br><span class=\"line\">tail // [2, 3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">let [x, y, ...z] = [&#x27;a&#x27;];</span><br><span class=\"line\">x // &quot;a&quot;</span><br><span class=\"line\">y // undefined</span><br><span class=\"line\">z // []</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"title class_\">NaN</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]);</span><br><span class=\"line\">x <span class=\"comment\">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值</p>\n<p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">&#x27;b&#x27;</span>] = [<span class=\"string\">&#x27;a&#x27;</span>]; <span class=\"comment\">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">&#x27;b&#x27;</span>] = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"literal\">undefined</span>]; <span class=\"comment\">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<h5 id=\"2-对象的解构赋值\"><a href=\"#2-对象的解构赋值\" class=\"headerlink\" title=\"2.对象的解构赋值\"></a>2.对象的解构赋值</h5><ul>\n<li><p>​    基本用法</p>\n<ul>\n<li>&#96;&#96;&#96;js<br>let { foo, bar } &#x3D; { foo: ‘aaa’, bar: ‘bbb’ };<br>foo &#x2F;&#x2F; “aaa”<br>bar &#x2F;&#x2F; “bbb”<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 解构不仅可以用于数组，还可以用于对象。</span><br><span class=\"line\"></span><br><span class=\"line\">  ```javascript</span><br><span class=\"line\">  let &#123; foo, bar &#125; = &#123; foo: &#x27;aaa&#x27;, bar: &#x27;bbb&#x27; &#125;;</span><br><span class=\"line\">  foo // &quot;aaa&quot;</span><br><span class=\"line\">  bar // &quot;bbb&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">bar <span class=\"comment\">// &quot;bbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"attr\">last</span>: <span class=\"string\">&#x27;world&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// &#x27;hello&#x27;</span></span><br><span class=\"line\">l <span class=\"comment\">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n</li>\n<li><p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">p</span>: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;Hello&#x27;</span>,</span><br><span class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">&#x27;World&#x27;</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class=\"line\">x <span class=\"comment\">// &quot;Hello&quot;</span></span><br><span class=\"line\">y <span class=\"comment\">// &quot;World&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认值</p>\n</li>\n</ul>\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">null</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<p>注意</p>\n<p>（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>&#123;x&#125;</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>]);</span><br><span class=\"line\">(&#123;&#125; = <span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\">(&#123;&#125; = []);</span><br></pre></td></tr></table></figure>\n\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"number\">0</span> : first, [arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>] : last&#125; = arr;</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h5 id=\"3-字符串的解构赋值\"><a href=\"#3-字符串的解构赋值\" class=\"headerlink\" title=\"3.字符串的解构赋值\"></a>3.字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">a <span class=\"comment\">// &quot;h&quot;</span></span><br><span class=\"line\">b <span class=\"comment\">// &quot;e&quot;</span></span><br><span class=\"line\">c <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">d <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">e <span class=\"comment\">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;length : len&#125; = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-数值和布尔值的解构赋值\"><a href=\"#4-数值和布尔值的解构赋值\" class=\"headerlink\" title=\"4.数值和布尔值的解构赋值\"></a>4.数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"number\">123</span>;</span><br><span class=\"line\">s === <span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"literal\">true</span>;</span><br><span class=\"line\">s === <span class=\"title class_\">Boolean</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span>; <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span>; <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-函数参数的解构赋值\"><a href=\"#5-函数参数的解构赋值\" class=\"headerlink\" title=\"5.函数参数的解构赋值\"></a>5.函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">[x, y]</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">add</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">move</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\"><span class=\"title function_\">move</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\"><span class=\"title function_\">move</span>(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\"><span class=\"title function_\">move</span>(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<h5 id=\"6-圆括号问题\"><a href=\"#6-圆括号问题\" class=\"headerlink\" title=\"6.圆括号问题\"></a>6.圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h6 id=\"1-不能使用圆括号的情况\"><a href=\"#1-不能使用圆括号的情况\" class=\"headerlink\" title=\"1.不能使用圆括号的情况\"></a>1.不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(<span class=\"attr\">x</span>: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[(z)]</span>) &#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[z,(x)]</span>) &#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">[(&#123; <span class=\"attr\">p</span>: a &#125;), &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h6 id=\"2-可以使用圆括号的情况\"><a href=\"#2-可以使用圆括号的情况\" class=\"headerlink\" title=\"2.可以使用圆括号的情况\"></a>2.可以使用圆括号的情况</h6><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(b)] = [<span class=\"number\">3</span>]; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: (d) &#125; = &#123;&#125;); <span class=\"comment\">// 正确</span></span><br><span class=\"line\">[(<span class=\"built_in\">parseInt</span>.<span class=\"property\">prop</span>)] = [<span class=\"number\">3</span>]; <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h5 id=\"7-用途\"><a href=\"#7-用途\" class=\"headerlink\" title=\"7.用途\"></a>7.用途</h5><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = <span class=\"title function_\">example</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = <span class=\"title function_\">example</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[x, y, z]</span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"string\">&quot;OK&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, &quot;OK&quot;, [867, 5309]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.<span class=\"property\">ajax</span> = <span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"params\">  beforeSend = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"params\">  cache = <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"params\">  complete = <span class=\"keyword\">function</span> () &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"params\">  crossDomain = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"variable language_\">global</span> = <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"params\">  // ... more config</span></span><br><span class=\"line\"><span class=\"params\">&#125; = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;second&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&quot; is &quot;</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SourceMapConsumer</span>, <span class=\"title class_\">SourceNode</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;source-map&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h4 id=\"10-面向对象\"><a href=\"#10-面向对象\" class=\"headerlink\" title=\"10.面向对象\"></a>10.面向对象</h4><p>​        将所有的物体抽象为一个类，每一个具体的个体是类的实例化对象。构造函数是创建类的方法，可以无限制创建类，相当于工厂。</p>\n<p>​        数据类型中的类是一种数据类型，而面向对象是一种编程思想，更高级的还有函数式编程。面向对象里面也有属性和方法。有构造函数创建。为了避免资源的浪费，再构造函数里面创建实例化对象的属性，再构造函数的原型上创建对象的方法。</p>\n<ul>\n<li>​    模板： ——&gt; 构造函数是用来生成对象的，</li>\n<li>​    php python 是一种面向对象的编程语言     -&gt;    以类为创建对象的模板</li>\n<li>​     JavaScript 是基于对象的编程语言   -&gt;    以构造函数为模板 -&gt;动态语言：没有定义数据类型，需要时才会去处理</li>\n</ul>\n<h5 id=\"1-构造函数\"><a href=\"#1-构造函数\" class=\"headerlink\" title=\"1.构造函数\"></a>1.构造函数</h5><p>创建构造函数</p>\n<ul>\n<li>不能使用箭头函数</li>\n<li>首字符大写的函数</li>\n<li>建议不使用函数表达式，如果以函数表达式创建箭头函数，后面进行继承操作的时候，由于需要给子的构造函数还原，若没有名字，则还原之后他的constructor 不具名。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Animal</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Cat</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>在构造函数中，一般只写实例化对象的属性，将实例化对象的方法写在构造函数的原型上，形如</p>\n</li>\n<li><pre><code class=\"js\">function Animal(name,sex)&#123;\n    this.name = name;\n    this.sex = sex;\n&#125;\n\nAnimal.prototype.play = function()&#123;\n    console.log(&#39;play&#39;);\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new 关键字</span><br><span class=\"line\"></span><br><span class=\"line\">- ​\t\t原理：</span><br><span class=\"line\"></span><br><span class=\"line\">  - 创建一个空对象 </span><br><span class=\"line\">  - 空的原型</span><br><span class=\"line\">  - this 的指向变为空对象</span><br><span class=\"line\"></span><br><span class=\"line\">- ```js </span><br><span class=\"line\">  const cat = new Cat(&#x27;实际参数&#x27;)</span><br><span class=\"line\">  //若不需要传递参数，则后面的（）可以省略</span><br><span class=\"line\">  //形如</span><br><span class=\"line\">  const cat = new Car</span><br></pre></td></tr></table></figure>\n\n在构造函数中使用this 关键字，this 指向未来即将生成的实例化对象\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了保证实例化对象的时候，使用new 关键字，可以在构造函数内部使用，严格模式</span></span><br><span class=\"line\"><span class=\"comment\">//如果在实例化对象的时候，没有使用new 关键字系统就会报错</span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>    ....</span><br><span class=\"line\">若实例化时没有加<span class=\"keyword\">new</span>，实例化对象为未定义，而对象的属性直接报错</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;nem&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = <span class=\"string\">&#x27;cute&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> car =<span class=\"title class_\">Car</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car);</span><br><span class=\"line\"><span class=\"comment\">// underfinded</span></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n<li><p>构造函数返回值</p>\n<ul>\n<li>构造函数的返回值如果时基础数据类型，对实例化对象没有影响。</li>\n<li>如果构造函数的返回值是引用数据类型，则会覆盖掉构造函数内部的属性。<ul>\n<li>故构造函数不能有返回值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>new.target命令</p>\n<p>函数内部可以使用<code>new.target</code>属性。如果当前函数是<code>new</code>命令调用，<code>new.target</code>指向当前函数，否则为<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span>.<span class=\"property\">target</span> === f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">f</span>() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用这个属性，可以判断函数调用的时候，是否使用<code>new</code>命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">new</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请使用 new 命令调用！&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// Uncaught Error: 请使用 new 命令调用！</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，构造函数<code>f</code>调用时，没有使用<code>new</code>命令，就抛出一个错误。</p>\n<p>Object.create( ) 创建实例对象</p>\n<p>通过 Object.create 创建的对象原型为空。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于继承</span></span><br><span class=\"line\"><span class=\"title class_\">Fn1</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Oject</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Fn2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> )</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果需要一个构造函数的内容的部分包含另一个构造函数的内容，并且又有自己的</p>\n<p>属性，该怎么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cat</span>(<span class=\"params\">name,sex,scorlls</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">scorlls</span> = scorlls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//此处的call也可替换为apply，但后面参数要写成数组的形式</span></span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"title function_\">apply</span>( <span class=\"variable language_\">this</span>,[name,sex])</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"2-原型和原型链\"><a href=\"#2-原型和原型链\" class=\"headerlink\" title=\"2.原型和原型链\"></a>2.原型和原型链</h5><p>一、prototype</p>\n<p>在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。并且这个属性是一个对象数据类型的值.</p>\n<p>除了underfinded 和 null 以外，所有的数据类型的原型都是Oject</p>\n<p><code>Person           ------     prototype ---                    Perosn.prototype</code></p>\n<p><code>(构造函数)                                           ---&gt;                           (实现原理)</code></p>\n<p>二、<strong>proto</strong></p>\n<p>这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。</p>\n<p>三、constructor</p>\n<p>每个原型都有一个constructor属性，指向该关联的构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>===<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//现在基本已不被使用</span></span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span> = obj.<span class=\"property\">construcror</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">被右边的写法替代</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20211222192440398.png\" alt=\"image-20211222192440398\"></p>\n<p>四、实例与原型</p>\n<p> 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p>\n<p>五、原型的原型</p>\n<p> 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = new Object();</span><br><span class=\"line\">obj.name = &#x27;Kevin&#x27;</span><br><span class=\"line\">console.log(obj.name) // Kevin</span><br></pre></td></tr></table></figure>\n\n<p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>proto</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原型的最上面是object</span></span><br><span class=\"line\"><span class=\"comment\">//object 的上面是 null</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>六、原型链</p>\n<p> 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//而原型链中就是实例对象和原型对象之间的链接。每个函数都有一个prototype属性，这个prototype属性就是我们的原型对象，我们拿这个函数通过new构造函数创建出来的实例对象，这个实例对象自己会有一个指针(_proto_)指向他的构造函数的原型对象！这样构造函数和实例对象之间就通过( _proto_ )连接在一起形成了一条链子。</span></span><br></pre></td></tr></table></figure>\n\n<p>在JavaScript中 实例化对象与原型之间的链接，叫做原型链，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法，然后层层递进，就构成了实例与原型的链条，这就是所谓的原型链</p>\n<h6 id=\"为什么要使用原型链呢？\"><a href=\"#为什么要使用原型链呢？\" class=\"headerlink\" title=\"为什么要使用原型链呢？\"></a>为什么要使用原型链呢？</h6><p>1.为了实现继承，简化代码，实现代码重用！<br>2.只要是这个链条上的内容，都可以被访问和使用到！</p>\n<h6 id=\"使用原型链有什么作用？\"><a href=\"#使用原型链有什么作用？\" class=\"headerlink\" title=\"使用原型链有什么作用？\"></a>使用原型链有什么作用？</h6><p>继承<br>prototype用来实现基于原型的继承与属性的共享<br>避免了代码冗余，公用的属性和方法，可以放到原型对象中，这样，通过该构造函数实例化的所有对象都可以使用该对象的构造函数中的属性和方法！<br>减少了内存占用</p>\n<h6 id=\"原型链的特点\"><a href=\"#原型链的特点\" class=\"headerlink\" title=\"原型链的特点\"></a>原型链的特点</h6><p><strong>就近原则</strong>，当我们要使用一个值时，程序会优先查找离自己最近的，也就是本身有没有，如果自己没有，他就会沿着原型链向上查找，如果还没有找到，它还会沿着原型链继续向上查找，找到到达Object<br><strong>引用类型，</strong>当我们使用或者修改原型链上的值时，其实使用的是同一个值！<br>JS中每个函数都存在原型对象属性prototype。并且所有函数的默认原型都是Object的实例。<br>每个继承父函数的实例对象都包含一个内部属性_proto_。该属性包含一个指针，指向父函数的prototype。若父函数的原型对象的_proto_属性为再上一层函数。在此过程中就形成了原型链。</p>\n<h6 id=\"ES5继承\"><a href=\"#ES5继承\" class=\"headerlink\" title=\"ES5继承\"></a>ES5继承</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Es5 继承时，函数尽量不使用函数声明语法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">play</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;play&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cat</span>(<span class=\"params\">name,sex,scorlls</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">scorlls</span> = scorlls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"comment\">// Cat.prototype.constructor = Cat;</span></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>(<span class=\"string\">&#x27;cat&#x27;</span>,<span class=\"string\">&#x27;like&#x27;</span>,<span class=\"string\">&#x27;ball&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ani = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;any&#x27;</span>,<span class=\"string\">&#x27;dislike&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cat.prototype.constructor = Cat;</span></span><br><span class=\"line\">cat.<span class=\"title function_\">play</span>();</span><br><span class=\"line\"><span class=\"comment\">// Animal.play()</span></span><br><span class=\"line\">ani.<span class=\"title function_\">play</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cat,ani.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果子对象存在自己的方法，则应该写在</span></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"><span class=\"comment\">//写在前面的话一旦赋值给空白对象，方法就会丢失</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ES6继承（语法糖）\"><a href=\"#ES6继承（语法糖）\" class=\"headerlink\" title=\"ES6继承（语法糖）\"></a>ES6继承（语法糖）</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;吃东西&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">pz,name,sex</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>(name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pz</span> = pz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">miao</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;喵...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">pz,name,sex</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>(name,sex);</span><br><span class=\"line\">  <span class=\"comment\">//  里面的参数不需要对应，可以是任意顺序</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//凡是被static修饰的属性和方法都是静态方法和属性,只能被类名调用,不能被实例化对象调用.同时也不能被子类继承,换句话说它属于当前这个类的.</span></span><br><span class=\"line\"><span class=\"comment\">//若是被实例化对象调用结果为underfinded</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用static修饰属性和方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 静态属性</span></span><br><span class=\"line\">      <span class=\"keyword\">static</span> info = <span class=\"string\">&#x27;见过你的美,还能爱上谁?&#x27;</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">      <span class=\"keyword\">static</span> <span class=\"title function_\">love</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,看见你就犯困,为情所困,为你所困!&#x27;</span>);</span><br><span class=\"line\">​</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 直接使用类名调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(A.<span class=\"property\">info</span>);</span><br><span class=\"line\">    A.<span class=\"title function_\">love</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>能被继承</p>\n<p>extends的主要用于子类继承父类,继承之后子类拥有父类的的所有方法包括,静态方法和属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 静态属性</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> info = <span class=\"string\">&#x27;见过你的美,还能爱上谁?&#x27;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"title function_\">love</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,看见你就犯困,为情所困,为你所困!&#x27;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 普通方法,调用静态属性</span></span><br><span class=\"line\">     <span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,&#x27;</span> + A.<span class=\"property\">info</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;类B的方法..&#x27;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//使用类名 父类中普通方法调用</span></span><br><span class=\"line\">   B.<span class=\"title function_\">love</span>();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"原型链覆盖\"><a href=\"#原型链覆盖\" class=\"headerlink\" title=\"原型链覆盖\"></a>原型链覆盖</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123; ...&#125;</span><br><span class=\"line\"><span class=\"comment\">//这样写原来对象上的方法和属性都被覆盖掉</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"11-字符串方法\"><a href=\"#11-字符串方法\" class=\"headerlink\" title=\"11.字符串方法\"></a>11.字符串方法</h4><h5 id=\"1-ES6-String-raw\"><a href=\"#1-ES6-String-raw\" class=\"headerlink\" title=\"1.ES6 String.raw()\"></a>1.ES6 String.raw()</h5><p>ES6 还为原生的 String 对象，提供了一个<code>raw()</code>方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\">raw</span><span class=\"string\">`Hi\\n<span class=\"subst\">$&#123;<span class=\"number\">2</span>+<span class=\"number\">3</span>&#125;</span>!`</span></span><br><span class=\"line\"><span class=\"comment\">// 实际返回 &quot;Hi\\\\n5!&quot;，显示的是转义后的结果 &quot;Hi\\n5!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\">raw</span><span class=\"string\">`Hi\\u000A!`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实际返回 &quot;Hi\\\\u000A!&quot;，显示的是转义后的结果 &quot;Hi\\u000A!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果原字符串的斜杠已经转义，那么<code>String.raw()</code>会进行再次转义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\">raw</span><span class=\"string\">`Hi\\\\n`</span></span><br><span class=\"line\"><span class=\"comment\">// 返回 &quot;Hi\\\\\\\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\">raw</span><span class=\"string\">`Hi\\\\n`</span> === <span class=\"string\">&quot;Hi\\\\\\\\n&quot;</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>String.raw()</code>方法可以<strong>作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</strong></p>\n<h5 id=\"2-String-fromCodePoint\"><a href=\"#2-String-fromCodePoint\" class=\"headerlink\" title=\"2.String.fromCodePoint()\"></a>2.String.fromCodePoint()</h5><p>ES6 提供了<code>String.fromCodePoint()</code>方法，可以识别大于<code>0xFFFF</code>的字符，弥补了<code>String.fromCharCode()</code>方法的不足。在作用上，<strong>正好与下面的<code>codePointAt()</code>方法相反</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"title function_\">fromCodePoint</span>(<span class=\"number\">0x20BB7</span>)</span><br><span class=\"line\"><span class=\"comment\">// &quot;𠮷&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"title function_\">fromCodePoint</span>(<span class=\"number\">0x78</span>, <span class=\"number\">0x1f680</span>, <span class=\"number\">0x79</span>) === <span class=\"string\">&#x27;x\\uD83D\\uDE80y&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果<code>String.fromCodePoint</code>方法有多个参数，则它们会被合并成一个字符串返回。</p>\n<p>注意，<code>fromCodePoint</code>方法定义在<code>String</code>对象上，而<code>codePointAt</code>方法定义在字符串的实例对象上。</p>\n<h5 id=\"3-实例方法：codePointAt\"><a href=\"#3-实例方法：codePointAt\" class=\"headerlink\" title=\"3.实例方法：codePointAt()\"></a>3.实例方法：codePointAt()</h5><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为<code>2</code>个字节。对于那些需要<code>4</code>个字节储存的字符（Unicode 码点大于<code>0xFFFF</code>的字符），JavaScript 会认为它们是两个字符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&quot;𠮷&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"property\">length</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\">s.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>) <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\">s.<span class=\"title function_\">charAt</span>(<span class=\"number\">1</span>) <span class=\"comment\">// &#x27;&#x27;</span></span><br><span class=\"line\">s.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">0</span>) <span class=\"comment\">// 55362</span></span><br><span class=\"line\">s.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 57271</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是<code>0x20BB7</code>，UTF-16 编码为<code>0xD842 0xDFB7</code>（十进制为<code>55362 57271</code>），需要<code>4</code>个字节储存。对于这种<code>4</code>个字节的字符，JavaScript 不能正确处理，字符串长度会误判为<code>2</code>，而且<code>charAt()</code>方法无法读取整个字符，<code>charCodeAt()</code>方法只能分别返回前两个字节和后两个字节的值。</p>\n<p>ES6 提供了<code>codePointAt()</code>方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">&#x27;𠮷a&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_\">codePointAt</span>(<span class=\"number\">0</span>) <span class=\"comment\">// 134071</span></span><br><span class=\"line\">s.<span class=\"title function_\">codePointAt</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 57271</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_\">codePointAt</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 97</span></span><br></pre></td></tr></table></figure>\n\n<p><code>codePointAt()</code>方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的<code>20BB7</code>）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，<code>codePointAt()</code>方法的结果与<code>charCodeAt()</code>方法相同。</p>\n"},{"title":"es6概述2","author":"codefish","date":"2022-03-15T12:22:09.000Z","top_img":"/img/9.jpg","cover":"/img/9.jpg","_content":"\nES6是js的高级语法，不断学习js，对于代码逻辑的理解更加透彻\n\n# es6知识点整理\n\n[toc]\n\n## let和const\n\n1. let 声明变量\n   1. 不存在变量提升\n   \n   ```js\n   //let声明的变量在声明语句之前不能使用，会报错。var未经声明的变量会挂载在window\n   ```\n   \n   \n   \n   1. 暂时性死区\n   \n   ```js\n   //声明语句之前不能使用，声明语句之后不能重新定义\n   ```\n   \n   \n   \n   1. 不允许重复声明\n   \n      ```js \n      //已经被关键词let声明的变量不能重新声明\n      ```\n   \n      \n   \n   2. 块级作用域\n   \n      ````js\n      //在{} 中的为块级作用域，当中声明的变量只在次作用域有效。\n      //var 除了在函数声明的变量外，其他都归全局所有\n      ````\n   \n      \n   \n2. const声明常量\n   1. const声明的常量拥有let声明变量的所有特性\n   2. const声明的变量不能进行更改\n\n## 变量的解构赋值\n\n1. 数组的解构赋值\n   1. 基本使用\n   \n   ```js\n   let [a,b,c] = [1,2,3]\n   a = 1;\n   b = 2; \n   c = 3;\n   \n   //\n   let [a,[b],c] = [1,[2,3],4]\n   a = 1;\n   b = 2;\n   c = 4;\n   \n   //let [a] = [1,2,3]\n   ```\n   \n   \n   \n   1. 默认值\n   \n   ```js\n   let [a,b=0] = [3]\n   a = 3;\n   b = 0;\n   ```\n   \n   \n   \n2. 对象的解构赋值\n   1. 基本使用\n   \n   ```js\n   let a = {name:'lihao',sex:'male'}\n   let {name,sex} = a\n   // <=> let {name:name,sex:sex} = a\n   // let {log} = window\n   \n   \n   let {name:n,sex:s} = a\n   let {name =3} = a\n   let {name = '张三'} = {}\n   \n   ```\n   \n   \n   \n   1. 默认值\n   \n3. 字符串的解构赋值\n   1. 了解基本的应用方式\n   \n4. 函数参数的解构赋值\n   1. 作用\n   2. 应用场景\n\n## 模板字符串\n\n1. 模板字符串的使用方式\n2. 字符串中传入变量\n3. 花括号中使用表达式\n\n## 函数的扩展\n\n1. 函数参数默认值\n2. rest参数\n3. 箭头函数\n   1. 简化写法\n   2. 使用场景\n   3. this\n\n## 对象的语法糖\n\n1. 对象属性的简化写法\n2. 方法的简化写法\n3. super关键字\n\n## set和map\n\n1. set\t\n   1. 创建set\n   2. 属性和方法\n      1. size\n      2. add()\n      3. delete\n      4. has\n      5. clear\n   3. 遍历操作\n      1. keys()\n      2. values()\n      3. entries()\n      4. forEach()\n2. map\n   1. 含义和基本用法\n   2. 方法\n      1. set()\n      2. get()\n      3. has()\n      4. delete()\n      5. clear()\n   3. 遍历操作\n      1. keys()\n      2. values()\n      3. entries()\n      4. forEach()\n\n## symbol\n\n1. symbol 的特点\n2. 创建symbol\n3. symbol的使用\n\n## Promise\n\n1. Promise的应用场景和解决的问题\n2. Promise中的方法\n   1. then方法\n   2. catch方法\n   3. finally方法\n   4. all方法\n   5. race方法\n   6. resolve方法\n\n## async/await\n\n1. async / await解决的问题\n2. 具体使用方法\n\n## class\n\n1. class的本质\n2. 使用方式\n3. constructor \n4. 属性和方法的设置\n5. 继承\n6. super方法\n7. 静态属性和方法","source":"_posts/es62.md","raw":"---\ntitle: es6概述2\n\nauthor: codefish\ndate: 2022-3-15 20:22:09\ncategories: js\ntop_img: /img/9.jpg\ncover: /img/9.jpg\n---\n\nES6是js的高级语法，不断学习js，对于代码逻辑的理解更加透彻\n\n# es6知识点整理\n\n[toc]\n\n## let和const\n\n1. let 声明变量\n   1. 不存在变量提升\n   \n   ```js\n   //let声明的变量在声明语句之前不能使用，会报错。var未经声明的变量会挂载在window\n   ```\n   \n   \n   \n   1. 暂时性死区\n   \n   ```js\n   //声明语句之前不能使用，声明语句之后不能重新定义\n   ```\n   \n   \n   \n   1. 不允许重复声明\n   \n      ```js \n      //已经被关键词let声明的变量不能重新声明\n      ```\n   \n      \n   \n   2. 块级作用域\n   \n      ````js\n      //在{} 中的为块级作用域，当中声明的变量只在次作用域有效。\n      //var 除了在函数声明的变量外，其他都归全局所有\n      ````\n   \n      \n   \n2. const声明常量\n   1. const声明的常量拥有let声明变量的所有特性\n   2. const声明的变量不能进行更改\n\n## 变量的解构赋值\n\n1. 数组的解构赋值\n   1. 基本使用\n   \n   ```js\n   let [a,b,c] = [1,2,3]\n   a = 1;\n   b = 2; \n   c = 3;\n   \n   //\n   let [a,[b],c] = [1,[2,3],4]\n   a = 1;\n   b = 2;\n   c = 4;\n   \n   //let [a] = [1,2,3]\n   ```\n   \n   \n   \n   1. 默认值\n   \n   ```js\n   let [a,b=0] = [3]\n   a = 3;\n   b = 0;\n   ```\n   \n   \n   \n2. 对象的解构赋值\n   1. 基本使用\n   \n   ```js\n   let a = {name:'lihao',sex:'male'}\n   let {name,sex} = a\n   // <=> let {name:name,sex:sex} = a\n   // let {log} = window\n   \n   \n   let {name:n,sex:s} = a\n   let {name =3} = a\n   let {name = '张三'} = {}\n   \n   ```\n   \n   \n   \n   1. 默认值\n   \n3. 字符串的解构赋值\n   1. 了解基本的应用方式\n   \n4. 函数参数的解构赋值\n   1. 作用\n   2. 应用场景\n\n## 模板字符串\n\n1. 模板字符串的使用方式\n2. 字符串中传入变量\n3. 花括号中使用表达式\n\n## 函数的扩展\n\n1. 函数参数默认值\n2. rest参数\n3. 箭头函数\n   1. 简化写法\n   2. 使用场景\n   3. this\n\n## 对象的语法糖\n\n1. 对象属性的简化写法\n2. 方法的简化写法\n3. super关键字\n\n## set和map\n\n1. set\t\n   1. 创建set\n   2. 属性和方法\n      1. size\n      2. add()\n      3. delete\n      4. has\n      5. clear\n   3. 遍历操作\n      1. keys()\n      2. values()\n      3. entries()\n      4. forEach()\n2. map\n   1. 含义和基本用法\n   2. 方法\n      1. set()\n      2. get()\n      3. has()\n      4. delete()\n      5. clear()\n   3. 遍历操作\n      1. keys()\n      2. values()\n      3. entries()\n      4. forEach()\n\n## symbol\n\n1. symbol 的特点\n2. 创建symbol\n3. symbol的使用\n\n## Promise\n\n1. Promise的应用场景和解决的问题\n2. Promise中的方法\n   1. then方法\n   2. catch方法\n   3. finally方法\n   4. all方法\n   5. race方法\n   6. resolve方法\n\n## async/await\n\n1. async / await解决的问题\n2. 具体使用方法\n\n## class\n\n1. class的本质\n2. 使用方式\n3. constructor \n4. 属性和方法的设置\n5. 继承\n6. super方法\n7. 静态属性和方法","slug":"es62","published":1,"updated":"2025-01-07T02:30:24.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0ck60009572ocdhx7aa5","content":"<p>ES6是js的高级语法，不断学习js，对于代码逻辑的理解更加透彻</p>\n<h1 id=\"es6知识点整理\"><a href=\"#es6知识点整理\" class=\"headerlink\" title=\"es6知识点整理\"></a>es6知识点整理</h1><p>[toc]</p>\n<h2 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h2><ol>\n<li><p>let 声明变量</p>\n<ol>\n<li>不存在变量提升</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//let声明的变量在声明语句之前不能使用，会报错。var未经声明的变量会挂载在window</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>暂时性死区</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明语句之前不能使用，声明语句之后不能重新定义</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>不允许重复声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//已经被关键词let声明的变量不能重新声明</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>块级作用域</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在&#123;&#125; 中的为块级作用域，当中声明的变量只在次作用域有效。</span></span><br><span class=\"line\"><span class=\"comment\">//var 除了在函数声明的变量外，其他都归全局所有</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>const声明常量</p>\n<ol>\n<li>const声明的常量拥有let声明变量的所有特性</li>\n<li>const声明的变量不能进行更改</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h2><ol>\n<li><p>数组的解构赋值</p>\n<ol>\n<li>基本使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\">b = <span class=\"number\">2</span>; </span><br><span class=\"line\">c = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,[b],c] = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>],<span class=\"number\">4</span>]</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\">b = <span class=\"number\">2</span>;</span><br><span class=\"line\">c = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//let [a] = [1,2,3]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>默认值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b=<span class=\"number\">0</span>] = [<span class=\"number\">3</span>]</span><br><span class=\"line\">a = <span class=\"number\">3</span>;</span><br><span class=\"line\">b = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>对象的解构赋值</p>\n<ol>\n<li>基本使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lihao&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;male&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name,sex&#125; = a</span><br><span class=\"line\"><span class=\"comment\">// &lt;=&gt; let &#123;name:name,sex:sex&#125; = a</span></span><br><span class=\"line\"><span class=\"comment\">// let &#123;log&#125; = window</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">name</span>:n,<span class=\"attr\">sex</span>:s&#125; = a</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name =<span class=\"number\">3</span>&#125; = a</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name = <span class=\"string\">&#x27;张三&#x27;</span>&#125; = &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>默认值</li>\n</ol>\n</li>\n<li><p>字符串的解构赋值</p>\n<ol>\n<li>了解基本的应用方式</li>\n</ol>\n</li>\n<li><p>函数参数的解构赋值</p>\n<ol>\n<li>作用</li>\n<li>应用场景</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><ol>\n<li>模板字符串的使用方式</li>\n<li>字符串中传入变量</li>\n<li>花括号中使用表达式</li>\n</ol>\n<h2 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a>函数的扩展</h2><ol>\n<li>函数参数默认值</li>\n<li>rest参数</li>\n<li>箭头函数<ol>\n<li>简化写法</li>\n<li>使用场景</li>\n<li>this</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"对象的语法糖\"><a href=\"#对象的语法糖\" class=\"headerlink\" title=\"对象的语法糖\"></a>对象的语法糖</h2><ol>\n<li>对象属性的简化写法</li>\n<li>方法的简化写法</li>\n<li>super关键字</li>\n</ol>\n<h2 id=\"set和map\"><a href=\"#set和map\" class=\"headerlink\" title=\"set和map\"></a>set和map</h2><ol>\n<li>set    <ol>\n<li>创建set</li>\n<li>属性和方法<ol>\n<li>size</li>\n<li>add()</li>\n<li>delete</li>\n<li>has</li>\n<li>clear</li>\n</ol>\n</li>\n<li>遍历操作<ol>\n<li>keys()</li>\n<li>values()</li>\n<li>entries()</li>\n<li>forEach()</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>map<ol>\n<li>含义和基本用法</li>\n<li>方法<ol>\n<li>set()</li>\n<li>get()</li>\n<li>has()</li>\n<li>delete()</li>\n<li>clear()</li>\n</ol>\n</li>\n<li>遍历操作<ol>\n<li>keys()</li>\n<li>values()</li>\n<li>entries()</li>\n<li>forEach()</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"symbol\"><a href=\"#symbol\" class=\"headerlink\" title=\"symbol\"></a>symbol</h2><ol>\n<li>symbol 的特点</li>\n<li>创建symbol</li>\n<li>symbol的使用</li>\n</ol>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><ol>\n<li>Promise的应用场景和解决的问题</li>\n<li>Promise中的方法<ol>\n<li>then方法</li>\n<li>catch方法</li>\n<li>finally方法</li>\n<li>all方法</li>\n<li>race方法</li>\n<li>resolve方法</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"async-x2F-await\"><a href=\"#async-x2F-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h2><ol>\n<li>async &#x2F; await解决的问题</li>\n<li>具体使用方法</li>\n</ol>\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><ol>\n<li>class的本质</li>\n<li>使用方式</li>\n<li>constructor </li>\n<li>属性和方法的设置</li>\n<li>继承</li>\n<li>super方法</li>\n<li>静态属性和方法</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>ES6是js的高级语法，不断学习js，对于代码逻辑的理解更加透彻</p>\n<h1 id=\"es6知识点整理\"><a href=\"#es6知识点整理\" class=\"headerlink\" title=\"es6知识点整理\"></a>es6知识点整理</h1><p>[toc]</p>\n<h2 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h2><ol>\n<li><p>let 声明变量</p>\n<ol>\n<li>不存在变量提升</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//let声明的变量在声明语句之前不能使用，会报错。var未经声明的变量会挂载在window</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>暂时性死区</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明语句之前不能使用，声明语句之后不能重新定义</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>不允许重复声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//已经被关键词let声明的变量不能重新声明</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>块级作用域</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在&#123;&#125; 中的为块级作用域，当中声明的变量只在次作用域有效。</span></span><br><span class=\"line\"><span class=\"comment\">//var 除了在函数声明的变量外，其他都归全局所有</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>const声明常量</p>\n<ol>\n<li>const声明的常量拥有let声明变量的所有特性</li>\n<li>const声明的变量不能进行更改</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h2><ol>\n<li><p>数组的解构赋值</p>\n<ol>\n<li>基本使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\">b = <span class=\"number\">2</span>; </span><br><span class=\"line\">c = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,[b],c] = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>],<span class=\"number\">4</span>]</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\">b = <span class=\"number\">2</span>;</span><br><span class=\"line\">c = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//let [a] = [1,2,3]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>默认值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a,b=<span class=\"number\">0</span>] = [<span class=\"number\">3</span>]</span><br><span class=\"line\">a = <span class=\"number\">3</span>;</span><br><span class=\"line\">b = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>对象的解构赋值</p>\n<ol>\n<li>基本使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;lihao&#x27;</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;male&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name,sex&#125; = a</span><br><span class=\"line\"><span class=\"comment\">// &lt;=&gt; let &#123;name:name,sex:sex&#125; = a</span></span><br><span class=\"line\"><span class=\"comment\">// let &#123;log&#125; = window</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">name</span>:n,<span class=\"attr\">sex</span>:s&#125; = a</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name =<span class=\"number\">3</span>&#125; = a</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name = <span class=\"string\">&#x27;张三&#x27;</span>&#125; = &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>默认值</li>\n</ol>\n</li>\n<li><p>字符串的解构赋值</p>\n<ol>\n<li>了解基本的应用方式</li>\n</ol>\n</li>\n<li><p>函数参数的解构赋值</p>\n<ol>\n<li>作用</li>\n<li>应用场景</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><ol>\n<li>模板字符串的使用方式</li>\n<li>字符串中传入变量</li>\n<li>花括号中使用表达式</li>\n</ol>\n<h2 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a>函数的扩展</h2><ol>\n<li>函数参数默认值</li>\n<li>rest参数</li>\n<li>箭头函数<ol>\n<li>简化写法</li>\n<li>使用场景</li>\n<li>this</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"对象的语法糖\"><a href=\"#对象的语法糖\" class=\"headerlink\" title=\"对象的语法糖\"></a>对象的语法糖</h2><ol>\n<li>对象属性的简化写法</li>\n<li>方法的简化写法</li>\n<li>super关键字</li>\n</ol>\n<h2 id=\"set和map\"><a href=\"#set和map\" class=\"headerlink\" title=\"set和map\"></a>set和map</h2><ol>\n<li>set    <ol>\n<li>创建set</li>\n<li>属性和方法<ol>\n<li>size</li>\n<li>add()</li>\n<li>delete</li>\n<li>has</li>\n<li>clear</li>\n</ol>\n</li>\n<li>遍历操作<ol>\n<li>keys()</li>\n<li>values()</li>\n<li>entries()</li>\n<li>forEach()</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>map<ol>\n<li>含义和基本用法</li>\n<li>方法<ol>\n<li>set()</li>\n<li>get()</li>\n<li>has()</li>\n<li>delete()</li>\n<li>clear()</li>\n</ol>\n</li>\n<li>遍历操作<ol>\n<li>keys()</li>\n<li>values()</li>\n<li>entries()</li>\n<li>forEach()</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"symbol\"><a href=\"#symbol\" class=\"headerlink\" title=\"symbol\"></a>symbol</h2><ol>\n<li>symbol 的特点</li>\n<li>创建symbol</li>\n<li>symbol的使用</li>\n</ol>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><ol>\n<li>Promise的应用场景和解决的问题</li>\n<li>Promise中的方法<ol>\n<li>then方法</li>\n<li>catch方法</li>\n<li>finally方法</li>\n<li>all方法</li>\n<li>race方法</li>\n<li>resolve方法</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"async-x2F-await\"><a href=\"#async-x2F-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h2><ol>\n<li>async &#x2F; await解决的问题</li>\n<li>具体使用方法</li>\n</ol>\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><ol>\n<li>class的本质</li>\n<li>使用方式</li>\n<li>constructor </li>\n<li>属性和方法的设置</li>\n<li>继承</li>\n<li>super方法</li>\n<li>静态属性和方法</li>\n</ol>\n"},{"title":"git 操作","date":"2022-04-10T08:02:19.000Z","top_img":"/img/3.jpg","cover":"/img/3.jpg","_content":"\ngit作为程序的代码版本控制库，初用时一些命名略显生疏，普及一下gitee仓库容量500M，github容量1G,单文件最大都是50M\n\n```js\n1.git clone ....url\n//克隆代码\n//本地克隆远程项目\n2.git status \n//查看当前分支\n3.git add *\n    //通配符表示\n    //提交新增文件|修改文件\n   \n4.git commit -m '这是我的第一次提交'\n//提交并附带信息\n//\n\n5.git push \n//推送到云\n\n6.git branch lanhan \n//创建分支\n\n7.git checkout laohan\n//切换分支\n\n8.push之前执行更新操作\n//新增文件，修改代码\n9.git config --list \n//查看配置\n\n```\n\n具有一个远程仓库（多人访问，多人共同维护一份代码）\n\n```js\n//拉取仓库代码到本地\ngit pull\n对应原生的\n```\n\n```js\n本地仓库\ngit add 暂存区\n//提交到暂存区\ngit commit -m '' 工作区\ngit push 到远程\n```\n\n合并分支\n\n进入主分支 \n\n```js\n1.进入主分支\n\n2.合并主分支\ngit merge hanmy\n\n//查看所有分支\ngit branch\n\n```\n\n```js\ngit branch xxx 新建分支\ngit checkout xxx 切换 分支\n\ngit checkout -b xxx 新建分支并进入新建分支\n\ngit merge xxx 当前分支合并分支\n\ngit pull 拉取仓库\ngit push 上传仓库\n```\n\n插件 gitlens \n\n\n\n```js\n解决 fatal: Not a git repository (or any of the parent directories): .git 问题\n\n然后关联远程或push 又出现了错误，如下\n\n fatal: Not a git repository (or any of the parent directories): .git \n\n\n提示说没有.git这样一个目录\n\n在命令行 输入 git init  然后回车就好了\n\n再重新执行添加文件的命令即可。\n原文链接：https://blog.csdn.net/wenb1bai/article/details/89363588\n```\n\n\n\n\n\nindex 表示暂存区","source":"_posts/git.md","raw":"---\ntitle: git 操作\ndate: 2022-04-10 16:02:19\ntags: [git, gitee ]\ncategories: git\ntop_img: /img/3.jpg\ncover: /img/3.jpg\n---\n\ngit作为程序的代码版本控制库，初用时一些命名略显生疏，普及一下gitee仓库容量500M，github容量1G,单文件最大都是50M\n\n```js\n1.git clone ....url\n//克隆代码\n//本地克隆远程项目\n2.git status \n//查看当前分支\n3.git add *\n    //通配符表示\n    //提交新增文件|修改文件\n   \n4.git commit -m '这是我的第一次提交'\n//提交并附带信息\n//\n\n5.git push \n//推送到云\n\n6.git branch lanhan \n//创建分支\n\n7.git checkout laohan\n//切换分支\n\n8.push之前执行更新操作\n//新增文件，修改代码\n9.git config --list \n//查看配置\n\n```\n\n具有一个远程仓库（多人访问，多人共同维护一份代码）\n\n```js\n//拉取仓库代码到本地\ngit pull\n对应原生的\n```\n\n```js\n本地仓库\ngit add 暂存区\n//提交到暂存区\ngit commit -m '' 工作区\ngit push 到远程\n```\n\n合并分支\n\n进入主分支 \n\n```js\n1.进入主分支\n\n2.合并主分支\ngit merge hanmy\n\n//查看所有分支\ngit branch\n\n```\n\n```js\ngit branch xxx 新建分支\ngit checkout xxx 切换 分支\n\ngit checkout -b xxx 新建分支并进入新建分支\n\ngit merge xxx 当前分支合并分支\n\ngit pull 拉取仓库\ngit push 上传仓库\n```\n\n插件 gitlens \n\n\n\n```js\n解决 fatal: Not a git repository (or any of the parent directories): .git 问题\n\n然后关联远程或push 又出现了错误，如下\n\n fatal: Not a git repository (or any of the parent directories): .git \n\n\n提示说没有.git这样一个目录\n\n在命令行 输入 git init  然后回车就好了\n\n再重新执行添加文件的命令即可。\n原文链接：https://blog.csdn.net/wenb1bai/article/details/89363588\n```\n\n\n\n\n\nindex 表示暂存区","slug":"git","published":1,"updated":"2025-01-07T02:30:24.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0cki000a572oh6918i5v","content":"<p>git作为程序的代码版本控制库，初用时一些命名略显生疏，普及一下gitee仓库容量500M，github容量1G,单文件最大都是50M</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>git clone ....<span class=\"property\">url</span></span><br><span class=\"line\"><span class=\"comment\">//克隆代码</span></span><br><span class=\"line\"><span class=\"comment\">//本地克隆远程项目</span></span><br><span class=\"line\"><span class=\"number\">2.</span>git status </span><br><span class=\"line\"><span class=\"comment\">//查看当前分支</span></span><br><span class=\"line\"><span class=\"number\">3.</span>git add *</span><br><span class=\"line\">    <span class=\"comment\">//通配符表示</span></span><br><span class=\"line\">    <span class=\"comment\">//提交新增文件|修改文件</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"number\">4.</span>git commit -m <span class=\"string\">&#x27;这是我的第一次提交&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//提交并附带信息</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>git push </span><br><span class=\"line\"><span class=\"comment\">//推送到云</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span>git branch lanhan </span><br><span class=\"line\"><span class=\"comment\">//创建分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>git checkout laohan</span><br><span class=\"line\"><span class=\"comment\">//切换分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8.</span>push之前执行更新操作</span><br><span class=\"line\"><span class=\"comment\">//新增文件，修改代码</span></span><br><span class=\"line\"><span class=\"number\">9.</span>git config --list </span><br><span class=\"line\"><span class=\"comment\">//查看配置</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>具有一个远程仓库（多人访问，多人共同维护一份代码）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//拉取仓库代码到本地</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\">对应原生的</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地仓库</span><br><span class=\"line\">git add 暂存区</span><br><span class=\"line\"><span class=\"comment\">//提交到暂存区</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;&#x27;</span> 工作区</span><br><span class=\"line\">git push 到远程</span><br></pre></td></tr></table></figure>\n\n<p>合并分支</p>\n<p>进入主分支 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>进入主分支</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>合并主分支</span><br><span class=\"line\">git merge hanmy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch xxx 新建分支</span><br><span class=\"line\">git checkout xxx 切换 分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b xxx 新建分支并进入新建分支</span><br><span class=\"line\"></span><br><span class=\"line\">git merge xxx 当前分支合并分支</span><br><span class=\"line\"></span><br><span class=\"line\">git pull 拉取仓库</span><br><span class=\"line\">git push 上传仓库</span><br></pre></td></tr></table></figure>\n\n<p>插件 gitlens </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决 <span class=\"attr\">fatal</span>: <span class=\"title class_\">Not</span> a git repository (or any <span class=\"keyword\">of</span> the parent directories): .<span class=\"property\">git</span> 问题</span><br><span class=\"line\"></span><br><span class=\"line\">然后关联远程或push 又出现了错误，如下</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">fatal</span>: <span class=\"title class_\">Not</span> a git repository (or any <span class=\"keyword\">of</span> the parent directories): .<span class=\"property\">git</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">提示说没有.<span class=\"property\">git</span>这样一个目录</span><br><span class=\"line\"></span><br><span class=\"line\">在命令行 输入 git init  然后回车就好了</span><br><span class=\"line\"></span><br><span class=\"line\">再重新执行添加文件的命令即可。</span><br><span class=\"line\">原文链接：<span class=\"attr\">https</span>:<span class=\"comment\">//blog.csdn.net/wenb1bai/article/details/89363588</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>index 表示暂存区</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>git作为程序的代码版本控制库，初用时一些命名略显生疏，普及一下gitee仓库容量500M，github容量1G,单文件最大都是50M</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>git clone ....<span class=\"property\">url</span></span><br><span class=\"line\"><span class=\"comment\">//克隆代码</span></span><br><span class=\"line\"><span class=\"comment\">//本地克隆远程项目</span></span><br><span class=\"line\"><span class=\"number\">2.</span>git status </span><br><span class=\"line\"><span class=\"comment\">//查看当前分支</span></span><br><span class=\"line\"><span class=\"number\">3.</span>git add *</span><br><span class=\"line\">    <span class=\"comment\">//通配符表示</span></span><br><span class=\"line\">    <span class=\"comment\">//提交新增文件|修改文件</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"number\">4.</span>git commit -m <span class=\"string\">&#x27;这是我的第一次提交&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//提交并附带信息</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>git push </span><br><span class=\"line\"><span class=\"comment\">//推送到云</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span>git branch lanhan </span><br><span class=\"line\"><span class=\"comment\">//创建分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>git checkout laohan</span><br><span class=\"line\"><span class=\"comment\">//切换分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8.</span>push之前执行更新操作</span><br><span class=\"line\"><span class=\"comment\">//新增文件，修改代码</span></span><br><span class=\"line\"><span class=\"number\">9.</span>git config --list </span><br><span class=\"line\"><span class=\"comment\">//查看配置</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>具有一个远程仓库（多人访问，多人共同维护一份代码）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//拉取仓库代码到本地</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\">对应原生的</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地仓库</span><br><span class=\"line\">git add 暂存区</span><br><span class=\"line\"><span class=\"comment\">//提交到暂存区</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;&#x27;</span> 工作区</span><br><span class=\"line\">git push 到远程</span><br></pre></td></tr></table></figure>\n\n<p>合并分支</p>\n<p>进入主分支 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>进入主分支</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>合并主分支</span><br><span class=\"line\">git merge hanmy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查看所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch xxx 新建分支</span><br><span class=\"line\">git checkout xxx 切换 分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b xxx 新建分支并进入新建分支</span><br><span class=\"line\"></span><br><span class=\"line\">git merge xxx 当前分支合并分支</span><br><span class=\"line\"></span><br><span class=\"line\">git pull 拉取仓库</span><br><span class=\"line\">git push 上传仓库</span><br></pre></td></tr></table></figure>\n\n<p>插件 gitlens </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决 <span class=\"attr\">fatal</span>: <span class=\"title class_\">Not</span> a git repository (or any <span class=\"keyword\">of</span> the parent directories): .<span class=\"property\">git</span> 问题</span><br><span class=\"line\"></span><br><span class=\"line\">然后关联远程或push 又出现了错误，如下</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">fatal</span>: <span class=\"title class_\">Not</span> a git repository (or any <span class=\"keyword\">of</span> the parent directories): .<span class=\"property\">git</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">提示说没有.<span class=\"property\">git</span>这样一个目录</span><br><span class=\"line\"></span><br><span class=\"line\">在命令行 输入 git init  然后回车就好了</span><br><span class=\"line\"></span><br><span class=\"line\">再重新执行添加文件的命令即可。</span><br><span class=\"line\">原文链接：<span class=\"attr\">https</span>:<span class=\"comment\">//blog.csdn.net/wenb1bai/article/details/89363588</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>index 表示暂存区</p>\n"},{"title":"javascript入门","author":"codefish","date":"2021-12-11T08:13:52.000Z","top_img":"/img/2.jpg","cover":"/img/2.jpg","_content":"撸js的第一遍，持续不断深入的学习一门语言应当坚持下去，每一回学习都会有不一样的体会。\n\n# javascript介绍\n\n## JavaScript 是脚本语言（作为web的\n\nJavaScript 是一种函数优先轻量级的编程语言。\n\nJavaScript 是可插入 HTML 页面的编程代码。\n\nJavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。\n\nJavaScript 基于原型编程，多范式的动态脚本语言，支持面向对象，命令式，声明式，函数式编程范式，解释性或即时编译型的编程语言\n\n网景 -->欧洲计算机协会 -->ECMAScript(ES)\n\nJavascipt 核心语法\n\n核心语法（ESMAscript） DOM（W3C) BOM(网景)\n\nES1           ...         ES3       ...          ES5\n\nES4（去掉改动大的语法,和谐会议）\n\nES6 2015年   当年争议的话题\n\nES7 -ES11 一年一更新 2016-2020 ES6之后统称ES6\n\n语法糖 ：ES6 写代码运行更快\n\n## JavaScript作用\n\n网页开发\n\nJS包含三个部分的内容（在浏览器端\n\n- ​\t\t核心语法\n  - 变量\n  - 流程控制\n  - 循环\n  - 数据类型\n- ​        BOM (网景)\n  - 浏览器对象模型 borwer object model\n- ​        DOM （W3C)\n  - 文档对象模型，和网页相关  document object model\n\n\n\n## 宿主环境\n\n定义：JS运行的环境就叫宿主环境\n\n- ​\tnode\n- 浏览器\n\n\n\n作用：\n\n1. 交互效果\n\n2. 收集数据\n\n   \n\n##  JS 的准备语法\n\n- 如何编写JS文件\n\n  1.  将JS嵌入到网页当中\n  2.  将JS文件引入到文档中\n\n- Script标签的位置\n\n  1. 可以放在网页任何位置（放在html标签外面，页面最上面，浏览器自动把他放在head中，但是文档声明头消失）--> 解析时，浏览器会采用降价处理。h5-h4  【如果文档没有写文档声明头】 理论上可以放任何位置，唯独不建议放在文档声明头上面\n\n  2. 建议的位置 </html> 之后，浏览器会默认将其移动到<body>之中。放在<body/>和</html>之间\n\n     - js操作标签，页面元素先渲染出页面，即该标签先加载成功，script才开始获取元素。\n     - 标准文档流的解析顺序\n     - **操作input标签 首要前提是 input要加载成功**\n\n  3. 独立的Js文件引入\n\n     - <script src=''></script>\n\n     - 通过script标签配合src配合\n\n- 打印\n\n  - 在JS代码调试的时候，经常需要使用到console.log()\n\n    1. console 是一个对象，里面有很多函数可以来帮助我们来开发，最常用的是console.log\n\n    2. 弹窗\n\n       1. alert\n       2. prompt 比confirm多一个input框框\n       3. confirm 比alert多一个取消\n\n       - ​     alert（） 加括号为一个函数\n\n       \n\n    3. 语句和表达式\n\n       1. 语句\n          - 有多个部分组成，不一定有结果\n          - eg：console.log()\n          - **语句都是从右向左看**\n       2. 表达式\n          - 凡是强调有结果\n\n       \n\n    4. 语句结束符\n\n       1. 在语句的最后，最后写上一个语句的结束符号\n\n    ### 文档入口函数\n\n    window.onload = function(){\n\n    ​\t在函数当中的代码会在页面的最后执行\n\n    }\n\n    放在head中不会出错\n\n    **如果页面有部分图片或资源加载不出来，则js会一直等待起加载，导致关键js交互无效果。**\n\n    window > document\n\n    #### 如果页面有多个入口函数\n\n    **后面加载的覆盖前面的**\n\n    #### onclick同理\n\n    **外部js也需要文本入口函数**,位置放在</html>之后\n\n    如果是工具类的js文件，（不会主动的获取js中的某个），则可以写在head文件中，如果是自己需要操作标签元素的，最好写在body之后\n\n    PS：script  和   script src 不能混用\n\n## 变量\n\n​\t定义：临时存储数据的容器\n\n1. ​    如何创建一个变量\n\n   ​\tvar 变量名 = 值\n\n   - 小驼峰命名\n   - console.log() 如果打印的是一个变量，不需要加引号\n   - underfined当变量声明未赋值的时候，则为未定义\n\n2. 变量名的命名规则\n\n   - 字母数字下划线，**字符**，命名\n\n   - 数字不能是首字母  -> **可以下划线开头**\n\n     - 尽量词能表达意\n\n   - 不能使用关键字\n\n     **上面也是标识符命名规则**\n\n   - 声明和初始化\n\n     - 通过关键字创建一个变量即为变量声明，给变量**第一次赋值**既是初始化\n     - 控制台凡是出现**蓝色**的都是数字\n     - 控制台凡是出现**黑色**的都是文字\n     - **程序从右向左看**\n     - 修改值的过程，叫**重新赋值** x = a\n     - 重新声明赋值初始化 var x = 'hello,x'  旧的值被回收\n\n3. 变量提升\n\n   - 浏览器的js解析引擎，在真正执行代码的时候，会进行预解析\n   - 变量声明提升 声明不赋值 underfinded\n   - 把所以的声明语句提升到作用域的最顶端\n     - 如若未声明直接使用，则报错\n   - 原因：在正式执行之前，会对其进行预解析\n   - **提升到当前作用域的最顶端**\n\n   ps：使用js属性对应的方法**length属性**，获取字符串的长度\n\n   ​\t获取字符串长度\n\n   \n\n   #### js是一门弱类型语言\n\n   var a (string int)  强类型\n\n   变量可以根据数据的需要随时更换类型（变量本身没有类型，赋的值是上面类型就是上面类型）\n\n   \n\n## 数据类型\n\n**基本数据类型**\n\n- string\n- number\n- Boolean\n- underfinded\n- null\n\n**引用数据类型**\n\n细化：object \n\n- ​\tarray\n- ​    function\n- ​     object\n\n\n\n**栈** **堆**\n\n基本（基础）数据类型，主要存储在栈\n\n引用数据在栈区存放内存地址，堆里存放数据的值\n\n**PS：******当一个引用数据类型赋值给一个变量时，这个变量存储的是简单的内存地址****\n\n\n\n## String字符串\n\n定义:在代码中如果想要存储文字\n\n'' \"\" 没有区别，**推荐使用单引号**\n\n- html标签属性都是双引号，为了区分。一致性不混用\n\n- 结合实际情况，**单引号里嵌套双引号**   ...说:\"\".\n\n  - 存在问题 ...说:''\n  - 单引号里使用双引号，**双引号里面使用单引号**\n\n  \n\n#### 字符串拼接\n\nvar s1 = '鲁迅先生说:' + ''\n\n相当于拼接字符串\n\n#### 创建字符串   --   通过构造函数\n\nvar s = new String('')\n\nvar s1 = ''    直接量，相当于js给我们提供的一种用来创建字符串类型的快捷方式\n\n在Js里，除了null和underfinded都可以用构造函数创建出来\n\n不管里面是什么类型，只要外面加了引号，就会变成字符串类型\n\n**创建字符串的方式**\n\n- ''\n- \"\"\n- 构造函数\n\n通过'+'拼接字符串\n\n\n\n**注意：******\n\n- 保证代码中使用统一的符号\n- 单双不能单独嵌套使用\n\n\n\n可以通过length属性来获取字符串的长度\n\n**ps 除了null和underfinded其他都是对象**\n\n**PS1 任何数据类型都可以通过构造函数的形式创造出来**\n\n**构造函数创建出来的数据，是一个object**\n\n//对象 console是一个对象，log是console身上的方法\n\nlength(在字符串中) 。2+\n\n\n\n## 数字\n\n 在js中，number远远比其他语言当中的number简单\n\n无整数，本质上都是小数 0.2+0.3 ！== 0.5\n\n**toFixed** //去除小数，返回整数位置，数字类型变为string（文本\n\n\n\n## 布尔 boolean\n\n##### 真和假 false 和true\n\nps：表示一个判断的结果\n\n\n\n## null\n\nps：一般用来表示一个对象的空值\n\n\n\n## Underfinded\n\nps：一般表示变量没有初始化\n\n- 先声明一个变量，在某一行未来要使用某个变量，**建议给声明的变量设置一个初始值**\n\n\n\n## **基础数据类型之间的类型转换**\n\nps：把一个类型的数据转换为另一个数据类型\n\n- 自动类型数据转换\n- 强制数据类型转换\n\n#### 强制数据类型转换\n\nNaN是JS里一个特殊值，和任何都不相等，连同自己\n\n​\t\ttypeof（）**帮助查看数据类型**\n\n- ​\tString（）\n\n  - ps：相当于将原数据外面加一个引号\n\n  - 负值转换也是负值的字符串\n\n- ​    Number（）\n\n  - **ps ** 当其他数据类型的数据不能转换为有效的数字类型时，则被转换为NaN\n  - Number('')   或空串  ->  0\n  - 'hello world' -> **NaN**\n  - '100 ' -> 100\n  - 'a1' -> **NaN**\n  - boolean true -> 1\n  - boolean false -> 0\n\n- ​    Boolean（）\n\n  - ps:把其他数据类型转换为boolean\n  - **'' 空串 -> false**\n  - **0 -> false**\n  - 1 -1 -> true\n  - **null -> false**\n  - **underfinded -> false**\n  - **NaN -> false**\n  - **false -> false**\n  - boolean(null underfinded) -> false\n\n**适用于number**\n\n- parseInt（）\n  - ps：强制转换为整数\n  - 还适用于将其他数据类型转换为整型\n  - s1 = 'abc123' -> NaN\n  - s2 ='123abc' -> 123\n- parseFloat() 将其他数据类型转换成float\n  - 1.32a -> 1.32\n  - '1a' -> 1\n\n**typeof**\n\n1. null object\n2. underfnded underfinded\n\n- underfinded派生于null\n\n#### 自动类型转换\n\n- 数字 + 字符串 --> 转换为字符串\n- 数字 - '数字字符串'  -> 字符串转换成数字\n- 数字 *  '数字字符串' -> 字符串转换成数字\n- 数字 /    '数字字符串' -> 字符串转化成数字\n- Boolean和数字计算时（+-*/），Boolean转换为数字\n- 字符串数字 + 布尔 ->二者变换成字符串\n- 字符串数字 -*/ 布尔  -> 都会变成数字\n- 字符串 + 布尔 -> 二者都变成字符串\n- 字符串 -*/ 布尔 二者都变成Number\n- 任何值和NaN计算，结果都是NaN\n- null 和 underfinded 都是 NaN\n- **尽可能写程序时，把不可控的因素变成可控的，例如类型转换****\n- 自动类型转换调用的方法就是上面提到的三个方法，Number，String，Boolean\n\n\n\nps：将数字以最快转换为空串 +''\n\n\n\n\n\n\n\n### 计算\n\n#### 除数不能为0 infinity\n\n\n\n#### JS操作html和css修改标签样式、\n\n1. 找到当前元素btna =  getElementById('btn')\n\n2. 触发事件 (确定事件三要素)\n\n   - 事件：用户在浏览器中的一切动作\n     - 鼠标事件，键盘事件，文档事件\n   - 事件三要素 \n     - 事件源\n     - 事件\n     - 事件处理函数\n\n   btna.onclick = function(){\n\n   `\t//处理的事情\n\n   ​\talert('...')\n\n   }\n\n   - **事件处理函数有无不影响事件的发生**\n\n**eg**\n\n- 获取输入框中的内容\n  - element.value\n\n\n\n### 常用运算符\n\n- 加\n- 减\n- 乘\n- 除\n- 求模/取余 %\n- ++ -- %= \n- = != 值不等\n- == 值相等  !== 值和类型其一(或）不等\n- === 值和类型都相等\n- < > <= >=\n- && || !\n  - 短路问题\n\nconsole.log(new Boolean(false))\nBoolean {false}\n\ntypeof(new Boolean(false))\n\nobject\n\n\n\n**`typeof(null)`**\n**`'object'`**\n**`typeof(underfinded)`**\n**`'undefined'`**\n**`typeof(NaN)`**\n**'number'**\n\n\n\n**取反 先转换成布尔值再取反**\n\n**取反 取反 !!x  = Boolean(x)**\n\n\n\n### 逻辑运算符\n\nps:&& 和 || 存在短路问题\n\n​\t惰性面\n\n1. &&\n2. ||\n\n**()改变运算符的优先级，里面存放都是表达式。**\n\n\n\n### 栈和堆\n\n栈区大小确定  -> 基本数据类型不变 var b = true\n\n堆区随需要可以扩容\n\n\n\n### JS 严格区分大小写\n\n\n\n### Null \n\n​\t是一个数据类型，在Null这个类型只有一个值，就是null.\n\n- ​\t**表示一个空值，给空对象赋值**\n\n### Underfinded\n\n​\t是一个数据类型，在underfinded这个类型只有一个值，就是underfinded\n\n​\t派生于Null\n\n- ​\t\t**null == underfinded**\n\n\n\n## 流程控制和循环\n\n- if\n  - 如果条件不是Boolean，则会强制转换为Boolean\n- if else\n  - else if\n  - ps:嵌套过多降低代码可读性\n- switch\n- 三元\n\n**Dom操作** -> 看重执行顺序\n\n#### swith\n\nswitch(条件)\n\n{\n\ncase'张三':;\n\ncase'张四':;\n\n}\n\n**多个case共用一个代码块**\n\ncase:    case 2:   ... case n: 语句 ;  break\n\nbreak continue\n\n#### switch展示结果不确定，switch保存数据\n\n![image-20211130135105212](%E5%AD%A6%E4%B9%A0/mdimages/image-20211130135105212.png)\n\n\n\n``` js\nbtn.onclick = fuction(){\n    var input_value = input.value\n    if(input_value.length === 0){\n        alert('输入不能为空')\n        return ;\n    }\n}\n```\n\n**trim() 去除两端的空格 -- > 字符串方法**\n\n**如果是一个长空串，则处理为空串**\n\n**isNaN  判断是否是NaN**\n\n**math.random()**\n\n\n\n### 循环\n\n- while\n- do..while\n- for\n\n\n\nrandom() 随机数函数\n\nreturn 函数使用\n\ncontinue\n\nbreak\n\n**var lis = list.children**\n\n**获取list的children**\n\n\n\n## 流程控制\n\n流程控制就是来控制我们的代码按照什么结构顺序来执行。\n\n流程控制主要有以下三种结构，分别是：\n\n（1）顺序结构\n\n（2）分支结构\n\n（3）循环结构\n\n顺序流程控制\n顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行。\n分支流程控制\n由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果。\n\n### 1.if分支语句\n\n//if分支语句的语法结构如下：\n//条件成立执行代码，否则什么也不做\nif(条件表达式){\n\t//条件成立执行的代码语句\n}\n\n### 2.if else双分支语句\n\n//if else双分支语句的语法格式如下：\n//条件成立执行if里面的代码，否则执行else里面的代码\nif(条件表达式){\n  //条件成立执行的代码\n}else{\n  //条件不成立执行的代码\n}\n\n### 3.if else if多分支语句\n\n//if else if多分支语句的语法格式如下：\n//适合检查多重条件\nif(条件表达式1){\n  语句1;\n}else if(条件表达式2){\n  语句2;\n}else if(条件表达式3){\n  语句3;\n  ...\n}else{\n  //上述条件都不成立时执行此代码\n}\n\n### 4.三元表达式\n\n由三元运算符组成的式子就称为三元表达式（因为三元表达式也是表达式，所以会有返回结果）。\n//三元不等式的语法机构如下：\n条件表达式 ？ 表达式1 ： 表达式2;\n//如果条件表达式的结果为真，则返回表达式1点值；而如果条件表达式的结果为假，则返回表达式2的值。\n\n### 5.switch语句\n\nswitch语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用switch。\n//switch语句的语法格式如下：\nswitch(表达式){\n  case value1:\n    //表达式等于value1时要执行的代码\n    break;\n  case value2:\n    //表达式等于value2时要执行的代码\n    break;\n  default:\n    //表达式不等于任何一个value值时要执行的代码\n}\n\nswitch语句中的条件表达式我们经常写成变量的形式。\n表达式的值与value的值相匹配时，要求值和数据类型一致才算匹配成功。\n如果当前case里面没有break，则不回退出switch语句，而是继续执行下一个case，直到遇到break或执行default语句才退出switch语句。\n\n### 6.switch语句和if else if语句的区别\n\n一般情况下，它们两个语句可以相互替换。\nswitch…case语句通常处理case为比较确定值的情况，而if…else…语句更加灵活，常用于范围判断（大于、等于某个范围）。\nswitch语句进行条件判断后直接执行到程序的条件语句，而if…else…语句有几种条件，就得判断几次（从上到下依次判断）。\n当分支比较少时，if…else…语句的执行效率比switch语句更高。\n当分支比较多时，switch语句的执行效率比if…else…语句更高，结构也更清晰。\n\n## 循环流程控制\n\n目的：重复执行某些代码。\n\n在JS中，主要有以下三种类型的循环语句：\n\n（1）for循环\n\n（2）while循环\n\n（3）do…while循环\n\n### 1.for循环\n\n在程序中，一组被重复执行的语句被称为循环体，而能否继续重复执行，则取决于循环的终止条件。\n循环语句是指由循环体和循环的终止条件造成的句子。\nfor循环主要用于把某些代码循环若干次，通常跟计数有关系。\n//for循环的语法结构如下：\nfor(初始化变量;条件表达式;操作表达式){\n  //循环体\n}\n//初始化变量：其实就是用var声明一个普通的变量，并且这个变量通常是作为计数器使用。\n//条件表达式：用来决定每一次循环是否继续执行，也就是循环的终止条件。\n//操作表达式：每次循环最后执行的代码，经常用于更新计数器（递增或递减）。\n\nfor循环可以重复执行相同的代码。\n因为有计数器的存在，使用for循环可以重复执行不同代码。\nfor(var i = 1; i <= 31; i++){\n  console.log('今天是5月'+i+'日了！');\n\n因为有计数器的存在，使用for循环可以重复执行某些操作，比如：算数运算。\nvar sum = 0;\nfor(var i = 1; i <= 10; i++){\n  sum+=i;\n}\nconsole.log(sum);\n\n循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构。像在一个for循环语句中， 再嵌套一个for循环，我们就称之为双重for循环。\nfor(var i = 1; i <= 3; i++){\n  console.log('这是第'+i+'次外层循环');\n  for(var j = 1; j <= 3; j++){\n    console.log('这是第'+i+'次里层循环');\n  }\n}\n\n### 2.while循环\n\nwhile语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。\n//while语句的语法结构如下：\nwhile(条件表达式){\n  //循环体代码\n}\n\n### 3.do while循环\n\ndo…while语句其实是while语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。（do while循环语句至少执行一次循环体代码）\n//do while语句的语法结构如下：\ndo{\n  //循环体代码\n}while(条件表达式);\n\n### 4.小结\n\n三种循环在很多情况下都是可以相互替代使用的。\n对于计数，三者的使用基本相同，但是更常用的还是for循环。\n对于更复杂的判断条件，可以使用while和do while语句。\n\n**while语句是先判断后执行；而do while是先执行一次后判断执行。**\n\n##### do while 至少执行一次，while，for最少执行0次\n\ncontinue和break\n\n#### 1.continue关键字\n\ncontinue关键字用于立即跳出本次循环，继续下一次循环（本次循环体中continue之后的代码就会少执行一次）。\nvar sum = 0;\nfor(var i = 1; i <= 100; i++){\n  if(i % 7 == 0){\n    continue;\n  }\n  sum+=i;\n}\nconsole.log(sum);\n\n#### 2.break关键字\n\nbreak关键字用于立即跳出整个循环。\nfor(var i = 1; i <=5; i++){\n  if(i == 3){\n    break;\n  }\n  console.log('这是第'+i+'个数！');\n}\n\n\n\n### ...className = '' 去掉类名\n\ndata-XXX =''  html5自定义类型存数据\n\ngetAttribute\n\n\n\n\n\n### 数组\n\n#### 使用情况\n\n1. 一系列的值\n2. 希望快速存储和取数据的时候\n\n\n\n- 在向数据中插入元素的时候，如果索引值不连续，就会形成空位\n\n- 对于索引值不连续的数组，称之为稀疏数组\n- length 获取数组元素\n- length比索引值大1\n- PS ：如果length设置比其大，则后都是空位\n  - 如果length设置比索引值小，则从后面清楚\n  - 快速清空数组，arr.length = 0\n\n\n\n1. **length失效****一**\n\n   - 数组添加元素key不为数组，则不会被计算\n\n   - arr['name'] = '哈哈哈' 计算数组长度的时候，当前元素失效\n   - 长度 == 任然是最大索引值加1  只计算数字索引\n\n2. **length失效****一**\n   - arr[100] = 'hhh'/\n   - console.log(arr.length) //101\n\n\n\nfor可以以索引取字符串的值\n\n\n\n**字符串后面用方括号**\n\n**对象.属性（方法**\n\n数组. 后面只能是一个符合\n\n**对象[属性]  允许使用方括号解析属性**\n\n**obj 对象 有一个 hello 属性**\n\n**var a = 'hello'**\n\n**obj[a] --> obj['hello]   js引擎将a解析为一个变量**\n\n**--数组是一种特殊的对象 key-value**\n\n**--特殊类型（凡是对象key都是字符串，）**\n\n- ​\t**数组的key看上去是一个number，实际上会给他转换为string**\n- **一切皆对象，除了null和underfinded很多数据类型都对象的特点，有属性和方法，以key-value为结构，key的类型永远是字符串，调用属性的时候可以用点可以用方括号**\n- 数组的key可以为字符串\n\n\n\n### 空位\n\n```jsx\n// 产生5个数组空位的数组\nlet arr1 = Array(5)\n\n//同上3\nlet arr2 = [,2,,3,,]\n\n//产生10个数组空位的数组\nlet arr3 = []\narr3.length = 10\n\n//数组a[3]-a[9]都是数组空位\nlet arr4 = [1,2,3]\narr4[10] = 5\n\n//数组arr[2]产生数组空位\nlet arr5 = [1,2,3,4,5]\ndelete arr[2]\n```\n\n\n\n#### 数组的增删改查\n\n- delect[n] 通过delect删除元素会形成稀疏数组，形成空位（存在空位，索引值不连续\n- arr[0] ='xxx'\n- console.log(arr[0])\n\n数组的空位可以访问，值为**underfinded**\n\n**当数组为一个正常数组时，可以通过length来清楚数组（不存在索引值不为非数字的值**\n\n数组遍历优化或提高效率\n\nvar len = arr.length\n\nfor(;i<len)\n\n\n\n## api (接口方法)\n\n- **push向数组的最后插入一个元素** push(a,b)一次可以添加多个值，unshift同\n- **arr.shift() 删除第一个数据元素，并返回给我们删除的元素**\n- **pop() 删除数组的最后一个元素，并且返回删除的最后一个元素**\n- **unshift() 向数组的最前方插入一个元素**\n\n- splice(索引值，删除数组元素的个数，插入的元素) 删除元素 替换元素 插入元素\n  - 删除\n    - arr.splice(1,1) 从索引一开始，删除一元素\n    - arr.splice(1,1,'xxx') 。。。 替换一元素 值为xxx\n    - arr.splice(2,0,'xxx') 在第三个位置插入xxx\n  - \n\n所有的表单控件必须用value，初此之外必须使用，innerHtml,innerText\n\nresize:none  ->删除textarea的可变  不让其影响其他元素\n\ndotted 虚线效果（solid）\n\n \n\n## 数组方法 \n\n- find \n\n- findIndex\n\n- forEach\n\nforEach(item,index)\n\nfind可以返回当前元素所在的数组\n\n## \n\n\n\n### 对象（object）\n\n\n\n#### 对象包含两种 **属性和方法**\n\n#### 创建对象的方法\n\nvar obj = {}\n\n- 添加元素\n\n  obj['username'] = '张三'   数组的key可以是数字或者字符串\n\n  var str = ’like‘\n\n  obj[str] = '电影'\n\n  - ​\tstr 不加引号，可以作为变量被解析\n  - obj.age === obj['age']\n    - **区别**：方括号中可以解析变量，**如上**\n  - **对象.一定是字符串**\n    - obj.str str默认为字符串\n\n- 方法的写法\n\n  - obj['say'] = function(){\n\n    ....}\n\n  - 对象中的方法需要手动调用\n\n- 添加属性和方法\n\n  - ```js\n    //创建对象时添加内容，一定采用key-value的形式\n    - - var obj = {\n        }\n    \n    \n    ```\n\n  - 变量名和对象名相同，需要在变量的外部加一个方括号\n\n    - [str]:'值'，\n\n- **key值的设定需要符合标识符命名规则**\n\n- 对象的方法里面如何使用对象的属性和方法 （this代表事件源）\n\n  - this放在对象的方法中，即指向该对象\n\n- 向对象中添加属性和方法 \n\n  - obj.a = '';\n  - obj.c = function(){}\n\n- 删除数组 中的属性和方法\n\n  - delece obj.a;\n  - object obj[''];\n\n- 取或调用数组中的属性和方法\n\n- 遍历对象\n\n  - ​\t`for(var key in obj){`\n\n    ​\t`console.log(obj[key])`\n\n    }\n\n- 1\n\n### 对象和数组进行比较\n\n1. //数组时有序的，对象是无序的\n2. 数组的key必须是number 对象的key是字符串，数组是一种特殊的对象，虽然数组的key是number，但在解析时，会被自动转换成字符串\n3. 数组操作元素只能[]对象，对象可以通过  .  和 []\n4. 数组的遍历可以使用foreach，for ，for in，对象只能使用for in\n5. 当key值重复时，value会发生覆盖\n\n\n\n#### 对象方法Object.keys(object)\n\n\n\n\n\n### 函数\n\n##### 定义 ：一段代码的集合体\n\n特点：不调用时为静止片段，不调用不执行。减少工作量\n\n#### 创建函数的方式\n\n1. function 函数名(){\n\n   语句；\n\n   }\n\n2. 函数表达式\n\n   - var 。。。 = function    在js中，函数地位和基础数据类型相同，数据能做什么，函数就能做什么\n\n   var 变量 = function(){\n\n   ​\t语句；\n\n   }\n\n   - ​\t将函数放在函数的右边，js引擎就会把函数理解为一个表达式\n   - 一般来说说，表达式都放在等号的右边\n\n3. var fn = new function(){\n\n   }\n\n\n\n### 函数名\n\n理解为变量名  -> 符合标识符命名规则\n\n- ​\t给函数起名字时，不要首字母大小，\n  - 凡是大写字母开头都是构造函数\n- 形参和实参\n  - 形参：理解为只能用在内部的变量\n    - 调用函数的时候给形参赋值，即实参赋值给形参\n  - 实参：\n  - ps：\n\n\n\n### 返回值\n\n需求:通过add函数计算出100+200的值，然后通过msg函数结果以弹窗将结果以弹窗的形式弹出\n\n- 将函数处理后的结果在函数外拿到\n\n\n\n### callback回调函数\n\n把函数当参数传递给另一个函数\n\n##### 没有名字的函数叫匿名函数\n\n\n\n1. 函数创建方式：\n   1. `function`关键字 \n   2. 函数表达式\n   3. 构造函数\n\n> 通过函数表达式创建的函数不能提前使用。因为函数表达式的创建形式相当于是把一个匿名函数赋值给了变量，虽然变量和函数都会提升，但是赋值的操作不会提升。所以也就不能提前使用函数。\n\n\n\n> 不管是变量也好还是函数也好，提升终归不是一个好的事情，所以对于程序员来说，知道这个规则但是我们尽量不去使用。\n\n\n\n```js\n// 尽量不在函数体之前使用函数\nfn1();\nfunction fn1() {}\n```\n\n2. 函数名\n   1. 函数的命名遵守标识符的规则\n   2. 尽量不要首字母大写，因为在js中首字母大写是属于构造函数(class类)\n3. 函数的参数\n   1. 形参(创建函数时，函数名之后的括号里放的就是形参列表)\n   2. 实参(调用函数时，函数名后面的括号放的就是实参列表)\n\n\n\n​\t关于形参和实参：\n\n  1. 形参的个数多于实参的个数\n\n     ```js\n     function fn1(a,b,c) {}\n     \n     fn1(10,20); \n     ```\n\n     多余的形参值是undefined。\n\n     > 完全可以把形参理解为js中的变量，只不过这个变量只能用在函数中，而实参其实就是给这个变量赋值。\n     >\n     > 如果实参的个数少于形参，那就会出现多余的形参没有被赋值，自然结果就和未赋值的变量相同。\n\n  2. 实参的个数多余形参的个数\n\n     ```js\n     function fn1(a,b) {}\n     fn1(10,20,30,40);\n     ```\n\n     当实参的个数多于形参的个数时，想要找到多余的实参，可以利用arguments(js提供的专门在函数当中使用的类数组对象)。\n\n     可以通过arguments.length获取实参的个数。\n\n     可以通过arguments.callee.length 获取形参的个数。\n\n\n\n4. 函数返回值\n\n   js的函数一旦创建完毕，那么就会在内存中停留但是不会被执行，只有函数调用的时候，函数代码才会执行。在执行的过程中如果碰到了return，那么函数就会立刻停止执行。\n\n   在一个函数中，同一时刻有且仅有一个return可以生效。\n\n   return只能返回一个值。\n\n\n\n\n\n------\n\n1. 作用域和变量\n\n   1. 作用域：代码生效的范围。\n\n   在es5当中，作用域只有两个：\n\n   1. 全局作用域：整个script存在的空间\n   2. 函数作用域：函数内部的空间\n\n既然存在两个作用域，那么对应的在不同作用域下声明的变量，也就有了不同的称呼：\n\n* 全局变量(在全局作用域下声明的变量，生效范围全局)\n* 局部变量(在函数内部声明的变量，生效范围仅限于函数的内部)\n\n\n\n2. 作用域链\n\n   *由小范围的作用域不断向上延申扩展最终形成的一系列作用域，称之为作用域链。*\n\n3. 生命周期和垃圾回收机制\n\n4. 闭包函数\n\n   1. 在函数内部将一个函数当作返回值返回，这样的函数结构称之为闭包函数。\n   2. 特点：返回的函数可以任意的通过作用域链拿到上一层函数的值。\n      1. 会将状态保存，并不会在函数执行完毕之后销毁函数内部的变量。\n   3. 缺点：不会及时的被销毁。\n\n5. 回调函数\n\n   函数在js中是一等公民，所以基础数据类型能干的事，函数也可以干。\n\n   所以就可以拿函数当作一个参数传递给另外一个函数。\n\n   ```js\n   function jsq(num1, num2, cb) {\n       return cb(num1, num2);\n   }\n   ```\n\n   \n\n6. 递归函数\n\n   所谓的递归函数就是在函数体内调用本函数。\n\n7. IIFE\n\n\n\n### 闭包函数\n\n``` js\nfunction test(){\n\tvar temp = 100;\n    function a() {\n\t\tconsole.log(temp);\n    }\n    return a;\n}\nvar demo = test();\ndemo();\n// 凡是多个函数嵌套，里面的函数都保存到了外部函数的外部（即外部)里面函数在执行时，可以继续访问外部函数未销毁之前外部变量函数的变量，且不会报错\n```\n\n\n\n``` js\n//经典闭包案例\n//闭包里面的匿名函数，先不去找i的值，仅仅先创建了10个闭包函数，最后执行完循环，i=10不满足条件，然后执行这些闭包函数\n//    此时再来找i的值，i的值未10，最终结果为10个10\nfunction test(){\n\tvar arr = [];\n    for(var i = 0;i<10;i++)\n        {\n\t\t\tarr[i] = function(){\n\t\t\t\tdocumen.write(i+' ');\t\n            }\n        }\n    return arr;\n }\nvar myArr = test();\nfor(var j = 0;j < 10;j++){\n\tmyArr[j]();\n}\n```\n\n``` js\n for (let i = 0; i < arr.length; i++) {            var divall = document.createElement('div');            divall.setAttribute('class', 'noteSome');            divall.innerHTML = getModule(arr[i].ipt_value, arr[i].text_value, arr[i].time, arr[i].note_id)            artile.append(divall);\n```\n\n\n\n### 字符串方法\n\n#### 1. 获取字符串长度\n\nJavaScript中的字符串有一个length属性，该属性可以用来获取字符串的长度：\n\n```javascript\nconst str = 'hello';str.length   // 输出结果：5复制代码\n```\n\n#### 2. 获取字符串指定位置的值\n\ncharAt()和charCodeAt()方法都可以通过索引来获取指定位置的值：\n\n- charAt() 方法获取到的是指定位置的字符；\n- charCodeAt()方法获取的是指定位置字符的Unicode值。\n\n#### （1）charAt()\n\ncharAt() 方法可以返回指定位置的字符。其语法如下：\n\n```javascript\nstring.charAt(index)复制代码\n```\n\nindex表示字符在字符串中的索引值：\n\n```javascript\nconst str = 'hello';\nstr.charAt(1)  // 输出结果：e \n复制代码\n```\n\n我们知道，字符串也可以通过索引值来直接获取对应字符，那它和charAt()有什么区别呢？来看例子：\n\n```javascript\nconst str = 'hello';\nstr.charAt(1)  // 输出结果：e \nstr[1]         // 输出结果：e \nstr.charAt(5)  // 输出结果：'' \nstr[5]         // 输出结果：undefined\n复制代码\n```\n\n可以看到，当index的取值不在str的长度范围内时，str[index]会返回undefined，而charAt(index)会返回空字符串；除此之外，str[index]不兼容ie6-ie8，charAt(index)可以兼容。\n\n#### （2）charCodeAt()\n\n`charCodeAt()`：该方法会返回指定索引位置字符的 Unicode 值，返回值是 0 - 65535 之间的整数，表示给定索引处的 UTF-16 代码单元，如果指定位置没有字符，将返回 **NaN**：\n\n```javascript\nlet str = \"abcdefg\";\nconsole.log(str.charCodeAt(1)); // \"b\" --> 98\n复制代码\n```\n\n通过这个方法，可以获取字符串中指定Unicode编码值范围的字符。比如，数字0～9的Unicode编码范围是: 48～57，可以通过这个方法来筛选字符串中的数字，当然如果你更熟悉正则表达式，会更方便。\n\n#### 3. 检索字符串是否包含特定序列\n\n这5个方法都可以用来检索一个字符串中是否包含特定的序列。其中前两个方法得到的指定元素的索引值，并且只会返回第一次匹配到的值的位置。后三个方法返回的是布尔值，表示是否匹配到指定的值。\n\n注意：这5个方法都对大小写敏感！\n\n#### （1）indexOf()\n\n`indexOf()`：查找某个字符，**有则返回第一次匹配到的位置**，否则返回-1，其语法如下：\n\n```javascript\nstring.indexOf(searchvalue,fromindex)\n复制代码\n```\n\n该方法有两个参数：\n\n- searchvalue：必需，规定需检索的字符串值；\n- fromindex：可选的整数参数，规定在字符串中开始检索的位置。它的合法取值是 0 到 string.length - 1。如省略该，则从字符串的首字符开始检索。\n\n```javascript\nlet str = \"abcdefgabc\";console.log(str.indexOf(\"a\"));   // 输出结果：0console.log(str.indexOf(\"z\"));   // 输出结果：-1console.log(str.indexOf(\"c\", 4)) // 输出结果：9复制代码\n```\n\n#### （2）lastIndexOf()\n\n`lastIndexOf()`：查找某个字符，有则返回最后一次匹配到的位置，否则返回-1\n\n```javascript\nlet str = \"abcabc\";console.log(str.lastIndexOf(\"a\"));  // 输出结果：3console.log(str.lastIndexOf(\"z\"));  // 输出结果：-1复制代码\n```\n\n该方法和indexOf()类似，只是查找的顺序不一样，indexOf()是正序查找，lastIndexOf()是逆序查找。\n\n#### （3）includes()\n\n`includes()`：该方法用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 true，否则返回 false。该方法的语法如下：\n\n```javascript\nstring.includes(searchvalue, start)复制代码\n```\n\n该方法有两个参数：\n\n- searchvalue：必需，要查找的字符串；\n- start：可选，设置从那个位置开始查找，默认为 0。\n\n```javascript\nlet str = 'Hello world!';str.includes('o')  // 输出结果：truestr.includes('z')  // 输出结果：falsestr.includes('e', 2)  // 输出结果：false复制代码\n```\n\n#### （4）startsWith()\n\n`startsWith()`：该方法用于检测字符串**是否以指定的子字符串开始**。如果是以指定的子字符串开头返回 true，否则 false。其语法和上面的includes()方法一样。\n\n```javascript\nlet str = 'Hello world!';str.startsWith('Hello') // 输出结果：truestr.startsWith('Helle') // 输出结果：falsestr.startsWith('wo', 6) // 输出结果：true复制代码\n```\n\n#### （5）endsWith()\n\n`endsWith()`：该方法用来判断当前字符串**是否是以指定的子字符串结尾**。如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false。其语法如下：\n\n```javascript\nstring.endsWith(searchvalue, length)复制代码\n```\n\n该方法有两个参数：\n\n- searchvalue：必需，要搜索的子字符串；\n- length： 设置字符串的长度，默认值为原始字符串长度 string.length。\n\n```javascript\nlet str = 'Hello world!';str.endsWith('!')       // 输出结果：truestr.endsWith('llo')     // 输出结果：falsestr.endsWith('llo', 5)  // 输出结果：true复制代码\n```\n\n可以看到，**当第二个参数设置为5时，就会从字符串的前5个字符中进行检索，所以会返回true。**\n\n#### 4. 连接多个字符串\n\nconcat() 方法用于连接两个或多个字符串。该方法不会改变原有字符串，会返回连接两个或多个字符串的新字符串。其语法如下：\n\n```javascript\nstring.concat(string1, string2, ..., stringX)复制代码\n```\n\n其中参数 string1, string2, ..., stringX 是必须的，他们将被连接为一个字符串的一个或多个字符串对象。\n\n```javascript\nlet str = \"abc\";console.log(str.concat(\"efg\"));          //输出结果：\"abcefg\"console.log(str.concat(\"efg\",\"hijk\")); //输出结果：\"abcefghijk\"复制代码\n```\n\n虽然concat()方法是专门用来拼接字符串的，但是在开发中使用最多的还是加操作符+，因为其更加简单。\n\n#### 5. 字符串分割成数组\n\nsplit() 方法用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。其语法如下：\n\n```javascript\nstring.split(separator,limit)复制代码\n```\n\n该方法有两个参数：\n\n- separator：必需。字符串或正则表达式，从该参数指定的地方分割 string。\n- limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。\n\n```javascript\nlet str = \"abcdef\";\nstr.split(\"c\");    // 输出结果：[\"ab\", \"def\"]\nstr.split(\"\", 4)   // 输出结果：['a', 'b', 'c', 'd'] \n复制代码\n```\n\n如果把空字符串用作 separator，那么字符串中的每个字符之间都会被分割。\n\n```javascript\nstr.split(\"\");     // 输出结果：[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n复制代码\n```\n\n其实在将字符串分割成数组时，可以同时拆分多个分割符，使用正则表达式即可实现：\n\n```javascript\nconst list = \"apples,bananas;cherries\"\nconst fruits = list.split(/[,;]/)\nconsole.log(fruits);  // 输出结果：[\"apples\", \"bananas\", \"cherries\"]\n复制代码\n```\n\n#### 6. 截取字符串\n\nsubstr()、substring()和 slice() 方法都可以用来截取字符串。\n\n#### （1） slice()\n\nslice() 方法用于提取字符串的某个部分，并以新的字符串返回被提取的部分。其语法如下：\n\n```javascript\nstring.slice(start,end)\n复制代码\n```\n\n该方法有两个参数：\n\n- start：必须。 要截取的片断的起始下标，第一个字符位置为 0。如果为负数，则从尾部开始截取。\n- end：可选。 要截取的片段结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。\n\n上面说了，如果start是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推：\n\n```javascript\nlet str = \"abcdefg\";\nstr.slice(1,6);   // 输出结果：\"bcdef\" \nstr.slice(1);     // 输出结果：\"bcdefg\" \nstr.slice();      // 输出结果：\"abcdefg\" \nstr.slice(-2);    // 输出结果：\"fg\"\nstr.slice(6, 1);  // 输出结果：\"\"\n复制代码\n```\n\n注意，该方法返回的子串**包括开始处的字符**，但**不包括结束处的字符**。\n\n#### （2） substr()\n\nsubstr() 方法用于在字符串中抽取从开始下标开始的指定数目的字符。其语法如下：\n\n```javascript\nstring.substr(start,length)复制代码\n```\n\n该方法有两个参数：\n\n- start\t必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。\n- length：可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。\n\n```javascript\nlet str = \"abcdefg\";str.substr(1,6); // 输出结果：\"bcdefg\"\nstr.substr(1);   // 输出结果：\"bcdefg\" 相当于截取[1,str.length-1]\nstr.substr();    // 输出结果：\"abcdefg\" 相当于截取[0,str.length-1]\nstr.substr(-1);  // 输出结果：\"g\"复制代码\n```\n\n#### （3） substring()\n\nsubstring() 方法用于提取字符串中介于两个指定下标之间的字符。其语法如下：\n\n```javascript\nstring.substring(from, to)复制代码\n```\n\n该方法有两个参数：\n\n- from：必需。一个非负的整数，规定要提取的子串的第一个字符在 string 中的位置。\n- to：可选。一个非负的整数，比要提取的子串的最后一个字符在 string 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。\n\n**注意：** 如果参数 from 和 to 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 from 比 to 大，那么该方法在提取子串之前会先交换这两个参数。并且该方法不接受负的参数，如果参数是个负数，就会返回这个字符串。\n\n```javascript\nlet str = \"abcdefg\";str.substring(1,6); // 输出结果：\"bcdef\" [1,6)\n str.substring(1);   // 输出结果：\"bcdefg\"[1,str.length-1]\nstr.substring();    // 输出结果：\"abcdefg\" [0,str.length-1]\nstr.substring(6,1); // 输出结果 \"bcdef\" [1,6)\nstr.substring(-1);  // 输出结果：\"abcdefg\"复制代码\n```\n\n注意，该方法返回的子串**包括开始处的字符**，但**不包括结束处的字符**。\n\n#### 7. 字符串大小写转换\n\ntoLowerCase() 和 toUpperCase()方法可以用于字符串的大小写转换。\n\n#### （1）toLowerCase()\n\n`toLowerCase()`：该方法用于把字符串转换为小写。\n\n```javascript\nlet str = \"adABDndj\";str.toLowerCase(); // 输出结果：\"adabdndj\"复制代码\n```\n\n#### （2）toUpperCase()\n\n`toUpperCase()`：该方法用于把字符串转换为大写。\n\n```javascript\nlet str = \"adABDndj\";str.toUpperCase(); // 输出结果：\"ADABDNDJ\"复制代码\n```\n\n我们可以用这个方法来将字符串中第一个字母变成大写：\n\n```javascript\nlet word = 'apple'\nword = word[0].toUpperCase() + word.substr(1)\nconsole.log(word) // 输出结果：\"Apple\"复制代码\n```\n\n#### 8. 字符串模式匹配\n\nreplace()、match()和search()方法可以用来匹配或者替换字符。\n\n#### （1）replace()\n\n`replace()`：该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。其语法如下：\n\n```javascript\nstring.replace(searchvalue, newvalue)复制代码\n```\n\n该方法有两个参数：\n\n- searchvalue：必需。规定子字符串或要替换的模式的 RegExp 对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。\n- newvalue：必需。一个字符串值。规定了替换文本或生成替换文本的函数。\n\n```javascript\nlet str = \"abcdef\";\nstr.replace(\"c\", \"z\") // 输出结果：abzdef\n复制代码\n```\n\n执行一个全局替换, 忽略大小写:\n\n```javascript\nlet str=\"Mr Blue has a blue house and a blue car\";\nstr.replace(/blue/gi, \"red\");    // 输出结果：'Mr red has a red house and a red car'\n复制代码\n```\n\n**注意：** 如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。\n\n#### （2）match()\n\n`match()`：该方法用于在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。其语法如下：\n\n```javascript\nstring.match(regexp)\n复制代码\n```\n\n该方法的参数 regexp 是必需的，规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。\n\n**注意：** 该方法返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。\n\n```javascript\nlet str = \"abcdef\";\nconsole.log(str.match(\"c\")) // [\"c\", index: 2, input: \"abcdef\", groups: undefined]\n复制代码\n```\n\n#### （3）search()\n\n`search()`方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。其语法如下：\n\n```javascript\nstring.search(searchvalue)\n复制代码\n```\n\n该方法的参数 regex 可以是需要在 string 中检索的子串，也可以是需要检索的 RegExp 对象。\n\n**注意：** 要执行忽略大小写的检索，请追加标志 i。该方法不执行全局匹配，它将忽略标志 g，也就是只会返回第一次匹配成功的结果。如果没有找到任何匹配的子串，则返回 -1。\n\n**返回值：** 返回 str 中第一个与 regexp 相匹配的子串的起始位置。\n\n```javascript\nlet str = \"abcdef\";str.search(/bcd/)   // 输出结果：1复制代码\n```\n\n#### 9. 移除字符串收尾空白符\n\ntrim()、trimStart()和trimEnd()这三个方法可以用于移除字符串首尾的头尾空白符，空白符包括：空格、制表符 tab、换行符等其他空白符等。\n\n#### （1）trim()\n\ntrim() 方法用于移除字符串首尾空白符，该方法不会改变原始字符串：\n\n```javascript\nlet str = \"  abcdef  \"str.trim()    // 输出结果：\"abcdef\"复制代码\n```\n\n注意，该方法不适用于null、undefined、Number类型。\n\n#### （2）trimStart()\n\ntrimStart() 方法的的行为与`trim()`一致，不过会返回一个**从原始字符串的开头删除了空白的新字符串**，不会修改原始字符串：\n\n```javascript\nconst s = '  abc  ';s.trimStart()   // \"abc  \"复制代码\n```\n\n#### （3）trimEnd()\n\ntrimEnd() 方法的的行为与`trim()`一致，不过会返回一个**从原始字符串的结尾删除了空白的新字符串**，不会修改原始字符串：\n\n```javascript\nconst s = '  abc  ';s.trimEnd()   // \"  abc\"复制代码\n```\n\n#### 10. 获取字符串本身\n\nvalueOf()和toString()方法都会返回字符串本身的值，感觉用处不大。\n\n#### （1）valueOf()\n\n`valueOf()`：返回某个字符串对象的原始值，该方法通常由 JavaScript 自动进行调用，而不是显式地处于代码中。\n\n```javascript\nlet str = \"abcdef\"\nconsole.log(str.valueOf()) // \"abcdef\"\n复制代码\n```\n\n#### （2）toString()\n\n`toString()`：返回字符串对象本身\n\n```javascript\nlet str = \"abcdef\"\nconsole.log(str.toString()) // \"abcdef\"\n复制代码\n```\n\n#### 11. 重复一个字符串\n\nrepeat() 方法返回一个新字符串，表示将原字符串重复n次：\n\n```javascript\n'x'.repeat(3)     // 输出结果：\"xxx\"\n'hello'.repeat(2) // 输出结果：\"hellohello\"\n'na'.repeat(0)    // 输出结果：\"\"\n复制代码\n```\n\n如果参数是小数，会向下取整：\n\n```javascript\n'na'.repeat(2.9) // 输出结果：\"nana\"\n复制代码\n```\n\n如果参数是负数或者Infinity，会报错：\n\n```javascript\n'na'.repeat(Infinity)   // RangeError\n'na'.repeat(-1)         // RangeError\n复制代码\n```\n\n如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。\n\n```javascript\n'na'.repeat(-0.9)   // 输出结果：\"\"\n复制代码\n```\n\n如果参数是NaN，就等同于 0：\n\n```javascript\n'na'.repeat(NaN)    // 输出结果：\"\"\n复制代码\n```\n\n如果repeat的参数是字符串，则会先转换成数字。\n\n```javascript\n'na'.repeat('na')   // 输出结果：\"\"\n'na'.repeat('3')    // 输出结果：\"nanana\"\n复制代码\n```\n\n#### 12. 补齐字符串长度\n\npadStart()和padEnd()方法用于补齐字符串的长度。如果某个字符串不够指定长度，会在头部或尾部补全。\n\n#### （1）padStart()\n\n`padStart()`用于头部补全。该方法有两个参数，其中第一个参数是一个数字，表示字符串补齐之后的长度；第二个参数是用来补全的字符串。 \n\n如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串：\n\n```javascript\n'x'.padStart(1, 'ab') // 'x'复制代码\n```\n\n如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串：\n\n```javascript\n'x'.padStart(5, 'ab') // 'ababx''x'.padStart(4, 'ab') // 'abax'复制代码\n```\n\n如果省略第二个参数，默认使用空格补全长度：\n\n```javascript\n'x'.padStart(4) // '   x'复制代码\n```\n\npadStart()的常见用途是为数值补全指定位数，笔者最近做的一个需求就是将返回的页数补齐为三位，比如第1页就显示为001，就可以使用该方法来操作：\n\n```javascript\n\"1\".padStart(3, '0')   // 输出结果： '001'\n\"15\".padStart(3, '0')  // 输出结果： '015'\n复制代码\n```\n\n#### （2）padEnd()\n\n`padEnd()`用于尾部补全。该方法也是接收两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串：\n\n```javascript\n'x'.padEnd(5, 'ab') // 'xabab'\n'x'.padEnd(4, 'ab') // 'xaba'\n复制代码\n```\n\n#### 13. 字符串转为数字\n\nparseInt()和parseFloat()方法都用于将字符串转为数字。\n\n#### （1）parseInt()\n\nparseInt() 方法用于可解析一个字符串，并返回一个整数。其语法如下：\n\n```javascript\nparseInt(string, radix)\n复制代码\n```\n\n该方法有两个参数：\n\n- string：必需。要被解析的字符串。\n- radix：可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。\n\n\n\n当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。\n\n```javascript\nparseInt(\"10\");\t\t\t  // 输出结果：10\nparseInt(\"17\",8);\t\t  // 输出结果：15 (8+7)\nparseInt(\"010\");\t\t  // 输出结果：10 或 8\n复制代码\n```\n\n当参数 radix 的值以 “0x” 或 “0X” 开头，将以 16 为基数：\n\n```javascript\nparseInt(\"0x10\")      // 输出结果：16\n复制代码\n```\n\n如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN：\n\n```javascript\nparseInt(\"50\", 1)      // 输出结果：NaN\nparseInt(\"50\", 40)     // 输出结果：NaN\n复制代码\n```\n\n只有字符串中的第一个数字会被返回，当遇到第一个不是数字的字符为止:\n\n```javascript\nparseInt(\"40 4years\")   // 输出结果：40\n复制代码\n```\n\n如果字符串的第一个字符不能被转换为数字，就会返回 NaN：\n\n```javascript\nparseInt(\"new100\")     // 输出结果：NaN\n复制代码\n```\n\n字符串开头和结尾的空格是允许的：\n\n```javascript\nparseInt(\"  60  \")    // 输出结果： 60\n复制代码\n```\n\n#### （2）parseFloat()\n\nparseFloat() 方法可解析一个字符串，并返回一个浮点数。该方法指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。其语法如下：\n\n```javascript\nparseFloat(string)\n复制代码\n```\n\nparseFloat 将它的字符串参数解析成为浮点数并返回。如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。同时参数字符串首位的空白符会被忽略。\n\n```javascript\nparseFloat(\"10.00\")      // 输出结果：10.00\nparseFloat(\"10.01\")      // 输出结果：10.01\nparseFloat(\"-10.01\")     // 输出结果：-10.01\nparseFloat(\"40.5 years\") // 输出结果：40.5\n\n复制代码\n```\n\n如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。\n\n```javascript\nparseFloat(\"new40.5\")    // 输出结果：NaN\n```\n\n\n\n编码和解码 encode URI() 和 encodeURICompoent()\n\n![image-20211213203747451](%E5%AD%A6%E4%B9%A0/mdimages/image-20211213203747451.png)\n\n\n\n\n\n\n\n\n\n### 数组方法\n\n\n\n#### 1.测试所有元素\n\n- #### every（）\n\n  - 测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n  - 里面时一个回调函数 留可以传index item array(原数组)\n\n#### 2.填充一个数组中从起始索引到终止索引内的全部元素。(fill)\n\n- #### fill()\n\n- 前提，数组已经存在位置，如果数组为空或未初始化则无效\n\n  ``` js\n  const array1 = [1, 2, 3, 4];\n  \n  // fill with 0 from position 2 until position 4\n  console.log(array1.fill(0, 2, 4));\n  // expected output: [1, 2, 0, 0]\n  \n  // fill with 5 from position 1\n  console.log(array1.fill(5, 1));\n  // expected output: [1, 5, 5, 5]\n  \n  console.log(array1.fill(6));\n  // expected output: [6, 6, 6, 6]\n  \n  item start conut\n  第一个参数：用item填充 必须\n  第二个参数：填充开始的位置 省略则为0\n  第三分参数：填充多少个  默认为length\n  ```\n\n  \n\n#### 3.合并两个或多个数组。\n\n- #### `**concat()**` 方法\n\n- ``` js\n  //合并多个数组\n  var num1 = [1, 2, 3],\n      num2 = [4, 5, 6],\n      num3 = [7, 8, 9];\n  var nums = num1.concat(num2, num3);\n  console.log(nums);\n  // results in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  //将值连接到数组 \n  // 和下面合并多维很相似\n  var alpha = ['a', 'b', 'c'];\n  var alphaNumeric = alpha.concat(1, [2, 3]);\n  console.log(alphaNumeric);\n  // results in ['a', 'b', 'c', 1, 2, 3]\n  \n  //合并多维数组\n  //会把第一层[]拆开拿到里面的元素\n  var num1 = [[1]];\n  var num2 = [2, [3]];\n  var num3=[5,[6]];\n  var nums = num1.concat(num2);\n  console.log(nums);\n  // results is [[1], 2, [3]]\n  \n  //混合合并\n  var nums2=num1.concat(4,num3);\n  console.log(nums2)\n  // results is [[1], 4, 5,[6]]\n  ```\n\n#### 4.过滤所有元素\n\n\t##### filter()\n\n- ##### 将满足条件的放入一个新数组\n\n  - 里面为一个回调函数 \n\n  - element  数组中当前正在处理的元素。\n\n  - ndex 数组中当前正在处理的元素的索引\n\n  - array（调用了 `filter` 的数组本身。）\n\n  - ```js\n    var arr = [\n      { id: 15 },\n      { id: -1 },\n      { id: 0 },\n      { id: 3 },\n      { id: 12.2 },\n      { },\n      { id: null },\n      { id: NaN },\n      { id: 'undefined' }\n    ];\n    \n    var invalidEntries = 0;\n    \n    function isNumber(obj) {\n      return obj !== undefined && typeof(obj) === 'number' && !isNaN(obj);\n    }\n    \n    function filterByID(item) {\n      if (isNumber(item.id) && item.id !== 0) {\n        return true;\n      }\n      invalidEntries++;\n      return false;\n    }\n    \n    var arrByID = arr.filter(filterByID);\n    \n    console.log('Filtered Array\\n', arrByID);\n    // Filtered Array\n    // [{ id: 15 }, { id: -1 }, { id: 3 }, { id: 12.2 }]\n    \n    console.log('Number of Invalid Entries = ', invalidEntries);\n    // Number of Invalid Entries = 5\n    ```\n\n  ### 5.遍历数组\n\n  - （1）forEach\n\n    1. 可以改变数组自身，没有返回值；\n\n    2. 中途不能用常规操作跳出循环，可以用抛出异常（try/catch）的方式，但不推荐这样做；\n\n       ``` js\n       var arr1 = [\n          {name:'鸣人',age:16},\n          {name:'佐助',age:17}\n       ];\n       var arr2 = [1,2,3];\n       \n       arr1.forEach(item => { \n         item.age = item.age + 1}\n       );\n       ```\n\n       **当数组中元素是值类型，forEach绝对不会改变数组；当是引用类型，则可以改变数组**\n\n       （2）map() 映射\n\n    原数组被\"映射\"成对应新数组。\n\n    - 新建一个数组，需要有承载对象，也意味着原始数组在调用它后不会发生变化;\n    - 该数组中的每个元素都调用一个提供的函数后返回结果。\n\n    创建新数组不代表不能用它改变原有数组，你用原有数组去承载就可以：\n\n    ```js\n    let arr = [1,2,3]; \n    arr = arr.map(item => { return item * 2 })\n    ```\n\n    - map()中每个元素都要执行相应的回调函数，所以必须要有return\n    - 如果你想给数组做一定的过滤处理，那map()基本上行不通：\n\n    ```js\n    let newArr = [1,2,3,4,5].map(item => { if(item > 3) return item })\n    // => [undefined, undefined, undefined, 4, 5]\n    ```\n\n    - 不能凑合用， 人生不能凑合，代码也是！\n\n      （3)fliter() 过滤\n\n      -  \t创建一个新数组，新数组中的元素是筛选出来的符合条件的所有对象。\n\n    ```js\n    let newArr = [1,2,3,4,5].filter(item =>{\n       if(item > 3) return item \n    })\n    //  => [4,5]\n    ```\n\n    ​\t\t\t(4)sort()排序\n\n    - sort()用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序。\n\n    - ​\tsort()与map()、filter()等不同，它直接改变原始数组（很重要！）；\n\n    - 如果想按照其他标准进行排序，就需提供比较函数compareFunction(a,b)，数组会按照调用该函数的返回值排序，即a和b是两个将要比较的元素：\n\n      - 如果compareFunction(a,b)小于0，则a排列到b之前；\n      - 如果 compareFunction(a, b)等于0，a和b的相对位置不变（并不保证）;\n      - 如果 compareFunction(a, b)大于0，b排列到a之前； 直接上例子：\n\n      ```js\n      let Users = [\n        {name:'鸣人',age:16},\n        {name:'卡卡西',age:28},\n        {name:'自来也',age:50},\n        {name:'佐助',age:17}\n      ];\n      Users.sort((a,b)=> {\n         return a.age - b.age\n      })\n      \n      // => 鸣人、佐助、卡卡西、自来也\n      ```\n\n      \n\n      (5)检索存在\n\n      - ​\tsome()\n\n        ```js\n        var result = [\n           {name:'鸣人',age:16},\n           {name:'佐助',age:17}\n        ].some(item => {\n        \treturn item.age > 16 \n        });\n        => true\n        ```\n\n      - every()\n\n      ```js\n      var result = [\n         {name:'鸣人',age:16},\n         {name:'佐助',age:17}\n      ].every(item => {\n      \treturn item.age > 16 \n      });\n      => false\n      ```\n\n      - some()和every()返回的都是`Boolean`值，仅此而此\n\n#### 6.数组去重\n\n- ​\tnew Set( ) \t经典方法\n\n```js\nlet tempArr = new Set([1,2,3,3,4,4,5])\n// => {1,2,3,4,5} \n\n//并且已有元素是添加不进去的：\ntempArr.add(3) \n// => {1,2,3,4,5}\n\ntempArr.add(6)\n// => {1,2,3,4,5,6}\n```\n\n​                     **Set()没法去重元素是引用对象的数组。**\n\n- #### _.uniqWith()     js库\n\n  ```js\n  import _ from 'lodash';\n  <script>\n  var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n  _.uniqWith(objects, _.isEqual);\n  </script>\n  \n  //=> [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n  \n  \n  //_.isEqual(value,other)用于执行深比较来确定两者的值是否相等。 _.uniqWith()做去重处理。\n  ```\n\n\n\n#### 7.查找元素\n\n- findIndex（）\n\n通过对象属性值直接获取对应索引： `**findIndex()**` 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)。\n\n- find（）\n\n`find()`顾名思义，就是用来在数组中找到我们所需要的元素\n\n\n\n#### 8.回调地狱\n\n```js\n// 回调地狱\n    ajax('get', './a.json', function (info) {\n      if (info.addr != 'ok') {\n        ajax('get', info.addr, function (info) {\n          if (info.addr != 'ok') {\n            ajax('get', info.addr, function (info) {\n              if (info.addr == 'ok') {\n                alert(info.msg);\n              }\n            })\n          }\n        })\n      }\n    });\n```\n\n\n\n#### 9.eval\n\n它的功能是将对应的字符串解析成 JS 并执行，应该避免使用 JS，因为非常消耗性能（2 次，一次解析成 JS，一次执行）\n\n#### 10.copyWithin\n\n```js\n//copyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。\n```\n\n- 他会影响原数组，返回的数据和原数据为同一引用\n\n- ```js\n  [1, 2, 3, 4, 5].copyWithin(-2)\n  // [1, 2, 3, 1, 2]\n  \n  [1, 2, 3, 4, 5].copyWithin(0, 3)\n  // [4, 5, 3, 4, 5]\n  \n  [1, 2, 3, 4, 5].copyWithin(0, 3, 4)\n  // [4, 2, 3, 4, 5]\n  \n  [1, 2, 3, 4, 5].copyWithin(-2, -3, -1)\n  // [1, 2, 3, 3, 4]\n  ```\n\n#### 11.call bind apply\n\n```js\n//第一个参数 都是this 的指向，后面的参数则都是传递的参数\n// call 和 bind 传递参数都是： a,b,c...的形式\n  //而apply后面传递的参数应该为数组形式，就算是单个数据也要写成数组的形式 ：['a']\n//bind和call存在的区别在于，call和apply都会立即执行函数，而bind则不会。因此可以用bind写事件处理函数\n```\n\n```js\n // Array.prototype ---》数组的实例化对象的原型 ---》this 指向数组的实例化对象\n    function fn1(a,b,c) {\n      // arguments  foreach\n      // es5中非常重要的写法\n      Array.prototype.forEach.call(arguments,function(item) {\n        console.log(item);\n      })\n    }\n    fn1('哈哈哈', '嘿嘿嘿', '呵呵呵');\n```\n\n```js\nconst btn = document.querySelector('#btn');\n    // call apply bind 改变this指向\n    // call(this,值1,值2....) apply(this, [值1, 值2...]) bind(this, 值1, 值2....)\n    // 从表面上看bind方法和call方法完全一致，但是\n    // bind方法可以再调用之后不执行函数，而call和apply只要调用就立刻执行\n    const obj = {\n      a: 100,\n    }\n    function fn1(user) {\n      console.log('你好', user);\n      console.log(this.a); // window.a\n    }\n    // 让fn1的this指向obj 使用call方法，只要运行代码，程序就会立刻执行\n    // fn1.call(obj, '张三');\n    // fn1.apply(obj, ['张三']);\n    // 我的需要: fn1作为btn的事件处理函数，点击按钮之后再执行\n    // fn1需要改变this指向，同时需要向fn1中传值\n    btn.onclick = fn1.bind(obj, '张三');\n```\n\n![image-20211223194857541](%E5%AD%A6%E4%B9%A0/mdimages/image-20211223194857541.png)\n\n```js\nfunction Person(name,age){\n    //this == obj\n    this.name = name;\n    this.age = age;\n}\nver person = new Person('deng',100)\nvar obj = {}\nPerson.call(obj,'cheng',300)\n//test  ---> test.call()\n\n//默认函数运行，相当于隐式运行.call( )\n//把Person时传入obj，相当于this == obj this.name = name ,,this.age = age\n```\n\n```js\nfunction Person(name,age){\n    //this == obj\n    this.name = name;\n    this.age = age;\n}\nfunction Student(){\n}\n```\n\n\n\n\n\n\n\n#### 12.reduce\n\n`**reduce()**` 方法对数组中的每个元素执行一个由您提供的**reducer**函数(升序执行)，将其结果汇总为单个返回值。\n\n```js\nconst array1 = [1, 2, 3, 4];\nconst reducer = (previousValue, currentValue) => previousValue + currentValue;\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n//reduce 里面为一个回调函数\n```\n\n```php\narray.reduce(function(prev, current, currentIndex, arr), initialValue)\n```\n\n1. prev：函数传进来的初始值或上一次回调的返回值\n2. current：数组中当前处理的元素值\n3. currentIndex：当前元素索引\n4. arr：当前元素所属的数组本身\n5. initialValue：传给函数的初始值\n\n#### 13.Map\n\n**加工数据**\n\n`**map()**` 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。\n\n```js\nconst array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n```\n\n#### 14.splice\n\n- 删除 修改 清空\n\n- ```js\n  //splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n  ```\n\n- ```js\n  const months = ['Jan', 'March', 'April', 'June'];\n  months.splice(1, 0, 'Feb');\n  // inserts at index 1\n  console.log(months);\n  // expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"June\"]\n  \n  months.splice(4, 1, 'May');\n  // replaces 1 element at index 4\n  console.log(months);\n  \n  //1.要修改的元素索引\n  //2.要删除的元素个数\n  //3.要添加的元素\n  \n  //清空 arr.splice(0,arr.length)\n  ```\n\n- \n\n#### 15.URI 和 URL\n\n##### 一.统一资源标识符（URI）\n\n<1>什么是URI\n\nURI，统一资源标志符(Uniform Resource Identifier， URI)，表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行标识的。\n\n<2>URI的结构组成\n\nURI通常由三部分组成：\n\n①资源的命名机制；\n\n②存放资源的主机名；\n\n③资源自身的名称。\n\n（注意：这只是一般URI资源的命名方式，只要是可以唯一标识资源的都被称为URI，上面三条合在一起是URI的充分不必要条件）\n\n<3>URI举例\n\n如：https://blog.csdn.net/qq_32595453/article/details/79516787\n\n我们可以这样解释它：\n\n①这是一个可以通过https协议访问的资源，\n\n②位于主机 blog.csdn.net上，\n\n③通过“/qq_32595453/article/details/79516787”可以对该资源进行唯一标识（注意，这个不一定是完整的路径）\n\n注意：以上三点只不过是对实例的解释，以上三点并不是URI的必要条件，URI只是一种概念，怎样实现无所谓，只要它唯一标识一个资源就可以了。\n\n##### 二、URL\nURL是URI的一个子集。它是Uniform Resource Locator的缩写，译为“统一资源定位 符”。\n\n通俗地说，URL是Internet上描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。\n\n采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL是URI概念的一种实现方式。\n\nURL的一般格式为(带方括号[]的为可选项)：\n\nprotocol :// hostname[:port] / path / [;parameters][?query]#fragment\n\nURL的格式由三部分组成： \n\n①第一部分是协议(或称为服务方式)。\n\n②第二部分是存有该资源的主机IP地址(有时也包括端口号)。\n\n③第三部分是主机资源的具体地址，如目录和文件名等。\n\n第一部分和第二部分用“://”符号隔开，\n\n第二部分和第三部分用“/”符号隔开。\n\n第一部分和第二部分是不可缺少的，第三部分有时可以省略。\n\n##### 三、URI和URL之间的区别\n从上面的例子来看，你可能觉得URI和URL可能是相同的概念，其实并不是，URI和URL都定义了资源是什么，但URL还定义了该如何访问资源。URL是一种具体的URI，它是URI的一个子集，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI 是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，是绝对的。\n\n##### 1.decodeURI( )\n\n`**decodeURI()**` 函数能解码由[`encodeURI`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) 创建或其它流程得到的统一资源标识符（URI）。\n\n##### 2.encodeURI( )\n\n`**encodeURI()**` 函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 \"代理\" 字符组成)。\n\n#### \n\n### 对象方法\n\n#### 1.Object.defineProperty()\n\n`**Object.defineProperty()**` 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n```js\nconst object1 = {};\n\nObject.defineProperty(object1, 'property1', {\n  value: 42,\n  writable: true\n});\n\nobject1.property1 = 77;\n// throws an error in strict mode\n\nconsole.log(object1.property1);\n// expected output: 42\n```\n\n|            | `configurable` | `enumerable` | `value` | `writable` | `get`  | `set`  |\n| ---------- | -------------- | ------------ | ------- | ---------- | ------ | ------ |\n| 数据描述符 | 可以           | 可以         | 可以    | 可以       | 不可以 | 不可以 |\n| 存取描述符 | 可以           | 可以         | 不可以  | 不可以     | 可以   | 可以   |\n\n- `configurable`\n\n  当且仅当该属性的 `configurable` 键值为 `true` 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。 **默认为** **`false`**。\n\n- `enumerable`\n\n  当且仅当该属性的 `enumerable` 键值为 `true` 时，该属性才会出现在对象的枚举属性中。 **默认为 `false`**。\n\n数据描述符还具有以下可选键值：\n\n- `value`\n\n  该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。 **默认为 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)**。\n\n- `writable`\n\n  当且仅当该属性的 `writable` 键值为 `true` 时，属性的值，也就是上面的 `value`，才能被[`赋值运算符` (en-US)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators)改变。 **默认为 `false`。**\n\n存取描述符还具有以下可选键值：\n\n- `get`\n\n  属性的 getter 函数，如果没有 getter，则为 `undefined`。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 `this` 对象（由于继承关系，这里的`this`并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。 **默认为 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)**。\n\n- `set`\n\n  属性的 setter 函数，如果没有 setter，则为 `undefined`。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 `this` 对象。 **默认为 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)**。\n\n\n\n### Error\n\n[Error 类型](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types)\n\n除了通用的Error构造函数外，JavaScript还有6个其他类型的错误构造函数。更多客户端异常,详见 [Exception Handling Statements](https://developer.mozilla.org/en-US/JavaScript/Guide/Statements#exception_handling_statements)。\n\n- **[`EvalError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError)**\n\n  创建一个error实例，表示错误的原因：与 [`eval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval) 有关。\n\n- **[`InternalError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError)** \n\n  创建一个代表Javascript引擎内部错误的异常抛出的实例。 如: \"递归太多\".\n\n- **[`RangeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError)**\n\n  创建一个error实例，表示错误的原因：数值变量或参数超出其有效范围。\n\n- **[`ReferenceError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)**\n\n  创建一个error实例，表示错误的原因：无效引用。\n\n- **[`SyntaxError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)**\n\n  创建一个error实例，表示错误的原因：[`eval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)在解析代码的过程中发生的语法错误。\n\n- **[`TypeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)**\n\n  创建一个error实例，表示错误的原因：变量或参数不属于有效类型。\n\n- **[`URIError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError)**\n\n  创建一个error实例，表示错误的原因：给 [`encodeURI()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)或 [`decodeURI()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)传递的参数无效。\n\n\n\n### Date \n\n```js\nconst data = new Date();\n//得到data为 ...\n//data = xxxxxxx\n\n//将data放入new Date(  ..) 可以得到曾经保存的时间\nconst data1 = new Date(data)\n\n//可以根据时间戳的差值计算出时间间隔\n```\n\n\n\n\n\n### 异步编程\n\n背景：js诞生之际是一门单线程语言，功能较少。后随着计算机的发展，ajax等的兴起。当计算机执行一个需要较长时间的进程时候，为了提高计算机效率，不让其空闲，就有了异步。\n\n#### 什么是异步js\n\n- ​\t在js中，任务分为两种，同步任务和异步任务。同步任务在主线程中，一开始就执行，而异步任务在需要时或者特点条件下才会执行。\t\n  - 异步js主要有：\n    1. DOM操作\n    2. 定时器\n    3. AJAX请求\n  - 在程序执行过程中，所以的同步任务都会在主线程上执行，形成一个执行栈\n\n  - 主线程之外还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件，当同步任务执行完，或者说执行栈一被清空。主线程就开始执行任务队列里面的异步事件，即当前异步事件的回调函数。再任务队列中，事件遵循先进后出规则。\n\n#### 异步事件注意点\n\n- 异步事件的发生先后顺序是不确定的，这取决于当前事件在子进程中完成的先后顺序，先完成的先进入任务队列，先执行。\n- 定时器由于任务队列的先进后出，可能会延时发生。当定时器时间到达时，才会在任务队列中添加事件（在这之前，挂载在子进程上），而此时定时器需要等到先排队的事件执行完才能执行。（前提是执行栈也已经被清空）\n- Event loop 主线程在任务队列中执行事件是循环不断的，整个这个的运行机制叫做Event loop。\n- html5 规定定时器最短时间间隔为4ms，足的会变为4ms。老版本的规定为10ms，DOM时间触发后不会立即执行，会延误16ms。\n\n\n\n### Promise\n\n- Promise是异步编程的一种解决方案。比传统的解决方案 ——回调函数和事件——更合理强大。\n\n- 可以说是一个容器，里面保存着某个未来才会结束的事件，（通常是一个异步操作）的结果。可以获取异步操作的消息\n\n- 特点\n\n  - 对象的状态不受外界影响，~代表一个异步操作，有三种状态\n\n    - pending\n    - fulfilled\n    - rejected\n\n    只有异步的操作结果，可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态。\n\n  - 一旦状态改变就不会再变，只有两种可能\n\n    - pending -> fulfilled\n    - pending -> rejected\n\n    只要是事件发生了，就不会再改变，叫做定型resolved。\n\n    而事件的特点是，如果你错过了他，再去监听，是得不到结果的。\n\n```js\n//实例化Promise对象\nlet p = new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\np.then((info) => {} , (err) ={} )\n\n.catch((err)={\n    \n})\n```\n\n- 如果后面嵌套then。里面返回promise对象\n- **.then 可以链式不断调用**\n\n```js\np.then((info) => {\n   return new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\n} , (err) ={} )\n\n.then((info) => {\n    return new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\n}, (err) ={})\n\n.then ...\n\n//.catch 每一个状态为reject都会执行catch()\n```\n\n##### async await\n\n- 用await替代then，**await**和**async**需要配合使用\n\n```js\nasync function move(){\n            const p1 = await ajax('get','./a.json')\n            // console.log(p1)\n            const data1 = p1.src\n            // console.log(data1)\n            const p2 = await ajax('get',data1);\n\n            const data2 = p2.src;\n\n            const p3 = await ajax('get',data2)\n\n            console.log(p3.msg)\n        }\n        move()\n```\n\nasync 和 await 执行顺序\n\n```js\nasync function async1() {\n    console.log('async1 start') //执行3\n    await async2()              //执行函数 4\n    console.log('async1 end')   //挂载等待1\n}\n\nasync function async2() {\n    console.log('async2') //执行5\n}\nconsole.log('script start')   //顺序执行1\n\nsetTimeout(function () {\n    console.log('setTimeout')  //等待微任务1\n}, 0)\nasync1();   //执行函数 2\n\nnew Promise(function (resolve) {\n    console.log('promise1') //立即执行 6 \n    resolve();\n}).then(function () {       //挂载等待2\n    console.log('promise2')\n})\nconsole.log('script end')   //立即执行7\n\n结果\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n\n知识点\n显然，这考察的是js中的事件循环和回调队列。注意以下几点：\n     *   Promise优先于setTimeout宏任务。所以，setTimeout回调会在最后执行。\n     *   Promise一旦被定义，就会立即执行。\n     *   Promise的reject和resolve是异步执行的回调。所以，resolve()会被放到回调队列中，在主函数执行完和setTimeout前调用。\n     *   await执行完后，会让出线程。async标记的函数会返回一个Promise对象\nawait后面的语句会在await执行完之后再执行。定时器为宏任务，会在微任务执行完之后再执行。\n```\n\n```js\n  async function queryData() {\n      # 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码   \n      \n      var info = await axios.get('async1');\n      #2.2  让异步代码看起来、表现起来更像同步代码\n      var ret = await axios.get('async2?info=' + info.data);\n      return ret.data;\n    }\n————————————————\n```\n\n##### ajax 配合async\n\n\n\n##### Promise.prototype.finally()\n\n用于指定不管 Promise 对象最后状态如何，都会执行的操作。\n\n不管`promise`最后的状态，在执行完`then`或`catch`指定的回调函数以后，都会执行`finally`方法指定的回调函数。\n\n```js\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n```\n\n##### Promise.all()\n\n`Promise.all()`方法用于将多个 Promise 实例，包装成一个新的 Promise 实例\n\n```javascript\nconst p = Promise.all([p1, p2, p3]);\n```\n\n上面代码中，`Promise.all()`方法接受一个数组作为参数，`p1`、`p2`、`p3`都是 Promise 实例，如果不是，就会先调用下面讲到的`Promise.resolve`方法，将参数转为 Promise 实例，再进一步处理。另外，`Promise.all()`方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。\n\n（1）只有`p1`、`p2`、`p3`的状态都变成`fulfilled`，`p`的状态才会变成`fulfilled`，此时`p1`、`p2`、`p3`的返回值组成一个数组，传递给`p`的回调函数。\n\n（2）只要`p1`、`p2`、`p3`之中有一个被`rejected`，`p`的状态就变成`rejected`，**此时第一个被`reject`的实例的返回值**，会传递给`p`的回调函数。\n\n##### Promise.race()\n\n`Promise.race()`方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```javascript\nconst p = Promise.race([p1, p2, p3]);\n```\n\n只要`p1`、`p2`、`p3`之中有一个实例率先改变状态，`p`的状态就跟着改变。那**个率先改变的 Promise 实例的返回值，**就传递给`p`的回调函数。\n\n`Promise.race()`方法的参数与`Promise.all()`方法一样，如果不是 Promise 实例，就会先调用下面讲到的`Promise.resolve()`方法，将参数转为 Promise 实例，再进一步处理。\n\n\n\n**`Promise.any()`跟`Promise.race()`方法很像，只有一点不同，就是`Promise.any()`不会因为某个 Promise 变成`rejected`状态而结束，必须等到所有参数 Promise 变成`rejected`状态才会结束**\n\n\n\n#### 宏任务和微任务\n\n在异步任务中，将任务分为两种，分别是：\n\n-  \t\t\t\t宏任务\n\n  - 定时器\n  - requestAnimationFrame\n\n- ​                  微任务\n\n  - promise\n\n  \n\n- 在任务队列之外，将宏任务和微任务分别挂载在宏任务队列和微任务。当同步任务执行完之后，会进行Event loop 执行任务队列。\n\n  - 执行顺序是：\n\n    - 先执行同步任务，再执行异步任务\n    - 先执行微任务，再执行宏任务\n\n    ```js\n    console.log(1); //同步执行1\n    \n    new Promise(resolve=> {\n      setTimeout(()=> {\n        console.log(2);\n      }, 4); //宏任务1  定时器1\n    \n      resolve();\n    \n      console.log(3);\t//同步执行2\n    })\n    \n    .then(_ => {\n      console.log(4);  //微任务1\n    })\n    \n    setTimeout(()=> { //宏任务2 定时器2\n      new Promise(resolve => {\n        console.log(5);\n    \n        resolve();\n      })\n      .then(_ => {\n        console.log(6);\n      })\n    },4)\n    \n    //当执行promise内的代码时，语句遵循同步执行的规则\n    //此处有一个简写 _ => 表示舍弃参数，不进行传值操作\n    \n    ```\n\n    - **requestAnimationFrame\t请求动画帧**\n\n- 60HZ 当你什么都不做的时候，电脑也会以每秒60次的刷新速率更新，\n\n- 动画原理\n\n  - 而动画的本质就是人眼看到图像被属性变化而引起的视觉效果，这个效果要以平滑连贯的方式进行过渡\n\n- setTimeout ( 存在丢帧现象 )\n\n  - setTimeout的执行时间并不是确定的。在Javascript中， setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此 **setTimeout 的实际执行时间一般要比其设定的时间晚一些。**\n  - 刷新频率受**屏幕分辨率**和**屏幕尺寸**的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。\n\n- #### requestAnimationFrame\n\n  - requestAnimationFrame最大的优势是**由系统来决定回调函数的执行时机**\n\n    - 具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。**它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次**，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。\n\n    - ```js\n              let box = document.querySelector('.box');\n              let len = 0;\n              function fn() {\n                  len += 5;\n                  box.style.left = len + 'px';\n                  if (len < 1280) {\n                      window.requestAnimationFrame(fn);\n                  }\n              }\n              window.requestAnimationFrame(fn);\n      ```\n\n      （1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回 流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 \n\n      （2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然 就意味着更少的 CPU、GPU 和内存使用量 \n\n      （3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动 优化方法的调用，**并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销**\n\n### ES6\n\n#### 箭头函数\n\n​\t本质是一个语法糖\n\n```js\nfunction() {}\n\n() => {}\n\n//1.如果箭头函数只有一个参数，则括号可以省略\nitem => {}   //形如\n//2如果函数体只有一条语句，则可以省略{}括号\n() => return 'hello'\n\n(a, b) => a + b\n\n(a) => {\n  a = a + 1\n  return a\n}\n\n\n\n//如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：\n// SyntaxError:\nx => { foo: x }\n//因为和函数体的{ ... }有语法冲突，所以要改为：\n\n// ok:\nx => ({ foo: x })\n\n\n\n\n\n```\n\n(1). 箭头函数this为父作用域的this，不是调用时的this\n箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。\n普通函数的this指向调用它的那个对象。\n\n(2). 箭头函数不能作为构造函数，不能使用new\n\n(3). 箭头函数没有arguments，caller，callee\n\n箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。\n\n箭头函数中要想接收不定参数，应该使用rest参数...解决。\n\n (4). 箭头函数通过call和apply调用，不会改变this指向，只会传入参数\n\n(5). 箭头函数没有原型属性\n\n(6). 箭头函数不能作为Generator函数，不能使用yield关键字\n\n(7). 箭头函数返回对象时，要加一个小括号\n\n(8). 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法\n\n(9). 多重箭头函数就是一个高阶函数，相当于内嵌函数\n\n\n\n```js\n(10). 箭头函数常见错误\nlet a = {\n  foo: 1,\n  bar: () => console.log(this.foo)\n}\n\na.bar()  //undefined\nbar函数中的this指向父作用域，而a对象没有作用域，因此this不是a，打印结果为undefined\n\nfunction A() {\n  this.foo = 1\n}\n\nA.prototype.bar = () => console.log(this.foo)\nlet a = new A()\na.bar()  //undefined\n原型上使用箭头函数，this指向是其父作用域，并不是对象a，因此得不到预期结果\n\n3.一些this的指向实例\nvar obj = {\n  birth: 1990,\n  getAge: function(){\n    console.log(new Date().getFullYear() - this.birth); //this指向obj对象\n  },\n}\nobj.getAge(); // 29\n\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = function () {\n            return new Date().getFullYear() - this.birth; // this指向window或undefined\n        };\n        return fn();\n    }\n};\nobj.getAge();// NaN\n\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象\n        return fn();\n    }\n};\nobj.getAge(); // 29\n\nvar obj = {\n       getAge: () => {\n            console.log(this); // window\n        }\n    };\n\nobj.getAge(); //window\n作为对象的属性时，this的指向则不再是对象本身了，箭头函数捕获的是obj{}这个对象的环境，然后这个环境的this指向的是window\n```\n\n","source":"_posts/javascript入门.md","raw":"---\n\ntitle: javascript入门\ntags: [javaScript]\nauthor: codefish\ndate: 2021-12-11 16:13:52\ncategories: js\ntop_img: /img/2.jpg\ncover: /img/2.jpg\n\n---\n撸js的第一遍，持续不断深入的学习一门语言应当坚持下去，每一回学习都会有不一样的体会。\n\n# javascript介绍\n\n## JavaScript 是脚本语言（作为web的\n\nJavaScript 是一种函数优先轻量级的编程语言。\n\nJavaScript 是可插入 HTML 页面的编程代码。\n\nJavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。\n\nJavaScript 基于原型编程，多范式的动态脚本语言，支持面向对象，命令式，声明式，函数式编程范式，解释性或即时编译型的编程语言\n\n网景 -->欧洲计算机协会 -->ECMAScript(ES)\n\nJavascipt 核心语法\n\n核心语法（ESMAscript） DOM（W3C) BOM(网景)\n\nES1           ...         ES3       ...          ES5\n\nES4（去掉改动大的语法,和谐会议）\n\nES6 2015年   当年争议的话题\n\nES7 -ES11 一年一更新 2016-2020 ES6之后统称ES6\n\n语法糖 ：ES6 写代码运行更快\n\n## JavaScript作用\n\n网页开发\n\nJS包含三个部分的内容（在浏览器端\n\n- ​\t\t核心语法\n  - 变量\n  - 流程控制\n  - 循环\n  - 数据类型\n- ​        BOM (网景)\n  - 浏览器对象模型 borwer object model\n- ​        DOM （W3C)\n  - 文档对象模型，和网页相关  document object model\n\n\n\n## 宿主环境\n\n定义：JS运行的环境就叫宿主环境\n\n- ​\tnode\n- 浏览器\n\n\n\n作用：\n\n1. 交互效果\n\n2. 收集数据\n\n   \n\n##  JS 的准备语法\n\n- 如何编写JS文件\n\n  1.  将JS嵌入到网页当中\n  2.  将JS文件引入到文档中\n\n- Script标签的位置\n\n  1. 可以放在网页任何位置（放在html标签外面，页面最上面，浏览器自动把他放在head中，但是文档声明头消失）--> 解析时，浏览器会采用降价处理。h5-h4  【如果文档没有写文档声明头】 理论上可以放任何位置，唯独不建议放在文档声明头上面\n\n  2. 建议的位置 </html> 之后，浏览器会默认将其移动到<body>之中。放在<body/>和</html>之间\n\n     - js操作标签，页面元素先渲染出页面，即该标签先加载成功，script才开始获取元素。\n     - 标准文档流的解析顺序\n     - **操作input标签 首要前提是 input要加载成功**\n\n  3. 独立的Js文件引入\n\n     - <script src=''></script>\n\n     - 通过script标签配合src配合\n\n- 打印\n\n  - 在JS代码调试的时候，经常需要使用到console.log()\n\n    1. console 是一个对象，里面有很多函数可以来帮助我们来开发，最常用的是console.log\n\n    2. 弹窗\n\n       1. alert\n       2. prompt 比confirm多一个input框框\n       3. confirm 比alert多一个取消\n\n       - ​     alert（） 加括号为一个函数\n\n       \n\n    3. 语句和表达式\n\n       1. 语句\n          - 有多个部分组成，不一定有结果\n          - eg：console.log()\n          - **语句都是从右向左看**\n       2. 表达式\n          - 凡是强调有结果\n\n       \n\n    4. 语句结束符\n\n       1. 在语句的最后，最后写上一个语句的结束符号\n\n    ### 文档入口函数\n\n    window.onload = function(){\n\n    ​\t在函数当中的代码会在页面的最后执行\n\n    }\n\n    放在head中不会出错\n\n    **如果页面有部分图片或资源加载不出来，则js会一直等待起加载，导致关键js交互无效果。**\n\n    window > document\n\n    #### 如果页面有多个入口函数\n\n    **后面加载的覆盖前面的**\n\n    #### onclick同理\n\n    **外部js也需要文本入口函数**,位置放在</html>之后\n\n    如果是工具类的js文件，（不会主动的获取js中的某个），则可以写在head文件中，如果是自己需要操作标签元素的，最好写在body之后\n\n    PS：script  和   script src 不能混用\n\n## 变量\n\n​\t定义：临时存储数据的容器\n\n1. ​    如何创建一个变量\n\n   ​\tvar 变量名 = 值\n\n   - 小驼峰命名\n   - console.log() 如果打印的是一个变量，不需要加引号\n   - underfined当变量声明未赋值的时候，则为未定义\n\n2. 变量名的命名规则\n\n   - 字母数字下划线，**字符**，命名\n\n   - 数字不能是首字母  -> **可以下划线开头**\n\n     - 尽量词能表达意\n\n   - 不能使用关键字\n\n     **上面也是标识符命名规则**\n\n   - 声明和初始化\n\n     - 通过关键字创建一个变量即为变量声明，给变量**第一次赋值**既是初始化\n     - 控制台凡是出现**蓝色**的都是数字\n     - 控制台凡是出现**黑色**的都是文字\n     - **程序从右向左看**\n     - 修改值的过程，叫**重新赋值** x = a\n     - 重新声明赋值初始化 var x = 'hello,x'  旧的值被回收\n\n3. 变量提升\n\n   - 浏览器的js解析引擎，在真正执行代码的时候，会进行预解析\n   - 变量声明提升 声明不赋值 underfinded\n   - 把所以的声明语句提升到作用域的最顶端\n     - 如若未声明直接使用，则报错\n   - 原因：在正式执行之前，会对其进行预解析\n   - **提升到当前作用域的最顶端**\n\n   ps：使用js属性对应的方法**length属性**，获取字符串的长度\n\n   ​\t获取字符串长度\n\n   \n\n   #### js是一门弱类型语言\n\n   var a (string int)  强类型\n\n   变量可以根据数据的需要随时更换类型（变量本身没有类型，赋的值是上面类型就是上面类型）\n\n   \n\n## 数据类型\n\n**基本数据类型**\n\n- string\n- number\n- Boolean\n- underfinded\n- null\n\n**引用数据类型**\n\n细化：object \n\n- ​\tarray\n- ​    function\n- ​     object\n\n\n\n**栈** **堆**\n\n基本（基础）数据类型，主要存储在栈\n\n引用数据在栈区存放内存地址，堆里存放数据的值\n\n**PS：******当一个引用数据类型赋值给一个变量时，这个变量存储的是简单的内存地址****\n\n\n\n## String字符串\n\n定义:在代码中如果想要存储文字\n\n'' \"\" 没有区别，**推荐使用单引号**\n\n- html标签属性都是双引号，为了区分。一致性不混用\n\n- 结合实际情况，**单引号里嵌套双引号**   ...说:\"\".\n\n  - 存在问题 ...说:''\n  - 单引号里使用双引号，**双引号里面使用单引号**\n\n  \n\n#### 字符串拼接\n\nvar s1 = '鲁迅先生说:' + ''\n\n相当于拼接字符串\n\n#### 创建字符串   --   通过构造函数\n\nvar s = new String('')\n\nvar s1 = ''    直接量，相当于js给我们提供的一种用来创建字符串类型的快捷方式\n\n在Js里，除了null和underfinded都可以用构造函数创建出来\n\n不管里面是什么类型，只要外面加了引号，就会变成字符串类型\n\n**创建字符串的方式**\n\n- ''\n- \"\"\n- 构造函数\n\n通过'+'拼接字符串\n\n\n\n**注意：******\n\n- 保证代码中使用统一的符号\n- 单双不能单独嵌套使用\n\n\n\n可以通过length属性来获取字符串的长度\n\n**ps 除了null和underfinded其他都是对象**\n\n**PS1 任何数据类型都可以通过构造函数的形式创造出来**\n\n**构造函数创建出来的数据，是一个object**\n\n//对象 console是一个对象，log是console身上的方法\n\nlength(在字符串中) 。2+\n\n\n\n## 数字\n\n 在js中，number远远比其他语言当中的number简单\n\n无整数，本质上都是小数 0.2+0.3 ！== 0.5\n\n**toFixed** //去除小数，返回整数位置，数字类型变为string（文本\n\n\n\n## 布尔 boolean\n\n##### 真和假 false 和true\n\nps：表示一个判断的结果\n\n\n\n## null\n\nps：一般用来表示一个对象的空值\n\n\n\n## Underfinded\n\nps：一般表示变量没有初始化\n\n- 先声明一个变量，在某一行未来要使用某个变量，**建议给声明的变量设置一个初始值**\n\n\n\n## **基础数据类型之间的类型转换**\n\nps：把一个类型的数据转换为另一个数据类型\n\n- 自动类型数据转换\n- 强制数据类型转换\n\n#### 强制数据类型转换\n\nNaN是JS里一个特殊值，和任何都不相等，连同自己\n\n​\t\ttypeof（）**帮助查看数据类型**\n\n- ​\tString（）\n\n  - ps：相当于将原数据外面加一个引号\n\n  - 负值转换也是负值的字符串\n\n- ​    Number（）\n\n  - **ps ** 当其他数据类型的数据不能转换为有效的数字类型时，则被转换为NaN\n  - Number('')   或空串  ->  0\n  - 'hello world' -> **NaN**\n  - '100 ' -> 100\n  - 'a1' -> **NaN**\n  - boolean true -> 1\n  - boolean false -> 0\n\n- ​    Boolean（）\n\n  - ps:把其他数据类型转换为boolean\n  - **'' 空串 -> false**\n  - **0 -> false**\n  - 1 -1 -> true\n  - **null -> false**\n  - **underfinded -> false**\n  - **NaN -> false**\n  - **false -> false**\n  - boolean(null underfinded) -> false\n\n**适用于number**\n\n- parseInt（）\n  - ps：强制转换为整数\n  - 还适用于将其他数据类型转换为整型\n  - s1 = 'abc123' -> NaN\n  - s2 ='123abc' -> 123\n- parseFloat() 将其他数据类型转换成float\n  - 1.32a -> 1.32\n  - '1a' -> 1\n\n**typeof**\n\n1. null object\n2. underfnded underfinded\n\n- underfinded派生于null\n\n#### 自动类型转换\n\n- 数字 + 字符串 --> 转换为字符串\n- 数字 - '数字字符串'  -> 字符串转换成数字\n- 数字 *  '数字字符串' -> 字符串转换成数字\n- 数字 /    '数字字符串' -> 字符串转化成数字\n- Boolean和数字计算时（+-*/），Boolean转换为数字\n- 字符串数字 + 布尔 ->二者变换成字符串\n- 字符串数字 -*/ 布尔  -> 都会变成数字\n- 字符串 + 布尔 -> 二者都变成字符串\n- 字符串 -*/ 布尔 二者都变成Number\n- 任何值和NaN计算，结果都是NaN\n- null 和 underfinded 都是 NaN\n- **尽可能写程序时，把不可控的因素变成可控的，例如类型转换****\n- 自动类型转换调用的方法就是上面提到的三个方法，Number，String，Boolean\n\n\n\nps：将数字以最快转换为空串 +''\n\n\n\n\n\n\n\n### 计算\n\n#### 除数不能为0 infinity\n\n\n\n#### JS操作html和css修改标签样式、\n\n1. 找到当前元素btna =  getElementById('btn')\n\n2. 触发事件 (确定事件三要素)\n\n   - 事件：用户在浏览器中的一切动作\n     - 鼠标事件，键盘事件，文档事件\n   - 事件三要素 \n     - 事件源\n     - 事件\n     - 事件处理函数\n\n   btna.onclick = function(){\n\n   `\t//处理的事情\n\n   ​\talert('...')\n\n   }\n\n   - **事件处理函数有无不影响事件的发生**\n\n**eg**\n\n- 获取输入框中的内容\n  - element.value\n\n\n\n### 常用运算符\n\n- 加\n- 减\n- 乘\n- 除\n- 求模/取余 %\n- ++ -- %= \n- = != 值不等\n- == 值相等  !== 值和类型其一(或）不等\n- === 值和类型都相等\n- < > <= >=\n- && || !\n  - 短路问题\n\nconsole.log(new Boolean(false))\nBoolean {false}\n\ntypeof(new Boolean(false))\n\nobject\n\n\n\n**`typeof(null)`**\n**`'object'`**\n**`typeof(underfinded)`**\n**`'undefined'`**\n**`typeof(NaN)`**\n**'number'**\n\n\n\n**取反 先转换成布尔值再取反**\n\n**取反 取反 !!x  = Boolean(x)**\n\n\n\n### 逻辑运算符\n\nps:&& 和 || 存在短路问题\n\n​\t惰性面\n\n1. &&\n2. ||\n\n**()改变运算符的优先级，里面存放都是表达式。**\n\n\n\n### 栈和堆\n\n栈区大小确定  -> 基本数据类型不变 var b = true\n\n堆区随需要可以扩容\n\n\n\n### JS 严格区分大小写\n\n\n\n### Null \n\n​\t是一个数据类型，在Null这个类型只有一个值，就是null.\n\n- ​\t**表示一个空值，给空对象赋值**\n\n### Underfinded\n\n​\t是一个数据类型，在underfinded这个类型只有一个值，就是underfinded\n\n​\t派生于Null\n\n- ​\t\t**null == underfinded**\n\n\n\n## 流程控制和循环\n\n- if\n  - 如果条件不是Boolean，则会强制转换为Boolean\n- if else\n  - else if\n  - ps:嵌套过多降低代码可读性\n- switch\n- 三元\n\n**Dom操作** -> 看重执行顺序\n\n#### swith\n\nswitch(条件)\n\n{\n\ncase'张三':;\n\ncase'张四':;\n\n}\n\n**多个case共用一个代码块**\n\ncase:    case 2:   ... case n: 语句 ;  break\n\nbreak continue\n\n#### switch展示结果不确定，switch保存数据\n\n![image-20211130135105212](%E5%AD%A6%E4%B9%A0/mdimages/image-20211130135105212.png)\n\n\n\n``` js\nbtn.onclick = fuction(){\n    var input_value = input.value\n    if(input_value.length === 0){\n        alert('输入不能为空')\n        return ;\n    }\n}\n```\n\n**trim() 去除两端的空格 -- > 字符串方法**\n\n**如果是一个长空串，则处理为空串**\n\n**isNaN  判断是否是NaN**\n\n**math.random()**\n\n\n\n### 循环\n\n- while\n- do..while\n- for\n\n\n\nrandom() 随机数函数\n\nreturn 函数使用\n\ncontinue\n\nbreak\n\n**var lis = list.children**\n\n**获取list的children**\n\n\n\n## 流程控制\n\n流程控制就是来控制我们的代码按照什么结构顺序来执行。\n\n流程控制主要有以下三种结构，分别是：\n\n（1）顺序结构\n\n（2）分支结构\n\n（3）循环结构\n\n顺序流程控制\n顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行。\n分支流程控制\n由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果。\n\n### 1.if分支语句\n\n//if分支语句的语法结构如下：\n//条件成立执行代码，否则什么也不做\nif(条件表达式){\n\t//条件成立执行的代码语句\n}\n\n### 2.if else双分支语句\n\n//if else双分支语句的语法格式如下：\n//条件成立执行if里面的代码，否则执行else里面的代码\nif(条件表达式){\n  //条件成立执行的代码\n}else{\n  //条件不成立执行的代码\n}\n\n### 3.if else if多分支语句\n\n//if else if多分支语句的语法格式如下：\n//适合检查多重条件\nif(条件表达式1){\n  语句1;\n}else if(条件表达式2){\n  语句2;\n}else if(条件表达式3){\n  语句3;\n  ...\n}else{\n  //上述条件都不成立时执行此代码\n}\n\n### 4.三元表达式\n\n由三元运算符组成的式子就称为三元表达式（因为三元表达式也是表达式，所以会有返回结果）。\n//三元不等式的语法机构如下：\n条件表达式 ？ 表达式1 ： 表达式2;\n//如果条件表达式的结果为真，则返回表达式1点值；而如果条件表达式的结果为假，则返回表达式2的值。\n\n### 5.switch语句\n\nswitch语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用switch。\n//switch语句的语法格式如下：\nswitch(表达式){\n  case value1:\n    //表达式等于value1时要执行的代码\n    break;\n  case value2:\n    //表达式等于value2时要执行的代码\n    break;\n  default:\n    //表达式不等于任何一个value值时要执行的代码\n}\n\nswitch语句中的条件表达式我们经常写成变量的形式。\n表达式的值与value的值相匹配时，要求值和数据类型一致才算匹配成功。\n如果当前case里面没有break，则不回退出switch语句，而是继续执行下一个case，直到遇到break或执行default语句才退出switch语句。\n\n### 6.switch语句和if else if语句的区别\n\n一般情况下，它们两个语句可以相互替换。\nswitch…case语句通常处理case为比较确定值的情况，而if…else…语句更加灵活，常用于范围判断（大于、等于某个范围）。\nswitch语句进行条件判断后直接执行到程序的条件语句，而if…else…语句有几种条件，就得判断几次（从上到下依次判断）。\n当分支比较少时，if…else…语句的执行效率比switch语句更高。\n当分支比较多时，switch语句的执行效率比if…else…语句更高，结构也更清晰。\n\n## 循环流程控制\n\n目的：重复执行某些代码。\n\n在JS中，主要有以下三种类型的循环语句：\n\n（1）for循环\n\n（2）while循环\n\n（3）do…while循环\n\n### 1.for循环\n\n在程序中，一组被重复执行的语句被称为循环体，而能否继续重复执行，则取决于循环的终止条件。\n循环语句是指由循环体和循环的终止条件造成的句子。\nfor循环主要用于把某些代码循环若干次，通常跟计数有关系。\n//for循环的语法结构如下：\nfor(初始化变量;条件表达式;操作表达式){\n  //循环体\n}\n//初始化变量：其实就是用var声明一个普通的变量，并且这个变量通常是作为计数器使用。\n//条件表达式：用来决定每一次循环是否继续执行，也就是循环的终止条件。\n//操作表达式：每次循环最后执行的代码，经常用于更新计数器（递增或递减）。\n\nfor循环可以重复执行相同的代码。\n因为有计数器的存在，使用for循环可以重复执行不同代码。\nfor(var i = 1; i <= 31; i++){\n  console.log('今天是5月'+i+'日了！');\n\n因为有计数器的存在，使用for循环可以重复执行某些操作，比如：算数运算。\nvar sum = 0;\nfor(var i = 1; i <= 10; i++){\n  sum+=i;\n}\nconsole.log(sum);\n\n循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构。像在一个for循环语句中， 再嵌套一个for循环，我们就称之为双重for循环。\nfor(var i = 1; i <= 3; i++){\n  console.log('这是第'+i+'次外层循环');\n  for(var j = 1; j <= 3; j++){\n    console.log('这是第'+i+'次里层循环');\n  }\n}\n\n### 2.while循环\n\nwhile语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。\n//while语句的语法结构如下：\nwhile(条件表达式){\n  //循环体代码\n}\n\n### 3.do while循环\n\ndo…while语句其实是while语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。（do while循环语句至少执行一次循环体代码）\n//do while语句的语法结构如下：\ndo{\n  //循环体代码\n}while(条件表达式);\n\n### 4.小结\n\n三种循环在很多情况下都是可以相互替代使用的。\n对于计数，三者的使用基本相同，但是更常用的还是for循环。\n对于更复杂的判断条件，可以使用while和do while语句。\n\n**while语句是先判断后执行；而do while是先执行一次后判断执行。**\n\n##### do while 至少执行一次，while，for最少执行0次\n\ncontinue和break\n\n#### 1.continue关键字\n\ncontinue关键字用于立即跳出本次循环，继续下一次循环（本次循环体中continue之后的代码就会少执行一次）。\nvar sum = 0;\nfor(var i = 1; i <= 100; i++){\n  if(i % 7 == 0){\n    continue;\n  }\n  sum+=i;\n}\nconsole.log(sum);\n\n#### 2.break关键字\n\nbreak关键字用于立即跳出整个循环。\nfor(var i = 1; i <=5; i++){\n  if(i == 3){\n    break;\n  }\n  console.log('这是第'+i+'个数！');\n}\n\n\n\n### ...className = '' 去掉类名\n\ndata-XXX =''  html5自定义类型存数据\n\ngetAttribute\n\n\n\n\n\n### 数组\n\n#### 使用情况\n\n1. 一系列的值\n2. 希望快速存储和取数据的时候\n\n\n\n- 在向数据中插入元素的时候，如果索引值不连续，就会形成空位\n\n- 对于索引值不连续的数组，称之为稀疏数组\n- length 获取数组元素\n- length比索引值大1\n- PS ：如果length设置比其大，则后都是空位\n  - 如果length设置比索引值小，则从后面清楚\n  - 快速清空数组，arr.length = 0\n\n\n\n1. **length失效****一**\n\n   - 数组添加元素key不为数组，则不会被计算\n\n   - arr['name'] = '哈哈哈' 计算数组长度的时候，当前元素失效\n   - 长度 == 任然是最大索引值加1  只计算数字索引\n\n2. **length失效****一**\n   - arr[100] = 'hhh'/\n   - console.log(arr.length) //101\n\n\n\nfor可以以索引取字符串的值\n\n\n\n**字符串后面用方括号**\n\n**对象.属性（方法**\n\n数组. 后面只能是一个符合\n\n**对象[属性]  允许使用方括号解析属性**\n\n**obj 对象 有一个 hello 属性**\n\n**var a = 'hello'**\n\n**obj[a] --> obj['hello]   js引擎将a解析为一个变量**\n\n**--数组是一种特殊的对象 key-value**\n\n**--特殊类型（凡是对象key都是字符串，）**\n\n- ​\t**数组的key看上去是一个number，实际上会给他转换为string**\n- **一切皆对象，除了null和underfinded很多数据类型都对象的特点，有属性和方法，以key-value为结构，key的类型永远是字符串，调用属性的时候可以用点可以用方括号**\n- 数组的key可以为字符串\n\n\n\n### 空位\n\n```jsx\n// 产生5个数组空位的数组\nlet arr1 = Array(5)\n\n//同上3\nlet arr2 = [,2,,3,,]\n\n//产生10个数组空位的数组\nlet arr3 = []\narr3.length = 10\n\n//数组a[3]-a[9]都是数组空位\nlet arr4 = [1,2,3]\narr4[10] = 5\n\n//数组arr[2]产生数组空位\nlet arr5 = [1,2,3,4,5]\ndelete arr[2]\n```\n\n\n\n#### 数组的增删改查\n\n- delect[n] 通过delect删除元素会形成稀疏数组，形成空位（存在空位，索引值不连续\n- arr[0] ='xxx'\n- console.log(arr[0])\n\n数组的空位可以访问，值为**underfinded**\n\n**当数组为一个正常数组时，可以通过length来清楚数组（不存在索引值不为非数字的值**\n\n数组遍历优化或提高效率\n\nvar len = arr.length\n\nfor(;i<len)\n\n\n\n## api (接口方法)\n\n- **push向数组的最后插入一个元素** push(a,b)一次可以添加多个值，unshift同\n- **arr.shift() 删除第一个数据元素，并返回给我们删除的元素**\n- **pop() 删除数组的最后一个元素，并且返回删除的最后一个元素**\n- **unshift() 向数组的最前方插入一个元素**\n\n- splice(索引值，删除数组元素的个数，插入的元素) 删除元素 替换元素 插入元素\n  - 删除\n    - arr.splice(1,1) 从索引一开始，删除一元素\n    - arr.splice(1,1,'xxx') 。。。 替换一元素 值为xxx\n    - arr.splice(2,0,'xxx') 在第三个位置插入xxx\n  - \n\n所有的表单控件必须用value，初此之外必须使用，innerHtml,innerText\n\nresize:none  ->删除textarea的可变  不让其影响其他元素\n\ndotted 虚线效果（solid）\n\n \n\n## 数组方法 \n\n- find \n\n- findIndex\n\n- forEach\n\nforEach(item,index)\n\nfind可以返回当前元素所在的数组\n\n## \n\n\n\n### 对象（object）\n\n\n\n#### 对象包含两种 **属性和方法**\n\n#### 创建对象的方法\n\nvar obj = {}\n\n- 添加元素\n\n  obj['username'] = '张三'   数组的key可以是数字或者字符串\n\n  var str = ’like‘\n\n  obj[str] = '电影'\n\n  - ​\tstr 不加引号，可以作为变量被解析\n  - obj.age === obj['age']\n    - **区别**：方括号中可以解析变量，**如上**\n  - **对象.一定是字符串**\n    - obj.str str默认为字符串\n\n- 方法的写法\n\n  - obj['say'] = function(){\n\n    ....}\n\n  - 对象中的方法需要手动调用\n\n- 添加属性和方法\n\n  - ```js\n    //创建对象时添加内容，一定采用key-value的形式\n    - - var obj = {\n        }\n    \n    \n    ```\n\n  - 变量名和对象名相同，需要在变量的外部加一个方括号\n\n    - [str]:'值'，\n\n- **key值的设定需要符合标识符命名规则**\n\n- 对象的方法里面如何使用对象的属性和方法 （this代表事件源）\n\n  - this放在对象的方法中，即指向该对象\n\n- 向对象中添加属性和方法 \n\n  - obj.a = '';\n  - obj.c = function(){}\n\n- 删除数组 中的属性和方法\n\n  - delece obj.a;\n  - object obj[''];\n\n- 取或调用数组中的属性和方法\n\n- 遍历对象\n\n  - ​\t`for(var key in obj){`\n\n    ​\t`console.log(obj[key])`\n\n    }\n\n- 1\n\n### 对象和数组进行比较\n\n1. //数组时有序的，对象是无序的\n2. 数组的key必须是number 对象的key是字符串，数组是一种特殊的对象，虽然数组的key是number，但在解析时，会被自动转换成字符串\n3. 数组操作元素只能[]对象，对象可以通过  .  和 []\n4. 数组的遍历可以使用foreach，for ，for in，对象只能使用for in\n5. 当key值重复时，value会发生覆盖\n\n\n\n#### 对象方法Object.keys(object)\n\n\n\n\n\n### 函数\n\n##### 定义 ：一段代码的集合体\n\n特点：不调用时为静止片段，不调用不执行。减少工作量\n\n#### 创建函数的方式\n\n1. function 函数名(){\n\n   语句；\n\n   }\n\n2. 函数表达式\n\n   - var 。。。 = function    在js中，函数地位和基础数据类型相同，数据能做什么，函数就能做什么\n\n   var 变量 = function(){\n\n   ​\t语句；\n\n   }\n\n   - ​\t将函数放在函数的右边，js引擎就会把函数理解为一个表达式\n   - 一般来说说，表达式都放在等号的右边\n\n3. var fn = new function(){\n\n   }\n\n\n\n### 函数名\n\n理解为变量名  -> 符合标识符命名规则\n\n- ​\t给函数起名字时，不要首字母大小，\n  - 凡是大写字母开头都是构造函数\n- 形参和实参\n  - 形参：理解为只能用在内部的变量\n    - 调用函数的时候给形参赋值，即实参赋值给形参\n  - 实参：\n  - ps：\n\n\n\n### 返回值\n\n需求:通过add函数计算出100+200的值，然后通过msg函数结果以弹窗将结果以弹窗的形式弹出\n\n- 将函数处理后的结果在函数外拿到\n\n\n\n### callback回调函数\n\n把函数当参数传递给另一个函数\n\n##### 没有名字的函数叫匿名函数\n\n\n\n1. 函数创建方式：\n   1. `function`关键字 \n   2. 函数表达式\n   3. 构造函数\n\n> 通过函数表达式创建的函数不能提前使用。因为函数表达式的创建形式相当于是把一个匿名函数赋值给了变量，虽然变量和函数都会提升，但是赋值的操作不会提升。所以也就不能提前使用函数。\n\n\n\n> 不管是变量也好还是函数也好，提升终归不是一个好的事情，所以对于程序员来说，知道这个规则但是我们尽量不去使用。\n\n\n\n```js\n// 尽量不在函数体之前使用函数\nfn1();\nfunction fn1() {}\n```\n\n2. 函数名\n   1. 函数的命名遵守标识符的规则\n   2. 尽量不要首字母大写，因为在js中首字母大写是属于构造函数(class类)\n3. 函数的参数\n   1. 形参(创建函数时，函数名之后的括号里放的就是形参列表)\n   2. 实参(调用函数时，函数名后面的括号放的就是实参列表)\n\n\n\n​\t关于形参和实参：\n\n  1. 形参的个数多于实参的个数\n\n     ```js\n     function fn1(a,b,c) {}\n     \n     fn1(10,20); \n     ```\n\n     多余的形参值是undefined。\n\n     > 完全可以把形参理解为js中的变量，只不过这个变量只能用在函数中，而实参其实就是给这个变量赋值。\n     >\n     > 如果实参的个数少于形参，那就会出现多余的形参没有被赋值，自然结果就和未赋值的变量相同。\n\n  2. 实参的个数多余形参的个数\n\n     ```js\n     function fn1(a,b) {}\n     fn1(10,20,30,40);\n     ```\n\n     当实参的个数多于形参的个数时，想要找到多余的实参，可以利用arguments(js提供的专门在函数当中使用的类数组对象)。\n\n     可以通过arguments.length获取实参的个数。\n\n     可以通过arguments.callee.length 获取形参的个数。\n\n\n\n4. 函数返回值\n\n   js的函数一旦创建完毕，那么就会在内存中停留但是不会被执行，只有函数调用的时候，函数代码才会执行。在执行的过程中如果碰到了return，那么函数就会立刻停止执行。\n\n   在一个函数中，同一时刻有且仅有一个return可以生效。\n\n   return只能返回一个值。\n\n\n\n\n\n------\n\n1. 作用域和变量\n\n   1. 作用域：代码生效的范围。\n\n   在es5当中，作用域只有两个：\n\n   1. 全局作用域：整个script存在的空间\n   2. 函数作用域：函数内部的空间\n\n既然存在两个作用域，那么对应的在不同作用域下声明的变量，也就有了不同的称呼：\n\n* 全局变量(在全局作用域下声明的变量，生效范围全局)\n* 局部变量(在函数内部声明的变量，生效范围仅限于函数的内部)\n\n\n\n2. 作用域链\n\n   *由小范围的作用域不断向上延申扩展最终形成的一系列作用域，称之为作用域链。*\n\n3. 生命周期和垃圾回收机制\n\n4. 闭包函数\n\n   1. 在函数内部将一个函数当作返回值返回，这样的函数结构称之为闭包函数。\n   2. 特点：返回的函数可以任意的通过作用域链拿到上一层函数的值。\n      1. 会将状态保存，并不会在函数执行完毕之后销毁函数内部的变量。\n   3. 缺点：不会及时的被销毁。\n\n5. 回调函数\n\n   函数在js中是一等公民，所以基础数据类型能干的事，函数也可以干。\n\n   所以就可以拿函数当作一个参数传递给另外一个函数。\n\n   ```js\n   function jsq(num1, num2, cb) {\n       return cb(num1, num2);\n   }\n   ```\n\n   \n\n6. 递归函数\n\n   所谓的递归函数就是在函数体内调用本函数。\n\n7. IIFE\n\n\n\n### 闭包函数\n\n``` js\nfunction test(){\n\tvar temp = 100;\n    function a() {\n\t\tconsole.log(temp);\n    }\n    return a;\n}\nvar demo = test();\ndemo();\n// 凡是多个函数嵌套，里面的函数都保存到了外部函数的外部（即外部)里面函数在执行时，可以继续访问外部函数未销毁之前外部变量函数的变量，且不会报错\n```\n\n\n\n``` js\n//经典闭包案例\n//闭包里面的匿名函数，先不去找i的值，仅仅先创建了10个闭包函数，最后执行完循环，i=10不满足条件，然后执行这些闭包函数\n//    此时再来找i的值，i的值未10，最终结果为10个10\nfunction test(){\n\tvar arr = [];\n    for(var i = 0;i<10;i++)\n        {\n\t\t\tarr[i] = function(){\n\t\t\t\tdocumen.write(i+' ');\t\n            }\n        }\n    return arr;\n }\nvar myArr = test();\nfor(var j = 0;j < 10;j++){\n\tmyArr[j]();\n}\n```\n\n``` js\n for (let i = 0; i < arr.length; i++) {            var divall = document.createElement('div');            divall.setAttribute('class', 'noteSome');            divall.innerHTML = getModule(arr[i].ipt_value, arr[i].text_value, arr[i].time, arr[i].note_id)            artile.append(divall);\n```\n\n\n\n### 字符串方法\n\n#### 1. 获取字符串长度\n\nJavaScript中的字符串有一个length属性，该属性可以用来获取字符串的长度：\n\n```javascript\nconst str = 'hello';str.length   // 输出结果：5复制代码\n```\n\n#### 2. 获取字符串指定位置的值\n\ncharAt()和charCodeAt()方法都可以通过索引来获取指定位置的值：\n\n- charAt() 方法获取到的是指定位置的字符；\n- charCodeAt()方法获取的是指定位置字符的Unicode值。\n\n#### （1）charAt()\n\ncharAt() 方法可以返回指定位置的字符。其语法如下：\n\n```javascript\nstring.charAt(index)复制代码\n```\n\nindex表示字符在字符串中的索引值：\n\n```javascript\nconst str = 'hello';\nstr.charAt(1)  // 输出结果：e \n复制代码\n```\n\n我们知道，字符串也可以通过索引值来直接获取对应字符，那它和charAt()有什么区别呢？来看例子：\n\n```javascript\nconst str = 'hello';\nstr.charAt(1)  // 输出结果：e \nstr[1]         // 输出结果：e \nstr.charAt(5)  // 输出结果：'' \nstr[5]         // 输出结果：undefined\n复制代码\n```\n\n可以看到，当index的取值不在str的长度范围内时，str[index]会返回undefined，而charAt(index)会返回空字符串；除此之外，str[index]不兼容ie6-ie8，charAt(index)可以兼容。\n\n#### （2）charCodeAt()\n\n`charCodeAt()`：该方法会返回指定索引位置字符的 Unicode 值，返回值是 0 - 65535 之间的整数，表示给定索引处的 UTF-16 代码单元，如果指定位置没有字符，将返回 **NaN**：\n\n```javascript\nlet str = \"abcdefg\";\nconsole.log(str.charCodeAt(1)); // \"b\" --> 98\n复制代码\n```\n\n通过这个方法，可以获取字符串中指定Unicode编码值范围的字符。比如，数字0～9的Unicode编码范围是: 48～57，可以通过这个方法来筛选字符串中的数字，当然如果你更熟悉正则表达式，会更方便。\n\n#### 3. 检索字符串是否包含特定序列\n\n这5个方法都可以用来检索一个字符串中是否包含特定的序列。其中前两个方法得到的指定元素的索引值，并且只会返回第一次匹配到的值的位置。后三个方法返回的是布尔值，表示是否匹配到指定的值。\n\n注意：这5个方法都对大小写敏感！\n\n#### （1）indexOf()\n\n`indexOf()`：查找某个字符，**有则返回第一次匹配到的位置**，否则返回-1，其语法如下：\n\n```javascript\nstring.indexOf(searchvalue,fromindex)\n复制代码\n```\n\n该方法有两个参数：\n\n- searchvalue：必需，规定需检索的字符串值；\n- fromindex：可选的整数参数，规定在字符串中开始检索的位置。它的合法取值是 0 到 string.length - 1。如省略该，则从字符串的首字符开始检索。\n\n```javascript\nlet str = \"abcdefgabc\";console.log(str.indexOf(\"a\"));   // 输出结果：0console.log(str.indexOf(\"z\"));   // 输出结果：-1console.log(str.indexOf(\"c\", 4)) // 输出结果：9复制代码\n```\n\n#### （2）lastIndexOf()\n\n`lastIndexOf()`：查找某个字符，有则返回最后一次匹配到的位置，否则返回-1\n\n```javascript\nlet str = \"abcabc\";console.log(str.lastIndexOf(\"a\"));  // 输出结果：3console.log(str.lastIndexOf(\"z\"));  // 输出结果：-1复制代码\n```\n\n该方法和indexOf()类似，只是查找的顺序不一样，indexOf()是正序查找，lastIndexOf()是逆序查找。\n\n#### （3）includes()\n\n`includes()`：该方法用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 true，否则返回 false。该方法的语法如下：\n\n```javascript\nstring.includes(searchvalue, start)复制代码\n```\n\n该方法有两个参数：\n\n- searchvalue：必需，要查找的字符串；\n- start：可选，设置从那个位置开始查找，默认为 0。\n\n```javascript\nlet str = 'Hello world!';str.includes('o')  // 输出结果：truestr.includes('z')  // 输出结果：falsestr.includes('e', 2)  // 输出结果：false复制代码\n```\n\n#### （4）startsWith()\n\n`startsWith()`：该方法用于检测字符串**是否以指定的子字符串开始**。如果是以指定的子字符串开头返回 true，否则 false。其语法和上面的includes()方法一样。\n\n```javascript\nlet str = 'Hello world!';str.startsWith('Hello') // 输出结果：truestr.startsWith('Helle') // 输出结果：falsestr.startsWith('wo', 6) // 输出结果：true复制代码\n```\n\n#### （5）endsWith()\n\n`endsWith()`：该方法用来判断当前字符串**是否是以指定的子字符串结尾**。如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false。其语法如下：\n\n```javascript\nstring.endsWith(searchvalue, length)复制代码\n```\n\n该方法有两个参数：\n\n- searchvalue：必需，要搜索的子字符串；\n- length： 设置字符串的长度，默认值为原始字符串长度 string.length。\n\n```javascript\nlet str = 'Hello world!';str.endsWith('!')       // 输出结果：truestr.endsWith('llo')     // 输出结果：falsestr.endsWith('llo', 5)  // 输出结果：true复制代码\n```\n\n可以看到，**当第二个参数设置为5时，就会从字符串的前5个字符中进行检索，所以会返回true。**\n\n#### 4. 连接多个字符串\n\nconcat() 方法用于连接两个或多个字符串。该方法不会改变原有字符串，会返回连接两个或多个字符串的新字符串。其语法如下：\n\n```javascript\nstring.concat(string1, string2, ..., stringX)复制代码\n```\n\n其中参数 string1, string2, ..., stringX 是必须的，他们将被连接为一个字符串的一个或多个字符串对象。\n\n```javascript\nlet str = \"abc\";console.log(str.concat(\"efg\"));          //输出结果：\"abcefg\"console.log(str.concat(\"efg\",\"hijk\")); //输出结果：\"abcefghijk\"复制代码\n```\n\n虽然concat()方法是专门用来拼接字符串的，但是在开发中使用最多的还是加操作符+，因为其更加简单。\n\n#### 5. 字符串分割成数组\n\nsplit() 方法用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。其语法如下：\n\n```javascript\nstring.split(separator,limit)复制代码\n```\n\n该方法有两个参数：\n\n- separator：必需。字符串或正则表达式，从该参数指定的地方分割 string。\n- limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。\n\n```javascript\nlet str = \"abcdef\";\nstr.split(\"c\");    // 输出结果：[\"ab\", \"def\"]\nstr.split(\"\", 4)   // 输出结果：['a', 'b', 'c', 'd'] \n复制代码\n```\n\n如果把空字符串用作 separator，那么字符串中的每个字符之间都会被分割。\n\n```javascript\nstr.split(\"\");     // 输出结果：[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n复制代码\n```\n\n其实在将字符串分割成数组时，可以同时拆分多个分割符，使用正则表达式即可实现：\n\n```javascript\nconst list = \"apples,bananas;cherries\"\nconst fruits = list.split(/[,;]/)\nconsole.log(fruits);  // 输出结果：[\"apples\", \"bananas\", \"cherries\"]\n复制代码\n```\n\n#### 6. 截取字符串\n\nsubstr()、substring()和 slice() 方法都可以用来截取字符串。\n\n#### （1） slice()\n\nslice() 方法用于提取字符串的某个部分，并以新的字符串返回被提取的部分。其语法如下：\n\n```javascript\nstring.slice(start,end)\n复制代码\n```\n\n该方法有两个参数：\n\n- start：必须。 要截取的片断的起始下标，第一个字符位置为 0。如果为负数，则从尾部开始截取。\n- end：可选。 要截取的片段结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。\n\n上面说了，如果start是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推：\n\n```javascript\nlet str = \"abcdefg\";\nstr.slice(1,6);   // 输出结果：\"bcdef\" \nstr.slice(1);     // 输出结果：\"bcdefg\" \nstr.slice();      // 输出结果：\"abcdefg\" \nstr.slice(-2);    // 输出结果：\"fg\"\nstr.slice(6, 1);  // 输出结果：\"\"\n复制代码\n```\n\n注意，该方法返回的子串**包括开始处的字符**，但**不包括结束处的字符**。\n\n#### （2） substr()\n\nsubstr() 方法用于在字符串中抽取从开始下标开始的指定数目的字符。其语法如下：\n\n```javascript\nstring.substr(start,length)复制代码\n```\n\n该方法有两个参数：\n\n- start\t必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。\n- length：可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。\n\n```javascript\nlet str = \"abcdefg\";str.substr(1,6); // 输出结果：\"bcdefg\"\nstr.substr(1);   // 输出结果：\"bcdefg\" 相当于截取[1,str.length-1]\nstr.substr();    // 输出结果：\"abcdefg\" 相当于截取[0,str.length-1]\nstr.substr(-1);  // 输出结果：\"g\"复制代码\n```\n\n#### （3） substring()\n\nsubstring() 方法用于提取字符串中介于两个指定下标之间的字符。其语法如下：\n\n```javascript\nstring.substring(from, to)复制代码\n```\n\n该方法有两个参数：\n\n- from：必需。一个非负的整数，规定要提取的子串的第一个字符在 string 中的位置。\n- to：可选。一个非负的整数，比要提取的子串的最后一个字符在 string 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。\n\n**注意：** 如果参数 from 和 to 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 from 比 to 大，那么该方法在提取子串之前会先交换这两个参数。并且该方法不接受负的参数，如果参数是个负数，就会返回这个字符串。\n\n```javascript\nlet str = \"abcdefg\";str.substring(1,6); // 输出结果：\"bcdef\" [1,6)\n str.substring(1);   // 输出结果：\"bcdefg\"[1,str.length-1]\nstr.substring();    // 输出结果：\"abcdefg\" [0,str.length-1]\nstr.substring(6,1); // 输出结果 \"bcdef\" [1,6)\nstr.substring(-1);  // 输出结果：\"abcdefg\"复制代码\n```\n\n注意，该方法返回的子串**包括开始处的字符**，但**不包括结束处的字符**。\n\n#### 7. 字符串大小写转换\n\ntoLowerCase() 和 toUpperCase()方法可以用于字符串的大小写转换。\n\n#### （1）toLowerCase()\n\n`toLowerCase()`：该方法用于把字符串转换为小写。\n\n```javascript\nlet str = \"adABDndj\";str.toLowerCase(); // 输出结果：\"adabdndj\"复制代码\n```\n\n#### （2）toUpperCase()\n\n`toUpperCase()`：该方法用于把字符串转换为大写。\n\n```javascript\nlet str = \"adABDndj\";str.toUpperCase(); // 输出结果：\"ADABDNDJ\"复制代码\n```\n\n我们可以用这个方法来将字符串中第一个字母变成大写：\n\n```javascript\nlet word = 'apple'\nword = word[0].toUpperCase() + word.substr(1)\nconsole.log(word) // 输出结果：\"Apple\"复制代码\n```\n\n#### 8. 字符串模式匹配\n\nreplace()、match()和search()方法可以用来匹配或者替换字符。\n\n#### （1）replace()\n\n`replace()`：该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。其语法如下：\n\n```javascript\nstring.replace(searchvalue, newvalue)复制代码\n```\n\n该方法有两个参数：\n\n- searchvalue：必需。规定子字符串或要替换的模式的 RegExp 对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。\n- newvalue：必需。一个字符串值。规定了替换文本或生成替换文本的函数。\n\n```javascript\nlet str = \"abcdef\";\nstr.replace(\"c\", \"z\") // 输出结果：abzdef\n复制代码\n```\n\n执行一个全局替换, 忽略大小写:\n\n```javascript\nlet str=\"Mr Blue has a blue house and a blue car\";\nstr.replace(/blue/gi, \"red\");    // 输出结果：'Mr red has a red house and a red car'\n复制代码\n```\n\n**注意：** 如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。\n\n#### （2）match()\n\n`match()`：该方法用于在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。其语法如下：\n\n```javascript\nstring.match(regexp)\n复制代码\n```\n\n该方法的参数 regexp 是必需的，规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。\n\n**注意：** 该方法返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。\n\n```javascript\nlet str = \"abcdef\";\nconsole.log(str.match(\"c\")) // [\"c\", index: 2, input: \"abcdef\", groups: undefined]\n复制代码\n```\n\n#### （3）search()\n\n`search()`方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。其语法如下：\n\n```javascript\nstring.search(searchvalue)\n复制代码\n```\n\n该方法的参数 regex 可以是需要在 string 中检索的子串，也可以是需要检索的 RegExp 对象。\n\n**注意：** 要执行忽略大小写的检索，请追加标志 i。该方法不执行全局匹配，它将忽略标志 g，也就是只会返回第一次匹配成功的结果。如果没有找到任何匹配的子串，则返回 -1。\n\n**返回值：** 返回 str 中第一个与 regexp 相匹配的子串的起始位置。\n\n```javascript\nlet str = \"abcdef\";str.search(/bcd/)   // 输出结果：1复制代码\n```\n\n#### 9. 移除字符串收尾空白符\n\ntrim()、trimStart()和trimEnd()这三个方法可以用于移除字符串首尾的头尾空白符，空白符包括：空格、制表符 tab、换行符等其他空白符等。\n\n#### （1）trim()\n\ntrim() 方法用于移除字符串首尾空白符，该方法不会改变原始字符串：\n\n```javascript\nlet str = \"  abcdef  \"str.trim()    // 输出结果：\"abcdef\"复制代码\n```\n\n注意，该方法不适用于null、undefined、Number类型。\n\n#### （2）trimStart()\n\ntrimStart() 方法的的行为与`trim()`一致，不过会返回一个**从原始字符串的开头删除了空白的新字符串**，不会修改原始字符串：\n\n```javascript\nconst s = '  abc  ';s.trimStart()   // \"abc  \"复制代码\n```\n\n#### （3）trimEnd()\n\ntrimEnd() 方法的的行为与`trim()`一致，不过会返回一个**从原始字符串的结尾删除了空白的新字符串**，不会修改原始字符串：\n\n```javascript\nconst s = '  abc  ';s.trimEnd()   // \"  abc\"复制代码\n```\n\n#### 10. 获取字符串本身\n\nvalueOf()和toString()方法都会返回字符串本身的值，感觉用处不大。\n\n#### （1）valueOf()\n\n`valueOf()`：返回某个字符串对象的原始值，该方法通常由 JavaScript 自动进行调用，而不是显式地处于代码中。\n\n```javascript\nlet str = \"abcdef\"\nconsole.log(str.valueOf()) // \"abcdef\"\n复制代码\n```\n\n#### （2）toString()\n\n`toString()`：返回字符串对象本身\n\n```javascript\nlet str = \"abcdef\"\nconsole.log(str.toString()) // \"abcdef\"\n复制代码\n```\n\n#### 11. 重复一个字符串\n\nrepeat() 方法返回一个新字符串，表示将原字符串重复n次：\n\n```javascript\n'x'.repeat(3)     // 输出结果：\"xxx\"\n'hello'.repeat(2) // 输出结果：\"hellohello\"\n'na'.repeat(0)    // 输出结果：\"\"\n复制代码\n```\n\n如果参数是小数，会向下取整：\n\n```javascript\n'na'.repeat(2.9) // 输出结果：\"nana\"\n复制代码\n```\n\n如果参数是负数或者Infinity，会报错：\n\n```javascript\n'na'.repeat(Infinity)   // RangeError\n'na'.repeat(-1)         // RangeError\n复制代码\n```\n\n如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。\n\n```javascript\n'na'.repeat(-0.9)   // 输出结果：\"\"\n复制代码\n```\n\n如果参数是NaN，就等同于 0：\n\n```javascript\n'na'.repeat(NaN)    // 输出结果：\"\"\n复制代码\n```\n\n如果repeat的参数是字符串，则会先转换成数字。\n\n```javascript\n'na'.repeat('na')   // 输出结果：\"\"\n'na'.repeat('3')    // 输出结果：\"nanana\"\n复制代码\n```\n\n#### 12. 补齐字符串长度\n\npadStart()和padEnd()方法用于补齐字符串的长度。如果某个字符串不够指定长度，会在头部或尾部补全。\n\n#### （1）padStart()\n\n`padStart()`用于头部补全。该方法有两个参数，其中第一个参数是一个数字，表示字符串补齐之后的长度；第二个参数是用来补全的字符串。 \n\n如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串：\n\n```javascript\n'x'.padStart(1, 'ab') // 'x'复制代码\n```\n\n如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串：\n\n```javascript\n'x'.padStart(5, 'ab') // 'ababx''x'.padStart(4, 'ab') // 'abax'复制代码\n```\n\n如果省略第二个参数，默认使用空格补全长度：\n\n```javascript\n'x'.padStart(4) // '   x'复制代码\n```\n\npadStart()的常见用途是为数值补全指定位数，笔者最近做的一个需求就是将返回的页数补齐为三位，比如第1页就显示为001，就可以使用该方法来操作：\n\n```javascript\n\"1\".padStart(3, '0')   // 输出结果： '001'\n\"15\".padStart(3, '0')  // 输出结果： '015'\n复制代码\n```\n\n#### （2）padEnd()\n\n`padEnd()`用于尾部补全。该方法也是接收两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串：\n\n```javascript\n'x'.padEnd(5, 'ab') // 'xabab'\n'x'.padEnd(4, 'ab') // 'xaba'\n复制代码\n```\n\n#### 13. 字符串转为数字\n\nparseInt()和parseFloat()方法都用于将字符串转为数字。\n\n#### （1）parseInt()\n\nparseInt() 方法用于可解析一个字符串，并返回一个整数。其语法如下：\n\n```javascript\nparseInt(string, radix)\n复制代码\n```\n\n该方法有两个参数：\n\n- string：必需。要被解析的字符串。\n- radix：可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。\n\n\n\n当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。\n\n```javascript\nparseInt(\"10\");\t\t\t  // 输出结果：10\nparseInt(\"17\",8);\t\t  // 输出结果：15 (8+7)\nparseInt(\"010\");\t\t  // 输出结果：10 或 8\n复制代码\n```\n\n当参数 radix 的值以 “0x” 或 “0X” 开头，将以 16 为基数：\n\n```javascript\nparseInt(\"0x10\")      // 输出结果：16\n复制代码\n```\n\n如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN：\n\n```javascript\nparseInt(\"50\", 1)      // 输出结果：NaN\nparseInt(\"50\", 40)     // 输出结果：NaN\n复制代码\n```\n\n只有字符串中的第一个数字会被返回，当遇到第一个不是数字的字符为止:\n\n```javascript\nparseInt(\"40 4years\")   // 输出结果：40\n复制代码\n```\n\n如果字符串的第一个字符不能被转换为数字，就会返回 NaN：\n\n```javascript\nparseInt(\"new100\")     // 输出结果：NaN\n复制代码\n```\n\n字符串开头和结尾的空格是允许的：\n\n```javascript\nparseInt(\"  60  \")    // 输出结果： 60\n复制代码\n```\n\n#### （2）parseFloat()\n\nparseFloat() 方法可解析一个字符串，并返回一个浮点数。该方法指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。其语法如下：\n\n```javascript\nparseFloat(string)\n复制代码\n```\n\nparseFloat 将它的字符串参数解析成为浮点数并返回。如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。同时参数字符串首位的空白符会被忽略。\n\n```javascript\nparseFloat(\"10.00\")      // 输出结果：10.00\nparseFloat(\"10.01\")      // 输出结果：10.01\nparseFloat(\"-10.01\")     // 输出结果：-10.01\nparseFloat(\"40.5 years\") // 输出结果：40.5\n\n复制代码\n```\n\n如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。\n\n```javascript\nparseFloat(\"new40.5\")    // 输出结果：NaN\n```\n\n\n\n编码和解码 encode URI() 和 encodeURICompoent()\n\n![image-20211213203747451](%E5%AD%A6%E4%B9%A0/mdimages/image-20211213203747451.png)\n\n\n\n\n\n\n\n\n\n### 数组方法\n\n\n\n#### 1.测试所有元素\n\n- #### every（）\n\n  - 测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n  - 里面时一个回调函数 留可以传index item array(原数组)\n\n#### 2.填充一个数组中从起始索引到终止索引内的全部元素。(fill)\n\n- #### fill()\n\n- 前提，数组已经存在位置，如果数组为空或未初始化则无效\n\n  ``` js\n  const array1 = [1, 2, 3, 4];\n  \n  // fill with 0 from position 2 until position 4\n  console.log(array1.fill(0, 2, 4));\n  // expected output: [1, 2, 0, 0]\n  \n  // fill with 5 from position 1\n  console.log(array1.fill(5, 1));\n  // expected output: [1, 5, 5, 5]\n  \n  console.log(array1.fill(6));\n  // expected output: [6, 6, 6, 6]\n  \n  item start conut\n  第一个参数：用item填充 必须\n  第二个参数：填充开始的位置 省略则为0\n  第三分参数：填充多少个  默认为length\n  ```\n\n  \n\n#### 3.合并两个或多个数组。\n\n- #### `**concat()**` 方法\n\n- ``` js\n  //合并多个数组\n  var num1 = [1, 2, 3],\n      num2 = [4, 5, 6],\n      num3 = [7, 8, 9];\n  var nums = num1.concat(num2, num3);\n  console.log(nums);\n  // results in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  //将值连接到数组 \n  // 和下面合并多维很相似\n  var alpha = ['a', 'b', 'c'];\n  var alphaNumeric = alpha.concat(1, [2, 3]);\n  console.log(alphaNumeric);\n  // results in ['a', 'b', 'c', 1, 2, 3]\n  \n  //合并多维数组\n  //会把第一层[]拆开拿到里面的元素\n  var num1 = [[1]];\n  var num2 = [2, [3]];\n  var num3=[5,[6]];\n  var nums = num1.concat(num2);\n  console.log(nums);\n  // results is [[1], 2, [3]]\n  \n  //混合合并\n  var nums2=num1.concat(4,num3);\n  console.log(nums2)\n  // results is [[1], 4, 5,[6]]\n  ```\n\n#### 4.过滤所有元素\n\n\t##### filter()\n\n- ##### 将满足条件的放入一个新数组\n\n  - 里面为一个回调函数 \n\n  - element  数组中当前正在处理的元素。\n\n  - ndex 数组中当前正在处理的元素的索引\n\n  - array（调用了 `filter` 的数组本身。）\n\n  - ```js\n    var arr = [\n      { id: 15 },\n      { id: -1 },\n      { id: 0 },\n      { id: 3 },\n      { id: 12.2 },\n      { },\n      { id: null },\n      { id: NaN },\n      { id: 'undefined' }\n    ];\n    \n    var invalidEntries = 0;\n    \n    function isNumber(obj) {\n      return obj !== undefined && typeof(obj) === 'number' && !isNaN(obj);\n    }\n    \n    function filterByID(item) {\n      if (isNumber(item.id) && item.id !== 0) {\n        return true;\n      }\n      invalidEntries++;\n      return false;\n    }\n    \n    var arrByID = arr.filter(filterByID);\n    \n    console.log('Filtered Array\\n', arrByID);\n    // Filtered Array\n    // [{ id: 15 }, { id: -1 }, { id: 3 }, { id: 12.2 }]\n    \n    console.log('Number of Invalid Entries = ', invalidEntries);\n    // Number of Invalid Entries = 5\n    ```\n\n  ### 5.遍历数组\n\n  - （1）forEach\n\n    1. 可以改变数组自身，没有返回值；\n\n    2. 中途不能用常规操作跳出循环，可以用抛出异常（try/catch）的方式，但不推荐这样做；\n\n       ``` js\n       var arr1 = [\n          {name:'鸣人',age:16},\n          {name:'佐助',age:17}\n       ];\n       var arr2 = [1,2,3];\n       \n       arr1.forEach(item => { \n         item.age = item.age + 1}\n       );\n       ```\n\n       **当数组中元素是值类型，forEach绝对不会改变数组；当是引用类型，则可以改变数组**\n\n       （2）map() 映射\n\n    原数组被\"映射\"成对应新数组。\n\n    - 新建一个数组，需要有承载对象，也意味着原始数组在调用它后不会发生变化;\n    - 该数组中的每个元素都调用一个提供的函数后返回结果。\n\n    创建新数组不代表不能用它改变原有数组，你用原有数组去承载就可以：\n\n    ```js\n    let arr = [1,2,3]; \n    arr = arr.map(item => { return item * 2 })\n    ```\n\n    - map()中每个元素都要执行相应的回调函数，所以必须要有return\n    - 如果你想给数组做一定的过滤处理，那map()基本上行不通：\n\n    ```js\n    let newArr = [1,2,3,4,5].map(item => { if(item > 3) return item })\n    // => [undefined, undefined, undefined, 4, 5]\n    ```\n\n    - 不能凑合用， 人生不能凑合，代码也是！\n\n      （3)fliter() 过滤\n\n      -  \t创建一个新数组，新数组中的元素是筛选出来的符合条件的所有对象。\n\n    ```js\n    let newArr = [1,2,3,4,5].filter(item =>{\n       if(item > 3) return item \n    })\n    //  => [4,5]\n    ```\n\n    ​\t\t\t(4)sort()排序\n\n    - sort()用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序。\n\n    - ​\tsort()与map()、filter()等不同，它直接改变原始数组（很重要！）；\n\n    - 如果想按照其他标准进行排序，就需提供比较函数compareFunction(a,b)，数组会按照调用该函数的返回值排序，即a和b是两个将要比较的元素：\n\n      - 如果compareFunction(a,b)小于0，则a排列到b之前；\n      - 如果 compareFunction(a, b)等于0，a和b的相对位置不变（并不保证）;\n      - 如果 compareFunction(a, b)大于0，b排列到a之前； 直接上例子：\n\n      ```js\n      let Users = [\n        {name:'鸣人',age:16},\n        {name:'卡卡西',age:28},\n        {name:'自来也',age:50},\n        {name:'佐助',age:17}\n      ];\n      Users.sort((a,b)=> {\n         return a.age - b.age\n      })\n      \n      // => 鸣人、佐助、卡卡西、自来也\n      ```\n\n      \n\n      (5)检索存在\n\n      - ​\tsome()\n\n        ```js\n        var result = [\n           {name:'鸣人',age:16},\n           {name:'佐助',age:17}\n        ].some(item => {\n        \treturn item.age > 16 \n        });\n        => true\n        ```\n\n      - every()\n\n      ```js\n      var result = [\n         {name:'鸣人',age:16},\n         {name:'佐助',age:17}\n      ].every(item => {\n      \treturn item.age > 16 \n      });\n      => false\n      ```\n\n      - some()和every()返回的都是`Boolean`值，仅此而此\n\n#### 6.数组去重\n\n- ​\tnew Set( ) \t经典方法\n\n```js\nlet tempArr = new Set([1,2,3,3,4,4,5])\n// => {1,2,3,4,5} \n\n//并且已有元素是添加不进去的：\ntempArr.add(3) \n// => {1,2,3,4,5}\n\ntempArr.add(6)\n// => {1,2,3,4,5,6}\n```\n\n​                     **Set()没法去重元素是引用对象的数组。**\n\n- #### _.uniqWith()     js库\n\n  ```js\n  import _ from 'lodash';\n  <script>\n  var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n  _.uniqWith(objects, _.isEqual);\n  </script>\n  \n  //=> [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n  \n  \n  //_.isEqual(value,other)用于执行深比较来确定两者的值是否相等。 _.uniqWith()做去重处理。\n  ```\n\n\n\n#### 7.查找元素\n\n- findIndex（）\n\n通过对象属性值直接获取对应索引： `**findIndex()**` 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)。\n\n- find（）\n\n`find()`顾名思义，就是用来在数组中找到我们所需要的元素\n\n\n\n#### 8.回调地狱\n\n```js\n// 回调地狱\n    ajax('get', './a.json', function (info) {\n      if (info.addr != 'ok') {\n        ajax('get', info.addr, function (info) {\n          if (info.addr != 'ok') {\n            ajax('get', info.addr, function (info) {\n              if (info.addr == 'ok') {\n                alert(info.msg);\n              }\n            })\n          }\n        })\n      }\n    });\n```\n\n\n\n#### 9.eval\n\n它的功能是将对应的字符串解析成 JS 并执行，应该避免使用 JS，因为非常消耗性能（2 次，一次解析成 JS，一次执行）\n\n#### 10.copyWithin\n\n```js\n//copyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。\n```\n\n- 他会影响原数组，返回的数据和原数据为同一引用\n\n- ```js\n  [1, 2, 3, 4, 5].copyWithin(-2)\n  // [1, 2, 3, 1, 2]\n  \n  [1, 2, 3, 4, 5].copyWithin(0, 3)\n  // [4, 5, 3, 4, 5]\n  \n  [1, 2, 3, 4, 5].copyWithin(0, 3, 4)\n  // [4, 2, 3, 4, 5]\n  \n  [1, 2, 3, 4, 5].copyWithin(-2, -3, -1)\n  // [1, 2, 3, 3, 4]\n  ```\n\n#### 11.call bind apply\n\n```js\n//第一个参数 都是this 的指向，后面的参数则都是传递的参数\n// call 和 bind 传递参数都是： a,b,c...的形式\n  //而apply后面传递的参数应该为数组形式，就算是单个数据也要写成数组的形式 ：['a']\n//bind和call存在的区别在于，call和apply都会立即执行函数，而bind则不会。因此可以用bind写事件处理函数\n```\n\n```js\n // Array.prototype ---》数组的实例化对象的原型 ---》this 指向数组的实例化对象\n    function fn1(a,b,c) {\n      // arguments  foreach\n      // es5中非常重要的写法\n      Array.prototype.forEach.call(arguments,function(item) {\n        console.log(item);\n      })\n    }\n    fn1('哈哈哈', '嘿嘿嘿', '呵呵呵');\n```\n\n```js\nconst btn = document.querySelector('#btn');\n    // call apply bind 改变this指向\n    // call(this,值1,值2....) apply(this, [值1, 值2...]) bind(this, 值1, 值2....)\n    // 从表面上看bind方法和call方法完全一致，但是\n    // bind方法可以再调用之后不执行函数，而call和apply只要调用就立刻执行\n    const obj = {\n      a: 100,\n    }\n    function fn1(user) {\n      console.log('你好', user);\n      console.log(this.a); // window.a\n    }\n    // 让fn1的this指向obj 使用call方法，只要运行代码，程序就会立刻执行\n    // fn1.call(obj, '张三');\n    // fn1.apply(obj, ['张三']);\n    // 我的需要: fn1作为btn的事件处理函数，点击按钮之后再执行\n    // fn1需要改变this指向，同时需要向fn1中传值\n    btn.onclick = fn1.bind(obj, '张三');\n```\n\n![image-20211223194857541](%E5%AD%A6%E4%B9%A0/mdimages/image-20211223194857541.png)\n\n```js\nfunction Person(name,age){\n    //this == obj\n    this.name = name;\n    this.age = age;\n}\nver person = new Person('deng',100)\nvar obj = {}\nPerson.call(obj,'cheng',300)\n//test  ---> test.call()\n\n//默认函数运行，相当于隐式运行.call( )\n//把Person时传入obj，相当于this == obj this.name = name ,,this.age = age\n```\n\n```js\nfunction Person(name,age){\n    //this == obj\n    this.name = name;\n    this.age = age;\n}\nfunction Student(){\n}\n```\n\n\n\n\n\n\n\n#### 12.reduce\n\n`**reduce()**` 方法对数组中的每个元素执行一个由您提供的**reducer**函数(升序执行)，将其结果汇总为单个返回值。\n\n```js\nconst array1 = [1, 2, 3, 4];\nconst reducer = (previousValue, currentValue) => previousValue + currentValue;\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n//reduce 里面为一个回调函数\n```\n\n```php\narray.reduce(function(prev, current, currentIndex, arr), initialValue)\n```\n\n1. prev：函数传进来的初始值或上一次回调的返回值\n2. current：数组中当前处理的元素值\n3. currentIndex：当前元素索引\n4. arr：当前元素所属的数组本身\n5. initialValue：传给函数的初始值\n\n#### 13.Map\n\n**加工数据**\n\n`**map()**` 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。\n\n```js\nconst array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n```\n\n#### 14.splice\n\n- 删除 修改 清空\n\n- ```js\n  //splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n  ```\n\n- ```js\n  const months = ['Jan', 'March', 'April', 'June'];\n  months.splice(1, 0, 'Feb');\n  // inserts at index 1\n  console.log(months);\n  // expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"June\"]\n  \n  months.splice(4, 1, 'May');\n  // replaces 1 element at index 4\n  console.log(months);\n  \n  //1.要修改的元素索引\n  //2.要删除的元素个数\n  //3.要添加的元素\n  \n  //清空 arr.splice(0,arr.length)\n  ```\n\n- \n\n#### 15.URI 和 URL\n\n##### 一.统一资源标识符（URI）\n\n<1>什么是URI\n\nURI，统一资源标志符(Uniform Resource Identifier， URI)，表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行标识的。\n\n<2>URI的结构组成\n\nURI通常由三部分组成：\n\n①资源的命名机制；\n\n②存放资源的主机名；\n\n③资源自身的名称。\n\n（注意：这只是一般URI资源的命名方式，只要是可以唯一标识资源的都被称为URI，上面三条合在一起是URI的充分不必要条件）\n\n<3>URI举例\n\n如：https://blog.csdn.net/qq_32595453/article/details/79516787\n\n我们可以这样解释它：\n\n①这是一个可以通过https协议访问的资源，\n\n②位于主机 blog.csdn.net上，\n\n③通过“/qq_32595453/article/details/79516787”可以对该资源进行唯一标识（注意，这个不一定是完整的路径）\n\n注意：以上三点只不过是对实例的解释，以上三点并不是URI的必要条件，URI只是一种概念，怎样实现无所谓，只要它唯一标识一个资源就可以了。\n\n##### 二、URL\nURL是URI的一个子集。它是Uniform Resource Locator的缩写，译为“统一资源定位 符”。\n\n通俗地说，URL是Internet上描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。\n\n采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL是URI概念的一种实现方式。\n\nURL的一般格式为(带方括号[]的为可选项)：\n\nprotocol :// hostname[:port] / path / [;parameters][?query]#fragment\n\nURL的格式由三部分组成： \n\n①第一部分是协议(或称为服务方式)。\n\n②第二部分是存有该资源的主机IP地址(有时也包括端口号)。\n\n③第三部分是主机资源的具体地址，如目录和文件名等。\n\n第一部分和第二部分用“://”符号隔开，\n\n第二部分和第三部分用“/”符号隔开。\n\n第一部分和第二部分是不可缺少的，第三部分有时可以省略。\n\n##### 三、URI和URL之间的区别\n从上面的例子来看，你可能觉得URI和URL可能是相同的概念，其实并不是，URI和URL都定义了资源是什么，但URL还定义了该如何访问资源。URL是一种具体的URI，它是URI的一个子集，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI 是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，是绝对的。\n\n##### 1.decodeURI( )\n\n`**decodeURI()**` 函数能解码由[`encodeURI`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) 创建或其它流程得到的统一资源标识符（URI）。\n\n##### 2.encodeURI( )\n\n`**encodeURI()**` 函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 \"代理\" 字符组成)。\n\n#### \n\n### 对象方法\n\n#### 1.Object.defineProperty()\n\n`**Object.defineProperty()**` 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n```js\nconst object1 = {};\n\nObject.defineProperty(object1, 'property1', {\n  value: 42,\n  writable: true\n});\n\nobject1.property1 = 77;\n// throws an error in strict mode\n\nconsole.log(object1.property1);\n// expected output: 42\n```\n\n|            | `configurable` | `enumerable` | `value` | `writable` | `get`  | `set`  |\n| ---------- | -------------- | ------------ | ------- | ---------- | ------ | ------ |\n| 数据描述符 | 可以           | 可以         | 可以    | 可以       | 不可以 | 不可以 |\n| 存取描述符 | 可以           | 可以         | 不可以  | 不可以     | 可以   | 可以   |\n\n- `configurable`\n\n  当且仅当该属性的 `configurable` 键值为 `true` 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。 **默认为** **`false`**。\n\n- `enumerable`\n\n  当且仅当该属性的 `enumerable` 键值为 `true` 时，该属性才会出现在对象的枚举属性中。 **默认为 `false`**。\n\n数据描述符还具有以下可选键值：\n\n- `value`\n\n  该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。 **默认为 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)**。\n\n- `writable`\n\n  当且仅当该属性的 `writable` 键值为 `true` 时，属性的值，也就是上面的 `value`，才能被[`赋值运算符` (en-US)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators)改变。 **默认为 `false`。**\n\n存取描述符还具有以下可选键值：\n\n- `get`\n\n  属性的 getter 函数，如果没有 getter，则为 `undefined`。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 `this` 对象（由于继承关系，这里的`this`并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。 **默认为 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)**。\n\n- `set`\n\n  属性的 setter 函数，如果没有 setter，则为 `undefined`。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 `this` 对象。 **默认为 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)**。\n\n\n\n### Error\n\n[Error 类型](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types)\n\n除了通用的Error构造函数外，JavaScript还有6个其他类型的错误构造函数。更多客户端异常,详见 [Exception Handling Statements](https://developer.mozilla.org/en-US/JavaScript/Guide/Statements#exception_handling_statements)。\n\n- **[`EvalError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError)**\n\n  创建一个error实例，表示错误的原因：与 [`eval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval) 有关。\n\n- **[`InternalError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError)** \n\n  创建一个代表Javascript引擎内部错误的异常抛出的实例。 如: \"递归太多\".\n\n- **[`RangeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError)**\n\n  创建一个error实例，表示错误的原因：数值变量或参数超出其有效范围。\n\n- **[`ReferenceError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)**\n\n  创建一个error实例，表示错误的原因：无效引用。\n\n- **[`SyntaxError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)**\n\n  创建一个error实例，表示错误的原因：[`eval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)在解析代码的过程中发生的语法错误。\n\n- **[`TypeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)**\n\n  创建一个error实例，表示错误的原因：变量或参数不属于有效类型。\n\n- **[`URIError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError)**\n\n  创建一个error实例，表示错误的原因：给 [`encodeURI()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)或 [`decodeURI()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)传递的参数无效。\n\n\n\n### Date \n\n```js\nconst data = new Date();\n//得到data为 ...\n//data = xxxxxxx\n\n//将data放入new Date(  ..) 可以得到曾经保存的时间\nconst data1 = new Date(data)\n\n//可以根据时间戳的差值计算出时间间隔\n```\n\n\n\n\n\n### 异步编程\n\n背景：js诞生之际是一门单线程语言，功能较少。后随着计算机的发展，ajax等的兴起。当计算机执行一个需要较长时间的进程时候，为了提高计算机效率，不让其空闲，就有了异步。\n\n#### 什么是异步js\n\n- ​\t在js中，任务分为两种，同步任务和异步任务。同步任务在主线程中，一开始就执行，而异步任务在需要时或者特点条件下才会执行。\t\n  - 异步js主要有：\n    1. DOM操作\n    2. 定时器\n    3. AJAX请求\n  - 在程序执行过程中，所以的同步任务都会在主线程上执行，形成一个执行栈\n\n  - 主线程之外还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件，当同步任务执行完，或者说执行栈一被清空。主线程就开始执行任务队列里面的异步事件，即当前异步事件的回调函数。再任务队列中，事件遵循先进后出规则。\n\n#### 异步事件注意点\n\n- 异步事件的发生先后顺序是不确定的，这取决于当前事件在子进程中完成的先后顺序，先完成的先进入任务队列，先执行。\n- 定时器由于任务队列的先进后出，可能会延时发生。当定时器时间到达时，才会在任务队列中添加事件（在这之前，挂载在子进程上），而此时定时器需要等到先排队的事件执行完才能执行。（前提是执行栈也已经被清空）\n- Event loop 主线程在任务队列中执行事件是循环不断的，整个这个的运行机制叫做Event loop。\n- html5 规定定时器最短时间间隔为4ms，足的会变为4ms。老版本的规定为10ms，DOM时间触发后不会立即执行，会延误16ms。\n\n\n\n### Promise\n\n- Promise是异步编程的一种解决方案。比传统的解决方案 ——回调函数和事件——更合理强大。\n\n- 可以说是一个容器，里面保存着某个未来才会结束的事件，（通常是一个异步操作）的结果。可以获取异步操作的消息\n\n- 特点\n\n  - 对象的状态不受外界影响，~代表一个异步操作，有三种状态\n\n    - pending\n    - fulfilled\n    - rejected\n\n    只有异步的操作结果，可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态。\n\n  - 一旦状态改变就不会再变，只有两种可能\n\n    - pending -> fulfilled\n    - pending -> rejected\n\n    只要是事件发生了，就不会再改变，叫做定型resolved。\n\n    而事件的特点是，如果你错过了他，再去监听，是得不到结果的。\n\n```js\n//实例化Promise对象\nlet p = new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\np.then((info) => {} , (err) ={} )\n\n.catch((err)={\n    \n})\n```\n\n- 如果后面嵌套then。里面返回promise对象\n- **.then 可以链式不断调用**\n\n```js\np.then((info) => {\n   return new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\n} , (err) ={} )\n\n.then((info) => {\n    return new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\n}, (err) ={})\n\n.then ...\n\n//.catch 每一个状态为reject都会执行catch()\n```\n\n##### async await\n\n- 用await替代then，**await**和**async**需要配合使用\n\n```js\nasync function move(){\n            const p1 = await ajax('get','./a.json')\n            // console.log(p1)\n            const data1 = p1.src\n            // console.log(data1)\n            const p2 = await ajax('get',data1);\n\n            const data2 = p2.src;\n\n            const p3 = await ajax('get',data2)\n\n            console.log(p3.msg)\n        }\n        move()\n```\n\nasync 和 await 执行顺序\n\n```js\nasync function async1() {\n    console.log('async1 start') //执行3\n    await async2()              //执行函数 4\n    console.log('async1 end')   //挂载等待1\n}\n\nasync function async2() {\n    console.log('async2') //执行5\n}\nconsole.log('script start')   //顺序执行1\n\nsetTimeout(function () {\n    console.log('setTimeout')  //等待微任务1\n}, 0)\nasync1();   //执行函数 2\n\nnew Promise(function (resolve) {\n    console.log('promise1') //立即执行 6 \n    resolve();\n}).then(function () {       //挂载等待2\n    console.log('promise2')\n})\nconsole.log('script end')   //立即执行7\n\n结果\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n\n知识点\n显然，这考察的是js中的事件循环和回调队列。注意以下几点：\n     *   Promise优先于setTimeout宏任务。所以，setTimeout回调会在最后执行。\n     *   Promise一旦被定义，就会立即执行。\n     *   Promise的reject和resolve是异步执行的回调。所以，resolve()会被放到回调队列中，在主函数执行完和setTimeout前调用。\n     *   await执行完后，会让出线程。async标记的函数会返回一个Promise对象\nawait后面的语句会在await执行完之后再执行。定时器为宏任务，会在微任务执行完之后再执行。\n```\n\n```js\n  async function queryData() {\n      # 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码   \n      \n      var info = await axios.get('async1');\n      #2.2  让异步代码看起来、表现起来更像同步代码\n      var ret = await axios.get('async2?info=' + info.data);\n      return ret.data;\n    }\n————————————————\n```\n\n##### ajax 配合async\n\n\n\n##### Promise.prototype.finally()\n\n用于指定不管 Promise 对象最后状态如何，都会执行的操作。\n\n不管`promise`最后的状态，在执行完`then`或`catch`指定的回调函数以后，都会执行`finally`方法指定的回调函数。\n\n```js\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n```\n\n##### Promise.all()\n\n`Promise.all()`方法用于将多个 Promise 实例，包装成一个新的 Promise 实例\n\n```javascript\nconst p = Promise.all([p1, p2, p3]);\n```\n\n上面代码中，`Promise.all()`方法接受一个数组作为参数，`p1`、`p2`、`p3`都是 Promise 实例，如果不是，就会先调用下面讲到的`Promise.resolve`方法，将参数转为 Promise 实例，再进一步处理。另外，`Promise.all()`方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。\n\n（1）只有`p1`、`p2`、`p3`的状态都变成`fulfilled`，`p`的状态才会变成`fulfilled`，此时`p1`、`p2`、`p3`的返回值组成一个数组，传递给`p`的回调函数。\n\n（2）只要`p1`、`p2`、`p3`之中有一个被`rejected`，`p`的状态就变成`rejected`，**此时第一个被`reject`的实例的返回值**，会传递给`p`的回调函数。\n\n##### Promise.race()\n\n`Promise.race()`方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```javascript\nconst p = Promise.race([p1, p2, p3]);\n```\n\n只要`p1`、`p2`、`p3`之中有一个实例率先改变状态，`p`的状态就跟着改变。那**个率先改变的 Promise 实例的返回值，**就传递给`p`的回调函数。\n\n`Promise.race()`方法的参数与`Promise.all()`方法一样，如果不是 Promise 实例，就会先调用下面讲到的`Promise.resolve()`方法，将参数转为 Promise 实例，再进一步处理。\n\n\n\n**`Promise.any()`跟`Promise.race()`方法很像，只有一点不同，就是`Promise.any()`不会因为某个 Promise 变成`rejected`状态而结束，必须等到所有参数 Promise 变成`rejected`状态才会结束**\n\n\n\n#### 宏任务和微任务\n\n在异步任务中，将任务分为两种，分别是：\n\n-  \t\t\t\t宏任务\n\n  - 定时器\n  - requestAnimationFrame\n\n- ​                  微任务\n\n  - promise\n\n  \n\n- 在任务队列之外，将宏任务和微任务分别挂载在宏任务队列和微任务。当同步任务执行完之后，会进行Event loop 执行任务队列。\n\n  - 执行顺序是：\n\n    - 先执行同步任务，再执行异步任务\n    - 先执行微任务，再执行宏任务\n\n    ```js\n    console.log(1); //同步执行1\n    \n    new Promise(resolve=> {\n      setTimeout(()=> {\n        console.log(2);\n      }, 4); //宏任务1  定时器1\n    \n      resolve();\n    \n      console.log(3);\t//同步执行2\n    })\n    \n    .then(_ => {\n      console.log(4);  //微任务1\n    })\n    \n    setTimeout(()=> { //宏任务2 定时器2\n      new Promise(resolve => {\n        console.log(5);\n    \n        resolve();\n      })\n      .then(_ => {\n        console.log(6);\n      })\n    },4)\n    \n    //当执行promise内的代码时，语句遵循同步执行的规则\n    //此处有一个简写 _ => 表示舍弃参数，不进行传值操作\n    \n    ```\n\n    - **requestAnimationFrame\t请求动画帧**\n\n- 60HZ 当你什么都不做的时候，电脑也会以每秒60次的刷新速率更新，\n\n- 动画原理\n\n  - 而动画的本质就是人眼看到图像被属性变化而引起的视觉效果，这个效果要以平滑连贯的方式进行过渡\n\n- setTimeout ( 存在丢帧现象 )\n\n  - setTimeout的执行时间并不是确定的。在Javascript中， setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此 **setTimeout 的实际执行时间一般要比其设定的时间晚一些。**\n  - 刷新频率受**屏幕分辨率**和**屏幕尺寸**的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。\n\n- #### requestAnimationFrame\n\n  - requestAnimationFrame最大的优势是**由系统来决定回调函数的执行时机**\n\n    - 具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。**它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次**，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。\n\n    - ```js\n              let box = document.querySelector('.box');\n              let len = 0;\n              function fn() {\n                  len += 5;\n                  box.style.left = len + 'px';\n                  if (len < 1280) {\n                      window.requestAnimationFrame(fn);\n                  }\n              }\n              window.requestAnimationFrame(fn);\n      ```\n\n      （1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回 流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 \n\n      （2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然 就意味着更少的 CPU、GPU 和内存使用量 \n\n      （3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动 优化方法的调用，**并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销**\n\n### ES6\n\n#### 箭头函数\n\n​\t本质是一个语法糖\n\n```js\nfunction() {}\n\n() => {}\n\n//1.如果箭头函数只有一个参数，则括号可以省略\nitem => {}   //形如\n//2如果函数体只有一条语句，则可以省略{}括号\n() => return 'hello'\n\n(a, b) => a + b\n\n(a) => {\n  a = a + 1\n  return a\n}\n\n\n\n//如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：\n// SyntaxError:\nx => { foo: x }\n//因为和函数体的{ ... }有语法冲突，所以要改为：\n\n// ok:\nx => ({ foo: x })\n\n\n\n\n\n```\n\n(1). 箭头函数this为父作用域的this，不是调用时的this\n箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。\n普通函数的this指向调用它的那个对象。\n\n(2). 箭头函数不能作为构造函数，不能使用new\n\n(3). 箭头函数没有arguments，caller，callee\n\n箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。\n\n箭头函数中要想接收不定参数，应该使用rest参数...解决。\n\n (4). 箭头函数通过call和apply调用，不会改变this指向，只会传入参数\n\n(5). 箭头函数没有原型属性\n\n(6). 箭头函数不能作为Generator函数，不能使用yield关键字\n\n(7). 箭头函数返回对象时，要加一个小括号\n\n(8). 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法\n\n(9). 多重箭头函数就是一个高阶函数，相当于内嵌函数\n\n\n\n```js\n(10). 箭头函数常见错误\nlet a = {\n  foo: 1,\n  bar: () => console.log(this.foo)\n}\n\na.bar()  //undefined\nbar函数中的this指向父作用域，而a对象没有作用域，因此this不是a，打印结果为undefined\n\nfunction A() {\n  this.foo = 1\n}\n\nA.prototype.bar = () => console.log(this.foo)\nlet a = new A()\na.bar()  //undefined\n原型上使用箭头函数，this指向是其父作用域，并不是对象a，因此得不到预期结果\n\n3.一些this的指向实例\nvar obj = {\n  birth: 1990,\n  getAge: function(){\n    console.log(new Date().getFullYear() - this.birth); //this指向obj对象\n  },\n}\nobj.getAge(); // 29\n\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = function () {\n            return new Date().getFullYear() - this.birth; // this指向window或undefined\n        };\n        return fn();\n    }\n};\nobj.getAge();// NaN\n\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象\n        return fn();\n    }\n};\nobj.getAge(); // 29\n\nvar obj = {\n       getAge: () => {\n            console.log(this); // window\n        }\n    };\n\nobj.getAge(); //window\n作为对象的属性时，this的指向则不再是对象本身了，箭头函数捕获的是obj{}这个对象的环境，然后这个环境的this指向的是window\n```\n\n","slug":"javascript入门","published":1,"updated":"2025-01-07T02:30:25.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0ckp000d572oh0itfwul","content":"<p>撸js的第一遍，持续不断深入的学习一门语言应当坚持下去，每一回学习都会有不一样的体会。</p>\n<h1 id=\"javascript介绍\"><a href=\"#javascript介绍\" class=\"headerlink\" title=\"javascript介绍\"></a>javascript介绍</h1><h2 id=\"JavaScript-是脚本语言（作为web的\"><a href=\"#JavaScript-是脚本语言（作为web的\" class=\"headerlink\" title=\"JavaScript 是脚本语言（作为web的\"></a>JavaScript 是脚本语言（作为web的</h2><p>JavaScript 是一种函数优先轻量级的编程语言。</p>\n<p>JavaScript 是可插入 HTML 页面的编程代码。</p>\n<p>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p>\n<p>JavaScript 基于原型编程，多范式的动态脚本语言，支持面向对象，命令式，声明式，函数式编程范式，解释性或即时编译型的编程语言</p>\n<p>网景 –&gt;欧洲计算机协会 –&gt;ECMAScript(ES)</p>\n<p>Javascipt 核心语法</p>\n<p>核心语法（ESMAscript） DOM（W3C) BOM(网景)</p>\n<p>ES1           …         ES3       …          ES5</p>\n<p>ES4（去掉改动大的语法,和谐会议）</p>\n<p>ES6 2015年   当年争议的话题</p>\n<p>ES7 -ES11 一年一更新 2016-2020 ES6之后统称ES6</p>\n<p>语法糖 ：ES6 写代码运行更快</p>\n<h2 id=\"JavaScript作用\"><a href=\"#JavaScript作用\" class=\"headerlink\" title=\"JavaScript作用\"></a>JavaScript作用</h2><p>网页开发</p>\n<p>JS包含三个部分的内容（在浏览器端</p>\n<ul>\n<li>​        核心语法<ul>\n<li>变量</li>\n<li>流程控制</li>\n<li>循环</li>\n<li>数据类型</li>\n</ul>\n</li>\n<li>​        BOM (网景)<ul>\n<li>浏览器对象模型 borwer object model</li>\n</ul>\n</li>\n<li>​        DOM （W3C)<ul>\n<li>文档对象模型，和网页相关  document object model</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"宿主环境\"><a href=\"#宿主环境\" class=\"headerlink\" title=\"宿主环境\"></a>宿主环境</h2><p>定义：JS运行的环境就叫宿主环境</p>\n<ul>\n<li>​    node</li>\n<li>浏览器</li>\n</ul>\n<p>作用：</p>\n<ol>\n<li><p>交互效果</p>\n</li>\n<li><p>收集数据</p>\n</li>\n</ol>\n<h2 id=\"JS-的准备语法\"><a href=\"#JS-的准备语法\" class=\"headerlink\" title=\"JS 的准备语法\"></a>JS 的准备语法</h2><ul>\n<li><p>如何编写JS文件</p>\n<ol>\n<li>将JS嵌入到网页当中</li>\n<li>将JS文件引入到文档中</li>\n</ol>\n</li>\n<li><p>Script标签的位置</p>\n<ol>\n<li><p>可以放在网页任何位置（放在html标签外面，页面最上面，浏览器自动把他放在head中，但是文档声明头消失）–&gt; 解析时，浏览器会采用降价处理。h5-h4  【如果文档没有写文档声明头】 理论上可以放任何位置，唯独不建议放在文档声明头上面</p>\n</li>\n<li><p>建议的位置 </html> 之后，浏览器会默认将其移动到<body>之中。放在<body/>和</html>之间</p>\n<ul>\n<li>js操作标签，页面元素先渲染出页面，即该标签先加载成功，script才开始获取元素。</li>\n<li>标准文档流的解析顺序</li>\n<li><strong>操作input标签 首要前提是 input要加载成功</strong></li>\n</ul>\n</li>\n<li><p>独立的Js文件引入</p>\n<ul>\n<li><script src=''></script>\n</li>\n<li><p>通过script标签配合src配合</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>打印</p>\n<ul>\n<li><p>在JS代码调试的时候，经常需要使用到console.log()</p>\n<ol>\n<li><p>console 是一个对象，里面有很多函数可以来帮助我们来开发，最常用的是console.log</p>\n</li>\n<li><p>弹窗</p>\n<ol>\n<li>alert</li>\n<li>prompt 比confirm多一个input框框</li>\n<li>confirm 比alert多一个取消</li>\n</ol>\n<ul>\n<li>​     alert（） 加括号为一个函数</li>\n</ul>\n</li>\n<li><p>语句和表达式</p>\n<ol>\n<li>语句<ul>\n<li>有多个部分组成，不一定有结果</li>\n<li>eg：console.log()</li>\n<li><strong>语句都是从右向左看</strong></li>\n</ul>\n</li>\n<li>表达式<ul>\n<li>凡是强调有结果</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>语句结束符</p>\n<ol>\n<li>在语句的最后，最后写上一个语句的结束符号</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"文档入口函数\"><a href=\"#文档入口函数\" class=\"headerlink\" title=\"文档入口函数\"></a>文档入口函数</h3><p>window.onload &#x3D; function(){</p>\n<p>​    在函数当中的代码会在页面的最后执行</p>\n<p>}</p>\n<p>放在head中不会出错</p>\n<p><strong>如果页面有部分图片或资源加载不出来，则js会一直等待起加载，导致关键js交互无效果。</strong></p>\n<p>window &gt; document</p>\n<h4 id=\"如果页面有多个入口函数\"><a href=\"#如果页面有多个入口函数\" class=\"headerlink\" title=\"如果页面有多个入口函数\"></a>如果页面有多个入口函数</h4><p><strong>后面加载的覆盖前面的</strong></p>\n<h4 id=\"onclick同理\"><a href=\"#onclick同理\" class=\"headerlink\" title=\"onclick同理\"></a>onclick同理</h4><p><strong>外部js也需要文本入口函数</strong>,位置放在</html>之后</p>\n<p>如果是工具类的js文件，（不会主动的获取js中的某个），则可以写在head文件中，如果是自己需要操作标签元素的，最好写在body之后</p>\n<p>PS：script  和   script src 不能混用</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>​    定义：临时存储数据的容器</p>\n<ol>\n<li><p>​    如何创建一个变量</p>\n<p>​    var 变量名 &#x3D; 值</p>\n<ul>\n<li>小驼峰命名</li>\n<li>console.log() 如果打印的是一个变量，不需要加引号</li>\n<li>underfined当变量声明未赋值的时候，则为未定义</li>\n</ul>\n</li>\n<li><p>变量名的命名规则</p>\n<ul>\n<li><p>字母数字下划线，<strong>字符</strong>，命名</p>\n</li>\n<li><p>数字不能是首字母  -&gt; <strong>可以下划线开头</strong></p>\n<ul>\n<li>尽量词能表达意</li>\n</ul>\n</li>\n<li><p>不能使用关键字</p>\n<p><strong>上面也是标识符命名规则</strong></p>\n</li>\n<li><p>声明和初始化</p>\n<ul>\n<li>通过关键字创建一个变量即为变量声明，给变量<strong>第一次赋值</strong>既是初始化</li>\n<li>控制台凡是出现<strong>蓝色</strong>的都是数字</li>\n<li>控制台凡是出现<strong>黑色</strong>的都是文字</li>\n<li><strong>程序从右向左看</strong></li>\n<li>修改值的过程，叫<strong>重新赋值</strong> x &#x3D; a</li>\n<li>重新声明赋值初始化 var x &#x3D; ‘hello,x’  旧的值被回收</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>变量提升</p>\n<ul>\n<li>浏览器的js解析引擎，在真正执行代码的时候，会进行预解析</li>\n<li>变量声明提升 声明不赋值 underfinded</li>\n<li>把所以的声明语句提升到作用域的最顶端<ul>\n<li>如若未声明直接使用，则报错</li>\n</ul>\n</li>\n<li>原因：在正式执行之前，会对其进行预解析</li>\n<li><strong>提升到当前作用域的最顶端</strong></li>\n</ul>\n<p>ps：使用js属性对应的方法<strong>length属性</strong>，获取字符串的长度</p>\n<p>​    获取字符串长度</p>\n<h4 id=\"js是一门弱类型语言\"><a href=\"#js是一门弱类型语言\" class=\"headerlink\" title=\"js是一门弱类型语言\"></a>js是一门弱类型语言</h4><p>var a (string int)  强类型</p>\n<p>变量可以根据数据的需要随时更换类型（变量本身没有类型，赋的值是上面类型就是上面类型）</p>\n</li>\n</ol>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><strong>基本数据类型</strong></p>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>Boolean</li>\n<li>underfinded</li>\n<li>null</li>\n</ul>\n<p><strong>引用数据类型</strong></p>\n<p>细化：object </p>\n<ul>\n<li>​    array</li>\n<li>​    function</li>\n<li>​     object</li>\n</ul>\n<p><strong>栈</strong> <strong>堆</strong></p>\n<p>基本（基础）数据类型，主要存储在栈</p>\n<p>引用数据在栈区存放内存地址，堆里存放数据的值</p>\n<p><strong>PS：</strong><strong><strong>当一个引用数据类型赋值给一个变量时，这个变量存储的是简单的内存地址</strong></strong></p>\n<h2 id=\"String字符串\"><a href=\"#String字符串\" class=\"headerlink\" title=\"String字符串\"></a>String字符串</h2><p>定义:在代码中如果想要存储文字</p>\n<p>‘’ “” 没有区别，<strong>推荐使用单引号</strong></p>\n<ul>\n<li><p>html标签属性都是双引号，为了区分。一致性不混用</p>\n</li>\n<li><p>结合实际情况，<strong>单引号里嵌套双引号</strong>   …说:””.</p>\n<ul>\n<li>存在问题 …说:’’</li>\n<li>单引号里使用双引号，<strong>双引号里面使用单引号</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h4><p>var s1 &#x3D; ‘鲁迅先生说:’ + ‘’</p>\n<p>相当于拼接字符串</p>\n<h4 id=\"创建字符串-–-通过构造函数\"><a href=\"#创建字符串-–-通过构造函数\" class=\"headerlink\" title=\"创建字符串   –   通过构造函数\"></a>创建字符串   –   通过构造函数</h4><p>var s &#x3D; new String(‘’)</p>\n<p>var s1 &#x3D; ‘’    直接量，相当于js给我们提供的一种用来创建字符串类型的快捷方式</p>\n<p>在Js里，除了null和underfinded都可以用构造函数创建出来</p>\n<p>不管里面是什么类型，只要外面加了引号，就会变成字符串类型</p>\n<p><strong>创建字符串的方式</strong></p>\n<ul>\n<li>‘’</li>\n<li>“”</li>\n<li>构造函数</li>\n</ul>\n<p>通过’+’拼接字符串</p>\n<p><strong>注意：</strong>****</p>\n<ul>\n<li>保证代码中使用统一的符号</li>\n<li>单双不能单独嵌套使用</li>\n</ul>\n<p>可以通过length属性来获取字符串的长度</p>\n<p><strong>ps 除了null和underfinded其他都是对象</strong></p>\n<p><strong>PS1 任何数据类型都可以通过构造函数的形式创造出来</strong></p>\n<p><strong>构造函数创建出来的数据，是一个object</strong></p>\n<p>&#x2F;&#x2F;对象 console是一个对象，log是console身上的方法</p>\n<p>length(在字符串中) 。2+</p>\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2><p> 在js中，number远远比其他语言当中的number简单</p>\n<p>无整数，本质上都是小数 0.2+0.3 ！&#x3D;&#x3D; 0.5</p>\n<p><strong>toFixed</strong> &#x2F;&#x2F;去除小数，返回整数位置，数字类型变为string（文本</p>\n<h2 id=\"布尔-boolean\"><a href=\"#布尔-boolean\" class=\"headerlink\" title=\"布尔 boolean\"></a>布尔 boolean</h2><h5 id=\"真和假-false-和true\"><a href=\"#真和假-false-和true\" class=\"headerlink\" title=\"真和假 false 和true\"></a>真和假 false 和true</h5><p>ps：表示一个判断的结果</p>\n<h2 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h2><p>ps：一般用来表示一个对象的空值</p>\n<h2 id=\"Underfinded\"><a href=\"#Underfinded\" class=\"headerlink\" title=\"Underfinded\"></a>Underfinded</h2><p>ps：一般表示变量没有初始化</p>\n<ul>\n<li>先声明一个变量，在某一行未来要使用某个变量，<strong>建议给声明的变量设置一个初始值</strong></li>\n</ul>\n<h2 id=\"基础数据类型之间的类型转换\"><a href=\"#基础数据类型之间的类型转换\" class=\"headerlink\" title=\"基础数据类型之间的类型转换\"></a><strong>基础数据类型之间的类型转换</strong></h2><p>ps：把一个类型的数据转换为另一个数据类型</p>\n<ul>\n<li>自动类型数据转换</li>\n<li>强制数据类型转换</li>\n</ul>\n<h4 id=\"强制数据类型转换\"><a href=\"#强制数据类型转换\" class=\"headerlink\" title=\"强制数据类型转换\"></a>强制数据类型转换</h4><p>NaN是JS里一个特殊值，和任何都不相等，连同自己</p>\n<p>​        typeof（）<strong>帮助查看数据类型</strong></p>\n<ul>\n<li><p>​    String（）</p>\n<ul>\n<li><p>ps：相当于将原数据外面加一个引号</p>\n</li>\n<li><p>负值转换也是负值的字符串</p>\n</li>\n</ul>\n</li>\n<li><p>​    Number（）</p>\n<ul>\n<li>**ps ** 当其他数据类型的数据不能转换为有效的数字类型时，则被转换为NaN</li>\n<li>Number(‘’)   或空串  -&gt;  0</li>\n<li>‘hello world’ -&gt; <strong>NaN</strong></li>\n<li>‘100 ‘ -&gt; 100</li>\n<li>‘a1’ -&gt; <strong>NaN</strong></li>\n<li>boolean true -&gt; 1</li>\n<li>boolean false -&gt; 0</li>\n</ul>\n</li>\n<li><p>​    Boolean（）</p>\n<ul>\n<li>ps:把其他数据类型转换为boolean</li>\n<li><strong>‘’ 空串 -&gt; false</strong></li>\n<li><strong>0 -&gt; false</strong></li>\n<li>1 -1 -&gt; true</li>\n<li><strong>null -&gt; false</strong></li>\n<li><strong>underfinded -&gt; false</strong></li>\n<li><strong>NaN -&gt; false</strong></li>\n<li><strong>false -&gt; false</strong></li>\n<li>boolean(null underfinded) -&gt; false</li>\n</ul>\n</li>\n</ul>\n<p><strong>适用于number</strong></p>\n<ul>\n<li>parseInt（）<ul>\n<li>ps：强制转换为整数</li>\n<li>还适用于将其他数据类型转换为整型</li>\n<li>s1 &#x3D; ‘abc123’ -&gt; NaN</li>\n<li>s2 &#x3D;’123abc’ -&gt; 123</li>\n</ul>\n</li>\n<li>parseFloat() 将其他数据类型转换成float<ul>\n<li>1.32a -&gt; 1.32</li>\n<li>‘1a’ -&gt; 1</li>\n</ul>\n</li>\n</ul>\n<p><strong>typeof</strong></p>\n<ol>\n<li>null object</li>\n<li>underfnded underfinded</li>\n</ol>\n<ul>\n<li>underfinded派生于null</li>\n</ul>\n<h4 id=\"自动类型转换\"><a href=\"#自动类型转换\" class=\"headerlink\" title=\"自动类型转换\"></a>自动类型转换</h4><ul>\n<li>数字 + 字符串 –&gt; 转换为字符串</li>\n<li>数字 - ‘数字字符串’  -&gt; 字符串转换成数字</li>\n<li>数字 *  ‘数字字符串’ -&gt; 字符串转换成数字</li>\n<li>数字 &#x2F;    ‘数字字符串’ -&gt; 字符串转化成数字</li>\n<li>Boolean和数字计算时（+-*&#x2F;），Boolean转换为数字</li>\n<li>字符串数字 + 布尔 -&gt;二者变换成字符串</li>\n<li>字符串数字 -*&#x2F; 布尔  -&gt; 都会变成数字</li>\n<li>字符串 + 布尔 -&gt; 二者都变成字符串</li>\n<li>字符串 -*&#x2F; 布尔 二者都变成Number</li>\n<li>任何值和NaN计算，结果都是NaN</li>\n<li>null 和 underfinded 都是 NaN</li>\n<li><strong>尽可能写程序时，把不可控的因素变成可控的，例如类型转换</strong>**</li>\n<li>自动类型转换调用的方法就是上面提到的三个方法，Number，String，Boolean</li>\n</ul>\n<p>ps：将数字以最快转换为空串 +’’</p>\n<h3 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h3><h4 id=\"除数不能为0-infinity\"><a href=\"#除数不能为0-infinity\" class=\"headerlink\" title=\"除数不能为0 infinity\"></a>除数不能为0 infinity</h4><h4 id=\"JS操作html和css修改标签样式、\"><a href=\"#JS操作html和css修改标签样式、\" class=\"headerlink\" title=\"JS操作html和css修改标签样式、\"></a>JS操作html和css修改标签样式、</h4><ol>\n<li><p>找到当前元素btna &#x3D;  getElementById(‘btn’)</p>\n</li>\n<li><p>触发事件 (确定事件三要素)</p>\n<ul>\n<li>事件：用户在浏览器中的一切动作<ul>\n<li>鼠标事件，键盘事件，文档事件</li>\n</ul>\n</li>\n<li>事件三要素 <ul>\n<li>事件源</li>\n<li>事件</li>\n<li>事件处理函数</li>\n</ul>\n</li>\n</ul>\n<p>btna.onclick &#x3D; function(){</p>\n<p>&#96;    &#x2F;&#x2F;处理的事情</p>\n<p>​    alert(‘…’)</p>\n<p>}</p>\n<ul>\n<li><strong>事件处理函数有无不影响事件的发生</strong></li>\n</ul>\n</li>\n</ol>\n<p><strong>eg</strong></p>\n<ul>\n<li>获取输入框中的内容<ul>\n<li>element.value</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用运算符\"><a href=\"#常用运算符\" class=\"headerlink\" title=\"常用运算符\"></a>常用运算符</h3><ul>\n<li>加</li>\n<li>减</li>\n<li>乘</li>\n<li>除</li>\n<li>求模&#x2F;取余 %</li>\n<li>++ – %&#x3D; </li>\n<li>&#x3D; !&#x3D; 值不等</li>\n<li>&#x3D;&#x3D; 值相等  !&#x3D;&#x3D; 值和类型其一(或）不等</li>\n<li>&#x3D;&#x3D;&#x3D; 值和类型都相等</li>\n<li>&lt; &gt; &lt;&#x3D; &gt;&#x3D;</li>\n<li>&amp;&amp; || !<ul>\n<li>短路问题</li>\n</ul>\n</li>\n</ul>\n<p>console.log(new Boolean(false))<br>Boolean {false}</p>\n<p>typeof(new Boolean(false))</p>\n<p>object</p>\n<p><strong><code>typeof(null)</code></strong><br><strong><code>&#39;object&#39;</code></strong><br><strong><code>typeof(underfinded)</code></strong><br><strong><code>&#39;undefined&#39;</code></strong><br><strong><code>typeof(NaN)</code></strong><br><strong>‘number’</strong></p>\n<p><strong>取反 先转换成布尔值再取反</strong></p>\n<p><strong>取反 取反 !!x  &#x3D; Boolean(x)</strong></p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>ps:&amp;&amp; 和 || 存在短路问题</p>\n<p>​    惰性面</p>\n<ol>\n<li>&amp;&amp;</li>\n<li>||</li>\n</ol>\n<p><strong>()改变运算符的优先级，里面存放都是表达式。</strong></p>\n<h3 id=\"栈和堆\"><a href=\"#栈和堆\" class=\"headerlink\" title=\"栈和堆\"></a>栈和堆</h3><p>栈区大小确定  -&gt; 基本数据类型不变 var b &#x3D; true</p>\n<p>堆区随需要可以扩容</p>\n<h3 id=\"JS-严格区分大小写\"><a href=\"#JS-严格区分大小写\" class=\"headerlink\" title=\"JS 严格区分大小写\"></a>JS 严格区分大小写</h3><h3 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h3><p>​    是一个数据类型，在Null这个类型只有一个值，就是null.</p>\n<ul>\n<li>​    <strong>表示一个空值，给空对象赋值</strong></li>\n</ul>\n<h3 id=\"Underfinded-1\"><a href=\"#Underfinded-1\" class=\"headerlink\" title=\"Underfinded\"></a>Underfinded</h3><p>​    是一个数据类型，在underfinded这个类型只有一个值，就是underfinded</p>\n<p>​    派生于Null</p>\n<ul>\n<li>​        <strong>null &#x3D;&#x3D; underfinded</strong></li>\n</ul>\n<h2 id=\"流程控制和循环\"><a href=\"#流程控制和循环\" class=\"headerlink\" title=\"流程控制和循环\"></a>流程控制和循环</h2><ul>\n<li>if<ul>\n<li>如果条件不是Boolean，则会强制转换为Boolean</li>\n</ul>\n</li>\n<li>if else<ul>\n<li>else if</li>\n<li>ps:嵌套过多降低代码可读性</li>\n</ul>\n</li>\n<li>switch</li>\n<li>三元</li>\n</ul>\n<p><strong>Dom操作</strong> -&gt; 看重执行顺序</p>\n<h4 id=\"swith\"><a href=\"#swith\" class=\"headerlink\" title=\"swith\"></a>swith</h4><p>switch(条件)</p>\n<p>{</p>\n<p>case’张三’:;</p>\n<p>case’张四’:;</p>\n<p>}</p>\n<p><strong>多个case共用一个代码块</strong></p>\n<p>case:    case 2:   … case n: 语句 ;  break</p>\n<p>break continue</p>\n<h4 id=\"switch展示结果不确定，switch保存数据\"><a href=\"#switch展示结果不确定，switch保存数据\" class=\"headerlink\" title=\"switch展示结果不确定，switch保存数据\"></a>switch展示结果不确定，switch保存数据</h4><p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20211130135105212.png\" alt=\"image-20211130135105212\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"title function_\">fuction</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input_value = input.<span class=\"property\">value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(input_value.<span class=\"property\">length</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;输入不能为空&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>trim() 去除两端的空格 – &gt; 字符串方法</strong></p>\n<p><strong>如果是一个长空串，则处理为空串</strong></p>\n<p><strong>isNaN  判断是否是NaN</strong></p>\n<p><strong>math.random()</strong></p>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><ul>\n<li>while</li>\n<li>do..while</li>\n<li>for</li>\n</ul>\n<p>random() 随机数函数</p>\n<p>return 函数使用</p>\n<p>continue</p>\n<p>break</p>\n<p><strong>var lis &#x3D; list.children</strong></p>\n<p><strong>获取list的children</strong></p>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><p>流程控制就是来控制我们的代码按照什么结构顺序来执行。</p>\n<p>流程控制主要有以下三种结构，分别是：</p>\n<p>（1）顺序结构</p>\n<p>（2）分支结构</p>\n<p>（3）循环结构</p>\n<p>顺序流程控制<br>顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行。<br>分支流程控制<br>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果。</p>\n<h3 id=\"1-if分支语句\"><a href=\"#1-if分支语句\" class=\"headerlink\" title=\"1.if分支语句\"></a>1.if分支语句</h3><p>&#x2F;&#x2F;if分支语句的语法结构如下：<br>&#x2F;&#x2F;条件成立执行代码，否则什么也不做<br>if(条件表达式){<br>    &#x2F;&#x2F;条件成立执行的代码语句<br>}</p>\n<h3 id=\"2-if-else双分支语句\"><a href=\"#2-if-else双分支语句\" class=\"headerlink\" title=\"2.if else双分支语句\"></a>2.if else双分支语句</h3><p>&#x2F;&#x2F;if else双分支语句的语法格式如下：<br>&#x2F;&#x2F;条件成立执行if里面的代码，否则执行else里面的代码<br>if(条件表达式){<br>  &#x2F;&#x2F;条件成立执行的代码<br>}else{<br>  &#x2F;&#x2F;条件不成立执行的代码<br>}</p>\n<h3 id=\"3-if-else-if多分支语句\"><a href=\"#3-if-else-if多分支语句\" class=\"headerlink\" title=\"3.if else if多分支语句\"></a>3.if else if多分支语句</h3><p>&#x2F;&#x2F;if else if多分支语句的语法格式如下：<br>&#x2F;&#x2F;适合检查多重条件<br>if(条件表达式1){<br>  语句1;<br>}else if(条件表达式2){<br>  语句2;<br>}else if(条件表达式3){<br>  语句3;<br>  …<br>}else{<br>  &#x2F;&#x2F;上述条件都不成立时执行此代码<br>}</p>\n<h3 id=\"4-三元表达式\"><a href=\"#4-三元表达式\" class=\"headerlink\" title=\"4.三元表达式\"></a>4.三元表达式</h3><p>由三元运算符组成的式子就称为三元表达式（因为三元表达式也是表达式，所以会有返回结果）。<br>&#x2F;&#x2F;三元不等式的语法机构如下：<br>条件表达式 ？ 表达式1 ： 表达式2;<br>&#x2F;&#x2F;如果条件表达式的结果为真，则返回表达式1点值；而如果条件表达式的结果为假，则返回表达式2的值。</p>\n<h3 id=\"5-switch语句\"><a href=\"#5-switch语句\" class=\"headerlink\" title=\"5.switch语句\"></a>5.switch语句</h3><p>switch语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用switch。<br>&#x2F;&#x2F;switch语句的语法格式如下：<br>switch(表达式){<br>  case value1:<br>    &#x2F;&#x2F;表达式等于value1时要执行的代码<br>    break;<br>  case value2:<br>    &#x2F;&#x2F;表达式等于value2时要执行的代码<br>    break;<br>  default:<br>    &#x2F;&#x2F;表达式不等于任何一个value值时要执行的代码<br>}</p>\n<p>switch语句中的条件表达式我们经常写成变量的形式。<br>表达式的值与value的值相匹配时，要求值和数据类型一致才算匹配成功。<br>如果当前case里面没有break，则不回退出switch语句，而是继续执行下一个case，直到遇到break或执行default语句才退出switch语句。</p>\n<h3 id=\"6-switch语句和if-else-if语句的区别\"><a href=\"#6-switch语句和if-else-if语句的区别\" class=\"headerlink\" title=\"6.switch语句和if else if语句的区别\"></a>6.switch语句和if else if语句的区别</h3><p>一般情况下，它们两个语句可以相互替换。<br>switch…case语句通常处理case为比较确定值的情况，而if…else…语句更加灵活，常用于范围判断（大于、等于某个范围）。<br>switch语句进行条件判断后直接执行到程序的条件语句，而if…else…语句有几种条件，就得判断几次（从上到下依次判断）。<br>当分支比较少时，if…else…语句的执行效率比switch语句更高。<br>当分支比较多时，switch语句的执行效率比if…else…语句更高，结构也更清晰。</p>\n<h2 id=\"循环流程控制\"><a href=\"#循环流程控制\" class=\"headerlink\" title=\"循环流程控制\"></a>循环流程控制</h2><p>目的：重复执行某些代码。</p>\n<p>在JS中，主要有以下三种类型的循环语句：</p>\n<p>（1）for循环</p>\n<p>（2）while循环</p>\n<p>（3）do…while循环</p>\n<h3 id=\"1-for循环\"><a href=\"#1-for循环\" class=\"headerlink\" title=\"1.for循环\"></a>1.for循环</h3><p>在程序中，一组被重复执行的语句被称为循环体，而能否继续重复执行，则取决于循环的终止条件。<br>循环语句是指由循环体和循环的终止条件造成的句子。<br>for循环主要用于把某些代码循环若干次，通常跟计数有关系。<br>&#x2F;&#x2F;for循环的语法结构如下：<br>for(初始化变量;条件表达式;操作表达式){<br>  &#x2F;&#x2F;循环体<br>}<br>&#x2F;&#x2F;初始化变量：其实就是用var声明一个普通的变量，并且这个变量通常是作为计数器使用。<br>&#x2F;&#x2F;条件表达式：用来决定每一次循环是否继续执行，也就是循环的终止条件。<br>&#x2F;&#x2F;操作表达式：每次循环最后执行的代码，经常用于更新计数器（递增或递减）。</p>\n<p>for循环可以重复执行相同的代码。<br>因为有计数器的存在，使用for循环可以重复执行不同代码。<br>for(var i &#x3D; 1; i &lt;&#x3D; 31; i++){<br>  console.log(‘今天是5月’+i+’日了！’);</p>\n<p>因为有计数器的存在，使用for循环可以重复执行某些操作，比如：算数运算。<br>var sum &#x3D; 0;<br>for(var i &#x3D; 1; i &lt;&#x3D; 10; i++){<br>  sum+&#x3D;i;<br>}<br>console.log(sum);</p>\n<p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构。像在一个for循环语句中， 再嵌套一个for循环，我们就称之为双重for循环。<br>for(var i &#x3D; 1; i &lt;&#x3D; 3; i++){<br>  console.log(‘这是第’+i+’次外层循环’);<br>  for(var j &#x3D; 1; j &lt;&#x3D; 3; j++){<br>    console.log(‘这是第’+i+’次里层循环’);<br>  }<br>}</p>\n<h3 id=\"2-while循环\"><a href=\"#2-while循环\" class=\"headerlink\" title=\"2.while循环\"></a>2.while循环</h3><p>while语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。<br>&#x2F;&#x2F;while语句的语法结构如下：<br>while(条件表达式){<br>  &#x2F;&#x2F;循环体代码<br>}</p>\n<h3 id=\"3-do-while循环\"><a href=\"#3-do-while循环\" class=\"headerlink\" title=\"3.do while循环\"></a>3.do while循环</h3><p>do…while语句其实是while语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。（do while循环语句至少执行一次循环体代码）<br>&#x2F;&#x2F;do while语句的语法结构如下：<br>do{<br>  &#x2F;&#x2F;循环体代码<br>}while(条件表达式);</p>\n<h3 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4.小结\"></a>4.小结</h3><p>三种循环在很多情况下都是可以相互替代使用的。<br>对于计数，三者的使用基本相同，但是更常用的还是for循环。<br>对于更复杂的判断条件，可以使用while和do while语句。</p>\n<p><strong>while语句是先判断后执行；而do while是先执行一次后判断执行。</strong></p>\n<h5 id=\"do-while-至少执行一次，while，for最少执行0次\"><a href=\"#do-while-至少执行一次，while，for最少执行0次\" class=\"headerlink\" title=\"do while 至少执行一次，while，for最少执行0次\"></a>do while 至少执行一次，while，for最少执行0次</h5><p>continue和break</p>\n<h4 id=\"1-continue关键字\"><a href=\"#1-continue关键字\" class=\"headerlink\" title=\"1.continue关键字\"></a>1.continue关键字</h4><p>continue关键字用于立即跳出本次循环，继续下一次循环（本次循环体中continue之后的代码就会少执行一次）。<br>var sum &#x3D; 0;<br>for(var i &#x3D; 1; i &lt;&#x3D; 100; i++){<br>  if(i % 7 &#x3D;&#x3D; 0){<br>    continue;<br>  }<br>  sum+&#x3D;i;<br>}<br>console.log(sum);</p>\n<h4 id=\"2-break关键字\"><a href=\"#2-break关键字\" class=\"headerlink\" title=\"2.break关键字\"></a>2.break关键字</h4><p>break关键字用于立即跳出整个循环。<br>for(var i &#x3D; 1; i &lt;&#x3D;5; i++){<br>  if(i &#x3D;&#x3D; 3){<br>    break;<br>  }<br>  console.log(‘这是第’+i+’个数！’);<br>}</p>\n<h3 id=\"…className-x3D-‘’-去掉类名\"><a href=\"#…className-x3D-‘’-去掉类名\" class=\"headerlink\" title=\"…className &#x3D; ‘’ 去掉类名\"></a>…className &#x3D; ‘’ 去掉类名</h3><p>data-XXX &#x3D;’’  html5自定义类型存数据</p>\n<p>getAttribute</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"使用情况\"><a href=\"#使用情况\" class=\"headerlink\" title=\"使用情况\"></a>使用情况</h4><ol>\n<li>一系列的值</li>\n<li>希望快速存储和取数据的时候</li>\n</ol>\n<ul>\n<li><p>在向数据中插入元素的时候，如果索引值不连续，就会形成空位</p>\n</li>\n<li><p>对于索引值不连续的数组，称之为稀疏数组</p>\n</li>\n<li><p>length 获取数组元素</p>\n</li>\n<li><p>length比索引值大1</p>\n</li>\n<li><p>PS ：如果length设置比其大，则后都是空位</p>\n<ul>\n<li>如果length设置比索引值小，则从后面清楚</li>\n<li>快速清空数组，arr.length &#x3D; 0</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p><strong>length失效****一</strong></p>\n<ul>\n<li><p>数组添加元素key不为数组，则不会被计算</p>\n</li>\n<li><p>arr[‘name’] &#x3D; ‘哈哈哈’ 计算数组长度的时候，当前元素失效</p>\n</li>\n<li><p>长度 &#x3D;&#x3D; 任然是最大索引值加1  只计算数字索引</p>\n</li>\n</ul>\n</li>\n<li><p><strong>length失效****一</strong></p>\n<ul>\n<li>arr[100] &#x3D; ‘hhh’&#x2F;</li>\n<li>console.log(arr.length) &#x2F;&#x2F;101</li>\n</ul>\n</li>\n</ol>\n<p>for可以以索引取字符串的值</p>\n<p><strong>字符串后面用方括号</strong></p>\n<p><strong>对象.属性（方法</strong></p>\n<p>数组. 后面只能是一个符合</p>\n<p><strong>对象[属性]  允许使用方括号解析属性</strong></p>\n<p><strong>obj 对象 有一个 hello 属性</strong></p>\n<p><strong>var a &#x3D; ‘hello’</strong></p>\n<p><strong>obj[a] –&gt; obj[‘hello]   js引擎将a解析为一个变量</strong></p>\n<p><strong>–数组是一种特殊的对象 key-value</strong></p>\n<p><strong>–特殊类型（凡是对象key都是字符串，）</strong></p>\n<ul>\n<li>​    <strong>数组的key看上去是一个number，实际上会给他转换为string</strong></li>\n<li><strong>一切皆对象，除了null和underfinded很多数据类型都对象的特点，有属性和方法，以key-value为结构，key的类型永远是字符串，调用属性的时候可以用点可以用方括号</strong></li>\n<li>数组的key可以为字符串</li>\n</ul>\n<h3 id=\"空位\"><a href=\"#空位\" class=\"headerlink\" title=\"空位\"></a>空位</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产生5个数组空位的数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = <span class=\"title class_\">Array</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同上3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [,<span class=\"number\">2</span>,,<span class=\"number\">3</span>,,]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//产生10个数组空位的数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = []</span><br><span class=\"line\">arr3.<span class=\"property\">length</span> = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组a[3]-a[9]都是数组空位</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">arr4[<span class=\"number\">10</span>] = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组arr[2]产生数组空位</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr5 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">delete</span> arr[<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数组的增删改查\"><a href=\"#数组的增删改查\" class=\"headerlink\" title=\"数组的增删改查\"></a>数组的增删改查</h4><ul>\n<li>delect[n] 通过delect删除元素会形成稀疏数组，形成空位（存在空位，索引值不连续</li>\n<li>arr[0] &#x3D;’xxx’</li>\n<li>console.log(arr[0])</li>\n</ul>\n<p>数组的空位可以访问，值为<strong>underfinded</strong></p>\n<p><strong>当数组为一个正常数组时，可以通过length来清楚数组（不存在索引值不为非数字的值</strong></p>\n<p>数组遍历优化或提高效率</p>\n<p>var len &#x3D; arr.length</p>\n<p>for(;i&lt;len)</p>\n<h2 id=\"api-接口方法\"><a href=\"#api-接口方法\" class=\"headerlink\" title=\"api (接口方法)\"></a>api (接口方法)</h2><ul>\n<li><p><strong>push向数组的最后插入一个元素</strong> push(a,b)一次可以添加多个值，unshift同</p>\n</li>\n<li><p><strong>arr.shift() 删除第一个数据元素，并返回给我们删除的元素</strong></p>\n</li>\n<li><p><strong>pop() 删除数组的最后一个元素，并且返回删除的最后一个元素</strong></p>\n</li>\n<li><p><strong>unshift() 向数组的最前方插入一个元素</strong></p>\n</li>\n<li><p>splice(索引值，删除数组元素的个数，插入的元素) 删除元素 替换元素 插入元素</p>\n<ul>\n<li>删除<ul>\n<li>arr.splice(1,1) 从索引一开始，删除一元素</li>\n<li>arr.splice(1,1,’xxx’) 。。。 替换一元素 值为xxx</li>\n<li>arr.splice(2,0,’xxx’) 在第三个位置插入xxx</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<p>所有的表单控件必须用value，初此之外必须使用，innerHtml,innerText</p>\n<p>resize:none  -&gt;删除textarea的可变  不让其影响其他元素</p>\n<p>dotted 虚线效果（solid）</p>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><ul>\n<li><p>find </p>\n</li>\n<li><p>findIndex</p>\n</li>\n<li><p>forEach</p>\n</li>\n</ul>\n<p>forEach(item,index)</p>\n<p>find可以返回当前元素所在的数组</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"对象（object）\"><a href=\"#对象（object）\" class=\"headerlink\" title=\"对象（object）\"></a>对象（object）</h3><h4 id=\"对象包含两种-属性和方法\"><a href=\"#对象包含两种-属性和方法\" class=\"headerlink\" title=\"对象包含两种 属性和方法\"></a>对象包含两种 <strong>属性和方法</strong></h4><h4 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h4><p>var obj &#x3D; {}</p>\n<ul>\n<li><p>添加元素</p>\n<p>obj[‘username’] &#x3D; ‘张三’   数组的key可以是数字或者字符串</p>\n<p>var str &#x3D; ’like‘</p>\n<p>obj[str] &#x3D; ‘电影’</p>\n<ul>\n<li>​    str 不加引号，可以作为变量被解析</li>\n<li>obj.age &#x3D;&#x3D;&#x3D; obj[‘age’]<ul>\n<li><strong>区别</strong>：方括号中可以解析变量，<strong>如上</strong></li>\n</ul>\n</li>\n<li><strong>对象.一定是字符串</strong><ul>\n<li>obj.str str默认为字符串</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方法的写法</p>\n<ul>\n<li><p>obj[‘say’] &#x3D; function(){</p>\n<p>….}</p>\n</li>\n<li><p>对象中的方法需要手动调用</p>\n</li>\n</ul>\n</li>\n<li><p>添加属性和方法</p>\n<ul>\n<li><p>&#96;&#96;&#96;js<br>&#x2F;&#x2F;创建对象时添加内容，一定采用key-value的形式</p>\n<ul>\n<li><ul>\n<li>var obj &#x3D; {<br>}</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 变量名和对象名相同，需要在变量的外部加一个方括号</span><br><span class=\"line\"></span><br><span class=\"line\">    - [str]:&#x27;值&#x27;，</span><br><span class=\"line\"></span><br><span class=\"line\">- **key值的设定需要符合标识符命名规则**</span><br><span class=\"line\"></span><br><span class=\"line\">- 对象的方法里面如何使用对象的属性和方法 （this代表事件源）</span><br><span class=\"line\"></span><br><span class=\"line\">  - this放在对象的方法中，即指向该对象</span><br><span class=\"line\"></span><br><span class=\"line\">- 向对象中添加属性和方法 </span><br><span class=\"line\"></span><br><span class=\"line\">  - obj.a = &#x27;&#x27;;</span><br><span class=\"line\">  - obj.c = function()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- 删除数组 中的属性和方法</span><br><span class=\"line\"></span><br><span class=\"line\">  - delece obj.a;</span><br><span class=\"line\">  - object obj[&#x27;&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">- 取或调用数组中的属性和方法</span><br><span class=\"line\"></span><br><span class=\"line\">- 遍历对象</span><br><span class=\"line\"></span><br><span class=\"line\">  - ​\t`for(var key in obj)&#123;`</span><br><span class=\"line\"></span><br><span class=\"line\">    ​\t`console.log(obj[key])`</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- 1</span><br><span class=\"line\"></span><br><span class=\"line\">### 对象和数组进行比较</span><br><span class=\"line\"></span><br><span class=\"line\">1. //数组时有序的，对象是无序的</span><br><span class=\"line\">2. 数组的key必须是number 对象的key是字符串，数组是一种特殊的对象，虽然数组的key是number，但在解析时，会被自动转换成字符串</span><br><span class=\"line\">3. 数组操作元素只能[]对象，对象可以通过  .  和 []</span><br><span class=\"line\">4. 数组的遍历可以使用foreach，for ，for in，对象只能使用for in</span><br><span class=\"line\">5. 当key值重复时，value会发生覆盖</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 对象方法Object.keys(object)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 函数</span><br><span class=\"line\"></span><br><span class=\"line\">##### 定义 ：一段代码的集合体</span><br><span class=\"line\"></span><br><span class=\"line\">特点：不调用时为静止片段，不调用不执行。减少工作量</span><br><span class=\"line\"></span><br><span class=\"line\">#### 创建函数的方式</span><br><span class=\"line\"></span><br><span class=\"line\">1. function 函数名()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   语句；</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2. 函数表达式</span><br><span class=\"line\"></span><br><span class=\"line\">   - var 。。。 = function    在js中，函数地位和基础数据类型相同，数据能做什么，函数就能做什么</span><br><span class=\"line\"></span><br><span class=\"line\">   var 变量 = function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   ​\t语句；</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   - ​\t将函数放在函数的右边，js引擎就会把函数理解为一个表达式</span><br><span class=\"line\">   - 一般来说说，表达式都放在等号的右边</span><br><span class=\"line\"></span><br><span class=\"line\">3. var fn = new function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 函数名</span><br><span class=\"line\"></span><br><span class=\"line\">理解为变量名  -&gt; 符合标识符命名规则</span><br><span class=\"line\"></span><br><span class=\"line\">- ​\t给函数起名字时，不要首字母大小，</span><br><span class=\"line\">  - 凡是大写字母开头都是构造函数</span><br><span class=\"line\">- 形参和实参</span><br><span class=\"line\">  - 形参：理解为只能用在内部的变量</span><br><span class=\"line\">    - 调用函数的时候给形参赋值，即实参赋值给形参</span><br><span class=\"line\">  - 实参：</span><br><span class=\"line\">  - ps：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 返回值</span><br><span class=\"line\"></span><br><span class=\"line\">需求:通过add函数计算出100+200的值，然后通过msg函数结果以弹窗将结果以弹窗的形式弹出</span><br><span class=\"line\"></span><br><span class=\"line\">- 将函数处理后的结果在函数外拿到</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### callback回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">把函数当参数传递给另一个函数</span><br><span class=\"line\"></span><br><span class=\"line\">##### 没有名字的函数叫匿名函数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1. 函数创建方式：</span><br><span class=\"line\">   1. `function`关键字 </span><br><span class=\"line\">   2. 函数表达式</span><br><span class=\"line\">   3. 构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 通过函数表达式创建的函数不能提前使用。因为函数表达式的创建形式相当于是把一个匿名函数赋值给了变量，虽然变量和函数都会提升，但是赋值的操作不会提升。所以也就不能提前使用函数。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 不管是变量也好还是函数也好，提升终归不是一个好的事情，所以对于程序员来说，知道这个规则但是我们尽量不去使用。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">// 尽量不在函数体之前使用函数</span><br><span class=\"line\">fn1();</span><br><span class=\"line\">function fn1() &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>函数名<ol>\n<li>函数的命名遵守标识符的规则</li>\n<li>尽量不要首字母大写，因为在js中首字母大写是属于构造函数(class类)</li>\n</ol>\n</li>\n<li>函数的参数<ol>\n<li>形参(创建函数时，函数名之后的括号里放的就是形参列表)</li>\n<li>实参(调用函数时，函数名后面的括号放的就是实参列表)</li>\n</ol>\n</li>\n</ol>\n<p>​    关于形参和实参：</p>\n<ol>\n<li><p>形参的个数多于实参的个数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a,b,c</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>); </span><br></pre></td></tr></table></figure>\n\n<p>多余的形参值是undefined。</p>\n<blockquote>\n<p>完全可以把形参理解为js中的变量，只不过这个变量只能用在函数中，而实参其实就是给这个变量赋值。</p>\n<p>如果实参的个数少于形参，那就会出现多余的形参没有被赋值，自然结果就和未赋值的变量相同。</p>\n</blockquote>\n</li>\n<li><p>实参的个数多余形参的个数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a,b</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n\n<p>当实参的个数多于形参的个数时，想要找到多余的实参，可以利用arguments(js提供的专门在函数当中使用的类数组对象)。</p>\n<p>可以通过arguments.length获取实参的个数。</p>\n<p>可以通过arguments.callee.length 获取形参的个数。</p>\n</li>\n<li><p>函数返回值</p>\n<p>js的函数一旦创建完毕，那么就会在内存中停留但是不会被执行，只有函数调用的时候，函数代码才会执行。在执行的过程中如果碰到了return，那么函数就会立刻停止执行。</p>\n<p>在一个函数中，同一时刻有且仅有一个return可以生效。</p>\n<p>return只能返回一个值。</p>\n</li>\n</ol>\n<hr>\n<ol>\n<li><p>作用域和变量</p>\n<ol>\n<li>作用域：代码生效的范围。</li>\n</ol>\n<p>在es5当中，作用域只有两个：</p>\n<ol>\n<li>全局作用域：整个script存在的空间</li>\n<li>函数作用域：函数内部的空间</li>\n</ol>\n</li>\n</ol>\n<p>既然存在两个作用域，那么对应的在不同作用域下声明的变量，也就有了不同的称呼：</p>\n<ul>\n<li>全局变量(在全局作用域下声明的变量，生效范围全局)</li>\n<li>局部变量(在函数内部声明的变量，生效范围仅限于函数的内部)</li>\n</ul>\n<ol start=\"2\">\n<li><p>作用域链</p>\n<p><em>由小范围的作用域不断向上延申扩展最终形成的一系列作用域，称之为作用域链。</em></p>\n</li>\n<li><p>生命周期和垃圾回收机制</p>\n</li>\n<li><p>闭包函数</p>\n<ol>\n<li>在函数内部将一个函数当作返回值返回，这样的函数结构称之为闭包函数。</li>\n<li>特点：返回的函数可以任意的通过作用域链拿到上一层函数的值。<ol>\n<li>会将状态保存，并不会在函数执行完毕之后销毁函数内部的变量。</li>\n</ol>\n</li>\n<li>缺点：不会及时的被销毁。</li>\n</ol>\n</li>\n<li><p>回调函数</p>\n<p>函数在js中是一等公民，所以基础数据类型能干的事，函数也可以干。</p>\n<p>所以就可以拿函数当作一个参数传递给另外一个函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsq</span>(<span class=\"params\">num1, num2, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(num1, num2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>递归函数</p>\n<p>所谓的递归函数就是在函数体内调用本函数。</p>\n</li>\n<li><p>IIFE</p>\n</li>\n</ol>\n<h3 id=\"闭包函数\"><a href=\"#闭包函数\" class=\"headerlink\" title=\"闭包函数\"></a>闭包函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> temp = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"title function_\">demo</span>();</span><br><span class=\"line\"><span class=\"comment\">// 凡是多个函数嵌套，里面的函数都保存到了外部函数的外部（即外部)里面函数在执行时，可以继续访问外部函数未销毁之前外部变量函数的变量，且不会报错</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//经典闭包案例</span></span><br><span class=\"line\"><span class=\"comment\">//闭包里面的匿名函数，先不去找i的值，仅仅先创建了10个闭包函数，最后执行完循环，i=10不满足条件，然后执行这些闭包函数</span></span><br><span class=\"line\"><span class=\"comment\">//    此时再来找i的值，i的值未10，最终结果为10个10</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tarr[i] = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t\t\tdocumen.<span class=\"title function_\">write</span>(i+<span class=\"string\">&#x27; &#x27;</span>);\t</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myArr = <span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt; <span class=\"number\">10</span>;j++)&#123;</span><br><span class=\"line\">\tmyArr[j]();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;            <span class=\"keyword\">var</span> divall = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);            divall.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;noteSome&#x27;</span>);            divall.<span class=\"property\">innerHTML</span> = <span class=\"title function_\">getModule</span>(arr[i].<span class=\"property\">ipt_value</span>, arr[i].<span class=\"property\">text_value</span>, arr[i].<span class=\"property\">time</span>, arr[i].<span class=\"property\">note_id</span>)            artile.<span class=\"title function_\">append</span>(divall);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><h4 id=\"1-获取字符串长度\"><a href=\"#1-获取字符串长度\" class=\"headerlink\" title=\"1. 获取字符串长度\"></a>1. 获取字符串长度</h4><p>JavaScript中的字符串有一个length属性，该属性可以用来获取字符串的长度：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;hello&#x27;</span>;str.<span class=\"property\">length</span>   <span class=\"comment\">// 输出结果：5复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-获取字符串指定位置的值\"><a href=\"#2-获取字符串指定位置的值\" class=\"headerlink\" title=\"2. 获取字符串指定位置的值\"></a>2. 获取字符串指定位置的值</h4><p>charAt()和charCodeAt()方法都可以通过索引来获取指定位置的值：</p>\n<ul>\n<li>charAt() 方法获取到的是指定位置的字符；</li>\n<li>charCodeAt()方法获取的是指定位置字符的Unicode值。</li>\n</ul>\n<h4 id=\"（1）charAt\"><a href=\"#（1）charAt\" class=\"headerlink\" title=\"（1）charAt()\"></a>（1）charAt()</h4><p>charAt() 方法可以返回指定位置的字符。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">charAt</span>(index)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>index表示字符在字符串中的索引值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">charAt</span>(<span class=\"number\">1</span>)  <span class=\"comment\">// 输出结果：e </span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>我们知道，字符串也可以通过索引值来直接获取对应字符，那它和charAt()有什么区别呢？来看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">charAt</span>(<span class=\"number\">1</span>)  <span class=\"comment\">// 输出结果：e </span></span><br><span class=\"line\">str[<span class=\"number\">1</span>]         <span class=\"comment\">// 输出结果：e </span></span><br><span class=\"line\">str.<span class=\"title function_\">charAt</span>(<span class=\"number\">5</span>)  <span class=\"comment\">// 输出结果：&#x27;&#x27; </span></span><br><span class=\"line\">str[<span class=\"number\">5</span>]         <span class=\"comment\">// 输出结果：undefined</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当index的取值不在str的长度范围内时，str[index]会返回undefined，而charAt(index)会返回空字符串；除此之外，str[index]不兼容ie6-ie8，charAt(index)可以兼容。</p>\n<h4 id=\"（2）charCodeAt\"><a href=\"#（2）charCodeAt\" class=\"headerlink\" title=\"（2）charCodeAt()\"></a>（2）charCodeAt()</h4><p><code>charCodeAt()</code>：该方法会返回指定索引位置字符的 Unicode 值，返回值是 0 - 65535 之间的整数，表示给定索引处的 UTF-16 代码单元，如果指定位置没有字符，将返回 <strong>NaN</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefg&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// &quot;b&quot; --&gt; 98</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>通过这个方法，可以获取字符串中指定Unicode编码值范围的字符。比如，数字0～9的Unicode编码范围是: 48～57，可以通过这个方法来筛选字符串中的数字，当然如果你更熟悉正则表达式，会更方便。</p>\n<h4 id=\"3-检索字符串是否包含特定序列\"><a href=\"#3-检索字符串是否包含特定序列\" class=\"headerlink\" title=\"3. 检索字符串是否包含特定序列\"></a>3. 检索字符串是否包含特定序列</h4><p>这5个方法都可以用来检索一个字符串中是否包含特定的序列。其中前两个方法得到的指定元素的索引值，并且只会返回第一次匹配到的值的位置。后三个方法返回的是布尔值，表示是否匹配到指定的值。</p>\n<p>注意：这5个方法都对大小写敏感！</p>\n<h4 id=\"（1）indexOf\"><a href=\"#（1）indexOf\" class=\"headerlink\" title=\"（1）indexOf()\"></a>（1）indexOf()</h4><p><code>indexOf()</code>：查找某个字符，<strong>有则返回第一次匹配到的位置</strong>，否则返回-1，其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">indexOf</span>(searchvalue,fromindex)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>searchvalue：必需，规定需检索的字符串值；</li>\n<li>fromindex：可选的整数参数，规定在字符串中开始检索的位置。它的合法取值是 0 到 string.length - 1。如省略该，则从字符串的首字符开始检索。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefgabc&quot;</span>;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;a&quot;</span>));   <span class=\"comment\">// 输出结果：0console.log(str.indexOf(&quot;z&quot;));   // 输出结果：-1console.log(str.indexOf(&quot;c&quot;, 4)) // 输出结果：9复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）lastIndexOf\"><a href=\"#（2）lastIndexOf\" class=\"headerlink\" title=\"（2）lastIndexOf()\"></a>（2）lastIndexOf()</h4><p><code>lastIndexOf()</code>：查找某个字符，有则返回最后一次匹配到的位置，否则返回-1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcabc&quot;</span>;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&quot;a&quot;</span>));  <span class=\"comment\">// 输出结果：3console.log(str.lastIndexOf(&quot;z&quot;));  // 输出结果：-1复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>该方法和indexOf()类似，只是查找的顺序不一样，indexOf()是正序查找，lastIndexOf()是逆序查找。</p>\n<h4 id=\"（3）includes\"><a href=\"#（3）includes\" class=\"headerlink\" title=\"（3）includes()\"></a>（3）includes()</h4><p><code>includes()</code>：该方法用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 true，否则返回 false。该方法的语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">includes</span>(searchvalue, start)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>searchvalue：必需，要查找的字符串；</li>\n<li>start：可选，设置从那个位置开始查找，默认为 0。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;Hello world!&#x27;</span>;str.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;o&#x27;</span>)  <span class=\"comment\">// 输出结果：truestr.includes(&#x27;z&#x27;)  // 输出结果：falsestr.includes(&#x27;e&#x27;, 2)  // 输出结果：false复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（4）startsWith\"><a href=\"#（4）startsWith\" class=\"headerlink\" title=\"（4）startsWith()\"></a>（4）startsWith()</h4><p><code>startsWith()</code>：该方法用于检测字符串<strong>是否以指定的子字符串开始</strong>。如果是以指定的子字符串开头返回 true，否则 false。其语法和上面的includes()方法一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;Hello world!&#x27;</span>;str.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"comment\">// 输出结果：truestr.startsWith(&#x27;Helle&#x27;) // 输出结果：falsestr.startsWith(&#x27;wo&#x27;, 6) // 输出结果：true复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（5）endsWith\"><a href=\"#（5）endsWith\" class=\"headerlink\" title=\"（5）endsWith()\"></a>（5）endsWith()</h4><p><code>endsWith()</code>：该方法用来判断当前字符串<strong>是否是以指定的子字符串结尾</strong>。如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">endsWith</span>(searchvalue, length)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>searchvalue：必需，要搜索的子字符串；</li>\n<li>length： 设置字符串的长度，默认值为原始字符串长度 string.length。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;Hello world!&#x27;</span>;str.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;!&#x27;</span>)       <span class=\"comment\">// 输出结果：truestr.endsWith(&#x27;llo&#x27;)     // 输出结果：falsestr.endsWith(&#x27;llo&#x27;, 5)  // 输出结果：true复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<strong>当第二个参数设置为5时，就会从字符串的前5个字符中进行检索，所以会返回true。</strong></p>\n<h4 id=\"4-连接多个字符串\"><a href=\"#4-连接多个字符串\" class=\"headerlink\" title=\"4. 连接多个字符串\"></a>4. 连接多个字符串</h4><p>concat() 方法用于连接两个或多个字符串。该方法不会改变原有字符串，会返回连接两个或多个字符串的新字符串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">concat</span>(string1, string2, ..., stringX)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>其中参数 string1, string2, …, stringX 是必须的，他们将被连接为一个字符串的一个或多个字符串对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abc&quot;</span>;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">concat</span>(<span class=\"string\">&quot;efg&quot;</span>));          <span class=\"comment\">//输出结果：&quot;abcefg&quot;console.log(str.concat(&quot;efg&quot;,&quot;hijk&quot;)); //输出结果：&quot;abcefghijk&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然concat()方法是专门用来拼接字符串的，但是在开发中使用最多的还是加操作符+，因为其更加简单。</p>\n<h4 id=\"5-字符串分割成数组\"><a href=\"#5-字符串分割成数组\" class=\"headerlink\" title=\"5. 字符串分割成数组\"></a>5. 字符串分割成数组</h4><p>split() 方法用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">split</span>(separator,limit)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>separator：必需。字符串或正则表达式，从该参数指定的地方分割 string。</li>\n<li>limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;c&quot;</span>);    <span class=\"comment\">// 输出结果：[&quot;ab&quot;, &quot;def&quot;]</span></span><br><span class=\"line\">str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"number\">4</span>)   <span class=\"comment\">// 输出结果：[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] </span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果把空字符串用作 separator，那么字符串中的每个字符之间都会被分割。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>);     <span class=\"comment\">// 输出结果：[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>其实在将字符串分割成数组时，可以同时拆分多个分割符，使用正则表达式即可实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"string\">&quot;apples,bananas;cherries&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = list.<span class=\"title function_\">split</span>(<span class=\"regexp\">/[,;]/</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fruits);  <span class=\"comment\">// 输出结果：[&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;]</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-截取字符串\"><a href=\"#6-截取字符串\" class=\"headerlink\" title=\"6. 截取字符串\"></a>6. 截取字符串</h4><p>substr()、substring()和 slice() 方法都可以用来截取字符串。</p>\n<h4 id=\"（1）-slice\"><a href=\"#（1）-slice\" class=\"headerlink\" title=\"（1） slice()\"></a>（1） slice()</h4><p>slice() 方法用于提取字符串的某个部分，并以新的字符串返回被提取的部分。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">slice</span>(start,end)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>start：必须。 要截取的片断的起始下标，第一个字符位置为 0。如果为负数，则从尾部开始截取。</li>\n<li>end：可选。 要截取的片段结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</li>\n</ul>\n<p>上面说了，如果start是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefg&quot;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>,<span class=\"number\">6</span>);   <span class=\"comment\">// 输出结果：&quot;bcdef&quot; </span></span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);     <span class=\"comment\">// 输出结果：&quot;bcdefg&quot; </span></span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>();      <span class=\"comment\">// 输出结果：&quot;abcdefg&quot; </span></span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>(-<span class=\"number\">2</span>);    <span class=\"comment\">// 输出结果：&quot;fg&quot;</span></span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>(<span class=\"number\">6</span>, <span class=\"number\">1</span>);  <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>注意，该方法返回的子串<strong>包括开始处的字符</strong>，但<strong>不包括结束处的字符</strong>。</p>\n<h4 id=\"（2）-substr\"><a href=\"#（2）-substr\" class=\"headerlink\" title=\"（2） substr()\"></a>（2） substr()</h4><p>substr() 方法用于在字符串中抽取从开始下标开始的指定数目的字符。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">substr</span>(start,length)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>start    必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</li>\n<li>length：可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefg&quot;</span>;str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>,<span class=\"number\">6</span>); <span class=\"comment\">// 输出结果：&quot;bcdefg&quot;</span></span><br><span class=\"line\">str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>);   <span class=\"comment\">// 输出结果：&quot;bcdefg&quot; 相当于截取[1,str.length-1]</span></span><br><span class=\"line\">str.<span class=\"title function_\">substr</span>();    <span class=\"comment\">// 输出结果：&quot;abcdefg&quot; 相当于截取[0,str.length-1]</span></span><br><span class=\"line\">str.<span class=\"title function_\">substr</span>(-<span class=\"number\">1</span>);  <span class=\"comment\">// 输出结果：&quot;g&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）-substring\"><a href=\"#（3）-substring\" class=\"headerlink\" title=\"（3） substring()\"></a>（3） substring()</h4><p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">substring</span>(<span class=\"keyword\">from</span>, to)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>from：必需。一个非负的整数，规定要提取的子串的第一个字符在 string 中的位置。</li>\n<li>to：可选。一个非负的整数，比要提取的子串的最后一个字符在 string 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。</li>\n</ul>\n<p><strong>注意：</strong> 如果参数 from 和 to 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 from 比 to 大，那么该方法在提取子串之前会先交换这两个参数。并且该方法不接受负的参数，如果参数是个负数，就会返回这个字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefg&quot;</span>;str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>,<span class=\"number\">6</span>); <span class=\"comment\">// 输出结果：&quot;bcdef&quot; [1,6)</span></span><br><span class=\"line\"> str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>);   <span class=\"comment\">// 输出结果：&quot;bcdefg&quot;[1,str.length-1]</span></span><br><span class=\"line\">str.<span class=\"title function_\">substring</span>();    <span class=\"comment\">// 输出结果：&quot;abcdefg&quot; [0,str.length-1]</span></span><br><span class=\"line\">str.<span class=\"title function_\">substring</span>(<span class=\"number\">6</span>,<span class=\"number\">1</span>); <span class=\"comment\">// 输出结果 &quot;bcdef&quot; [1,6)</span></span><br><span class=\"line\">str.<span class=\"title function_\">substring</span>(-<span class=\"number\">1</span>);  <span class=\"comment\">// 输出结果：&quot;abcdefg&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，该方法返回的子串<strong>包括开始处的字符</strong>，但<strong>不包括结束处的字符</strong>。</p>\n<h4 id=\"7-字符串大小写转换\"><a href=\"#7-字符串大小写转换\" class=\"headerlink\" title=\"7. 字符串大小写转换\"></a>7. 字符串大小写转换</h4><p>toLowerCase() 和 toUpperCase()方法可以用于字符串的大小写转换。</p>\n<h4 id=\"（1）toLowerCase\"><a href=\"#（1）toLowerCase\" class=\"headerlink\" title=\"（1）toLowerCase()\"></a>（1）toLowerCase()</h4><p><code>toLowerCase()</code>：该方法用于把字符串转换为小写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;adABDndj&quot;</span>;str.<span class=\"title function_\">toLowerCase</span>(); <span class=\"comment\">// 输出结果：&quot;adabdndj&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）toUpperCase\"><a href=\"#（2）toUpperCase\" class=\"headerlink\" title=\"（2）toUpperCase()\"></a>（2）toUpperCase()</h4><p><code>toUpperCase()</code>：该方法用于把字符串转换为大写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;adABDndj&quot;</span>;str.<span class=\"title function_\">toUpperCase</span>(); <span class=\"comment\">// 输出结果：&quot;ADABDNDJ&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以用这个方法来将字符串中第一个字母变成大写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> word = <span class=\"string\">&#x27;apple&#x27;</span></span><br><span class=\"line\">word = word[<span class=\"number\">0</span>].<span class=\"title function_\">toUpperCase</span>() + word.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(word) <span class=\"comment\">// 输出结果：&quot;Apple&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-字符串模式匹配\"><a href=\"#8-字符串模式匹配\" class=\"headerlink\" title=\"8. 字符串模式匹配\"></a>8. 字符串模式匹配</h4><p>replace()、match()和search()方法可以用来匹配或者替换字符。</p>\n<h4 id=\"（1）replace\"><a href=\"#（1）replace\" class=\"headerlink\" title=\"（1）replace()\"></a>（1）replace()</h4><p><code>replace()</code>：该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">replace</span>(searchvalue, newvalue)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>searchvalue：必需。规定子字符串或要替换的模式的 RegExp 对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</li>\n<li>newvalue：必需。一个字符串值。规定了替换文本或生成替换文本的函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;z&quot;</span>) <span class=\"comment\">// 输出结果：abzdef</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>执行一个全局替换, 忽略大小写:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">&quot;Mr Blue has a blue house and a blue car&quot;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/blue/gi</span>, <span class=\"string\">&quot;red&quot;</span>);    <span class=\"comment\">// 输出结果：&#x27;Mr red has a red house and a red car&#x27;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> 如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。</p>\n<h4 id=\"（2）match\"><a href=\"#（2）match\" class=\"headerlink\" title=\"（2）match()\"></a>（2）match()</h4><p><code>match()</code>：该方法用于在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">match</span>(regexp)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法的参数 regexp 是必需的，规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>\n<p><strong>注意：</strong> 该方法返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">match</span>(<span class=\"string\">&quot;c&quot;</span>)) <span class=\"comment\">// [&quot;c&quot;, index: 2, input: &quot;abcdef&quot;, groups: undefined]</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）search\"><a href=\"#（3）search\" class=\"headerlink\" title=\"（3）search()\"></a>（3）search()</h4><p><code>search()</code>方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">search</span>(searchvalue)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法的参数 regex 可以是需要在 string 中检索的子串，也可以是需要检索的 RegExp 对象。</p>\n<p><strong>注意：</strong> 要执行忽略大小写的检索，请追加标志 i。该方法不执行全局匹配，它将忽略标志 g，也就是只会返回第一次匹配成功的结果。如果没有找到任何匹配的子串，则返回 -1。</p>\n<p><strong>返回值：</strong> 返回 str 中第一个与 regexp 相匹配的子串的起始位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span>;str.<span class=\"title function_\">search</span>(<span class=\"regexp\">/bcd/</span>)   <span class=\"comment\">// 输出结果：1复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-移除字符串收尾空白符\"><a href=\"#9-移除字符串收尾空白符\" class=\"headerlink\" title=\"9. 移除字符串收尾空白符\"></a>9. 移除字符串收尾空白符</h4><p>trim()、trimStart()和trimEnd()这三个方法可以用于移除字符串首尾的头尾空白符，空白符包括：空格、制表符 tab、换行符等其他空白符等。</p>\n<h4 id=\"（1）trim\"><a href=\"#（1）trim\" class=\"headerlink\" title=\"（1）trim()\"></a>（1）trim()</h4><p>trim() 方法用于移除字符串首尾空白符，该方法不会改变原始字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;  abcdef  &quot;</span>str.<span class=\"title function_\">trim</span>()    <span class=\"comment\">// 输出结果：&quot;abcdef&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，该方法不适用于null、undefined、Number类型。</p>\n<h4 id=\"（2）trimStart\"><a href=\"#（2）trimStart\" class=\"headerlink\" title=\"（2）trimStart()\"></a>（2）trimStart()</h4><p>trimStart() 方法的的行为与<code>trim()</code>一致，不过会返回一个<strong>从原始字符串的开头删除了空白的新字符串</strong>，不会修改原始字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">&#x27;  abc  &#x27;</span>;s.<span class=\"title function_\">trimStart</span>()   <span class=\"comment\">// &quot;abc  &quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）trimEnd\"><a href=\"#（3）trimEnd\" class=\"headerlink\" title=\"（3）trimEnd()\"></a>（3）trimEnd()</h4><p>trimEnd() 方法的的行为与<code>trim()</code>一致，不过会返回一个<strong>从原始字符串的结尾删除了空白的新字符串</strong>，不会修改原始字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">&#x27;  abc  &#x27;</span>;s.<span class=\"title function_\">trimEnd</span>()   <span class=\"comment\">// &quot;  abc&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-获取字符串本身\"><a href=\"#10-获取字符串本身\" class=\"headerlink\" title=\"10. 获取字符串本身\"></a>10. 获取字符串本身</h4><p>valueOf()和toString()方法都会返回字符串本身的值，感觉用处不大。</p>\n<h4 id=\"（1）valueOf\"><a href=\"#（1）valueOf\" class=\"headerlink\" title=\"（1）valueOf()\"></a>（1）valueOf()</h4><p><code>valueOf()</code>：返回某个字符串对象的原始值，该方法通常由 JavaScript 自动进行调用，而不是显式地处于代码中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// &quot;abcdef&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）toString\"><a href=\"#（2）toString\" class=\"headerlink\" title=\"（2）toString()\"></a>（2）toString()</h4><p><code>toString()</code>：返回字符串对象本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// &quot;abcdef&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-重复一个字符串\"><a href=\"#11-重复一个字符串\" class=\"headerlink\" title=\"11. 重复一个字符串\"></a>11. 重复一个字符串</h4><p>repeat() 方法返回一个新字符串，表示将原字符串重复n次：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">3</span>)     <span class=\"comment\">// 输出结果：&quot;xxx&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 输出结果：&quot;hellohello&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">0</span>)    <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数是小数，会向下取整：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">2.9</span>) <span class=\"comment\">// 输出结果：&quot;nana&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数是负数或者Infinity，会报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"title class_\">Infinity</span>)   <span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(-<span class=\"number\">1</span>)         <span class=\"comment\">// RangeError</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(-<span class=\"number\">0.9</span>)   <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数是NaN，就等同于 0：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"title class_\">NaN</span>)    <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果repeat的参数是字符串，则会先转换成数字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"string\">&#x27;na&#x27;</span>)   <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"string\">&#x27;3&#x27;</span>)    <span class=\"comment\">// 输出结果：&quot;nanana&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-补齐字符串长度\"><a href=\"#12-补齐字符串长度\" class=\"headerlink\" title=\"12. 补齐字符串长度\"></a>12. 补齐字符串长度</h4><p>padStart()和padEnd()方法用于补齐字符串的长度。如果某个字符串不够指定长度，会在头部或尾部补全。</p>\n<h4 id=\"（1）padStart\"><a href=\"#（1）padStart\" class=\"headerlink\" title=\"（1）padStart()\"></a>（1）padStart()</h4><p><code>padStart()</code>用于头部补全。该方法有两个参数，其中第一个参数是一个数字，表示字符串补齐之后的长度；第二个参数是用来补全的字符串。 </p>\n<p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;ab&#x27;</span>) <span class=\"comment\">// &#x27;x&#x27;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">5</span>, <span class=\"string\">&#x27;ab&#x27;</span>) <span class=\"comment\">// &#x27;ababx&#x27;&#x27;x&#x27;.padStart(4, &#x27;ab&#x27;) // &#x27;abax&#x27;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>如果省略第二个参数，默认使用空格补全长度：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">4</span>) <span class=\"comment\">// &#x27;   x&#x27;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>padStart()的常见用途是为数值补全指定位数，笔者最近做的一个需求就是将返回的页数补齐为三位，比如第1页就显示为001，就可以使用该方法来操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;1&quot;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">3</span>, <span class=\"string\">&#x27;0&#x27;</span>)   <span class=\"comment\">// 输出结果： &#x27;001&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;15&quot;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">3</span>, <span class=\"string\">&#x27;0&#x27;</span>)  <span class=\"comment\">// 输出结果： &#x27;015&#x27;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）padEnd\"><a href=\"#（2）padEnd\" class=\"headerlink\" title=\"（2）padEnd()\"></a>（2）padEnd()</h4><p><code>padEnd()</code>用于尾部补全。该方法也是接收两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padEnd</span>(<span class=\"number\">5</span>, <span class=\"string\">&#x27;ab&#x27;</span>) <span class=\"comment\">// &#x27;xabab&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padEnd</span>(<span class=\"number\">4</span>, <span class=\"string\">&#x27;ab&#x27;</span>) <span class=\"comment\">// &#x27;xaba&#x27;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-字符串转为数字\"><a href=\"#13-字符串转为数字\" class=\"headerlink\" title=\"13. 字符串转为数字\"></a>13. 字符串转为数字</h4><p>parseInt()和parseFloat()方法都用于将字符串转为数字。</p>\n<h4 id=\"（1）parseInt\"><a href=\"#（1）parseInt\" class=\"headerlink\" title=\"（1）parseInt()\"></a>（1）parseInt()</h4><p>parseInt() 方法用于可解析一个字符串，并返回一个整数。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(string, radix)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>string：必需。要被解析的字符串。</li>\n<li>radix：可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。</li>\n</ul>\n<p>当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;10&quot;</span>);\t\t\t  <span class=\"comment\">// 输出结果：10</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;17&quot;</span>,<span class=\"number\">8</span>);\t\t  <span class=\"comment\">// 输出结果：15 (8+7)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;010&quot;</span>);\t\t  <span class=\"comment\">// 输出结果：10 或 8</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>当参数 radix 的值以 “0x” 或 “0X” 开头，将以 16 为基数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;0x10&quot;</span>)      <span class=\"comment\">// 输出结果：16</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;50&quot;</span>, <span class=\"number\">1</span>)      <span class=\"comment\">// 输出结果：NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;50&quot;</span>, <span class=\"number\">40</span>)     <span class=\"comment\">// 输出结果：NaN</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>只有字符串中的第一个数字会被返回，当遇到第一个不是数字的字符为止:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;40 4years&quot;</span>)   <span class=\"comment\">// 输出结果：40</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果字符串的第一个字符不能被转换为数字，就会返回 NaN：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;new100&quot;</span>)     <span class=\"comment\">// 输出结果：NaN</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>字符串开头和结尾的空格是允许的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;  60  &quot;</span>)    <span class=\"comment\">// 输出结果： 60</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）parseFloat\"><a href=\"#（2）parseFloat\" class=\"headerlink\" title=\"（2）parseFloat()\"></a>（2）parseFloat()</h4><p>parseFloat() 方法可解析一个字符串，并返回一个浮点数。该方法指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(string)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>parseFloat 将它的字符串参数解析成为浮点数并返回。如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。同时参数字符串首位的空白符会被忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;10.00&quot;</span>)      <span class=\"comment\">// 输出结果：10.00</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;10.01&quot;</span>)      <span class=\"comment\">// 输出结果：10.01</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;-10.01&quot;</span>)     <span class=\"comment\">// 输出结果：-10.01</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;40.5 years&quot;</span>) <span class=\"comment\">// 输出结果：40.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;new40.5&quot;</span>)    <span class=\"comment\">// 输出结果：NaN</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>编码和解码 encode URI() 和 encodeURICompoent()</p>\n<p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20211213203747451.png\" alt=\"image-20211213203747451\"></p>\n<h3 id=\"数组方法-1\"><a href=\"#数组方法-1\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h3><h4 id=\"1-测试所有元素\"><a href=\"#1-测试所有元素\" class=\"headerlink\" title=\"1.测试所有元素\"></a>1.测试所有元素</h4><ul>\n<li><h4 id=\"every（）\"><a href=\"#every（）\" class=\"headerlink\" title=\"every（）\"></a>every（）</h4><ul>\n<li>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</li>\n<li>里面时一个回调函数 留可以传index item array(原数组)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-填充一个数组中从起始索引到终止索引内的全部元素。-fill\"><a href=\"#2-填充一个数组中从起始索引到终止索引内的全部元素。-fill\" class=\"headerlink\" title=\"2.填充一个数组中从起始索引到终止索引内的全部元素。(fill)\"></a>2.填充一个数组中从起始索引到终止索引内的全部元素。(fill)</h4><ul>\n<li><h4 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h4></li>\n<li><p>前提，数组已经存在位置，如果数组为空或未初始化则无效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fill with 0 from position 2 until position 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array1.<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: [1, 2, 0, 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fill with 5 from position 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array1.<span class=\"title function_\">fill</span>(<span class=\"number\">5</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: [1, 5, 5, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array1.<span class=\"title function_\">fill</span>(<span class=\"number\">6</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: [6, 6, 6, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">item start conut</span><br><span class=\"line\">第一个参数：用item填充 必须</span><br><span class=\"line\">第二个参数：填充开始的位置 省略则为<span class=\"number\">0</span></span><br><span class=\"line\">第三分参数：填充多少个  默认为length</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-合并两个或多个数组。\"><a href=\"#3-合并两个或多个数组。\" class=\"headerlink\" title=\"3.合并两个或多个数组。\"></a>3.合并两个或多个数组。</h4><ul>\n<li><h4 id=\"concat-方法\"><a href=\"#concat-方法\" class=\"headerlink\" title=\"**concat()** 方法\"></a><code>**concat()**</code> 方法</h4></li>\n<li><p>&#96;&#96;&#96; js<br>&#x2F;&#x2F;合并多个数组<br>var num1 &#x3D; [1, 2, 3],<br>num2 &#x3D; [4, 5, 6],<br>num3 &#x3D; [7, 8, 9];<br>var nums &#x3D; num1.concat(num2, num3);<br>console.log(nums);<br>&#x2F;&#x2F; results in [1, 2, 3, 4, 5, 6, 7, 8, 9]</p>\n<p>&#x2F;&#x2F;将值连接到数组<br>&#x2F;&#x2F; 和下面合并多维很相似<br>var alpha &#x3D; [‘a’, ‘b’, ‘c’];<br>var alphaNumeric &#x3D; alpha.concat(1, [2, 3]);<br>console.log(alphaNumeric);<br>&#x2F;&#x2F; results in [‘a’, ‘b’, ‘c’, 1, 2, 3]</p>\n<p>&#x2F;&#x2F;合并多维数组<br>&#x2F;&#x2F;会把第一层[]拆开拿到里面的元素<br>var num1 &#x3D; [[1]];<br>var num2 &#x3D; [2, [3]];<br>var num3&#x3D;[5,[6]];<br>var nums &#x3D; num1.concat(num2);<br>console.log(nums);<br>&#x2F;&#x2F; results is [[1], 2, [3]]</p>\n<p>&#x2F;&#x2F;混合合并<br>var nums2&#x3D;num1.concat(4,num3);<br>console.log(nums2)<br>&#x2F;&#x2F; results is [[1], 4, 5,[6]]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 4.过滤所有元素</span><br><span class=\"line\"></span><br><span class=\"line\">\t##### filter()</span><br><span class=\"line\"></span><br><span class=\"line\">- ##### 将满足条件的放入一个新数组</span><br><span class=\"line\"></span><br><span class=\"line\">  - 里面为一个回调函数 </span><br><span class=\"line\"></span><br><span class=\"line\">  - element  数组中当前正在处理的元素。</span><br><span class=\"line\"></span><br><span class=\"line\">  - ndex 数组中当前正在处理的元素的索引</span><br><span class=\"line\"></span><br><span class=\"line\">  - array（调用了 `filter` 的数组本身。）</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    var arr = [</span><br><span class=\"line\">      &#123; id: 15 &#125;,</span><br><span class=\"line\">      &#123; id: -1 &#125;,</span><br><span class=\"line\">      &#123; id: 0 &#125;,</span><br><span class=\"line\">      &#123; id: 3 &#125;,</span><br><span class=\"line\">      &#123; id: 12.2 &#125;,</span><br><span class=\"line\">      &#123; &#125;,</span><br><span class=\"line\">      &#123; id: null &#125;,</span><br><span class=\"line\">      &#123; id: NaN &#125;,</span><br><span class=\"line\">      &#123; id: &#x27;undefined&#x27; &#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    </span><br><span class=\"line\">    var invalidEntries = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function isNumber(obj) &#123;</span><br><span class=\"line\">      return obj !== undefined &amp;&amp; typeof(obj) === &#x27;number&#x27; &amp;&amp; !isNaN(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function filterByID(item) &#123;</span><br><span class=\"line\">      if (isNumber(item.id) &amp;&amp; item.id !== 0) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      invalidEntries++;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var arrByID = arr.filter(filterByID);</span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log(&#x27;Filtered Array\\n&#x27;, arrByID);</span><br><span class=\"line\">    // Filtered Array</span><br><span class=\"line\">    // [&#123; id: 15 &#125;, &#123; id: -1 &#125;, &#123; id: 3 &#125;, &#123; id: 12.2 &#125;]</span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log(&#x27;Number of Invalid Entries = &#x27;, invalidEntries);</span><br><span class=\"line\">    // Number of Invalid Entries = 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-遍历数组\"><a href=\"#5-遍历数组\" class=\"headerlink\" title=\"5.遍历数组\"></a>5.遍历数组</h3><ul>\n<li><p>（1）forEach</p>\n<ol>\n<li><p>可以改变数组自身，没有返回值；</p>\n</li>\n<li><p>中途不能用常规操作跳出循环，可以用抛出异常（try&#x2F;catch）的方式，但不推荐这样做；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;鸣人&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;佐助&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr1.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123; </span><br><span class=\"line\">  item.<span class=\"property\">age</span> = item.<span class=\"property\">age</span> + <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><strong>当数组中元素是值类型，forEach绝对不会改变数组；当是引用类型，则可以改变数组</strong></p>\n<p>（2）map() 映射</p>\n</li>\n</ol>\n<p>原数组被”映射”成对应新数组。</p>\n<ul>\n<li>新建一个数组，需要有承载对象，也意味着原始数组在调用它后不会发生变化;</li>\n<li>该数组中的每个元素都调用一个提供的函数后返回结果。</li>\n</ul>\n<p>创建新数组不代表不能用它改变原有数组，你用原有数组去承载就可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; </span><br><span class=\"line\">arr = arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> item * <span class=\"number\">2</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>map()中每个元素都要执行相应的回调函数，所以必须要有return</li>\n<li>如果你想给数组做一定的过滤处理，那map()基本上行不通：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123; <span class=\"keyword\">if</span>(item &gt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> item &#125;)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [undefined, undefined, undefined, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>不能凑合用， 人生不能凑合，代码也是！</p>\n<p>（3)fliter() 过滤</p>\n<ul>\n<li><pre><code> 创建一个新数组，新数组中的元素是筛选出来的符合条件的所有对象。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(item &gt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> item </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//  =&gt; [4,5]</span></span><br></pre></td></tr></table></figure>\n\n<p>​            (4)sort()排序</p>\n<ul>\n<li><p>sort()用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序。</p>\n</li>\n<li><p>​    sort()与map()、filter()等不同，它直接改变原始数组（很重要！）；</p>\n</li>\n<li><p>如果想按照其他标准进行排序，就需提供比较函数compareFunction(a,b)，数组会按照调用该函数的返回值排序，即a和b是两个将要比较的元素：</p>\n<ul>\n<li>如果compareFunction(a,b)小于0，则a排列到b之前；</li>\n<li>如果 compareFunction(a, b)等于0，a和b的相对位置不变（并不保证）;</li>\n<li>如果 compareFunction(a, b)大于0，b排列到a之前； 直接上例子：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Users</span> = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;鸣人&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;卡卡西&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;自来也&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">50</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;佐助&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"title class_\">Users</span>.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a.<span class=\"property\">age</span> - b.<span class=\"property\">age</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 鸣人、佐助、卡卡西、自来也</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>(5)检索存在</p>\n<ul>\n<li><p>​    some()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;鸣人&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;佐助&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;</span><br><span class=\"line\">].<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item.<span class=\"property\">age</span> &gt; <span class=\"number\">16</span> </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">=&gt; <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>every()</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;鸣人&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;佐助&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;</span><br><span class=\"line\">].<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item.<span class=\"property\">age</span> &gt; <span class=\"number\">16</span> </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">=&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>some()和every()返回的都是<code>Boolean</code>值，仅此而此</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-数组去重\"><a href=\"#6-数组去重\" class=\"headerlink\" title=\"6.数组去重\"></a>6.数组去重</h4><ul>\n<li>​    new Set( )     经典方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArr = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;1,2,3,4,5&#125; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//并且已有元素是添加不进去的：</span></span><br><span class=\"line\">tempArr.<span class=\"title function_\">add</span>(<span class=\"number\">3</span>) </span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;1,2,3,4,5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">tempArr.<span class=\"title function_\">add</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;1,2,3,4,5,6&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>​                     <strong>Set()没法去重元素是引用对象的数组。</strong></p>\n<ul>\n<li><h4 id=\"uniqWith-js库\"><a href=\"#uniqWith-js库\" class=\"headerlink\" title=\"_.uniqWith()     js库\"></a>_.uniqWith()     js库</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span>;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">var</span> objects = [&#123; <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span> &#125;];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">_.<span class=\"title function_\">uniqWith</span>(objects, _.<span class=\"property\">isEqual</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt; [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//_.isEqual(value,other)用于执行深比较来确定两者的值是否相等。 _.uniqWith()做去重处理。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7-查找元素\"><a href=\"#7-查找元素\" class=\"headerlink\" title=\"7.查找元素\"></a>7.查找元素</h4><ul>\n<li>findIndex（）</li>\n</ul>\n<p>通过对象属性值直接获取对应索引： <code>**findIndex()**</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>。</p>\n<ul>\n<li>find（）</li>\n</ul>\n<p><code>find()</code>顾名思义，就是用来在数组中找到我们所需要的元素</p>\n<h4 id=\"8-回调地狱\"><a href=\"#8-回调地狱\" class=\"headerlink\" title=\"8.回调地狱\"></a>8.回调地狱</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 回调地狱</span></span><br><span class=\"line\">    <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;./a.json&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">info</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (info.<span class=\"property\">addr</span> != <span class=\"string\">&#x27;ok&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>, info.<span class=\"property\">addr</span>, <span class=\"keyword\">function</span> (<span class=\"params\">info</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (info.<span class=\"property\">addr</span> != <span class=\"string\">&#x27;ok&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>, info.<span class=\"property\">addr</span>, <span class=\"keyword\">function</span> (<span class=\"params\">info</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (info.<span class=\"property\">addr</span> == <span class=\"string\">&#x27;ok&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">alert</span>(info.<span class=\"property\">msg</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"9-eval\"><a href=\"#9-eval\" class=\"headerlink\" title=\"9.eval\"></a>9.eval</h4><p>它的功能是将对应的字符串解析成 JS 并执行，应该避免使用 JS，因为非常消耗性能（2 次，一次解析成 JS，一次执行）</p>\n<h4 id=\"10-copyWithin\"><a href=\"#10-copyWithin\" class=\"headerlink\" title=\"10.copyWithin\"></a>10.copyWithin</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//copyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>他会影响原数组，返回的数据和原数据为同一引用</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>[1, 2, 3, 4, 5].copyWithin(-2)<br>&#x2F;&#x2F; [1, 2, 3, 1, 2]</p>\n<p>[1, 2, 3, 4, 5].copyWithin(0, 3)<br>&#x2F;&#x2F; [4, 5, 3, 4, 5]</p>\n<p>[1, 2, 3, 4, 5].copyWithin(0, 3, 4)<br>&#x2F;&#x2F; [4, 2, 3, 4, 5]</p>\n<p>[1, 2, 3, 4, 5].copyWithin(-2, -3, -1)<br>&#x2F;&#x2F; [1, 2, 3, 3, 4]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 11.call bind apply</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">//第一个参数 都是this 的指向，后面的参数则都是传递的参数</span><br><span class=\"line\">// call 和 bind 传递参数都是： a,b,c...的形式</span><br><span class=\"line\">  //而apply后面传递的参数应该为数组形式，就算是单个数据也要写成数组的形式 ：[&#x27;a&#x27;]</span><br><span class=\"line\">//bind和call存在的区别在于，call和apply都会立即执行函数，而bind则不会。因此可以用bind写事件处理函数</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype ---》数组的实例化对象的原型 ---》this 指向数组的实例化对象</span></span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a,b,c</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// arguments  foreach</span></span><br><span class=\"line\">     <span class=\"comment\">// es5中非常重要的写法</span></span><br><span class=\"line\">     <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>,<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">fn1</span>(<span class=\"string\">&#x27;哈哈哈&#x27;</span>, <span class=\"string\">&#x27;嘿嘿嘿&#x27;</span>, <span class=\"string\">&#x27;呵呵呵&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// call apply bind 改变this指向</span></span><br><span class=\"line\">    <span class=\"comment\">// call(this,值1,值2....) apply(this, [值1, 值2...]) bind(this, 值1, 值2....)</span></span><br><span class=\"line\">    <span class=\"comment\">// 从表面上看bind方法和call方法完全一致，但是</span></span><br><span class=\"line\">    <span class=\"comment\">// bind方法可以再调用之后不执行函数，而call和apply只要调用就立刻执行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">user</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你好&#x27;</span>, user);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>); <span class=\"comment\">// window.a</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 让fn1的this指向obj 使用call方法，只要运行代码，程序就会立刻执行</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1.call(obj, &#x27;张三&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1.apply(obj, [&#x27;张三&#x27;]);</span></span><br><span class=\"line\">    <span class=\"comment\">// 我的需要: fn1作为btn的事件处理函数，点击按钮之后再执行</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1需要改变this指向，同时需要向fn1中传值</span></span><br><span class=\"line\">    btn.<span class=\"property\">onclick</span> = fn1.<span class=\"title function_\">bind</span>(obj, <span class=\"string\">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20211223194857541.png\" alt=\"image-20211223194857541\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//this == obj</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ver person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;deng&#x27;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(obj,<span class=\"string\">&#x27;cheng&#x27;</span>,<span class=\"number\">300</span>)</span><br><span class=\"line\"><span class=\"comment\">//test  ---&gt; test.call()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认函数运行，相当于隐式运行.call( )</span></span><br><span class=\"line\"><span class=\"comment\">//把Person时传入obj，相当于this == obj this.name = name ,,this.age = age</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//this == obj</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"12-reduce\"><a href=\"#12-reduce\" class=\"headerlink\" title=\"12.reduce\"></a>12.reduce</h4><p><code>**reduce()**</code> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">previousValue, currentValue</span>) =&gt; previousValue + currentValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array1.<span class=\"title function_\">reduce</span>(reducer));</span><br><span class=\"line\"><span class=\"comment\">//reduce 里面为一个回调函数</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>.<span class=\"title function_ invoke__\">reduce</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, current, currentIndex, arr</span>), <span class=\"title\">initialValue</span>)</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>prev：函数传进来的初始值或上一次回调的返回值</li>\n<li>current：数组中当前处理的元素值</li>\n<li>currentIndex：当前元素索引</li>\n<li>arr：当前元素所属的数组本身</li>\n<li>initialValue：传给函数的初始值</li>\n</ol>\n<h4 id=\"13-Map\"><a href=\"#13-Map\" class=\"headerlink\" title=\"13.Map\"></a>13.Map</h4><p><strong>加工数据</strong></p>\n<p><code>**map()**</code> 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pass a function to map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map1);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [2, 8, 18, 32]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-splice\"><a href=\"#14-splice\" class=\"headerlink\" title=\"14.splice\"></a>14.splice</h4><ul>\n<li><p>删除 修改 清空</p>\n</li>\n<li><pre><code class=\"js\">//splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```js</span><br><span class=\"line\">  const months = [&#x27;Jan&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;June&#x27;];</span><br><span class=\"line\">  months.splice(1, 0, &#x27;Feb&#x27;);</span><br><span class=\"line\">  // inserts at index 1</span><br><span class=\"line\">  console.log(months);</span><br><span class=\"line\">  // expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span><br><span class=\"line\">  </span><br><span class=\"line\">  months.splice(4, 1, &#x27;May&#x27;);</span><br><span class=\"line\">  // replaces 1 element at index 4</span><br><span class=\"line\">  console.log(months);</span><br><span class=\"line\">  </span><br><span class=\"line\">  //1.要修改的元素索引</span><br><span class=\"line\">  //2.要删除的元素个数</span><br><span class=\"line\">  //3.要添加的元素</span><br><span class=\"line\">  </span><br><span class=\"line\">  //清空 arr.splice(0,arr.length)</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li></li>\n</ul>\n<h4 id=\"15-URI-和-URL\"><a href=\"#15-URI-和-URL\" class=\"headerlink\" title=\"15.URI 和 URL\"></a>15.URI 和 URL</h4><h5 id=\"一-统一资源标识符（URI）\"><a href=\"#一-统一资源标识符（URI）\" class=\"headerlink\" title=\"一.统一资源标识符（URI）\"></a>一.统一资源标识符（URI）</h5><p>&lt;1&gt;什么是URI</p>\n<p>URI，统一资源标志符(Uniform Resource Identifier， URI)，表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行标识的。</p>\n<p>&lt;2&gt;URI的结构组成</p>\n<p>URI通常由三部分组成：</p>\n<p>①资源的命名机制；</p>\n<p>②存放资源的主机名；</p>\n<p>③资源自身的名称。</p>\n<p>（注意：这只是一般URI资源的命名方式，只要是可以唯一标识资源的都被称为URI，上面三条合在一起是URI的充分不必要条件）</p>\n<p>&lt;3&gt;URI举例</p>\n<p>如：<a href=\"https://blog.csdn.net/qq_32595453/article/details/79516787\">https://blog.csdn.net/qq_32595453/article/details/79516787</a></p>\n<p>我们可以这样解释它：</p>\n<p>①这是一个可以通过https协议访问的资源，</p>\n<p>②位于主机 blog.csdn.net上，</p>\n<p>③通过“&#x2F;qq_32595453&#x2F;article&#x2F;details&#x2F;79516787”可以对该资源进行唯一标识（注意，这个不一定是完整的路径）</p>\n<p>注意：以上三点只不过是对实例的解释，以上三点并不是URI的必要条件，URI只是一种概念，怎样实现无所谓，只要它唯一标识一个资源就可以了。</p>\n<h5 id=\"二、URL\"><a href=\"#二、URL\" class=\"headerlink\" title=\"二、URL\"></a>二、URL</h5><p>URL是URI的一个子集。它是Uniform Resource Locator的缩写，译为“统一资源定位 符”。</p>\n<p>通俗地说，URL是Internet上描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。</p>\n<p>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL是URI概念的一种实现方式。</p>\n<p>URL的一般格式为(带方括号[]的为可选项)：</p>\n<p>protocol :&#x2F;&#x2F; hostname[:port] &#x2F; path &#x2F; [;parameters][?query]#fragment</p>\n<p>URL的格式由三部分组成： </p>\n<p>①第一部分是协议(或称为服务方式)。</p>\n<p>②第二部分是存有该资源的主机IP地址(有时也包括端口号)。</p>\n<p>③第三部分是主机资源的具体地址，如目录和文件名等。</p>\n<p>第一部分和第二部分用“:&#x2F;&#x2F;”符号隔开，</p>\n<p>第二部分和第三部分用“&#x2F;”符号隔开。</p>\n<p>第一部分和第二部分是不可缺少的，第三部分有时可以省略。</p>\n<h5 id=\"三、URI和URL之间的区别\"><a href=\"#三、URI和URL之间的区别\" class=\"headerlink\" title=\"三、URI和URL之间的区别\"></a>三、URI和URL之间的区别</h5><p>从上面的例子来看，你可能觉得URI和URL可能是相同的概念，其实并不是，URI和URL都定义了资源是什么，但URL还定义了该如何访问资源。URL是一种具体的URI，它是URI的一个子集，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI 是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，是绝对的。</p>\n<h5 id=\"1-decodeURI\"><a href=\"#1-decodeURI\" class=\"headerlink\" title=\"1.decodeURI( )\"></a>1.decodeURI( )</h5><p><code>**decodeURI()**</code> 函数能解码由<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI</code></a> 创建或其它流程得到的统一资源标识符（URI）。</p>\n<h5 id=\"2-encodeURI\"><a href=\"#2-encodeURI\" class=\"headerlink\" title=\"2.encodeURI( )\"></a>2.encodeURI( )</h5><p><code>**encodeURI()**</code> 函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 “代理” 字符组成)。</p>\n<h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h4><h3 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h3><h4 id=\"1-Object-defineProperty\"><a href=\"#1-Object-defineProperty\" class=\"headerlink\" title=\"1.Object.defineProperty()\"></a>1.Object.defineProperty()</h4><p><code>**Object.defineProperty()**</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(object1, <span class=\"string\">&#x27;property1&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">object1.<span class=\"property\">property1</span> = <span class=\"number\">77</span>;</span><br><span class=\"line\"><span class=\"comment\">// throws an error in strict mode</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(object1.<span class=\"property\">property1</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 42</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code>configurable</code></th>\n<th><code>enumerable</code></th>\n<th><code>value</code></th>\n<th><code>writable</code></th>\n<th><code>get</code></th>\n<th><code>set</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n<td>不可以</td>\n</tr>\n<tr>\n<td>存取描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n<td>不可以</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><code>configurable</code></p>\n<p>当且仅当该属性的 <code>configurable</code> 键值为 <code>true</code> 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。 <strong>默认为</strong> **<code>false</code>**。</p>\n</li>\n<li><p><code>enumerable</code></p>\n<p>当且仅当该属性的 <code>enumerable</code> 键值为 <code>true</code> 时，该属性才会出现在对象的枚举属性中。 **默认为 <code>false</code>**。</p>\n</li>\n</ul>\n<p>数据描述符还具有以下可选键值：</p>\n<ul>\n<li><p><code>value</code></p>\n<p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。 **默认为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>**。</p>\n</li>\n<li><p><code>writable</code></p>\n<p>当且仅当该属性的 <code>writable</code> 键值为 <code>true</code> 时，属性的值，也就是上面的 <code>value</code>，才能被<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators\"><code>赋值运算符</code> (en-US)</a>改变。 <strong>默认为 <code>false</code>。</strong></p>\n</li>\n</ul>\n<p>存取描述符还具有以下可选键值：</p>\n<ul>\n<li><p><code>get</code></p>\n<p>属性的 getter 函数，如果没有 getter，则为 <code>undefined</code>。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 <code>this</code> 对象（由于继承关系，这里的<code>this</code>并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。 **默认为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>**。</p>\n</li>\n<li><p><code>set</code></p>\n<p>属性的 setter 函数，如果没有 setter，则为 <code>undefined</code>。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 <code>this</code> 对象。 **默认为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>**。</p>\n</li>\n</ul>\n<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types\">Error 类型</a></p>\n<p>除了通用的Error构造函数外，JavaScript还有6个其他类型的错误构造函数。更多客户端异常,详见 <a href=\"https://developer.mozilla.org/en-US/JavaScript/Guide/Statements#exception_handling_statements\">Exception Handling Statements</a>。</p>\n<ul>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\"><code>EvalError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：与 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> 有关。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\"><code>InternalError</code></a></strong> </p>\n<p>创建一个代表Javascript引擎内部错误的异常抛出的实例。 如: “递归太多”.</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：数值变量或参数超出其有效范围。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：无效引用。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a>在解析代码的过程中发生的语法错误。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：变量或参数不属于有效类型。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\"><code>URIError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：给 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a>或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI()</code></a>传递的参数无效。</p>\n</li>\n</ul>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"comment\">//得到data为 ...</span></span><br><span class=\"line\"><span class=\"comment\">//data = xxxxxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将data放入new Date(  ..) 可以得到曾经保存的时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以根据时间戳的差值计算出时间间隔</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h3><p>背景：js诞生之际是一门单线程语言，功能较少。后随着计算机的发展，ajax等的兴起。当计算机执行一个需要较长时间的进程时候，为了提高计算机效率，不让其空闲，就有了异步。</p>\n<h4 id=\"什么是异步js\"><a href=\"#什么是异步js\" class=\"headerlink\" title=\"什么是异步js\"></a>什么是异步js</h4><ul>\n<li>​    在js中，任务分为两种，同步任务和异步任务。同步任务在主线程中，一开始就执行，而异步任务在需要时或者特点条件下才会执行。    <ul>\n<li><p>异步js主要有：</p>\n<ol>\n<li>DOM操作</li>\n<li>定时器</li>\n<li>AJAX请求</li>\n</ol>\n</li>\n<li><p>在程序执行过程中，所以的同步任务都会在主线程上执行，形成一个执行栈</p>\n</li>\n<li><p>主线程之外还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件，当同步任务执行完，或者说执行栈一被清空。主线程就开始执行任务队列里面的异步事件，即当前异步事件的回调函数。再任务队列中，事件遵循先进后出规则。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"异步事件注意点\"><a href=\"#异步事件注意点\" class=\"headerlink\" title=\"异步事件注意点\"></a>异步事件注意点</h4><ul>\n<li>异步事件的发生先后顺序是不确定的，这取决于当前事件在子进程中完成的先后顺序，先完成的先进入任务队列，先执行。</li>\n<li>定时器由于任务队列的先进后出，可能会延时发生。当定时器时间到达时，才会在任务队列中添加事件（在这之前，挂载在子进程上），而此时定时器需要等到先排队的事件执行完才能执行。（前提是执行栈也已经被清空）</li>\n<li>Event loop 主线程在任务队列中执行事件是循环不断的，整个这个的运行机制叫做Event loop。</li>\n<li>html5 规定定时器最短时间间隔为4ms，足的会变为4ms。老版本的规定为10ms，DOM时间触发后不会立即执行，会延误16ms。</li>\n</ul>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><ul>\n<li><p>Promise是异步编程的一种解决方案。比传统的解决方案 ——回调函数和事件——更合理强大。</p>\n</li>\n<li><p>可以说是一个容器，里面保存着某个未来才会结束的事件，（通常是一个异步操作）的结果。可以获取异步操作的消息</p>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>对象的状态不受外界影响，~代表一个异步操作，有三种状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n<p>只有异步的操作结果，可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态。</p>\n</li>\n<li><p>一旦状态改变就不会再变，只有两种可能</p>\n<ul>\n<li>pending -&gt; fulfilled</li>\n<li>pending -&gt; rejected</li>\n</ul>\n<p>只要是事件发生了，就不会再改变，叫做定型resolved。</p>\n<p>而事件的特点是，如果你错过了他，再去监听，是得不到结果的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化Promise对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;&#125; , (err) =&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">catch</span>((err)=&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果后面嵌套then。里面返回promise对象</li>\n<li><strong>.then 可以链式不断调用</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">&#125; , (err) =&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">&#125;, (err) =&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"property\">then</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//.catch 每一个状态为reject都会执行catch()</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await\"></a>async await</h5><ul>\n<li>用await替代then，<strong>await</strong>和<strong>async</strong>需要配合使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> p1 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;./a.json&#x27;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// console.log(p1)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> data1 = p1.<span class=\"property\">src</span></span><br><span class=\"line\">            <span class=\"comment\">// console.log(data1)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> p2 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,data1);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> data2 = p2.<span class=\"property\">src</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> p3 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,data2)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p3.<span class=\"property\">msg</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">move</span>()</span><br></pre></td></tr></table></figure>\n\n<p>async 和 await 执行顺序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 start&#x27;</span>) <span class=\"comment\">//执行3</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()              <span class=\"comment\">//执行函数 4</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)   <span class=\"comment\">//挂载等待1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2&#x27;</span>) <span class=\"comment\">//执行5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)   <span class=\"comment\">//顺序执行1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)  <span class=\"comment\">//等待微任务1</span></span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"title function_\">async1</span>();   <span class=\"comment\">//执行函数 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>) <span class=\"comment\">//立即执行 6 </span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;       <span class=\"comment\">//挂载等待2</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)   <span class=\"comment\">//立即执行7</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果</span><br><span class=\"line\">script start</span><br><span class=\"line\">async1 start</span><br><span class=\"line\">async2</span><br><span class=\"line\">promise1</span><br><span class=\"line\">script end</span><br><span class=\"line\">async1 end</span><br><span class=\"line\">promise2</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br><span class=\"line\"></span><br><span class=\"line\">知识点</span><br><span class=\"line\">显然，这考察的是js中的事件循环和回调队列。注意以下几点：</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>优先于<span class=\"built_in\">setTimeout</span>宏任务。所以，<span class=\"built_in\">setTimeout</span>回调会在最后执行。</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>一旦被定义，就会立即执行。</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>的reject和resolve是异步执行的回调。所以，<span class=\"title function_\">resolve</span>()会被放到回调队列中，在主函数执行完和<span class=\"built_in\">setTimeout</span>前调用。</span><br><span class=\"line\">     *   <span class=\"keyword\">await</span>执行完后，会让出线程。<span class=\"keyword\">async</span>标记的函数会返回一个<span class=\"title class_\">Promise</span>对象</span><br><span class=\"line\"><span class=\"keyword\">await</span>后面的语句会在<span class=\"keyword\">await</span>执行完之后再执行。定时器为宏任务，会在微任务执行完之后再执行。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queryData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      # <span class=\"number\">2.1</span>  添加<span class=\"keyword\">await</span>之后 当前的<span class=\"keyword\">await</span> 返回结果之后才会执行后面的代码   </span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">var</span> info = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;async1&#x27;</span>);</span><br><span class=\"line\">      #<span class=\"number\">2.2</span>  让异步代码看起来、表现起来更像同步代码</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ret = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;async2?info=&#x27;</span> + info.<span class=\"property\">data</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">————————————————</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ajax-配合async\"><a href=\"#ajax-配合async\" class=\"headerlink\" title=\"ajax 配合async\"></a>ajax 配合async</h5><h5 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h5><p>用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>\n<p>不管<code>promise</code>最后的状态，在执行完<code>then</code>或<code>catch</code>指定的回调函数以后，都会执行<code>finally</code>方法指定的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h5><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 Promise 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p>\n<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>\n<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，<strong>此时第一个被<code>reject</code>的实例的返回值</strong>，会传递给<code>p</code>的回调函数。</p>\n<h5 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h5><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那<strong>个率先改变的 Promise 实例的返回值，</strong>就传递给<code>p</code>的回调函数。</p>\n<p><code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是 Promise 实例，就会先调用下面讲到的<code>Promise.resolve()</code>方法，将参数转为 Promise 实例，再进一步处理。</p>\n<p><strong><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是<code>Promise.any()</code>不会因为某个 Promise 变成<code>rejected</code>状态而结束，必须等到所有参数 Promise 变成<code>rejected</code>状态才会结束</strong></p>\n<h4 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h4><p>在异步任务中，将任务分为两种，分别是：</p>\n<ul>\n<li><pre><code>             宏任务\n</code></pre>\n<ul>\n<li>定时器</li>\n<li>requestAnimationFrame</li>\n</ul>\n</li>\n<li><p>​                  微任务</p>\n<ul>\n<li>promise</li>\n</ul>\n</li>\n<li><p>在任务队列之外，将宏任务和微任务分别挂载在宏任务队列和微任务。当同步任务执行完之后，会进行Event loop 执行任务队列。</p>\n<ul>\n<li><p>执行顺序是：</p>\n<ul>\n<li>先执行同步任务，再执行异步任务</li>\n<li>先执行微任务，再执行宏任务</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); <span class=\"comment\">//同步执行1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">4</span>); <span class=\"comment\">//宏任务1  定时器1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);\t<span class=\"comment\">//同步执行2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);  <span class=\"comment\">//微任务1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123; <span class=\"comment\">//宏任务2 定时器2</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当执行promise内的代码时，语句遵循同步执行的规则</span></span><br><span class=\"line\"><span class=\"comment\">//此处有一个简写 _ =&gt; 表示舍弃参数，不进行传值操作</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>requestAnimationFrame    请求动画帧</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>60HZ 当你什么都不做的时候，电脑也会以每秒60次的刷新速率更新，</p>\n</li>\n<li><p>动画原理</p>\n<ul>\n<li>而动画的本质就是人眼看到图像被属性变化而引起的视觉效果，这个效果要以平滑连贯的方式进行过渡</li>\n</ul>\n</li>\n<li><p>setTimeout ( 存在丢帧现象 )</p>\n<ul>\n<li>setTimeout的执行时间并不是确定的。在Javascript中， setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此 <strong>setTimeout 的实际执行时间一般要比其设定的时间晚一些。</strong></li>\n<li>刷新频率受<strong>屏幕分辨率</strong>和<strong>屏幕尺寸</strong>的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。</li>\n</ul>\n</li>\n<li><h4 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h4><ul>\n<li><p>requestAnimationFrame最大的优势是<strong>由系统来决定回调函数的执行时机</strong></p>\n<ul>\n<li><p>具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000&#x2F;75&#x3D;13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。<strong>它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次</strong>，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>    let box &#x3D; document.querySelector(‘.box’);<br>    let len &#x3D; 0;<br>    function fn() {<br>        len +&#x3D; 5;<br>        box.style.left &#x3D; len + ‘px’;<br>        if (len &lt; 1280) {<br>            window.requestAnimationFrame(fn);<br>        }<br>    }<br>    window.requestAnimationFrame(fn);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      （1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回 流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 </span><br><span class=\"line\"></span><br><span class=\"line\">      （2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然 就意味着更少的 CPU、GPU 和内存使用量 </span><br><span class=\"line\"></span><br><span class=\"line\">      （3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动 优化方法的调用，**并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销**</span><br><span class=\"line\"></span><br><span class=\"line\">### ES6</span><br><span class=\"line\"></span><br><span class=\"line\">#### 箭头函数</span><br><span class=\"line\"></span><br><span class=\"line\">​\t本质是一个语法糖</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">function() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">() =&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//1.如果箭头函数只有一个参数，则括号可以省略</span><br><span class=\"line\">item =&gt; &#123;&#125;   //形如</span><br><span class=\"line\">//2如果函数体只有一条语句，则可以省略&#123;&#125;括号</span><br><span class=\"line\">() =&gt; return &#x27;hello&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">(a, b) =&gt; a + b</span><br><span class=\"line\"></span><br><span class=\"line\">(a) =&gt; &#123;</span><br><span class=\"line\">  a = a + 1</span><br><span class=\"line\">  return a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</span><br><span class=\"line\">// SyntaxError:</span><br><span class=\"line\">x =&gt; &#123; foo: x &#125;</span><br><span class=\"line\">//因为和函数体的&#123; ... &#125;有语法冲突，所以要改为：</span><br><span class=\"line\"></span><br><span class=\"line\">// ok:</span><br><span class=\"line\">x =&gt; (&#123; foo: x &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>(1). 箭头函数this为父作用域的this，不是调用时的this<br>箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。<br>普通函数的this指向调用它的那个对象。</p>\n<p>(2). 箭头函数不能作为构造函数，不能使用new</p>\n<p>(3). 箭头函数没有arguments，caller，callee</p>\n<p>箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。</p>\n<p>箭头函数中要想接收不定参数，应该使用rest参数…解决。</p>\n<p> (4). 箭头函数通过call和apply调用，不会改变this指向，只会传入参数</p>\n<p>(5). 箭头函数没有原型属性</p>\n<p>(6). 箭头函数不能作为Generator函数，不能使用yield关键字</p>\n<p>(7). 箭头函数返回对象时，要加一个小括号</p>\n<p>(8). 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法</p>\n<p>(9). 多重箭头函数就是一个高阶函数，相当于内嵌函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">10</span>). 箭头函数常见错误</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"title function_\">bar</span>()  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">bar函数中的<span class=\"variable language_\">this</span>指向父作用域，而a对象没有作用域，因此<span class=\"variable language_\">this</span>不是a，打印结果为<span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bar</span> = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">a.<span class=\"title function_\">bar</span>()  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">原型上使用箭头函数，<span class=\"variable language_\">this</span>指向是其父作用域，并不是对象a，因此得不到预期结果</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>一些<span class=\"variable language_\">this</span>的指向实例</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">  <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>); <span class=\"comment\">//this指向obj对象</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// 1990</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// this指向window或undefined</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>();<span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// 1990</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// this指向obj对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">       <span class=\"attr\">getAge</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">//window</span></span><br><span class=\"line\">作为对象的属性时，<span class=\"variable language_\">this</span>的指向则不再是对象本身了，箭头函数捕获的是obj&#123;&#125;这个对象的环境，然后这个环境的<span class=\"variable language_\">this</span>指向的是<span class=\"variable language_\">window</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>撸js的第一遍，持续不断深入的学习一门语言应当坚持下去，每一回学习都会有不一样的体会。</p>\n<h1 id=\"javascript介绍\"><a href=\"#javascript介绍\" class=\"headerlink\" title=\"javascript介绍\"></a>javascript介绍</h1><h2 id=\"JavaScript-是脚本语言（作为web的\"><a href=\"#JavaScript-是脚本语言（作为web的\" class=\"headerlink\" title=\"JavaScript 是脚本语言（作为web的\"></a>JavaScript 是脚本语言（作为web的</h2><p>JavaScript 是一种函数优先轻量级的编程语言。</p>\n<p>JavaScript 是可插入 HTML 页面的编程代码。</p>\n<p>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p>\n<p>JavaScript 基于原型编程，多范式的动态脚本语言，支持面向对象，命令式，声明式，函数式编程范式，解释性或即时编译型的编程语言</p>\n<p>网景 –&gt;欧洲计算机协会 –&gt;ECMAScript(ES)</p>\n<p>Javascipt 核心语法</p>\n<p>核心语法（ESMAscript） DOM（W3C) BOM(网景)</p>\n<p>ES1           …         ES3       …          ES5</p>\n<p>ES4（去掉改动大的语法,和谐会议）</p>\n<p>ES6 2015年   当年争议的话题</p>\n<p>ES7 -ES11 一年一更新 2016-2020 ES6之后统称ES6</p>\n<p>语法糖 ：ES6 写代码运行更快</p>\n<h2 id=\"JavaScript作用\"><a href=\"#JavaScript作用\" class=\"headerlink\" title=\"JavaScript作用\"></a>JavaScript作用</h2><p>网页开发</p>\n<p>JS包含三个部分的内容（在浏览器端</p>\n<ul>\n<li>​        核心语法<ul>\n<li>变量</li>\n<li>流程控制</li>\n<li>循环</li>\n<li>数据类型</li>\n</ul>\n</li>\n<li>​        BOM (网景)<ul>\n<li>浏览器对象模型 borwer object model</li>\n</ul>\n</li>\n<li>​        DOM （W3C)<ul>\n<li>文档对象模型，和网页相关  document object model</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"宿主环境\"><a href=\"#宿主环境\" class=\"headerlink\" title=\"宿主环境\"></a>宿主环境</h2><p>定义：JS运行的环境就叫宿主环境</p>\n<ul>\n<li>​    node</li>\n<li>浏览器</li>\n</ul>\n<p>作用：</p>\n<ol>\n<li><p>交互效果</p>\n</li>\n<li><p>收集数据</p>\n</li>\n</ol>\n<h2 id=\"JS-的准备语法\"><a href=\"#JS-的准备语法\" class=\"headerlink\" title=\"JS 的准备语法\"></a>JS 的准备语法</h2><ul>\n<li><p>如何编写JS文件</p>\n<ol>\n<li>将JS嵌入到网页当中</li>\n<li>将JS文件引入到文档中</li>\n</ol>\n</li>\n<li><p>Script标签的位置</p>\n<ol>\n<li><p>可以放在网页任何位置（放在html标签外面，页面最上面，浏览器自动把他放在head中，但是文档声明头消失）–&gt; 解析时，浏览器会采用降价处理。h5-h4  【如果文档没有写文档声明头】 理论上可以放任何位置，唯独不建议放在文档声明头上面</p>\n</li>\n<li><p>建议的位置 </html> 之后，浏览器会默认将其移动到<body>之中。放在<body/>和</html>之间</p>\n<ul>\n<li>js操作标签，页面元素先渲染出页面，即该标签先加载成功，script才开始获取元素。</li>\n<li>标准文档流的解析顺序</li>\n<li><strong>操作input标签 首要前提是 input要加载成功</strong></li>\n</ul>\n</li>\n<li><p>独立的Js文件引入</p>\n<ul>\n<li><script src=''></script>\n</li>\n<li><p>通过script标签配合src配合</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>打印</p>\n<ul>\n<li><p>在JS代码调试的时候，经常需要使用到console.log()</p>\n<ol>\n<li><p>console 是一个对象，里面有很多函数可以来帮助我们来开发，最常用的是console.log</p>\n</li>\n<li><p>弹窗</p>\n<ol>\n<li>alert</li>\n<li>prompt 比confirm多一个input框框</li>\n<li>confirm 比alert多一个取消</li>\n</ol>\n<ul>\n<li>​     alert（） 加括号为一个函数</li>\n</ul>\n</li>\n<li><p>语句和表达式</p>\n<ol>\n<li>语句<ul>\n<li>有多个部分组成，不一定有结果</li>\n<li>eg：console.log()</li>\n<li><strong>语句都是从右向左看</strong></li>\n</ul>\n</li>\n<li>表达式<ul>\n<li>凡是强调有结果</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>语句结束符</p>\n<ol>\n<li>在语句的最后，最后写上一个语句的结束符号</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"文档入口函数\"><a href=\"#文档入口函数\" class=\"headerlink\" title=\"文档入口函数\"></a>文档入口函数</h3><p>window.onload &#x3D; function(){</p>\n<p>​    在函数当中的代码会在页面的最后执行</p>\n<p>}</p>\n<p>放在head中不会出错</p>\n<p><strong>如果页面有部分图片或资源加载不出来，则js会一直等待起加载，导致关键js交互无效果。</strong></p>\n<p>window &gt; document</p>\n<h4 id=\"如果页面有多个入口函数\"><a href=\"#如果页面有多个入口函数\" class=\"headerlink\" title=\"如果页面有多个入口函数\"></a>如果页面有多个入口函数</h4><p><strong>后面加载的覆盖前面的</strong></p>\n<h4 id=\"onclick同理\"><a href=\"#onclick同理\" class=\"headerlink\" title=\"onclick同理\"></a>onclick同理</h4><p><strong>外部js也需要文本入口函数</strong>,位置放在</html>之后</p>\n<p>如果是工具类的js文件，（不会主动的获取js中的某个），则可以写在head文件中，如果是自己需要操作标签元素的，最好写在body之后</p>\n<p>PS：script  和   script src 不能混用</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>​    定义：临时存储数据的容器</p>\n<ol>\n<li><p>​    如何创建一个变量</p>\n<p>​    var 变量名 &#x3D; 值</p>\n<ul>\n<li>小驼峰命名</li>\n<li>console.log() 如果打印的是一个变量，不需要加引号</li>\n<li>underfined当变量声明未赋值的时候，则为未定义</li>\n</ul>\n</li>\n<li><p>变量名的命名规则</p>\n<ul>\n<li><p>字母数字下划线，<strong>字符</strong>，命名</p>\n</li>\n<li><p>数字不能是首字母  -&gt; <strong>可以下划线开头</strong></p>\n<ul>\n<li>尽量词能表达意</li>\n</ul>\n</li>\n<li><p>不能使用关键字</p>\n<p><strong>上面也是标识符命名规则</strong></p>\n</li>\n<li><p>声明和初始化</p>\n<ul>\n<li>通过关键字创建一个变量即为变量声明，给变量<strong>第一次赋值</strong>既是初始化</li>\n<li>控制台凡是出现<strong>蓝色</strong>的都是数字</li>\n<li>控制台凡是出现<strong>黑色</strong>的都是文字</li>\n<li><strong>程序从右向左看</strong></li>\n<li>修改值的过程，叫<strong>重新赋值</strong> x &#x3D; a</li>\n<li>重新声明赋值初始化 var x &#x3D; ‘hello,x’  旧的值被回收</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>变量提升</p>\n<ul>\n<li>浏览器的js解析引擎，在真正执行代码的时候，会进行预解析</li>\n<li>变量声明提升 声明不赋值 underfinded</li>\n<li>把所以的声明语句提升到作用域的最顶端<ul>\n<li>如若未声明直接使用，则报错</li>\n</ul>\n</li>\n<li>原因：在正式执行之前，会对其进行预解析</li>\n<li><strong>提升到当前作用域的最顶端</strong></li>\n</ul>\n<p>ps：使用js属性对应的方法<strong>length属性</strong>，获取字符串的长度</p>\n<p>​    获取字符串长度</p>\n<h4 id=\"js是一门弱类型语言\"><a href=\"#js是一门弱类型语言\" class=\"headerlink\" title=\"js是一门弱类型语言\"></a>js是一门弱类型语言</h4><p>var a (string int)  强类型</p>\n<p>变量可以根据数据的需要随时更换类型（变量本身没有类型，赋的值是上面类型就是上面类型）</p>\n</li>\n</ol>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><strong>基本数据类型</strong></p>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>Boolean</li>\n<li>underfinded</li>\n<li>null</li>\n</ul>\n<p><strong>引用数据类型</strong></p>\n<p>细化：object </p>\n<ul>\n<li>​    array</li>\n<li>​    function</li>\n<li>​     object</li>\n</ul>\n<p><strong>栈</strong> <strong>堆</strong></p>\n<p>基本（基础）数据类型，主要存储在栈</p>\n<p>引用数据在栈区存放内存地址，堆里存放数据的值</p>\n<p><strong>PS：</strong><strong><strong>当一个引用数据类型赋值给一个变量时，这个变量存储的是简单的内存地址</strong></strong></p>\n<h2 id=\"String字符串\"><a href=\"#String字符串\" class=\"headerlink\" title=\"String字符串\"></a>String字符串</h2><p>定义:在代码中如果想要存储文字</p>\n<p>‘’ “” 没有区别，<strong>推荐使用单引号</strong></p>\n<ul>\n<li><p>html标签属性都是双引号，为了区分。一致性不混用</p>\n</li>\n<li><p>结合实际情况，<strong>单引号里嵌套双引号</strong>   …说:””.</p>\n<ul>\n<li>存在问题 …说:’’</li>\n<li>单引号里使用双引号，<strong>双引号里面使用单引号</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h4><p>var s1 &#x3D; ‘鲁迅先生说:’ + ‘’</p>\n<p>相当于拼接字符串</p>\n<h4 id=\"创建字符串-–-通过构造函数\"><a href=\"#创建字符串-–-通过构造函数\" class=\"headerlink\" title=\"创建字符串   –   通过构造函数\"></a>创建字符串   –   通过构造函数</h4><p>var s &#x3D; new String(‘’)</p>\n<p>var s1 &#x3D; ‘’    直接量，相当于js给我们提供的一种用来创建字符串类型的快捷方式</p>\n<p>在Js里，除了null和underfinded都可以用构造函数创建出来</p>\n<p>不管里面是什么类型，只要外面加了引号，就会变成字符串类型</p>\n<p><strong>创建字符串的方式</strong></p>\n<ul>\n<li>‘’</li>\n<li>“”</li>\n<li>构造函数</li>\n</ul>\n<p>通过’+’拼接字符串</p>\n<p><strong>注意：</strong>****</p>\n<ul>\n<li>保证代码中使用统一的符号</li>\n<li>单双不能单独嵌套使用</li>\n</ul>\n<p>可以通过length属性来获取字符串的长度</p>\n<p><strong>ps 除了null和underfinded其他都是对象</strong></p>\n<p><strong>PS1 任何数据类型都可以通过构造函数的形式创造出来</strong></p>\n<p><strong>构造函数创建出来的数据，是一个object</strong></p>\n<p>&#x2F;&#x2F;对象 console是一个对象，log是console身上的方法</p>\n<p>length(在字符串中) 。2+</p>\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2><p> 在js中，number远远比其他语言当中的number简单</p>\n<p>无整数，本质上都是小数 0.2+0.3 ！&#x3D;&#x3D; 0.5</p>\n<p><strong>toFixed</strong> &#x2F;&#x2F;去除小数，返回整数位置，数字类型变为string（文本</p>\n<h2 id=\"布尔-boolean\"><a href=\"#布尔-boolean\" class=\"headerlink\" title=\"布尔 boolean\"></a>布尔 boolean</h2><h5 id=\"真和假-false-和true\"><a href=\"#真和假-false-和true\" class=\"headerlink\" title=\"真和假 false 和true\"></a>真和假 false 和true</h5><p>ps：表示一个判断的结果</p>\n<h2 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h2><p>ps：一般用来表示一个对象的空值</p>\n<h2 id=\"Underfinded\"><a href=\"#Underfinded\" class=\"headerlink\" title=\"Underfinded\"></a>Underfinded</h2><p>ps：一般表示变量没有初始化</p>\n<ul>\n<li>先声明一个变量，在某一行未来要使用某个变量，<strong>建议给声明的变量设置一个初始值</strong></li>\n</ul>\n<h2 id=\"基础数据类型之间的类型转换\"><a href=\"#基础数据类型之间的类型转换\" class=\"headerlink\" title=\"基础数据类型之间的类型转换\"></a><strong>基础数据类型之间的类型转换</strong></h2><p>ps：把一个类型的数据转换为另一个数据类型</p>\n<ul>\n<li>自动类型数据转换</li>\n<li>强制数据类型转换</li>\n</ul>\n<h4 id=\"强制数据类型转换\"><a href=\"#强制数据类型转换\" class=\"headerlink\" title=\"强制数据类型转换\"></a>强制数据类型转换</h4><p>NaN是JS里一个特殊值，和任何都不相等，连同自己</p>\n<p>​        typeof（）<strong>帮助查看数据类型</strong></p>\n<ul>\n<li><p>​    String（）</p>\n<ul>\n<li><p>ps：相当于将原数据外面加一个引号</p>\n</li>\n<li><p>负值转换也是负值的字符串</p>\n</li>\n</ul>\n</li>\n<li><p>​    Number（）</p>\n<ul>\n<li>**ps ** 当其他数据类型的数据不能转换为有效的数字类型时，则被转换为NaN</li>\n<li>Number(‘’)   或空串  -&gt;  0</li>\n<li>‘hello world’ -&gt; <strong>NaN</strong></li>\n<li>‘100 ‘ -&gt; 100</li>\n<li>‘a1’ -&gt; <strong>NaN</strong></li>\n<li>boolean true -&gt; 1</li>\n<li>boolean false -&gt; 0</li>\n</ul>\n</li>\n<li><p>​    Boolean（）</p>\n<ul>\n<li>ps:把其他数据类型转换为boolean</li>\n<li><strong>‘’ 空串 -&gt; false</strong></li>\n<li><strong>0 -&gt; false</strong></li>\n<li>1 -1 -&gt; true</li>\n<li><strong>null -&gt; false</strong></li>\n<li><strong>underfinded -&gt; false</strong></li>\n<li><strong>NaN -&gt; false</strong></li>\n<li><strong>false -&gt; false</strong></li>\n<li>boolean(null underfinded) -&gt; false</li>\n</ul>\n</li>\n</ul>\n<p><strong>适用于number</strong></p>\n<ul>\n<li>parseInt（）<ul>\n<li>ps：强制转换为整数</li>\n<li>还适用于将其他数据类型转换为整型</li>\n<li>s1 &#x3D; ‘abc123’ -&gt; NaN</li>\n<li>s2 &#x3D;’123abc’ -&gt; 123</li>\n</ul>\n</li>\n<li>parseFloat() 将其他数据类型转换成float<ul>\n<li>1.32a -&gt; 1.32</li>\n<li>‘1a’ -&gt; 1</li>\n</ul>\n</li>\n</ul>\n<p><strong>typeof</strong></p>\n<ol>\n<li>null object</li>\n<li>underfnded underfinded</li>\n</ol>\n<ul>\n<li>underfinded派生于null</li>\n</ul>\n<h4 id=\"自动类型转换\"><a href=\"#自动类型转换\" class=\"headerlink\" title=\"自动类型转换\"></a>自动类型转换</h4><ul>\n<li>数字 + 字符串 –&gt; 转换为字符串</li>\n<li>数字 - ‘数字字符串’  -&gt; 字符串转换成数字</li>\n<li>数字 *  ‘数字字符串’ -&gt; 字符串转换成数字</li>\n<li>数字 &#x2F;    ‘数字字符串’ -&gt; 字符串转化成数字</li>\n<li>Boolean和数字计算时（+-*&#x2F;），Boolean转换为数字</li>\n<li>字符串数字 + 布尔 -&gt;二者变换成字符串</li>\n<li>字符串数字 -*&#x2F; 布尔  -&gt; 都会变成数字</li>\n<li>字符串 + 布尔 -&gt; 二者都变成字符串</li>\n<li>字符串 -*&#x2F; 布尔 二者都变成Number</li>\n<li>任何值和NaN计算，结果都是NaN</li>\n<li>null 和 underfinded 都是 NaN</li>\n<li><strong>尽可能写程序时，把不可控的因素变成可控的，例如类型转换</strong>**</li>\n<li>自动类型转换调用的方法就是上面提到的三个方法，Number，String，Boolean</li>\n</ul>\n<p>ps：将数字以最快转换为空串 +’’</p>\n<h3 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h3><h4 id=\"除数不能为0-infinity\"><a href=\"#除数不能为0-infinity\" class=\"headerlink\" title=\"除数不能为0 infinity\"></a>除数不能为0 infinity</h4><h4 id=\"JS操作html和css修改标签样式、\"><a href=\"#JS操作html和css修改标签样式、\" class=\"headerlink\" title=\"JS操作html和css修改标签样式、\"></a>JS操作html和css修改标签样式、</h4><ol>\n<li><p>找到当前元素btna &#x3D;  getElementById(‘btn’)</p>\n</li>\n<li><p>触发事件 (确定事件三要素)</p>\n<ul>\n<li>事件：用户在浏览器中的一切动作<ul>\n<li>鼠标事件，键盘事件，文档事件</li>\n</ul>\n</li>\n<li>事件三要素 <ul>\n<li>事件源</li>\n<li>事件</li>\n<li>事件处理函数</li>\n</ul>\n</li>\n</ul>\n<p>btna.onclick &#x3D; function(){</p>\n<p>&#96;    &#x2F;&#x2F;处理的事情</p>\n<p>​    alert(‘…’)</p>\n<p>}</p>\n<ul>\n<li><strong>事件处理函数有无不影响事件的发生</strong></li>\n</ul>\n</li>\n</ol>\n<p><strong>eg</strong></p>\n<ul>\n<li>获取输入框中的内容<ul>\n<li>element.value</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用运算符\"><a href=\"#常用运算符\" class=\"headerlink\" title=\"常用运算符\"></a>常用运算符</h3><ul>\n<li>加</li>\n<li>减</li>\n<li>乘</li>\n<li>除</li>\n<li>求模&#x2F;取余 %</li>\n<li>++ – %&#x3D; </li>\n<li>&#x3D; !&#x3D; 值不等</li>\n<li>&#x3D;&#x3D; 值相等  !&#x3D;&#x3D; 值和类型其一(或）不等</li>\n<li>&#x3D;&#x3D;&#x3D; 值和类型都相等</li>\n<li>&lt; &gt; &lt;&#x3D; &gt;&#x3D;</li>\n<li>&amp;&amp; || !<ul>\n<li>短路问题</li>\n</ul>\n</li>\n</ul>\n<p>console.log(new Boolean(false))<br>Boolean {false}</p>\n<p>typeof(new Boolean(false))</p>\n<p>object</p>\n<p><strong><code>typeof(null)</code></strong><br><strong><code>&#39;object&#39;</code></strong><br><strong><code>typeof(underfinded)</code></strong><br><strong><code>&#39;undefined&#39;</code></strong><br><strong><code>typeof(NaN)</code></strong><br><strong>‘number’</strong></p>\n<p><strong>取反 先转换成布尔值再取反</strong></p>\n<p><strong>取反 取反 !!x  &#x3D; Boolean(x)</strong></p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>ps:&amp;&amp; 和 || 存在短路问题</p>\n<p>​    惰性面</p>\n<ol>\n<li>&amp;&amp;</li>\n<li>||</li>\n</ol>\n<p><strong>()改变运算符的优先级，里面存放都是表达式。</strong></p>\n<h3 id=\"栈和堆\"><a href=\"#栈和堆\" class=\"headerlink\" title=\"栈和堆\"></a>栈和堆</h3><p>栈区大小确定  -&gt; 基本数据类型不变 var b &#x3D; true</p>\n<p>堆区随需要可以扩容</p>\n<h3 id=\"JS-严格区分大小写\"><a href=\"#JS-严格区分大小写\" class=\"headerlink\" title=\"JS 严格区分大小写\"></a>JS 严格区分大小写</h3><h3 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h3><p>​    是一个数据类型，在Null这个类型只有一个值，就是null.</p>\n<ul>\n<li>​    <strong>表示一个空值，给空对象赋值</strong></li>\n</ul>\n<h3 id=\"Underfinded-1\"><a href=\"#Underfinded-1\" class=\"headerlink\" title=\"Underfinded\"></a>Underfinded</h3><p>​    是一个数据类型，在underfinded这个类型只有一个值，就是underfinded</p>\n<p>​    派生于Null</p>\n<ul>\n<li>​        <strong>null &#x3D;&#x3D; underfinded</strong></li>\n</ul>\n<h2 id=\"流程控制和循环\"><a href=\"#流程控制和循环\" class=\"headerlink\" title=\"流程控制和循环\"></a>流程控制和循环</h2><ul>\n<li>if<ul>\n<li>如果条件不是Boolean，则会强制转换为Boolean</li>\n</ul>\n</li>\n<li>if else<ul>\n<li>else if</li>\n<li>ps:嵌套过多降低代码可读性</li>\n</ul>\n</li>\n<li>switch</li>\n<li>三元</li>\n</ul>\n<p><strong>Dom操作</strong> -&gt; 看重执行顺序</p>\n<h4 id=\"swith\"><a href=\"#swith\" class=\"headerlink\" title=\"swith\"></a>swith</h4><p>switch(条件)</p>\n<p>{</p>\n<p>case’张三’:;</p>\n<p>case’张四’:;</p>\n<p>}</p>\n<p><strong>多个case共用一个代码块</strong></p>\n<p>case:    case 2:   … case n: 语句 ;  break</p>\n<p>break continue</p>\n<h4 id=\"switch展示结果不确定，switch保存数据\"><a href=\"#switch展示结果不确定，switch保存数据\" class=\"headerlink\" title=\"switch展示结果不确定，switch保存数据\"></a>switch展示结果不确定，switch保存数据</h4><p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20211130135105212.png\" alt=\"image-20211130135105212\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"title function_\">fuction</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input_value = input.<span class=\"property\">value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(input_value.<span class=\"property\">length</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;输入不能为空&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>trim() 去除两端的空格 – &gt; 字符串方法</strong></p>\n<p><strong>如果是一个长空串，则处理为空串</strong></p>\n<p><strong>isNaN  判断是否是NaN</strong></p>\n<p><strong>math.random()</strong></p>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><ul>\n<li>while</li>\n<li>do..while</li>\n<li>for</li>\n</ul>\n<p>random() 随机数函数</p>\n<p>return 函数使用</p>\n<p>continue</p>\n<p>break</p>\n<p><strong>var lis &#x3D; list.children</strong></p>\n<p><strong>获取list的children</strong></p>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><p>流程控制就是来控制我们的代码按照什么结构顺序来执行。</p>\n<p>流程控制主要有以下三种结构，分别是：</p>\n<p>（1）顺序结构</p>\n<p>（2）分支结构</p>\n<p>（3）循环结构</p>\n<p>顺序流程控制<br>顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行。<br>分支流程控制<br>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码，从而得到不同的结果。</p>\n<h3 id=\"1-if分支语句\"><a href=\"#1-if分支语句\" class=\"headerlink\" title=\"1.if分支语句\"></a>1.if分支语句</h3><p>&#x2F;&#x2F;if分支语句的语法结构如下：<br>&#x2F;&#x2F;条件成立执行代码，否则什么也不做<br>if(条件表达式){<br>    &#x2F;&#x2F;条件成立执行的代码语句<br>}</p>\n<h3 id=\"2-if-else双分支语句\"><a href=\"#2-if-else双分支语句\" class=\"headerlink\" title=\"2.if else双分支语句\"></a>2.if else双分支语句</h3><p>&#x2F;&#x2F;if else双分支语句的语法格式如下：<br>&#x2F;&#x2F;条件成立执行if里面的代码，否则执行else里面的代码<br>if(条件表达式){<br>  &#x2F;&#x2F;条件成立执行的代码<br>}else{<br>  &#x2F;&#x2F;条件不成立执行的代码<br>}</p>\n<h3 id=\"3-if-else-if多分支语句\"><a href=\"#3-if-else-if多分支语句\" class=\"headerlink\" title=\"3.if else if多分支语句\"></a>3.if else if多分支语句</h3><p>&#x2F;&#x2F;if else if多分支语句的语法格式如下：<br>&#x2F;&#x2F;适合检查多重条件<br>if(条件表达式1){<br>  语句1;<br>}else if(条件表达式2){<br>  语句2;<br>}else if(条件表达式3){<br>  语句3;<br>  …<br>}else{<br>  &#x2F;&#x2F;上述条件都不成立时执行此代码<br>}</p>\n<h3 id=\"4-三元表达式\"><a href=\"#4-三元表达式\" class=\"headerlink\" title=\"4.三元表达式\"></a>4.三元表达式</h3><p>由三元运算符组成的式子就称为三元表达式（因为三元表达式也是表达式，所以会有返回结果）。<br>&#x2F;&#x2F;三元不等式的语法机构如下：<br>条件表达式 ？ 表达式1 ： 表达式2;<br>&#x2F;&#x2F;如果条件表达式的结果为真，则返回表达式1点值；而如果条件表达式的结果为假，则返回表达式2的值。</p>\n<h3 id=\"5-switch语句\"><a href=\"#5-switch语句\" class=\"headerlink\" title=\"5.switch语句\"></a>5.switch语句</h3><p>switch语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用switch。<br>&#x2F;&#x2F;switch语句的语法格式如下：<br>switch(表达式){<br>  case value1:<br>    &#x2F;&#x2F;表达式等于value1时要执行的代码<br>    break;<br>  case value2:<br>    &#x2F;&#x2F;表达式等于value2时要执行的代码<br>    break;<br>  default:<br>    &#x2F;&#x2F;表达式不等于任何一个value值时要执行的代码<br>}</p>\n<p>switch语句中的条件表达式我们经常写成变量的形式。<br>表达式的值与value的值相匹配时，要求值和数据类型一致才算匹配成功。<br>如果当前case里面没有break，则不回退出switch语句，而是继续执行下一个case，直到遇到break或执行default语句才退出switch语句。</p>\n<h3 id=\"6-switch语句和if-else-if语句的区别\"><a href=\"#6-switch语句和if-else-if语句的区别\" class=\"headerlink\" title=\"6.switch语句和if else if语句的区别\"></a>6.switch语句和if else if语句的区别</h3><p>一般情况下，它们两个语句可以相互替换。<br>switch…case语句通常处理case为比较确定值的情况，而if…else…语句更加灵活，常用于范围判断（大于、等于某个范围）。<br>switch语句进行条件判断后直接执行到程序的条件语句，而if…else…语句有几种条件，就得判断几次（从上到下依次判断）。<br>当分支比较少时，if…else…语句的执行效率比switch语句更高。<br>当分支比较多时，switch语句的执行效率比if…else…语句更高，结构也更清晰。</p>\n<h2 id=\"循环流程控制\"><a href=\"#循环流程控制\" class=\"headerlink\" title=\"循环流程控制\"></a>循环流程控制</h2><p>目的：重复执行某些代码。</p>\n<p>在JS中，主要有以下三种类型的循环语句：</p>\n<p>（1）for循环</p>\n<p>（2）while循环</p>\n<p>（3）do…while循环</p>\n<h3 id=\"1-for循环\"><a href=\"#1-for循环\" class=\"headerlink\" title=\"1.for循环\"></a>1.for循环</h3><p>在程序中，一组被重复执行的语句被称为循环体，而能否继续重复执行，则取决于循环的终止条件。<br>循环语句是指由循环体和循环的终止条件造成的句子。<br>for循环主要用于把某些代码循环若干次，通常跟计数有关系。<br>&#x2F;&#x2F;for循环的语法结构如下：<br>for(初始化变量;条件表达式;操作表达式){<br>  &#x2F;&#x2F;循环体<br>}<br>&#x2F;&#x2F;初始化变量：其实就是用var声明一个普通的变量，并且这个变量通常是作为计数器使用。<br>&#x2F;&#x2F;条件表达式：用来决定每一次循环是否继续执行，也就是循环的终止条件。<br>&#x2F;&#x2F;操作表达式：每次循环最后执行的代码，经常用于更新计数器（递增或递减）。</p>\n<p>for循环可以重复执行相同的代码。<br>因为有计数器的存在，使用for循环可以重复执行不同代码。<br>for(var i &#x3D; 1; i &lt;&#x3D; 31; i++){<br>  console.log(‘今天是5月’+i+’日了！’);</p>\n<p>因为有计数器的存在，使用for循环可以重复执行某些操作，比如：算数运算。<br>var sum &#x3D; 0;<br>for(var i &#x3D; 1; i &lt;&#x3D; 10; i++){<br>  sum+&#x3D;i;<br>}<br>console.log(sum);</p>\n<p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构。像在一个for循环语句中， 再嵌套一个for循环，我们就称之为双重for循环。<br>for(var i &#x3D; 1; i &lt;&#x3D; 3; i++){<br>  console.log(‘这是第’+i+’次外层循环’);<br>  for(var j &#x3D; 1; j &lt;&#x3D; 3; j++){<br>    console.log(‘这是第’+i+’次里层循环’);<br>  }<br>}</p>\n<h3 id=\"2-while循环\"><a href=\"#2-while循环\" class=\"headerlink\" title=\"2.while循环\"></a>2.while循环</h3><p>while语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。<br>&#x2F;&#x2F;while语句的语法结构如下：<br>while(条件表达式){<br>  &#x2F;&#x2F;循环体代码<br>}</p>\n<h3 id=\"3-do-while循环\"><a href=\"#3-do-while循环\" class=\"headerlink\" title=\"3.do while循环\"></a>3.do while循环</h3><p>do…while语句其实是while语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。（do while循环语句至少执行一次循环体代码）<br>&#x2F;&#x2F;do while语句的语法结构如下：<br>do{<br>  &#x2F;&#x2F;循环体代码<br>}while(条件表达式);</p>\n<h3 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4.小结\"></a>4.小结</h3><p>三种循环在很多情况下都是可以相互替代使用的。<br>对于计数，三者的使用基本相同，但是更常用的还是for循环。<br>对于更复杂的判断条件，可以使用while和do while语句。</p>\n<p><strong>while语句是先判断后执行；而do while是先执行一次后判断执行。</strong></p>\n<h5 id=\"do-while-至少执行一次，while，for最少执行0次\"><a href=\"#do-while-至少执行一次，while，for最少执行0次\" class=\"headerlink\" title=\"do while 至少执行一次，while，for最少执行0次\"></a>do while 至少执行一次，while，for最少执行0次</h5><p>continue和break</p>\n<h4 id=\"1-continue关键字\"><a href=\"#1-continue关键字\" class=\"headerlink\" title=\"1.continue关键字\"></a>1.continue关键字</h4><p>continue关键字用于立即跳出本次循环，继续下一次循环（本次循环体中continue之后的代码就会少执行一次）。<br>var sum &#x3D; 0;<br>for(var i &#x3D; 1; i &lt;&#x3D; 100; i++){<br>  if(i % 7 &#x3D;&#x3D; 0){<br>    continue;<br>  }<br>  sum+&#x3D;i;<br>}<br>console.log(sum);</p>\n<h4 id=\"2-break关键字\"><a href=\"#2-break关键字\" class=\"headerlink\" title=\"2.break关键字\"></a>2.break关键字</h4><p>break关键字用于立即跳出整个循环。<br>for(var i &#x3D; 1; i &lt;&#x3D;5; i++){<br>  if(i &#x3D;&#x3D; 3){<br>    break;<br>  }<br>  console.log(‘这是第’+i+’个数！’);<br>}</p>\n<h3 id=\"…className-x3D-‘’-去掉类名\"><a href=\"#…className-x3D-‘’-去掉类名\" class=\"headerlink\" title=\"…className &#x3D; ‘’ 去掉类名\"></a>…className &#x3D; ‘’ 去掉类名</h3><p>data-XXX &#x3D;’’  html5自定义类型存数据</p>\n<p>getAttribute</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"使用情况\"><a href=\"#使用情况\" class=\"headerlink\" title=\"使用情况\"></a>使用情况</h4><ol>\n<li>一系列的值</li>\n<li>希望快速存储和取数据的时候</li>\n</ol>\n<ul>\n<li><p>在向数据中插入元素的时候，如果索引值不连续，就会形成空位</p>\n</li>\n<li><p>对于索引值不连续的数组，称之为稀疏数组</p>\n</li>\n<li><p>length 获取数组元素</p>\n</li>\n<li><p>length比索引值大1</p>\n</li>\n<li><p>PS ：如果length设置比其大，则后都是空位</p>\n<ul>\n<li>如果length设置比索引值小，则从后面清楚</li>\n<li>快速清空数组，arr.length &#x3D; 0</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p><strong>length失效****一</strong></p>\n<ul>\n<li><p>数组添加元素key不为数组，则不会被计算</p>\n</li>\n<li><p>arr[‘name’] &#x3D; ‘哈哈哈’ 计算数组长度的时候，当前元素失效</p>\n</li>\n<li><p>长度 &#x3D;&#x3D; 任然是最大索引值加1  只计算数字索引</p>\n</li>\n</ul>\n</li>\n<li><p><strong>length失效****一</strong></p>\n<ul>\n<li>arr[100] &#x3D; ‘hhh’&#x2F;</li>\n<li>console.log(arr.length) &#x2F;&#x2F;101</li>\n</ul>\n</li>\n</ol>\n<p>for可以以索引取字符串的值</p>\n<p><strong>字符串后面用方括号</strong></p>\n<p><strong>对象.属性（方法</strong></p>\n<p>数组. 后面只能是一个符合</p>\n<p><strong>对象[属性]  允许使用方括号解析属性</strong></p>\n<p><strong>obj 对象 有一个 hello 属性</strong></p>\n<p><strong>var a &#x3D; ‘hello’</strong></p>\n<p><strong>obj[a] –&gt; obj[‘hello]   js引擎将a解析为一个变量</strong></p>\n<p><strong>–数组是一种特殊的对象 key-value</strong></p>\n<p><strong>–特殊类型（凡是对象key都是字符串，）</strong></p>\n<ul>\n<li>​    <strong>数组的key看上去是一个number，实际上会给他转换为string</strong></li>\n<li><strong>一切皆对象，除了null和underfinded很多数据类型都对象的特点，有属性和方法，以key-value为结构，key的类型永远是字符串，调用属性的时候可以用点可以用方括号</strong></li>\n<li>数组的key可以为字符串</li>\n</ul>\n<h3 id=\"空位\"><a href=\"#空位\" class=\"headerlink\" title=\"空位\"></a>空位</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产生5个数组空位的数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = <span class=\"title class_\">Array</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同上3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [,<span class=\"number\">2</span>,,<span class=\"number\">3</span>,,]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//产生10个数组空位的数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = []</span><br><span class=\"line\">arr3.<span class=\"property\">length</span> = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组a[3]-a[9]都是数组空位</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">arr4[<span class=\"number\">10</span>] = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组arr[2]产生数组空位</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr5 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">delete</span> arr[<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数组的增删改查\"><a href=\"#数组的增删改查\" class=\"headerlink\" title=\"数组的增删改查\"></a>数组的增删改查</h4><ul>\n<li>delect[n] 通过delect删除元素会形成稀疏数组，形成空位（存在空位，索引值不连续</li>\n<li>arr[0] &#x3D;’xxx’</li>\n<li>console.log(arr[0])</li>\n</ul>\n<p>数组的空位可以访问，值为<strong>underfinded</strong></p>\n<p><strong>当数组为一个正常数组时，可以通过length来清楚数组（不存在索引值不为非数字的值</strong></p>\n<p>数组遍历优化或提高效率</p>\n<p>var len &#x3D; arr.length</p>\n<p>for(;i&lt;len)</p>\n<h2 id=\"api-接口方法\"><a href=\"#api-接口方法\" class=\"headerlink\" title=\"api (接口方法)\"></a>api (接口方法)</h2><ul>\n<li><p><strong>push向数组的最后插入一个元素</strong> push(a,b)一次可以添加多个值，unshift同</p>\n</li>\n<li><p><strong>arr.shift() 删除第一个数据元素，并返回给我们删除的元素</strong></p>\n</li>\n<li><p><strong>pop() 删除数组的最后一个元素，并且返回删除的最后一个元素</strong></p>\n</li>\n<li><p><strong>unshift() 向数组的最前方插入一个元素</strong></p>\n</li>\n<li><p>splice(索引值，删除数组元素的个数，插入的元素) 删除元素 替换元素 插入元素</p>\n<ul>\n<li>删除<ul>\n<li>arr.splice(1,1) 从索引一开始，删除一元素</li>\n<li>arr.splice(1,1,’xxx’) 。。。 替换一元素 值为xxx</li>\n<li>arr.splice(2,0,’xxx’) 在第三个位置插入xxx</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<p>所有的表单控件必须用value，初此之外必须使用，innerHtml,innerText</p>\n<p>resize:none  -&gt;删除textarea的可变  不让其影响其他元素</p>\n<p>dotted 虚线效果（solid）</p>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><ul>\n<li><p>find </p>\n</li>\n<li><p>findIndex</p>\n</li>\n<li><p>forEach</p>\n</li>\n</ul>\n<p>forEach(item,index)</p>\n<p>find可以返回当前元素所在的数组</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"对象（object）\"><a href=\"#对象（object）\" class=\"headerlink\" title=\"对象（object）\"></a>对象（object）</h3><h4 id=\"对象包含两种-属性和方法\"><a href=\"#对象包含两种-属性和方法\" class=\"headerlink\" title=\"对象包含两种 属性和方法\"></a>对象包含两种 <strong>属性和方法</strong></h4><h4 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h4><p>var obj &#x3D; {}</p>\n<ul>\n<li><p>添加元素</p>\n<p>obj[‘username’] &#x3D; ‘张三’   数组的key可以是数字或者字符串</p>\n<p>var str &#x3D; ’like‘</p>\n<p>obj[str] &#x3D; ‘电影’</p>\n<ul>\n<li>​    str 不加引号，可以作为变量被解析</li>\n<li>obj.age &#x3D;&#x3D;&#x3D; obj[‘age’]<ul>\n<li><strong>区别</strong>：方括号中可以解析变量，<strong>如上</strong></li>\n</ul>\n</li>\n<li><strong>对象.一定是字符串</strong><ul>\n<li>obj.str str默认为字符串</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方法的写法</p>\n<ul>\n<li><p>obj[‘say’] &#x3D; function(){</p>\n<p>….}</p>\n</li>\n<li><p>对象中的方法需要手动调用</p>\n</li>\n</ul>\n</li>\n<li><p>添加属性和方法</p>\n<ul>\n<li><p>&#96;&#96;&#96;js<br>&#x2F;&#x2F;创建对象时添加内容，一定采用key-value的形式</p>\n<ul>\n<li><ul>\n<li>var obj &#x3D; {<br>}</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 变量名和对象名相同，需要在变量的外部加一个方括号</span><br><span class=\"line\"></span><br><span class=\"line\">    - [str]:&#x27;值&#x27;，</span><br><span class=\"line\"></span><br><span class=\"line\">- **key值的设定需要符合标识符命名规则**</span><br><span class=\"line\"></span><br><span class=\"line\">- 对象的方法里面如何使用对象的属性和方法 （this代表事件源）</span><br><span class=\"line\"></span><br><span class=\"line\">  - this放在对象的方法中，即指向该对象</span><br><span class=\"line\"></span><br><span class=\"line\">- 向对象中添加属性和方法 </span><br><span class=\"line\"></span><br><span class=\"line\">  - obj.a = &#x27;&#x27;;</span><br><span class=\"line\">  - obj.c = function()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- 删除数组 中的属性和方法</span><br><span class=\"line\"></span><br><span class=\"line\">  - delece obj.a;</span><br><span class=\"line\">  - object obj[&#x27;&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">- 取或调用数组中的属性和方法</span><br><span class=\"line\"></span><br><span class=\"line\">- 遍历对象</span><br><span class=\"line\"></span><br><span class=\"line\">  - ​\t`for(var key in obj)&#123;`</span><br><span class=\"line\"></span><br><span class=\"line\">    ​\t`console.log(obj[key])`</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- 1</span><br><span class=\"line\"></span><br><span class=\"line\">### 对象和数组进行比较</span><br><span class=\"line\"></span><br><span class=\"line\">1. //数组时有序的，对象是无序的</span><br><span class=\"line\">2. 数组的key必须是number 对象的key是字符串，数组是一种特殊的对象，虽然数组的key是number，但在解析时，会被自动转换成字符串</span><br><span class=\"line\">3. 数组操作元素只能[]对象，对象可以通过  .  和 []</span><br><span class=\"line\">4. 数组的遍历可以使用foreach，for ，for in，对象只能使用for in</span><br><span class=\"line\">5. 当key值重复时，value会发生覆盖</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 对象方法Object.keys(object)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 函数</span><br><span class=\"line\"></span><br><span class=\"line\">##### 定义 ：一段代码的集合体</span><br><span class=\"line\"></span><br><span class=\"line\">特点：不调用时为静止片段，不调用不执行。减少工作量</span><br><span class=\"line\"></span><br><span class=\"line\">#### 创建函数的方式</span><br><span class=\"line\"></span><br><span class=\"line\">1. function 函数名()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   语句；</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2. 函数表达式</span><br><span class=\"line\"></span><br><span class=\"line\">   - var 。。。 = function    在js中，函数地位和基础数据类型相同，数据能做什么，函数就能做什么</span><br><span class=\"line\"></span><br><span class=\"line\">   var 变量 = function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   ​\t语句；</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   - ​\t将函数放在函数的右边，js引擎就会把函数理解为一个表达式</span><br><span class=\"line\">   - 一般来说说，表达式都放在等号的右边</span><br><span class=\"line\"></span><br><span class=\"line\">3. var fn = new function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 函数名</span><br><span class=\"line\"></span><br><span class=\"line\">理解为变量名  -&gt; 符合标识符命名规则</span><br><span class=\"line\"></span><br><span class=\"line\">- ​\t给函数起名字时，不要首字母大小，</span><br><span class=\"line\">  - 凡是大写字母开头都是构造函数</span><br><span class=\"line\">- 形参和实参</span><br><span class=\"line\">  - 形参：理解为只能用在内部的变量</span><br><span class=\"line\">    - 调用函数的时候给形参赋值，即实参赋值给形参</span><br><span class=\"line\">  - 实参：</span><br><span class=\"line\">  - ps：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 返回值</span><br><span class=\"line\"></span><br><span class=\"line\">需求:通过add函数计算出100+200的值，然后通过msg函数结果以弹窗将结果以弹窗的形式弹出</span><br><span class=\"line\"></span><br><span class=\"line\">- 将函数处理后的结果在函数外拿到</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### callback回调函数</span><br><span class=\"line\"></span><br><span class=\"line\">把函数当参数传递给另一个函数</span><br><span class=\"line\"></span><br><span class=\"line\">##### 没有名字的函数叫匿名函数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1. 函数创建方式：</span><br><span class=\"line\">   1. `function`关键字 </span><br><span class=\"line\">   2. 函数表达式</span><br><span class=\"line\">   3. 构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 通过函数表达式创建的函数不能提前使用。因为函数表达式的创建形式相当于是把一个匿名函数赋值给了变量，虽然变量和函数都会提升，但是赋值的操作不会提升。所以也就不能提前使用函数。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 不管是变量也好还是函数也好，提升终归不是一个好的事情，所以对于程序员来说，知道这个规则但是我们尽量不去使用。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">// 尽量不在函数体之前使用函数</span><br><span class=\"line\">fn1();</span><br><span class=\"line\">function fn1() &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>函数名<ol>\n<li>函数的命名遵守标识符的规则</li>\n<li>尽量不要首字母大写，因为在js中首字母大写是属于构造函数(class类)</li>\n</ol>\n</li>\n<li>函数的参数<ol>\n<li>形参(创建函数时，函数名之后的括号里放的就是形参列表)</li>\n<li>实参(调用函数时，函数名后面的括号放的就是实参列表)</li>\n</ol>\n</li>\n</ol>\n<p>​    关于形参和实参：</p>\n<ol>\n<li><p>形参的个数多于实参的个数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a,b,c</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>); </span><br></pre></td></tr></table></figure>\n\n<p>多余的形参值是undefined。</p>\n<blockquote>\n<p>完全可以把形参理解为js中的变量，只不过这个变量只能用在函数中，而实参其实就是给这个变量赋值。</p>\n<p>如果实参的个数少于形参，那就会出现多余的形参没有被赋值，自然结果就和未赋值的变量相同。</p>\n</blockquote>\n</li>\n<li><p>实参的个数多余形参的个数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a,b</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n\n<p>当实参的个数多于形参的个数时，想要找到多余的实参，可以利用arguments(js提供的专门在函数当中使用的类数组对象)。</p>\n<p>可以通过arguments.length获取实参的个数。</p>\n<p>可以通过arguments.callee.length 获取形参的个数。</p>\n</li>\n<li><p>函数返回值</p>\n<p>js的函数一旦创建完毕，那么就会在内存中停留但是不会被执行，只有函数调用的时候，函数代码才会执行。在执行的过程中如果碰到了return，那么函数就会立刻停止执行。</p>\n<p>在一个函数中，同一时刻有且仅有一个return可以生效。</p>\n<p>return只能返回一个值。</p>\n</li>\n</ol>\n<hr>\n<ol>\n<li><p>作用域和变量</p>\n<ol>\n<li>作用域：代码生效的范围。</li>\n</ol>\n<p>在es5当中，作用域只有两个：</p>\n<ol>\n<li>全局作用域：整个script存在的空间</li>\n<li>函数作用域：函数内部的空间</li>\n</ol>\n</li>\n</ol>\n<p>既然存在两个作用域，那么对应的在不同作用域下声明的变量，也就有了不同的称呼：</p>\n<ul>\n<li>全局变量(在全局作用域下声明的变量，生效范围全局)</li>\n<li>局部变量(在函数内部声明的变量，生效范围仅限于函数的内部)</li>\n</ul>\n<ol start=\"2\">\n<li><p>作用域链</p>\n<p><em>由小范围的作用域不断向上延申扩展最终形成的一系列作用域，称之为作用域链。</em></p>\n</li>\n<li><p>生命周期和垃圾回收机制</p>\n</li>\n<li><p>闭包函数</p>\n<ol>\n<li>在函数内部将一个函数当作返回值返回，这样的函数结构称之为闭包函数。</li>\n<li>特点：返回的函数可以任意的通过作用域链拿到上一层函数的值。<ol>\n<li>会将状态保存，并不会在函数执行完毕之后销毁函数内部的变量。</li>\n</ol>\n</li>\n<li>缺点：不会及时的被销毁。</li>\n</ol>\n</li>\n<li><p>回调函数</p>\n<p>函数在js中是一等公民，所以基础数据类型能干的事，函数也可以干。</p>\n<p>所以就可以拿函数当作一个参数传递给另外一个函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsq</span>(<span class=\"params\">num1, num2, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(num1, num2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>递归函数</p>\n<p>所谓的递归函数就是在函数体内调用本函数。</p>\n</li>\n<li><p>IIFE</p>\n</li>\n</ol>\n<h3 id=\"闭包函数\"><a href=\"#闭包函数\" class=\"headerlink\" title=\"闭包函数\"></a>闭包函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> temp = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"title function_\">demo</span>();</span><br><span class=\"line\"><span class=\"comment\">// 凡是多个函数嵌套，里面的函数都保存到了外部函数的外部（即外部)里面函数在执行时，可以继续访问外部函数未销毁之前外部变量函数的变量，且不会报错</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//经典闭包案例</span></span><br><span class=\"line\"><span class=\"comment\">//闭包里面的匿名函数，先不去找i的值，仅仅先创建了10个闭包函数，最后执行完循环，i=10不满足条件，然后执行这些闭包函数</span></span><br><span class=\"line\"><span class=\"comment\">//    此时再来找i的值，i的值未10，最终结果为10个10</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tarr[i] = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t\t\tdocumen.<span class=\"title function_\">write</span>(i+<span class=\"string\">&#x27; &#x27;</span>);\t</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myArr = <span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt; <span class=\"number\">10</span>;j++)&#123;</span><br><span class=\"line\">\tmyArr[j]();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;            <span class=\"keyword\">var</span> divall = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);            divall.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;noteSome&#x27;</span>);            divall.<span class=\"property\">innerHTML</span> = <span class=\"title function_\">getModule</span>(arr[i].<span class=\"property\">ipt_value</span>, arr[i].<span class=\"property\">text_value</span>, arr[i].<span class=\"property\">time</span>, arr[i].<span class=\"property\">note_id</span>)            artile.<span class=\"title function_\">append</span>(divall);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><h4 id=\"1-获取字符串长度\"><a href=\"#1-获取字符串长度\" class=\"headerlink\" title=\"1. 获取字符串长度\"></a>1. 获取字符串长度</h4><p>JavaScript中的字符串有一个length属性，该属性可以用来获取字符串的长度：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;hello&#x27;</span>;str.<span class=\"property\">length</span>   <span class=\"comment\">// 输出结果：5复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-获取字符串指定位置的值\"><a href=\"#2-获取字符串指定位置的值\" class=\"headerlink\" title=\"2. 获取字符串指定位置的值\"></a>2. 获取字符串指定位置的值</h4><p>charAt()和charCodeAt()方法都可以通过索引来获取指定位置的值：</p>\n<ul>\n<li>charAt() 方法获取到的是指定位置的字符；</li>\n<li>charCodeAt()方法获取的是指定位置字符的Unicode值。</li>\n</ul>\n<h4 id=\"（1）charAt\"><a href=\"#（1）charAt\" class=\"headerlink\" title=\"（1）charAt()\"></a>（1）charAt()</h4><p>charAt() 方法可以返回指定位置的字符。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">charAt</span>(index)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>index表示字符在字符串中的索引值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">charAt</span>(<span class=\"number\">1</span>)  <span class=\"comment\">// 输出结果：e </span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>我们知道，字符串也可以通过索引值来直接获取对应字符，那它和charAt()有什么区别呢？来看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">charAt</span>(<span class=\"number\">1</span>)  <span class=\"comment\">// 输出结果：e </span></span><br><span class=\"line\">str[<span class=\"number\">1</span>]         <span class=\"comment\">// 输出结果：e </span></span><br><span class=\"line\">str.<span class=\"title function_\">charAt</span>(<span class=\"number\">5</span>)  <span class=\"comment\">// 输出结果：&#x27;&#x27; </span></span><br><span class=\"line\">str[<span class=\"number\">5</span>]         <span class=\"comment\">// 输出结果：undefined</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当index的取值不在str的长度范围内时，str[index]会返回undefined，而charAt(index)会返回空字符串；除此之外，str[index]不兼容ie6-ie8，charAt(index)可以兼容。</p>\n<h4 id=\"（2）charCodeAt\"><a href=\"#（2）charCodeAt\" class=\"headerlink\" title=\"（2）charCodeAt()\"></a>（2）charCodeAt()</h4><p><code>charCodeAt()</code>：该方法会返回指定索引位置字符的 Unicode 值，返回值是 0 - 65535 之间的整数，表示给定索引处的 UTF-16 代码单元，如果指定位置没有字符，将返回 <strong>NaN</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefg&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// &quot;b&quot; --&gt; 98</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>通过这个方法，可以获取字符串中指定Unicode编码值范围的字符。比如，数字0～9的Unicode编码范围是: 48～57，可以通过这个方法来筛选字符串中的数字，当然如果你更熟悉正则表达式，会更方便。</p>\n<h4 id=\"3-检索字符串是否包含特定序列\"><a href=\"#3-检索字符串是否包含特定序列\" class=\"headerlink\" title=\"3. 检索字符串是否包含特定序列\"></a>3. 检索字符串是否包含特定序列</h4><p>这5个方法都可以用来检索一个字符串中是否包含特定的序列。其中前两个方法得到的指定元素的索引值，并且只会返回第一次匹配到的值的位置。后三个方法返回的是布尔值，表示是否匹配到指定的值。</p>\n<p>注意：这5个方法都对大小写敏感！</p>\n<h4 id=\"（1）indexOf\"><a href=\"#（1）indexOf\" class=\"headerlink\" title=\"（1）indexOf()\"></a>（1）indexOf()</h4><p><code>indexOf()</code>：查找某个字符，<strong>有则返回第一次匹配到的位置</strong>，否则返回-1，其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">indexOf</span>(searchvalue,fromindex)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>searchvalue：必需，规定需检索的字符串值；</li>\n<li>fromindex：可选的整数参数，规定在字符串中开始检索的位置。它的合法取值是 0 到 string.length - 1。如省略该，则从字符串的首字符开始检索。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefgabc&quot;</span>;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;a&quot;</span>));   <span class=\"comment\">// 输出结果：0console.log(str.indexOf(&quot;z&quot;));   // 输出结果：-1console.log(str.indexOf(&quot;c&quot;, 4)) // 输出结果：9复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）lastIndexOf\"><a href=\"#（2）lastIndexOf\" class=\"headerlink\" title=\"（2）lastIndexOf()\"></a>（2）lastIndexOf()</h4><p><code>lastIndexOf()</code>：查找某个字符，有则返回最后一次匹配到的位置，否则返回-1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcabc&quot;</span>;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&quot;a&quot;</span>));  <span class=\"comment\">// 输出结果：3console.log(str.lastIndexOf(&quot;z&quot;));  // 输出结果：-1复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>该方法和indexOf()类似，只是查找的顺序不一样，indexOf()是正序查找，lastIndexOf()是逆序查找。</p>\n<h4 id=\"（3）includes\"><a href=\"#（3）includes\" class=\"headerlink\" title=\"（3）includes()\"></a>（3）includes()</h4><p><code>includes()</code>：该方法用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 true，否则返回 false。该方法的语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">includes</span>(searchvalue, start)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>searchvalue：必需，要查找的字符串；</li>\n<li>start：可选，设置从那个位置开始查找，默认为 0。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;Hello world!&#x27;</span>;str.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;o&#x27;</span>)  <span class=\"comment\">// 输出结果：truestr.includes(&#x27;z&#x27;)  // 输出结果：falsestr.includes(&#x27;e&#x27;, 2)  // 输出结果：false复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（4）startsWith\"><a href=\"#（4）startsWith\" class=\"headerlink\" title=\"（4）startsWith()\"></a>（4）startsWith()</h4><p><code>startsWith()</code>：该方法用于检测字符串<strong>是否以指定的子字符串开始</strong>。如果是以指定的子字符串开头返回 true，否则 false。其语法和上面的includes()方法一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;Hello world!&#x27;</span>;str.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"comment\">// 输出结果：truestr.startsWith(&#x27;Helle&#x27;) // 输出结果：falsestr.startsWith(&#x27;wo&#x27;, 6) // 输出结果：true复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（5）endsWith\"><a href=\"#（5）endsWith\" class=\"headerlink\" title=\"（5）endsWith()\"></a>（5）endsWith()</h4><p><code>endsWith()</code>：该方法用来判断当前字符串<strong>是否是以指定的子字符串结尾</strong>。如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">endsWith</span>(searchvalue, length)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>searchvalue：必需，要搜索的子字符串；</li>\n<li>length： 设置字符串的长度，默认值为原始字符串长度 string.length。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;Hello world!&#x27;</span>;str.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;!&#x27;</span>)       <span class=\"comment\">// 输出结果：truestr.endsWith(&#x27;llo&#x27;)     // 输出结果：falsestr.endsWith(&#x27;llo&#x27;, 5)  // 输出结果：true复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<strong>当第二个参数设置为5时，就会从字符串的前5个字符中进行检索，所以会返回true。</strong></p>\n<h4 id=\"4-连接多个字符串\"><a href=\"#4-连接多个字符串\" class=\"headerlink\" title=\"4. 连接多个字符串\"></a>4. 连接多个字符串</h4><p>concat() 方法用于连接两个或多个字符串。该方法不会改变原有字符串，会返回连接两个或多个字符串的新字符串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">concat</span>(string1, string2, ..., stringX)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>其中参数 string1, string2, …, stringX 是必须的，他们将被连接为一个字符串的一个或多个字符串对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abc&quot;</span>;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">concat</span>(<span class=\"string\">&quot;efg&quot;</span>));          <span class=\"comment\">//输出结果：&quot;abcefg&quot;console.log(str.concat(&quot;efg&quot;,&quot;hijk&quot;)); //输出结果：&quot;abcefghijk&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然concat()方法是专门用来拼接字符串的，但是在开发中使用最多的还是加操作符+，因为其更加简单。</p>\n<h4 id=\"5-字符串分割成数组\"><a href=\"#5-字符串分割成数组\" class=\"headerlink\" title=\"5. 字符串分割成数组\"></a>5. 字符串分割成数组</h4><p>split() 方法用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">split</span>(separator,limit)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>separator：必需。字符串或正则表达式，从该参数指定的地方分割 string。</li>\n<li>limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;c&quot;</span>);    <span class=\"comment\">// 输出结果：[&quot;ab&quot;, &quot;def&quot;]</span></span><br><span class=\"line\">str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"number\">4</span>)   <span class=\"comment\">// 输出结果：[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] </span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果把空字符串用作 separator，那么字符串中的每个字符之间都会被分割。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>);     <span class=\"comment\">// 输出结果：[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>其实在将字符串分割成数组时，可以同时拆分多个分割符，使用正则表达式即可实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"string\">&quot;apples,bananas;cherries&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = list.<span class=\"title function_\">split</span>(<span class=\"regexp\">/[,;]/</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fruits);  <span class=\"comment\">// 输出结果：[&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;]</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-截取字符串\"><a href=\"#6-截取字符串\" class=\"headerlink\" title=\"6. 截取字符串\"></a>6. 截取字符串</h4><p>substr()、substring()和 slice() 方法都可以用来截取字符串。</p>\n<h4 id=\"（1）-slice\"><a href=\"#（1）-slice\" class=\"headerlink\" title=\"（1） slice()\"></a>（1） slice()</h4><p>slice() 方法用于提取字符串的某个部分，并以新的字符串返回被提取的部分。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">slice</span>(start,end)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>start：必须。 要截取的片断的起始下标，第一个字符位置为 0。如果为负数，则从尾部开始截取。</li>\n<li>end：可选。 要截取的片段结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</li>\n</ul>\n<p>上面说了，如果start是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefg&quot;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>,<span class=\"number\">6</span>);   <span class=\"comment\">// 输出结果：&quot;bcdef&quot; </span></span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);     <span class=\"comment\">// 输出结果：&quot;bcdefg&quot; </span></span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>();      <span class=\"comment\">// 输出结果：&quot;abcdefg&quot; </span></span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>(-<span class=\"number\">2</span>);    <span class=\"comment\">// 输出结果：&quot;fg&quot;</span></span><br><span class=\"line\">str.<span class=\"title function_\">slice</span>(<span class=\"number\">6</span>, <span class=\"number\">1</span>);  <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>注意，该方法返回的子串<strong>包括开始处的字符</strong>，但<strong>不包括结束处的字符</strong>。</p>\n<h4 id=\"（2）-substr\"><a href=\"#（2）-substr\" class=\"headerlink\" title=\"（2） substr()\"></a>（2） substr()</h4><p>substr() 方法用于在字符串中抽取从开始下标开始的指定数目的字符。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">substr</span>(start,length)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>start    必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</li>\n<li>length：可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefg&quot;</span>;str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>,<span class=\"number\">6</span>); <span class=\"comment\">// 输出结果：&quot;bcdefg&quot;</span></span><br><span class=\"line\">str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>);   <span class=\"comment\">// 输出结果：&quot;bcdefg&quot; 相当于截取[1,str.length-1]</span></span><br><span class=\"line\">str.<span class=\"title function_\">substr</span>();    <span class=\"comment\">// 输出结果：&quot;abcdefg&quot; 相当于截取[0,str.length-1]</span></span><br><span class=\"line\">str.<span class=\"title function_\">substr</span>(-<span class=\"number\">1</span>);  <span class=\"comment\">// 输出结果：&quot;g&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）-substring\"><a href=\"#（3）-substring\" class=\"headerlink\" title=\"（3） substring()\"></a>（3） substring()</h4><p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">substring</span>(<span class=\"keyword\">from</span>, to)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>from：必需。一个非负的整数，规定要提取的子串的第一个字符在 string 中的位置。</li>\n<li>to：可选。一个非负的整数，比要提取的子串的最后一个字符在 string 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。</li>\n</ul>\n<p><strong>注意：</strong> 如果参数 from 和 to 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 from 比 to 大，那么该方法在提取子串之前会先交换这两个参数。并且该方法不接受负的参数，如果参数是个负数，就会返回这个字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdefg&quot;</span>;str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>,<span class=\"number\">6</span>); <span class=\"comment\">// 输出结果：&quot;bcdef&quot; [1,6)</span></span><br><span class=\"line\"> str.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>);   <span class=\"comment\">// 输出结果：&quot;bcdefg&quot;[1,str.length-1]</span></span><br><span class=\"line\">str.<span class=\"title function_\">substring</span>();    <span class=\"comment\">// 输出结果：&quot;abcdefg&quot; [0,str.length-1]</span></span><br><span class=\"line\">str.<span class=\"title function_\">substring</span>(<span class=\"number\">6</span>,<span class=\"number\">1</span>); <span class=\"comment\">// 输出结果 &quot;bcdef&quot; [1,6)</span></span><br><span class=\"line\">str.<span class=\"title function_\">substring</span>(-<span class=\"number\">1</span>);  <span class=\"comment\">// 输出结果：&quot;abcdefg&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，该方法返回的子串<strong>包括开始处的字符</strong>，但<strong>不包括结束处的字符</strong>。</p>\n<h4 id=\"7-字符串大小写转换\"><a href=\"#7-字符串大小写转换\" class=\"headerlink\" title=\"7. 字符串大小写转换\"></a>7. 字符串大小写转换</h4><p>toLowerCase() 和 toUpperCase()方法可以用于字符串的大小写转换。</p>\n<h4 id=\"（1）toLowerCase\"><a href=\"#（1）toLowerCase\" class=\"headerlink\" title=\"（1）toLowerCase()\"></a>（1）toLowerCase()</h4><p><code>toLowerCase()</code>：该方法用于把字符串转换为小写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;adABDndj&quot;</span>;str.<span class=\"title function_\">toLowerCase</span>(); <span class=\"comment\">// 输出结果：&quot;adabdndj&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）toUpperCase\"><a href=\"#（2）toUpperCase\" class=\"headerlink\" title=\"（2）toUpperCase()\"></a>（2）toUpperCase()</h4><p><code>toUpperCase()</code>：该方法用于把字符串转换为大写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;adABDndj&quot;</span>;str.<span class=\"title function_\">toUpperCase</span>(); <span class=\"comment\">// 输出结果：&quot;ADABDNDJ&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以用这个方法来将字符串中第一个字母变成大写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> word = <span class=\"string\">&#x27;apple&#x27;</span></span><br><span class=\"line\">word = word[<span class=\"number\">0</span>].<span class=\"title function_\">toUpperCase</span>() + word.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(word) <span class=\"comment\">// 输出结果：&quot;Apple&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-字符串模式匹配\"><a href=\"#8-字符串模式匹配\" class=\"headerlink\" title=\"8. 字符串模式匹配\"></a>8. 字符串模式匹配</h4><p>replace()、match()和search()方法可以用来匹配或者替换字符。</p>\n<h4 id=\"（1）replace\"><a href=\"#（1）replace\" class=\"headerlink\" title=\"（1）replace()\"></a>（1）replace()</h4><p><code>replace()</code>：该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">replace</span>(searchvalue, newvalue)复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>searchvalue：必需。规定子字符串或要替换的模式的 RegExp 对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</li>\n<li>newvalue：必需。一个字符串值。规定了替换文本或生成替换文本的函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;z&quot;</span>) <span class=\"comment\">// 输出结果：abzdef</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>执行一个全局替换, 忽略大小写:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">&quot;Mr Blue has a blue house and a blue car&quot;</span>;</span><br><span class=\"line\">str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/blue/gi</span>, <span class=\"string\">&quot;red&quot;</span>);    <span class=\"comment\">// 输出结果：&#x27;Mr red has a red house and a red car&#x27;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> 如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。</p>\n<h4 id=\"（2）match\"><a href=\"#（2）match\" class=\"headerlink\" title=\"（2）match()\"></a>（2）match()</h4><p><code>match()</code>：该方法用于在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">match</span>(regexp)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法的参数 regexp 是必需的，规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>\n<p><strong>注意：</strong> 该方法返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">match</span>(<span class=\"string\">&quot;c&quot;</span>)) <span class=\"comment\">// [&quot;c&quot;, index: 2, input: &quot;abcdef&quot;, groups: undefined]</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）search\"><a href=\"#（3）search\" class=\"headerlink\" title=\"（3）search()\"></a>（3）search()</h4><p><code>search()</code>方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.<span class=\"title function_\">search</span>(searchvalue)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法的参数 regex 可以是需要在 string 中检索的子串，也可以是需要检索的 RegExp 对象。</p>\n<p><strong>注意：</strong> 要执行忽略大小写的检索，请追加标志 i。该方法不执行全局匹配，它将忽略标志 g，也就是只会返回第一次匹配成功的结果。如果没有找到任何匹配的子串，则返回 -1。</p>\n<p><strong>返回值：</strong> 返回 str 中第一个与 regexp 相匹配的子串的起始位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span>;str.<span class=\"title function_\">search</span>(<span class=\"regexp\">/bcd/</span>)   <span class=\"comment\">// 输出结果：1复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-移除字符串收尾空白符\"><a href=\"#9-移除字符串收尾空白符\" class=\"headerlink\" title=\"9. 移除字符串收尾空白符\"></a>9. 移除字符串收尾空白符</h4><p>trim()、trimStart()和trimEnd()这三个方法可以用于移除字符串首尾的头尾空白符，空白符包括：空格、制表符 tab、换行符等其他空白符等。</p>\n<h4 id=\"（1）trim\"><a href=\"#（1）trim\" class=\"headerlink\" title=\"（1）trim()\"></a>（1）trim()</h4><p>trim() 方法用于移除字符串首尾空白符，该方法不会改变原始字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;  abcdef  &quot;</span>str.<span class=\"title function_\">trim</span>()    <span class=\"comment\">// 输出结果：&quot;abcdef&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，该方法不适用于null、undefined、Number类型。</p>\n<h4 id=\"（2）trimStart\"><a href=\"#（2）trimStart\" class=\"headerlink\" title=\"（2）trimStart()\"></a>（2）trimStart()</h4><p>trimStart() 方法的的行为与<code>trim()</code>一致，不过会返回一个<strong>从原始字符串的开头删除了空白的新字符串</strong>，不会修改原始字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">&#x27;  abc  &#x27;</span>;s.<span class=\"title function_\">trimStart</span>()   <span class=\"comment\">// &quot;abc  &quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）trimEnd\"><a href=\"#（3）trimEnd\" class=\"headerlink\" title=\"（3）trimEnd()\"></a>（3）trimEnd()</h4><p>trimEnd() 方法的的行为与<code>trim()</code>一致，不过会返回一个<strong>从原始字符串的结尾删除了空白的新字符串</strong>，不会修改原始字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">&#x27;  abc  &#x27;</span>;s.<span class=\"title function_\">trimEnd</span>()   <span class=\"comment\">// &quot;  abc&quot;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-获取字符串本身\"><a href=\"#10-获取字符串本身\" class=\"headerlink\" title=\"10. 获取字符串本身\"></a>10. 获取字符串本身</h4><p>valueOf()和toString()方法都会返回字符串本身的值，感觉用处不大。</p>\n<h4 id=\"（1）valueOf\"><a href=\"#（1）valueOf\" class=\"headerlink\" title=\"（1）valueOf()\"></a>（1）valueOf()</h4><p><code>valueOf()</code>：返回某个字符串对象的原始值，该方法通常由 JavaScript 自动进行调用，而不是显式地处于代码中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// &quot;abcdef&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）toString\"><a href=\"#（2）toString\" class=\"headerlink\" title=\"（2）toString()\"></a>（2）toString()</h4><p><code>toString()</code>：返回字符串对象本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;abcdef&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// &quot;abcdef&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-重复一个字符串\"><a href=\"#11-重复一个字符串\" class=\"headerlink\" title=\"11. 重复一个字符串\"></a>11. 重复一个字符串</h4><p>repeat() 方法返回一个新字符串，表示将原字符串重复n次：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">3</span>)     <span class=\"comment\">// 输出结果：&quot;xxx&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 输出结果：&quot;hellohello&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">0</span>)    <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数是小数，会向下取整：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">2.9</span>) <span class=\"comment\">// 输出结果：&quot;nana&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数是负数或者Infinity，会报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"title class_\">Infinity</span>)   <span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(-<span class=\"number\">1</span>)         <span class=\"comment\">// RangeError</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(-<span class=\"number\">0.9</span>)   <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数是NaN，就等同于 0：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"title class_\">NaN</span>)    <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果repeat的参数是字符串，则会先转换成数字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"string\">&#x27;na&#x27;</span>)   <span class=\"comment\">// 输出结果：&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;na&#x27;</span>.<span class=\"title function_\">repeat</span>(<span class=\"string\">&#x27;3&#x27;</span>)    <span class=\"comment\">// 输出结果：&quot;nanana&quot;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-补齐字符串长度\"><a href=\"#12-补齐字符串长度\" class=\"headerlink\" title=\"12. 补齐字符串长度\"></a>12. 补齐字符串长度</h4><p>padStart()和padEnd()方法用于补齐字符串的长度。如果某个字符串不够指定长度，会在头部或尾部补全。</p>\n<h4 id=\"（1）padStart\"><a href=\"#（1）padStart\" class=\"headerlink\" title=\"（1）padStart()\"></a>（1）padStart()</h4><p><code>padStart()</code>用于头部补全。该方法有两个参数，其中第一个参数是一个数字，表示字符串补齐之后的长度；第二个参数是用来补全的字符串。 </p>\n<p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;ab&#x27;</span>) <span class=\"comment\">// &#x27;x&#x27;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">5</span>, <span class=\"string\">&#x27;ab&#x27;</span>) <span class=\"comment\">// &#x27;ababx&#x27;&#x27;x&#x27;.padStart(4, &#x27;ab&#x27;) // &#x27;abax&#x27;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>如果省略第二个参数，默认使用空格补全长度：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">4</span>) <span class=\"comment\">// &#x27;   x&#x27;复制代码</span></span><br></pre></td></tr></table></figure>\n\n<p>padStart()的常见用途是为数值补全指定位数，笔者最近做的一个需求就是将返回的页数补齐为三位，比如第1页就显示为001，就可以使用该方法来操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;1&quot;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">3</span>, <span class=\"string\">&#x27;0&#x27;</span>)   <span class=\"comment\">// 输出结果： &#x27;001&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;15&quot;</span>.<span class=\"title function_\">padStart</span>(<span class=\"number\">3</span>, <span class=\"string\">&#x27;0&#x27;</span>)  <span class=\"comment\">// 输出结果： &#x27;015&#x27;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）padEnd\"><a href=\"#（2）padEnd\" class=\"headerlink\" title=\"（2）padEnd()\"></a>（2）padEnd()</h4><p><code>padEnd()</code>用于尾部补全。该方法也是接收两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padEnd</span>(<span class=\"number\">5</span>, <span class=\"string\">&#x27;ab&#x27;</span>) <span class=\"comment\">// &#x27;xabab&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;x&#x27;</span>.<span class=\"title function_\">padEnd</span>(<span class=\"number\">4</span>, <span class=\"string\">&#x27;ab&#x27;</span>) <span class=\"comment\">// &#x27;xaba&#x27;</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-字符串转为数字\"><a href=\"#13-字符串转为数字\" class=\"headerlink\" title=\"13. 字符串转为数字\"></a>13. 字符串转为数字</h4><p>parseInt()和parseFloat()方法都用于将字符串转为数字。</p>\n<h4 id=\"（1）parseInt\"><a href=\"#（1）parseInt\" class=\"headerlink\" title=\"（1）parseInt()\"></a>（1）parseInt()</h4><p>parseInt() 方法用于可解析一个字符串，并返回一个整数。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(string, radix)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>该方法有两个参数：</p>\n<ul>\n<li>string：必需。要被解析的字符串。</li>\n<li>radix：可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。</li>\n</ul>\n<p>当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;10&quot;</span>);\t\t\t  <span class=\"comment\">// 输出结果：10</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;17&quot;</span>,<span class=\"number\">8</span>);\t\t  <span class=\"comment\">// 输出结果：15 (8+7)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;010&quot;</span>);\t\t  <span class=\"comment\">// 输出结果：10 或 8</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>当参数 radix 的值以 “0x” 或 “0X” 开头，将以 16 为基数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;0x10&quot;</span>)      <span class=\"comment\">// 输出结果：16</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;50&quot;</span>, <span class=\"number\">1</span>)      <span class=\"comment\">// 输出结果：NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;50&quot;</span>, <span class=\"number\">40</span>)     <span class=\"comment\">// 输出结果：NaN</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>只有字符串中的第一个数字会被返回，当遇到第一个不是数字的字符为止:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;40 4years&quot;</span>)   <span class=\"comment\">// 输出结果：40</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果字符串的第一个字符不能被转换为数字，就会返回 NaN：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;new100&quot;</span>)     <span class=\"comment\">// 输出结果：NaN</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>字符串开头和结尾的空格是允许的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;  60  &quot;</span>)    <span class=\"comment\">// 输出结果： 60</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）parseFloat\"><a href=\"#（2）parseFloat\" class=\"headerlink\" title=\"（2）parseFloat()\"></a>（2）parseFloat()</h4><p>parseFloat() 方法可解析一个字符串，并返回一个浮点数。该方法指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。其语法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(string)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>parseFloat 将它的字符串参数解析成为浮点数并返回。如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。同时参数字符串首位的空白符会被忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;10.00&quot;</span>)      <span class=\"comment\">// 输出结果：10.00</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;10.01&quot;</span>)      <span class=\"comment\">// 输出结果：10.01</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;-10.01&quot;</span>)     <span class=\"comment\">// 输出结果：-10.01</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;40.5 years&quot;</span>) <span class=\"comment\">// 输出结果：40.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;new40.5&quot;</span>)    <span class=\"comment\">// 输出结果：NaN</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>编码和解码 encode URI() 和 encodeURICompoent()</p>\n<p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20211213203747451.png\" alt=\"image-20211213203747451\"></p>\n<h3 id=\"数组方法-1\"><a href=\"#数组方法-1\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h3><h4 id=\"1-测试所有元素\"><a href=\"#1-测试所有元素\" class=\"headerlink\" title=\"1.测试所有元素\"></a>1.测试所有元素</h4><ul>\n<li><h4 id=\"every（）\"><a href=\"#every（）\" class=\"headerlink\" title=\"every（）\"></a>every（）</h4><ul>\n<li>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</li>\n<li>里面时一个回调函数 留可以传index item array(原数组)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-填充一个数组中从起始索引到终止索引内的全部元素。-fill\"><a href=\"#2-填充一个数组中从起始索引到终止索引内的全部元素。-fill\" class=\"headerlink\" title=\"2.填充一个数组中从起始索引到终止索引内的全部元素。(fill)\"></a>2.填充一个数组中从起始索引到终止索引内的全部元素。(fill)</h4><ul>\n<li><h4 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h4></li>\n<li><p>前提，数组已经存在位置，如果数组为空或未初始化则无效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fill with 0 from position 2 until position 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array1.<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: [1, 2, 0, 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fill with 5 from position 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array1.<span class=\"title function_\">fill</span>(<span class=\"number\">5</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: [1, 5, 5, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array1.<span class=\"title function_\">fill</span>(<span class=\"number\">6</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: [6, 6, 6, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">item start conut</span><br><span class=\"line\">第一个参数：用item填充 必须</span><br><span class=\"line\">第二个参数：填充开始的位置 省略则为<span class=\"number\">0</span></span><br><span class=\"line\">第三分参数：填充多少个  默认为length</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-合并两个或多个数组。\"><a href=\"#3-合并两个或多个数组。\" class=\"headerlink\" title=\"3.合并两个或多个数组。\"></a>3.合并两个或多个数组。</h4><ul>\n<li><h4 id=\"concat-方法\"><a href=\"#concat-方法\" class=\"headerlink\" title=\"**concat()** 方法\"></a><code>**concat()**</code> 方法</h4></li>\n<li><p>&#96;&#96;&#96; js<br>&#x2F;&#x2F;合并多个数组<br>var num1 &#x3D; [1, 2, 3],<br>num2 &#x3D; [4, 5, 6],<br>num3 &#x3D; [7, 8, 9];<br>var nums &#x3D; num1.concat(num2, num3);<br>console.log(nums);<br>&#x2F;&#x2F; results in [1, 2, 3, 4, 5, 6, 7, 8, 9]</p>\n<p>&#x2F;&#x2F;将值连接到数组<br>&#x2F;&#x2F; 和下面合并多维很相似<br>var alpha &#x3D; [‘a’, ‘b’, ‘c’];<br>var alphaNumeric &#x3D; alpha.concat(1, [2, 3]);<br>console.log(alphaNumeric);<br>&#x2F;&#x2F; results in [‘a’, ‘b’, ‘c’, 1, 2, 3]</p>\n<p>&#x2F;&#x2F;合并多维数组<br>&#x2F;&#x2F;会把第一层[]拆开拿到里面的元素<br>var num1 &#x3D; [[1]];<br>var num2 &#x3D; [2, [3]];<br>var num3&#x3D;[5,[6]];<br>var nums &#x3D; num1.concat(num2);<br>console.log(nums);<br>&#x2F;&#x2F; results is [[1], 2, [3]]</p>\n<p>&#x2F;&#x2F;混合合并<br>var nums2&#x3D;num1.concat(4,num3);<br>console.log(nums2)<br>&#x2F;&#x2F; results is [[1], 4, 5,[6]]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 4.过滤所有元素</span><br><span class=\"line\"></span><br><span class=\"line\">\t##### filter()</span><br><span class=\"line\"></span><br><span class=\"line\">- ##### 将满足条件的放入一个新数组</span><br><span class=\"line\"></span><br><span class=\"line\">  - 里面为一个回调函数 </span><br><span class=\"line\"></span><br><span class=\"line\">  - element  数组中当前正在处理的元素。</span><br><span class=\"line\"></span><br><span class=\"line\">  - ndex 数组中当前正在处理的元素的索引</span><br><span class=\"line\"></span><br><span class=\"line\">  - array（调用了 `filter` 的数组本身。）</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    var arr = [</span><br><span class=\"line\">      &#123; id: 15 &#125;,</span><br><span class=\"line\">      &#123; id: -1 &#125;,</span><br><span class=\"line\">      &#123; id: 0 &#125;,</span><br><span class=\"line\">      &#123; id: 3 &#125;,</span><br><span class=\"line\">      &#123; id: 12.2 &#125;,</span><br><span class=\"line\">      &#123; &#125;,</span><br><span class=\"line\">      &#123; id: null &#125;,</span><br><span class=\"line\">      &#123; id: NaN &#125;,</span><br><span class=\"line\">      &#123; id: &#x27;undefined&#x27; &#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    </span><br><span class=\"line\">    var invalidEntries = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function isNumber(obj) &#123;</span><br><span class=\"line\">      return obj !== undefined &amp;&amp; typeof(obj) === &#x27;number&#x27; &amp;&amp; !isNaN(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function filterByID(item) &#123;</span><br><span class=\"line\">      if (isNumber(item.id) &amp;&amp; item.id !== 0) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      invalidEntries++;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var arrByID = arr.filter(filterByID);</span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log(&#x27;Filtered Array\\n&#x27;, arrByID);</span><br><span class=\"line\">    // Filtered Array</span><br><span class=\"line\">    // [&#123; id: 15 &#125;, &#123; id: -1 &#125;, &#123; id: 3 &#125;, &#123; id: 12.2 &#125;]</span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log(&#x27;Number of Invalid Entries = &#x27;, invalidEntries);</span><br><span class=\"line\">    // Number of Invalid Entries = 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-遍历数组\"><a href=\"#5-遍历数组\" class=\"headerlink\" title=\"5.遍历数组\"></a>5.遍历数组</h3><ul>\n<li><p>（1）forEach</p>\n<ol>\n<li><p>可以改变数组自身，没有返回值；</p>\n</li>\n<li><p>中途不能用常规操作跳出循环，可以用抛出异常（try&#x2F;catch）的方式，但不推荐这样做；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;鸣人&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;佐助&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr1.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123; </span><br><span class=\"line\">  item.<span class=\"property\">age</span> = item.<span class=\"property\">age</span> + <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><strong>当数组中元素是值类型，forEach绝对不会改变数组；当是引用类型，则可以改变数组</strong></p>\n<p>（2）map() 映射</p>\n</li>\n</ol>\n<p>原数组被”映射”成对应新数组。</p>\n<ul>\n<li>新建一个数组，需要有承载对象，也意味着原始数组在调用它后不会发生变化;</li>\n<li>该数组中的每个元素都调用一个提供的函数后返回结果。</li>\n</ul>\n<p>创建新数组不代表不能用它改变原有数组，你用原有数组去承载就可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; </span><br><span class=\"line\">arr = arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> item * <span class=\"number\">2</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>map()中每个元素都要执行相应的回调函数，所以必须要有return</li>\n<li>如果你想给数组做一定的过滤处理，那map()基本上行不通：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123; <span class=\"keyword\">if</span>(item &gt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> item &#125;)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [undefined, undefined, undefined, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>不能凑合用， 人生不能凑合，代码也是！</p>\n<p>（3)fliter() 过滤</p>\n<ul>\n<li><pre><code> 创建一个新数组，新数组中的元素是筛选出来的符合条件的所有对象。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(item &gt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> item </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//  =&gt; [4,5]</span></span><br></pre></td></tr></table></figure>\n\n<p>​            (4)sort()排序</p>\n<ul>\n<li><p>sort()用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序。</p>\n</li>\n<li><p>​    sort()与map()、filter()等不同，它直接改变原始数组（很重要！）；</p>\n</li>\n<li><p>如果想按照其他标准进行排序，就需提供比较函数compareFunction(a,b)，数组会按照调用该函数的返回值排序，即a和b是两个将要比较的元素：</p>\n<ul>\n<li>如果compareFunction(a,b)小于0，则a排列到b之前；</li>\n<li>如果 compareFunction(a, b)等于0，a和b的相对位置不变（并不保证）;</li>\n<li>如果 compareFunction(a, b)大于0，b排列到a之前； 直接上例子：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Users</span> = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;鸣人&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;卡卡西&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">28</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;自来也&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">50</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;佐助&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"title class_\">Users</span>.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a.<span class=\"property\">age</span> - b.<span class=\"property\">age</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 鸣人、佐助、卡卡西、自来也</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>(5)检索存在</p>\n<ul>\n<li><p>​    some()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;鸣人&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;佐助&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;</span><br><span class=\"line\">].<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item.<span class=\"property\">age</span> &gt; <span class=\"number\">16</span> </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">=&gt; <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>every()</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = [</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;鸣人&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">   &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;佐助&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;</span><br><span class=\"line\">].<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item.<span class=\"property\">age</span> &gt; <span class=\"number\">16</span> </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">=&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>some()和every()返回的都是<code>Boolean</code>值，仅此而此</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-数组去重\"><a href=\"#6-数组去重\" class=\"headerlink\" title=\"6.数组去重\"></a>6.数组去重</h4><ul>\n<li>​    new Set( )     经典方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tempArr = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;1,2,3,4,5&#125; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//并且已有元素是添加不进去的：</span></span><br><span class=\"line\">tempArr.<span class=\"title function_\">add</span>(<span class=\"number\">3</span>) </span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;1,2,3,4,5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">tempArr.<span class=\"title function_\">add</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; &#123;1,2,3,4,5,6&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>​                     <strong>Set()没法去重元素是引用对象的数组。</strong></p>\n<ul>\n<li><h4 id=\"uniqWith-js库\"><a href=\"#uniqWith-js库\" class=\"headerlink\" title=\"_.uniqWith()     js库\"></a>_.uniqWith()     js库</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span>;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">var</span> objects = [&#123; <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span> &#125;];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">_.<span class=\"title function_\">uniqWith</span>(objects, _.<span class=\"property\">isEqual</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=&gt; [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//_.isEqual(value,other)用于执行深比较来确定两者的值是否相等。 _.uniqWith()做去重处理。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"7-查找元素\"><a href=\"#7-查找元素\" class=\"headerlink\" title=\"7.查找元素\"></a>7.查找元素</h4><ul>\n<li>findIndex（）</li>\n</ul>\n<p>通过对象属性值直接获取对应索引： <code>**findIndex()**</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>。</p>\n<ul>\n<li>find（）</li>\n</ul>\n<p><code>find()</code>顾名思义，就是用来在数组中找到我们所需要的元素</p>\n<h4 id=\"8-回调地狱\"><a href=\"#8-回调地狱\" class=\"headerlink\" title=\"8.回调地狱\"></a>8.回调地狱</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 回调地狱</span></span><br><span class=\"line\">    <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;./a.json&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">info</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (info.<span class=\"property\">addr</span> != <span class=\"string\">&#x27;ok&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>, info.<span class=\"property\">addr</span>, <span class=\"keyword\">function</span> (<span class=\"params\">info</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (info.<span class=\"property\">addr</span> != <span class=\"string\">&#x27;ok&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>, info.<span class=\"property\">addr</span>, <span class=\"keyword\">function</span> (<span class=\"params\">info</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (info.<span class=\"property\">addr</span> == <span class=\"string\">&#x27;ok&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">alert</span>(info.<span class=\"property\">msg</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"9-eval\"><a href=\"#9-eval\" class=\"headerlink\" title=\"9.eval\"></a>9.eval</h4><p>它的功能是将对应的字符串解析成 JS 并执行，应该避免使用 JS，因为非常消耗性能（2 次，一次解析成 JS，一次执行）</p>\n<h4 id=\"10-copyWithin\"><a href=\"#10-copyWithin\" class=\"headerlink\" title=\"10.copyWithin\"></a>10.copyWithin</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//copyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>他会影响原数组，返回的数据和原数据为同一引用</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>[1, 2, 3, 4, 5].copyWithin(-2)<br>&#x2F;&#x2F; [1, 2, 3, 1, 2]</p>\n<p>[1, 2, 3, 4, 5].copyWithin(0, 3)<br>&#x2F;&#x2F; [4, 5, 3, 4, 5]</p>\n<p>[1, 2, 3, 4, 5].copyWithin(0, 3, 4)<br>&#x2F;&#x2F; [4, 2, 3, 4, 5]</p>\n<p>[1, 2, 3, 4, 5].copyWithin(-2, -3, -1)<br>&#x2F;&#x2F; [1, 2, 3, 3, 4]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 11.call bind apply</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">//第一个参数 都是this 的指向，后面的参数则都是传递的参数</span><br><span class=\"line\">// call 和 bind 传递参数都是： a,b,c...的形式</span><br><span class=\"line\">  //而apply后面传递的参数应该为数组形式，就算是单个数据也要写成数组的形式 ：[&#x27;a&#x27;]</span><br><span class=\"line\">//bind和call存在的区别在于，call和apply都会立即执行函数，而bind则不会。因此可以用bind写事件处理函数</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype ---》数组的实例化对象的原型 ---》this 指向数组的实例化对象</span></span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a,b,c</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// arguments  foreach</span></span><br><span class=\"line\">     <span class=\"comment\">// es5中非常重要的写法</span></span><br><span class=\"line\">     <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>,<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">fn1</span>(<span class=\"string\">&#x27;哈哈哈&#x27;</span>, <span class=\"string\">&#x27;嘿嘿嘿&#x27;</span>, <span class=\"string\">&#x27;呵呵呵&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// call apply bind 改变this指向</span></span><br><span class=\"line\">    <span class=\"comment\">// call(this,值1,值2....) apply(this, [值1, 值2...]) bind(this, 值1, 值2....)</span></span><br><span class=\"line\">    <span class=\"comment\">// 从表面上看bind方法和call方法完全一致，但是</span></span><br><span class=\"line\">    <span class=\"comment\">// bind方法可以再调用之后不执行函数，而call和apply只要调用就立刻执行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">user</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你好&#x27;</span>, user);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>); <span class=\"comment\">// window.a</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 让fn1的this指向obj 使用call方法，只要运行代码，程序就会立刻执行</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1.call(obj, &#x27;张三&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1.apply(obj, [&#x27;张三&#x27;]);</span></span><br><span class=\"line\">    <span class=\"comment\">// 我的需要: fn1作为btn的事件处理函数，点击按钮之后再执行</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1需要改变this指向，同时需要向fn1中传值</span></span><br><span class=\"line\">    btn.<span class=\"property\">onclick</span> = fn1.<span class=\"title function_\">bind</span>(obj, <span class=\"string\">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20211223194857541.png\" alt=\"image-20211223194857541\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//this == obj</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ver person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;deng&#x27;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(obj,<span class=\"string\">&#x27;cheng&#x27;</span>,<span class=\"number\">300</span>)</span><br><span class=\"line\"><span class=\"comment\">//test  ---&gt; test.call()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认函数运行，相当于隐式运行.call( )</span></span><br><span class=\"line\"><span class=\"comment\">//把Person时传入obj，相当于this == obj this.name = name ,,this.age = age</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//this == obj</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"12-reduce\"><a href=\"#12-reduce\" class=\"headerlink\" title=\"12.reduce\"></a>12.reduce</h4><p><code>**reduce()**</code> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">previousValue, currentValue</span>) =&gt; previousValue + currentValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(array1.<span class=\"title function_\">reduce</span>(reducer));</span><br><span class=\"line\"><span class=\"comment\">//reduce 里面为一个回调函数</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>.<span class=\"title function_ invoke__\">reduce</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, current, currentIndex, arr</span>), <span class=\"title\">initialValue</span>)</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>prev：函数传进来的初始值或上一次回调的返回值</li>\n<li>current：数组中当前处理的元素值</li>\n<li>currentIndex：当前元素索引</li>\n<li>arr：当前元素所属的数组本身</li>\n<li>initialValue：传给函数的初始值</li>\n</ol>\n<h4 id=\"13-Map\"><a href=\"#13-Map\" class=\"headerlink\" title=\"13.Map\"></a>13.Map</h4><p><strong>加工数据</strong></p>\n<p><code>**map()**</code> 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pass a function to map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map1);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [2, 8, 18, 32]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-splice\"><a href=\"#14-splice\" class=\"headerlink\" title=\"14.splice\"></a>14.splice</h4><ul>\n<li><p>删除 修改 清空</p>\n</li>\n<li><pre><code class=\"js\">//splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```js</span><br><span class=\"line\">  const months = [&#x27;Jan&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;June&#x27;];</span><br><span class=\"line\">  months.splice(1, 0, &#x27;Feb&#x27;);</span><br><span class=\"line\">  // inserts at index 1</span><br><span class=\"line\">  console.log(months);</span><br><span class=\"line\">  // expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span><br><span class=\"line\">  </span><br><span class=\"line\">  months.splice(4, 1, &#x27;May&#x27;);</span><br><span class=\"line\">  // replaces 1 element at index 4</span><br><span class=\"line\">  console.log(months);</span><br><span class=\"line\">  </span><br><span class=\"line\">  //1.要修改的元素索引</span><br><span class=\"line\">  //2.要删除的元素个数</span><br><span class=\"line\">  //3.要添加的元素</span><br><span class=\"line\">  </span><br><span class=\"line\">  //清空 arr.splice(0,arr.length)</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li></li>\n</ul>\n<h4 id=\"15-URI-和-URL\"><a href=\"#15-URI-和-URL\" class=\"headerlink\" title=\"15.URI 和 URL\"></a>15.URI 和 URL</h4><h5 id=\"一-统一资源标识符（URI）\"><a href=\"#一-统一资源标识符（URI）\" class=\"headerlink\" title=\"一.统一资源标识符（URI）\"></a>一.统一资源标识符（URI）</h5><p>&lt;1&gt;什么是URI</p>\n<p>URI，统一资源标志符(Uniform Resource Identifier， URI)，表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行标识的。</p>\n<p>&lt;2&gt;URI的结构组成</p>\n<p>URI通常由三部分组成：</p>\n<p>①资源的命名机制；</p>\n<p>②存放资源的主机名；</p>\n<p>③资源自身的名称。</p>\n<p>（注意：这只是一般URI资源的命名方式，只要是可以唯一标识资源的都被称为URI，上面三条合在一起是URI的充分不必要条件）</p>\n<p>&lt;3&gt;URI举例</p>\n<p>如：<a href=\"https://blog.csdn.net/qq_32595453/article/details/79516787\">https://blog.csdn.net/qq_32595453/article/details/79516787</a></p>\n<p>我们可以这样解释它：</p>\n<p>①这是一个可以通过https协议访问的资源，</p>\n<p>②位于主机 blog.csdn.net上，</p>\n<p>③通过“&#x2F;qq_32595453&#x2F;article&#x2F;details&#x2F;79516787”可以对该资源进行唯一标识（注意，这个不一定是完整的路径）</p>\n<p>注意：以上三点只不过是对实例的解释，以上三点并不是URI的必要条件，URI只是一种概念，怎样实现无所谓，只要它唯一标识一个资源就可以了。</p>\n<h5 id=\"二、URL\"><a href=\"#二、URL\" class=\"headerlink\" title=\"二、URL\"></a>二、URL</h5><p>URL是URI的一个子集。它是Uniform Resource Locator的缩写，译为“统一资源定位 符”。</p>\n<p>通俗地说，URL是Internet上描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。</p>\n<p>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL是URI概念的一种实现方式。</p>\n<p>URL的一般格式为(带方括号[]的为可选项)：</p>\n<p>protocol :&#x2F;&#x2F; hostname[:port] &#x2F; path &#x2F; [;parameters][?query]#fragment</p>\n<p>URL的格式由三部分组成： </p>\n<p>①第一部分是协议(或称为服务方式)。</p>\n<p>②第二部分是存有该资源的主机IP地址(有时也包括端口号)。</p>\n<p>③第三部分是主机资源的具体地址，如目录和文件名等。</p>\n<p>第一部分和第二部分用“:&#x2F;&#x2F;”符号隔开，</p>\n<p>第二部分和第三部分用“&#x2F;”符号隔开。</p>\n<p>第一部分和第二部分是不可缺少的，第三部分有时可以省略。</p>\n<h5 id=\"三、URI和URL之间的区别\"><a href=\"#三、URI和URL之间的区别\" class=\"headerlink\" title=\"三、URI和URL之间的区别\"></a>三、URI和URL之间的区别</h5><p>从上面的例子来看，你可能觉得URI和URL可能是相同的概念，其实并不是，URI和URL都定义了资源是什么，但URL还定义了该如何访问资源。URL是一种具体的URI，它是URI的一个子集，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI 是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，是绝对的。</p>\n<h5 id=\"1-decodeURI\"><a href=\"#1-decodeURI\" class=\"headerlink\" title=\"1.decodeURI( )\"></a>1.decodeURI( )</h5><p><code>**decodeURI()**</code> 函数能解码由<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI</code></a> 创建或其它流程得到的统一资源标识符（URI）。</p>\n<h5 id=\"2-encodeURI\"><a href=\"#2-encodeURI\" class=\"headerlink\" title=\"2.encodeURI( )\"></a>2.encodeURI( )</h5><p><code>**encodeURI()**</code> 函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 “代理” 字符组成)。</p>\n<h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h4><h3 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h3><h4 id=\"1-Object-defineProperty\"><a href=\"#1-Object-defineProperty\" class=\"headerlink\" title=\"1.Object.defineProperty()\"></a>1.Object.defineProperty()</h4><p><code>**Object.defineProperty()**</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(object1, <span class=\"string\">&#x27;property1&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">object1.<span class=\"property\">property1</span> = <span class=\"number\">77</span>;</span><br><span class=\"line\"><span class=\"comment\">// throws an error in strict mode</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(object1.<span class=\"property\">property1</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 42</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code>configurable</code></th>\n<th><code>enumerable</code></th>\n<th><code>value</code></th>\n<th><code>writable</code></th>\n<th><code>get</code></th>\n<th><code>set</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n<td>不可以</td>\n</tr>\n<tr>\n<td>存取描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n<td>不可以</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><code>configurable</code></p>\n<p>当且仅当该属性的 <code>configurable</code> 键值为 <code>true</code> 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。 <strong>默认为</strong> **<code>false</code>**。</p>\n</li>\n<li><p><code>enumerable</code></p>\n<p>当且仅当该属性的 <code>enumerable</code> 键值为 <code>true</code> 时，该属性才会出现在对象的枚举属性中。 **默认为 <code>false</code>**。</p>\n</li>\n</ul>\n<p>数据描述符还具有以下可选键值：</p>\n<ul>\n<li><p><code>value</code></p>\n<p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。 **默认为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>**。</p>\n</li>\n<li><p><code>writable</code></p>\n<p>当且仅当该属性的 <code>writable</code> 键值为 <code>true</code> 时，属性的值，也就是上面的 <code>value</code>，才能被<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators\"><code>赋值运算符</code> (en-US)</a>改变。 <strong>默认为 <code>false</code>。</strong></p>\n</li>\n</ul>\n<p>存取描述符还具有以下可选键值：</p>\n<ul>\n<li><p><code>get</code></p>\n<p>属性的 getter 函数，如果没有 getter，则为 <code>undefined</code>。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 <code>this</code> 对象（由于继承关系，这里的<code>this</code>并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。 **默认为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>**。</p>\n</li>\n<li><p><code>set</code></p>\n<p>属性的 setter 函数，如果没有 setter，则为 <code>undefined</code>。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 <code>this</code> 对象。 **默认为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>**。</p>\n</li>\n</ul>\n<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types\">Error 类型</a></p>\n<p>除了通用的Error构造函数外，JavaScript还有6个其他类型的错误构造函数。更多客户端异常,详见 <a href=\"https://developer.mozilla.org/en-US/JavaScript/Guide/Statements#exception_handling_statements\">Exception Handling Statements</a>。</p>\n<ul>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\"><code>EvalError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：与 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> 有关。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\"><code>InternalError</code></a></strong> </p>\n<p>创建一个代表Javascript引擎内部错误的异常抛出的实例。 如: “递归太多”.</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：数值变量或参数超出其有效范围。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：无效引用。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a>在解析代码的过程中发生的语法错误。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：变量或参数不属于有效类型。</p>\n</li>\n<li><p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\"><code>URIError</code></a></strong></p>\n<p>创建一个error实例，表示错误的原因：给 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a>或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI()</code></a>传递的参数无效。</p>\n</li>\n</ul>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"comment\">//得到data为 ...</span></span><br><span class=\"line\"><span class=\"comment\">//data = xxxxxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将data放入new Date(  ..) 可以得到曾经保存的时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以根据时间戳的差值计算出时间间隔</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h3><p>背景：js诞生之际是一门单线程语言，功能较少。后随着计算机的发展，ajax等的兴起。当计算机执行一个需要较长时间的进程时候，为了提高计算机效率，不让其空闲，就有了异步。</p>\n<h4 id=\"什么是异步js\"><a href=\"#什么是异步js\" class=\"headerlink\" title=\"什么是异步js\"></a>什么是异步js</h4><ul>\n<li>​    在js中，任务分为两种，同步任务和异步任务。同步任务在主线程中，一开始就执行，而异步任务在需要时或者特点条件下才会执行。    <ul>\n<li><p>异步js主要有：</p>\n<ol>\n<li>DOM操作</li>\n<li>定时器</li>\n<li>AJAX请求</li>\n</ol>\n</li>\n<li><p>在程序执行过程中，所以的同步任务都会在主线程上执行，形成一个执行栈</p>\n</li>\n<li><p>主线程之外还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件，当同步任务执行完，或者说执行栈一被清空。主线程就开始执行任务队列里面的异步事件，即当前异步事件的回调函数。再任务队列中，事件遵循先进后出规则。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"异步事件注意点\"><a href=\"#异步事件注意点\" class=\"headerlink\" title=\"异步事件注意点\"></a>异步事件注意点</h4><ul>\n<li>异步事件的发生先后顺序是不确定的，这取决于当前事件在子进程中完成的先后顺序，先完成的先进入任务队列，先执行。</li>\n<li>定时器由于任务队列的先进后出，可能会延时发生。当定时器时间到达时，才会在任务队列中添加事件（在这之前，挂载在子进程上），而此时定时器需要等到先排队的事件执行完才能执行。（前提是执行栈也已经被清空）</li>\n<li>Event loop 主线程在任务队列中执行事件是循环不断的，整个这个的运行机制叫做Event loop。</li>\n<li>html5 规定定时器最短时间间隔为4ms，足的会变为4ms。老版本的规定为10ms，DOM时间触发后不会立即执行，会延误16ms。</li>\n</ul>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><ul>\n<li><p>Promise是异步编程的一种解决方案。比传统的解决方案 ——回调函数和事件——更合理强大。</p>\n</li>\n<li><p>可以说是一个容器，里面保存着某个未来才会结束的事件，（通常是一个异步操作）的结果。可以获取异步操作的消息</p>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>对象的状态不受外界影响，~代表一个异步操作，有三种状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n<p>只有异步的操作结果，可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态。</p>\n</li>\n<li><p>一旦状态改变就不会再变，只有两种可能</p>\n<ul>\n<li>pending -&gt; fulfilled</li>\n<li>pending -&gt; rejected</li>\n</ul>\n<p>只要是事件发生了，就不会再改变，叫做定型resolved。</p>\n<p>而事件的特点是，如果你错过了他，再去监听，是得不到结果的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化Promise对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;&#125; , (err) =&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">catch</span>((err)=&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果后面嵌套then。里面返回promise对象</li>\n<li><strong>.then 可以链式不断调用</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">&#125; , (err) =&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">&#125;, (err) =&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"property\">then</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//.catch 每一个状态为reject都会执行catch()</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await\"></a>async await</h5><ul>\n<li>用await替代then，<strong>await</strong>和<strong>async</strong>需要配合使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> p1 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;./a.json&#x27;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// console.log(p1)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> data1 = p1.<span class=\"property\">src</span></span><br><span class=\"line\">            <span class=\"comment\">// console.log(data1)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> p2 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,data1);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> data2 = p2.<span class=\"property\">src</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> p3 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,data2)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p3.<span class=\"property\">msg</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">move</span>()</span><br></pre></td></tr></table></figure>\n\n<p>async 和 await 执行顺序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 start&#x27;</span>) <span class=\"comment\">//执行3</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()              <span class=\"comment\">//执行函数 4</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)   <span class=\"comment\">//挂载等待1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2&#x27;</span>) <span class=\"comment\">//执行5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)   <span class=\"comment\">//顺序执行1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)  <span class=\"comment\">//等待微任务1</span></span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"title function_\">async1</span>();   <span class=\"comment\">//执行函数 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>) <span class=\"comment\">//立即执行 6 </span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;       <span class=\"comment\">//挂载等待2</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)   <span class=\"comment\">//立即执行7</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果</span><br><span class=\"line\">script start</span><br><span class=\"line\">async1 start</span><br><span class=\"line\">async2</span><br><span class=\"line\">promise1</span><br><span class=\"line\">script end</span><br><span class=\"line\">async1 end</span><br><span class=\"line\">promise2</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br><span class=\"line\"></span><br><span class=\"line\">知识点</span><br><span class=\"line\">显然，这考察的是js中的事件循环和回调队列。注意以下几点：</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>优先于<span class=\"built_in\">setTimeout</span>宏任务。所以，<span class=\"built_in\">setTimeout</span>回调会在最后执行。</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>一旦被定义，就会立即执行。</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>的reject和resolve是异步执行的回调。所以，<span class=\"title function_\">resolve</span>()会被放到回调队列中，在主函数执行完和<span class=\"built_in\">setTimeout</span>前调用。</span><br><span class=\"line\">     *   <span class=\"keyword\">await</span>执行完后，会让出线程。<span class=\"keyword\">async</span>标记的函数会返回一个<span class=\"title class_\">Promise</span>对象</span><br><span class=\"line\"><span class=\"keyword\">await</span>后面的语句会在<span class=\"keyword\">await</span>执行完之后再执行。定时器为宏任务，会在微任务执行完之后再执行。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queryData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      # <span class=\"number\">2.1</span>  添加<span class=\"keyword\">await</span>之后 当前的<span class=\"keyword\">await</span> 返回结果之后才会执行后面的代码   </span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">var</span> info = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;async1&#x27;</span>);</span><br><span class=\"line\">      #<span class=\"number\">2.2</span>  让异步代码看起来、表现起来更像同步代码</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ret = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;async2?info=&#x27;</span> + info.<span class=\"property\">data</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">————————————————</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ajax-配合async\"><a href=\"#ajax-配合async\" class=\"headerlink\" title=\"ajax 配合async\"></a>ajax 配合async</h5><h5 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h5><p>用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>\n<p>不管<code>promise</code>最后的状态，在执行完<code>then</code>或<code>catch</code>指定的回调函数以后，都会执行<code>finally</code>方法指定的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h5><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 Promise 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p>\n<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>\n<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，<strong>此时第一个被<code>reject</code>的实例的返回值</strong>，会传递给<code>p</code>的回调函数。</p>\n<h5 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h5><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那<strong>个率先改变的 Promise 实例的返回值，</strong>就传递给<code>p</code>的回调函数。</p>\n<p><code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是 Promise 实例，就会先调用下面讲到的<code>Promise.resolve()</code>方法，将参数转为 Promise 实例，再进一步处理。</p>\n<p><strong><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是<code>Promise.any()</code>不会因为某个 Promise 变成<code>rejected</code>状态而结束，必须等到所有参数 Promise 变成<code>rejected</code>状态才会结束</strong></p>\n<h4 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h4><p>在异步任务中，将任务分为两种，分别是：</p>\n<ul>\n<li><pre><code>             宏任务\n</code></pre>\n<ul>\n<li>定时器</li>\n<li>requestAnimationFrame</li>\n</ul>\n</li>\n<li><p>​                  微任务</p>\n<ul>\n<li>promise</li>\n</ul>\n</li>\n<li><p>在任务队列之外，将宏任务和微任务分别挂载在宏任务队列和微任务。当同步任务执行完之后，会进行Event loop 执行任务队列。</p>\n<ul>\n<li><p>执行顺序是：</p>\n<ul>\n<li>先执行同步任务，再执行异步任务</li>\n<li>先执行微任务，再执行宏任务</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); <span class=\"comment\">//同步执行1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">4</span>); <span class=\"comment\">//宏任务1  定时器1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);\t<span class=\"comment\">//同步执行2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);  <span class=\"comment\">//微任务1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123; <span class=\"comment\">//宏任务2 定时器2</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当执行promise内的代码时，语句遵循同步执行的规则</span></span><br><span class=\"line\"><span class=\"comment\">//此处有一个简写 _ =&gt; 表示舍弃参数，不进行传值操作</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>requestAnimationFrame    请求动画帧</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>60HZ 当你什么都不做的时候，电脑也会以每秒60次的刷新速率更新，</p>\n</li>\n<li><p>动画原理</p>\n<ul>\n<li>而动画的本质就是人眼看到图像被属性变化而引起的视觉效果，这个效果要以平滑连贯的方式进行过渡</li>\n</ul>\n</li>\n<li><p>setTimeout ( 存在丢帧现象 )</p>\n<ul>\n<li>setTimeout的执行时间并不是确定的。在Javascript中， setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，因此 <strong>setTimeout 的实际执行时间一般要比其设定的时间晚一些。</strong></li>\n<li>刷新频率受<strong>屏幕分辨率</strong>和<strong>屏幕尺寸</strong>的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。</li>\n</ul>\n</li>\n<li><h4 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h4><ul>\n<li><p>requestAnimationFrame最大的优势是<strong>由系统来决定回调函数的执行时机</strong></p>\n<ul>\n<li><p>具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000&#x2F;75&#x3D;13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。<strong>它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次</strong>，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>    let box &#x3D; document.querySelector(‘.box’);<br>    let len &#x3D; 0;<br>    function fn() {<br>        len +&#x3D; 5;<br>        box.style.left &#x3D; len + ‘px’;<br>        if (len &lt; 1280) {<br>            window.requestAnimationFrame(fn);<br>        }<br>    }<br>    window.requestAnimationFrame(fn);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      （1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回 流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 </span><br><span class=\"line\"></span><br><span class=\"line\">      （2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然 就意味着更少的 CPU、GPU 和内存使用量 </span><br><span class=\"line\"></span><br><span class=\"line\">      （3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动 优化方法的调用，**并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销**</span><br><span class=\"line\"></span><br><span class=\"line\">### ES6</span><br><span class=\"line\"></span><br><span class=\"line\">#### 箭头函数</span><br><span class=\"line\"></span><br><span class=\"line\">​\t本质是一个语法糖</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">function() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">() =&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//1.如果箭头函数只有一个参数，则括号可以省略</span><br><span class=\"line\">item =&gt; &#123;&#125;   //形如</span><br><span class=\"line\">//2如果函数体只有一条语句，则可以省略&#123;&#125;括号</span><br><span class=\"line\">() =&gt; return &#x27;hello&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">(a, b) =&gt; a + b</span><br><span class=\"line\"></span><br><span class=\"line\">(a) =&gt; &#123;</span><br><span class=\"line\">  a = a + 1</span><br><span class=\"line\">  return a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</span><br><span class=\"line\">// SyntaxError:</span><br><span class=\"line\">x =&gt; &#123; foo: x &#125;</span><br><span class=\"line\">//因为和函数体的&#123; ... &#125;有语法冲突，所以要改为：</span><br><span class=\"line\"></span><br><span class=\"line\">// ok:</span><br><span class=\"line\">x =&gt; (&#123; foo: x &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>(1). 箭头函数this为父作用域的this，不是调用时的this<br>箭头函数的this永远指向其父作用域，任何方法都改变不了，包括call，apply，bind。<br>普通函数的this指向调用它的那个对象。</p>\n<p>(2). 箭头函数不能作为构造函数，不能使用new</p>\n<p>(3). 箭头函数没有arguments，caller，callee</p>\n<p>箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。</p>\n<p>箭头函数中要想接收不定参数，应该使用rest参数…解决。</p>\n<p> (4). 箭头函数通过call和apply调用，不会改变this指向，只会传入参数</p>\n<p>(5). 箭头函数没有原型属性</p>\n<p>(6). 箭头函数不能作为Generator函数，不能使用yield关键字</p>\n<p>(7). 箭头函数返回对象时，要加一个小括号</p>\n<p>(8). 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法</p>\n<p>(9). 多重箭头函数就是一个高阶函数，相当于内嵌函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">10</span>). 箭头函数常见错误</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">bar</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"title function_\">bar</span>()  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">bar函数中的<span class=\"variable language_\">this</span>指向父作用域，而a对象没有作用域，因此<span class=\"variable language_\">this</span>不是a，打印结果为<span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bar</span> = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">a.<span class=\"title function_\">bar</span>()  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">原型上使用箭头函数，<span class=\"variable language_\">this</span>指向是其父作用域，并不是对象a，因此得不到预期结果</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>一些<span class=\"variable language_\">this</span>的指向实例</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">  <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>); <span class=\"comment\">//this指向obj对象</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// 1990</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// this指向window或undefined</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>();<span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// 1990</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getFullYear</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">birth</span>; <span class=\"comment\">// this指向obj对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">       <span class=\"attr\">getAge</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">//window</span></span><br><span class=\"line\">作为对象的属性时，<span class=\"variable language_\">this</span>的指向则不再是对象本身了，箭头函数捕获的是obj&#123;&#125;这个对象的环境，然后这个环境的<span class=\"variable language_\">this</span>指向的是<span class=\"variable language_\">window</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"js异步编程的那些事","author":"codefish","date":"2021-12-24T10:33:07.000Z","top_img":"/img/9.jpg","cover":"/img/9.jpg","_content":"\n主要是关于js运行顺序，宏任务，微任务，任务队列，Event loop，同步事件异步事件\n\n### 异步编程\n\n背景：js诞生之际是一门单线程语言，功能较少。后随着计算机的发展，ajax等的兴起。当计算机执行一个需要较长时间的进程时候，为了提高计算机效率，不让其空闲，就有了异步。\n\n#### 什么是异步js\n\n- ​\t在js中，任务分为两种，同步任务和异步任务。同步任务在主线程中，一开始就执行，而异步任务在需要时或者特点条件下才会执行。\t\n  - 异步js主要有：\n    1. DOM操作\n    2. 定时器\n    3. AJAX请求\n  - 在程序执行过程中，所以的同步任务都会在主线程上执行，形成一个执行栈\n\n  - 主线程之外还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件，当同步任务执行完，或者说执行栈一被清空。主线程就开始执行任务队列里面的异步事件，即当前异步事件的回调函数。再任务队列中，事件遵循先进后出规则。\n\n#### 异步事件注意点\n\n- 异步事件的发生先后顺序是不确定的，这取决于当前事件在子进程中完成的先后顺序，先完成的先进入任务队列，先执行。\n- 定时器由于任务队列的先进后出，可能会延时发生。当定时器时间到达时，才会在任务队列中添加事件（在这之前，挂载在子进程上），而此时定时器需要等到先排队的事件执行完才能执行。（前提是执行栈也已经被清空）\n- Event loop 主线程在任务队列中执行事件是循环不断的，整个这个的运行机制叫做Event loop。\n- html5 规定定时器最短时间间隔为4ms，足的会变为4ms。老版本的规定为10ms，DOM时间触发后不会立即执行，会延误16ms。\n\n\n\n### Promise\n\n- Promise是异步编程的一种解决方案。比传统的解决方案 ——回调函数和事件——更合理强大。\n\n- 可以说是一个容器，里面保存着某个未来才会结束的事件，（通常是一个异步操作）的结果。可以获取异步操作的消息\n\n- 特点\n\n  - 对象的状态不受外界影响，~代表一个异步操作，有三种状态\n\n    - pending\n    - fulfilled\n    - rejected\n\n    只有异步的操作结果，可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态。\n\n  - 一旦状态改变就不会再变，只有两种可能\n\n    - pending -> fulfilled\n    - pending -> rejected\n\n    只要是事件发生了，就不会再改变，叫做定型resolved。\n\n    而事件的特点是，如果你错过了他，再去监听，是得不到结果的。\n\n```js\n//实例化Promise对象\nlet p = new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\np.then((info) => {} , (err) ={} )\n\n.catch((err)={\n    \n})\n```\n\n- 如果后面嵌套then。里面返回promise对象\n- **.then 可以链式不断调用**\n\n```js\np.then((info) => {\n   return new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\n} , (err) ={} )\n\n.then((info) => {\n    return new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\n}, (err) ={})\n\n.then ...\n\n//.catch 每一个状态为reject都会执行catch()\n```\n\n##### async await\n\n- 用await替代then，**await**和**async**需要配合使用\n\n```js\nasync function move(){\n            const p1 = await ajax('get','./a.json')\n            // console.log(p1)\n            const data1 = p1.src\n            // console.log(data1)\n            const p2 = await ajax('get',data1);\n\n            const data2 = p2.src;\n\n            const p3 = await ajax('get',data2)\n\n            console.log(p3.msg)\n        }\n        move()\n```\n\n##### async 和 await 执行顺序*\n\n```js\nasync function async1() {\n    console.log('async1 start') //执行3\n    await async2()              //执行函数 4\n    console.log('async1 end')   //挂载等待1\n}\n\nasync function async2() {\n    console.log('async2') //执行5\n}\nconsole.log('script start')   //顺序执行1\n\nsetTimeout(function () {\n    console.log('setTimeout')  //等待微任务1\n}, 0)\nasync1();   //执行函数 2\n\nnew Promise(function (resolve) {\n    console.log('promise1') //立即执行 6 \n    resolve();\n}).then(function () {       //挂载等待2\n    console.log('promise2')\n})\nconsole.log('script end')   //立即执行7\n\n结果\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n\n知识点\n显然，这考察的是js中的事件循环和回调队列。注意以下几点：\n     *   Promise优先于setTimeout宏任务。所以，setTimeout回调会在最后执行。\n     *   Promise一旦被定义，就会立即执行。\n     *   Promise的reject和resolve是异步执行的回调。所以，resolve()会被放到回调队列中，在主函数执行完和setTimeout前调用。\n     *   await执行完后，会让出线程。async标记的函数会返回一个Promise对象\nawait后面的语句会在await执行完之后再执行。定时器为宏任务，会在微任务执行完之后再执行。\n```\n\n```js\n  async function queryData() {\n      # 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码   \n      \n      var info = await axios.get('async1');\n      #2.2  让异步代码看起来、表现起来更像同步代码\n      var ret = await axios.get('async2?info=' + info.data);\n      return ret.data;\n    }\n————————————————\n```\n\n##### ajax 配合async\n\n\n\n##### Promise.prototype.finally()\n\n用于指定不管 Promise 对象最后状态如何，都会执行的操作。\n\n不管`promise`最后的状态，在执行完`then`或`catch`指定的回调函数以后，都会执行`finally`方法指定的回调函数。\n\n```js\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n```\n\n##### Promise.all()\n\n`Promise.all()`方法用于将多个 Promise 实例，包装成一个新的 Promise 实例\n\n```javascript\nconst p = Promise.all([p1, p2, p3]);\n```\n\n上面代码中，`Promise.all()`方法接受一个数组作为参数，`p1`、`p2`、`p3`都是 Promise 实例，如果不是，就会先调用下面讲到的`Promise.resolve`方法，将参数转为 Promise 实例，再进一步处理。另外，`Promise.all()`方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。\n\n（1）只有`p1`、`p2`、`p3`的状态都变成`fulfilled`，`p`的状态才会变成`fulfilled`，此时`p1`、`p2`、`p3`的返回值组成一个数组，传递给`p`的回调函数。\n\n（2）只要`p1`、`p2`、`p3`之中有一个被`rejected`，`p`的状态就变成`rejected`，**此时第一个被`reject`的实例的返回值**，会传递给`p`的回调函数。\n\n##### Promise.race()\n\n`Promise.race()`方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```javascript\nconst p = Promise.race([p1, p2, p3]);\n```\n\n只要`p1`、`p2`、`p3`之中有一个实例率先改变状态，`p`的状态就跟着改变。那**个率先改变的 Promise 实例的返回值，**就传递给`p`的回调函数。\n\n`Promise.race()`方法的参数与`Promise.all()`方法一样，如果不是 Promise 实例，就会先调用下面讲到的`Promise.resolve()`方法，将参数转为 Promise 实例，再进一步处理。\n\n\n\n**`Promise.any()`跟`Promise.race()`方法很像，只有一点不同，就是`Promise.any()`不会因为某个 Promise 变成`rejected`状态而结束，必须等到所有参数 Promise 变成`rejected`状态才会结束**\n\n### 宏任务微任务\n\n#### 1.任务分类\n\n- 同步任务\n- 异步任务\n  - 宏任务\n  - 微任务\n\n#### 2.任务详情\n\n1. 同步任务\n\n   定义：立即执行的任务\n\n2. 异步任务\n\n   定义：调用后不会立即执行的任务，例如定时器，promise,requestAnimationFrame\n\n   - 宏任务\n     1. 定时器\n     2. requestAnimationFrame\n   - 微任务\n     1. promise\n\n   \n\n#### 3.任务执行顺序\n\n##### 1..执行顺序\n\n- 先执行同步任务，再执行异步任务\n- 先执行微任务，再执行宏任务\n\n```js\nconsole.log(1); //同步执行1\n\nnew Promise(resolve=> {\n  setTimeout(()=> {\n    console.log(2);\n  }, 4); //宏任务1  定时器1\n\n  resolve();\n\n  console.log(3);\t//同步执行2\n})\n\n.then(_ => {\n  console.log(4);  //微任务1\n})\n\nsetTimeout(()=> { //宏任务2 定时器2\n  new Promise(resolve => {\n    console.log(5);\n\n    resolve();\n  })\n  .then(_ => {\n    console.log(6);\n  })\n},4)\n\n//当执行promise内的代码时，语句遵循同步执行的规则\n//此处有一个简写 _ => 表示舍弃参数，不进行传值操作\n\n```\n\n##### 2.注意：\n\n- 当执行promise内的代码时，语句遵循同步执行的规则\n\n\n\n#### 4.任务执行的原理*\n\n---\n\n​\t\t众所周知，js语言在刚研发出来的时候，请求量很少，不像想在有那么多进程，即被设计为一个单线程语言。\n\n​\t\t当浏览器在执行一个js代码的时候，首先他会从上往下执行代码，当碰到同步任务的时候，它就会让他进入到主线程之中立即执行。**但是**,当它解析到异步代码的时候，它就会将该任务放到一个子进程中去跑，然后继续向下执行，当再遇到同步代码时依旧立即执行，再遇到异步任务同样将其挂载到子进程，直到执行到最后一句代码。\n\n​\t\t此时，主进程空了以后，浏览器就会做一件事情--Event-loop--,什么是eventloop呢，可以理解为，浏览器问任务队列，你的异步任务有执行完成的吗？如果没有我等一下再来问。好，如果此时有异步任务那么就让这个异步事件立即执行。这时就得讲一讲**异步任务从子进程到任务队列的过程**，当异步任务在子进程运行（跑）的时候，....然后有一个运行结束，就比如一个定时器，定时3000，3秒后他跑完，然后就将他的回调加载到任务队列里面去。在任务队列里任务执行的先后，遵循先进先出。\n\n​\t\t到这同步异步就这些，然后宏任务和微任务是怎么执行的呢？这时候就把任务队列划分宏任务队列和微任务队列，宏任务执行完了进宏任务队列，微任务执行完了进微任务队列，当执行Event-loop的时候，先执行宏任务队列里面的任务，再执行微任务队列里面的任务。\n\n#### 4..**requestAnimationFrame\t请求动画帧**\n\nrequestAnimationFrame最大的优势是**由系统来决定回调函数的执行时机**\n\n- 具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。**它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次**，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。\n\n- ```js\n      let box = document.querySelector('.box');\n      let len = 0;\n      function fn() {\n          len += 5;\n          box.style.left = len + 'px';\n          if (len < 1280) {\n              window.requestAnimationFrame(fn);\n          }\n      }\n      window.requestAnimationFrame(fn);\n  ```\n\n  （1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回 流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 \n\n  （2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然 就意味着更少的 CPU、GPU 和内存使用量 \n\n  （3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动 优化方法的调用，**并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销**\n\n","source":"_posts/js里面的事件执行顺序.md","raw":"---\ntitle: js异步编程的那些事\n\nauthor: codefish\ndate: 2021-12-24 18:33:07\ncategories: js\ntags: [宏任务,微任务,promise]\ntop_img: /img/9.jpg\ncover: /img/9.jpg\n---\n\n主要是关于js运行顺序，宏任务，微任务，任务队列，Event loop，同步事件异步事件\n\n### 异步编程\n\n背景：js诞生之际是一门单线程语言，功能较少。后随着计算机的发展，ajax等的兴起。当计算机执行一个需要较长时间的进程时候，为了提高计算机效率，不让其空闲，就有了异步。\n\n#### 什么是异步js\n\n- ​\t在js中，任务分为两种，同步任务和异步任务。同步任务在主线程中，一开始就执行，而异步任务在需要时或者特点条件下才会执行。\t\n  - 异步js主要有：\n    1. DOM操作\n    2. 定时器\n    3. AJAX请求\n  - 在程序执行过程中，所以的同步任务都会在主线程上执行，形成一个执行栈\n\n  - 主线程之外还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件，当同步任务执行完，或者说执行栈一被清空。主线程就开始执行任务队列里面的异步事件，即当前异步事件的回调函数。再任务队列中，事件遵循先进后出规则。\n\n#### 异步事件注意点\n\n- 异步事件的发生先后顺序是不确定的，这取决于当前事件在子进程中完成的先后顺序，先完成的先进入任务队列，先执行。\n- 定时器由于任务队列的先进后出，可能会延时发生。当定时器时间到达时，才会在任务队列中添加事件（在这之前，挂载在子进程上），而此时定时器需要等到先排队的事件执行完才能执行。（前提是执行栈也已经被清空）\n- Event loop 主线程在任务队列中执行事件是循环不断的，整个这个的运行机制叫做Event loop。\n- html5 规定定时器最短时间间隔为4ms，足的会变为4ms。老版本的规定为10ms，DOM时间触发后不会立即执行，会延误16ms。\n\n\n\n### Promise\n\n- Promise是异步编程的一种解决方案。比传统的解决方案 ——回调函数和事件——更合理强大。\n\n- 可以说是一个容器，里面保存着某个未来才会结束的事件，（通常是一个异步操作）的结果。可以获取异步操作的消息\n\n- 特点\n\n  - 对象的状态不受外界影响，~代表一个异步操作，有三种状态\n\n    - pending\n    - fulfilled\n    - rejected\n\n    只有异步的操作结果，可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态。\n\n  - 一旦状态改变就不会再变，只有两种可能\n\n    - pending -> fulfilled\n    - pending -> rejected\n\n    只要是事件发生了，就不会再改变，叫做定型resolved。\n\n    而事件的特点是，如果你错过了他，再去监听，是得不到结果的。\n\n```js\n//实例化Promise对象\nlet p = new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\np.then((info) => {} , (err) ={} )\n\n.catch((err)={\n    \n})\n```\n\n- 如果后面嵌套then。里面返回promise对象\n- **.then 可以链式不断调用**\n\n```js\np.then((info) => {\n   return new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\n} , (err) ={} )\n\n.then((info) => {\n    return new Promise((resolve,reject) => {\n                    if() resolve(info);\n                    else reject(err);\n                    })\n}, (err) ={})\n\n.then ...\n\n//.catch 每一个状态为reject都会执行catch()\n```\n\n##### async await\n\n- 用await替代then，**await**和**async**需要配合使用\n\n```js\nasync function move(){\n            const p1 = await ajax('get','./a.json')\n            // console.log(p1)\n            const data1 = p1.src\n            // console.log(data1)\n            const p2 = await ajax('get',data1);\n\n            const data2 = p2.src;\n\n            const p3 = await ajax('get',data2)\n\n            console.log(p3.msg)\n        }\n        move()\n```\n\n##### async 和 await 执行顺序*\n\n```js\nasync function async1() {\n    console.log('async1 start') //执行3\n    await async2()              //执行函数 4\n    console.log('async1 end')   //挂载等待1\n}\n\nasync function async2() {\n    console.log('async2') //执行5\n}\nconsole.log('script start')   //顺序执行1\n\nsetTimeout(function () {\n    console.log('setTimeout')  //等待微任务1\n}, 0)\nasync1();   //执行函数 2\n\nnew Promise(function (resolve) {\n    console.log('promise1') //立即执行 6 \n    resolve();\n}).then(function () {       //挂载等待2\n    console.log('promise2')\n})\nconsole.log('script end')   //立即执行7\n\n结果\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n\n知识点\n显然，这考察的是js中的事件循环和回调队列。注意以下几点：\n     *   Promise优先于setTimeout宏任务。所以，setTimeout回调会在最后执行。\n     *   Promise一旦被定义，就会立即执行。\n     *   Promise的reject和resolve是异步执行的回调。所以，resolve()会被放到回调队列中，在主函数执行完和setTimeout前调用。\n     *   await执行完后，会让出线程。async标记的函数会返回一个Promise对象\nawait后面的语句会在await执行完之后再执行。定时器为宏任务，会在微任务执行完之后再执行。\n```\n\n```js\n  async function queryData() {\n      # 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码   \n      \n      var info = await axios.get('async1');\n      #2.2  让异步代码看起来、表现起来更像同步代码\n      var ret = await axios.get('async2?info=' + info.data);\n      return ret.data;\n    }\n————————————————\n```\n\n##### ajax 配合async\n\n\n\n##### Promise.prototype.finally()\n\n用于指定不管 Promise 对象最后状态如何，都会执行的操作。\n\n不管`promise`最后的状态，在执行完`then`或`catch`指定的回调函数以后，都会执行`finally`方法指定的回调函数。\n\n```js\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n```\n\n##### Promise.all()\n\n`Promise.all()`方法用于将多个 Promise 实例，包装成一个新的 Promise 实例\n\n```javascript\nconst p = Promise.all([p1, p2, p3]);\n```\n\n上面代码中，`Promise.all()`方法接受一个数组作为参数，`p1`、`p2`、`p3`都是 Promise 实例，如果不是，就会先调用下面讲到的`Promise.resolve`方法，将参数转为 Promise 实例，再进一步处理。另外，`Promise.all()`方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。\n\n（1）只有`p1`、`p2`、`p3`的状态都变成`fulfilled`，`p`的状态才会变成`fulfilled`，此时`p1`、`p2`、`p3`的返回值组成一个数组，传递给`p`的回调函数。\n\n（2）只要`p1`、`p2`、`p3`之中有一个被`rejected`，`p`的状态就变成`rejected`，**此时第一个被`reject`的实例的返回值**，会传递给`p`的回调函数。\n\n##### Promise.race()\n\n`Promise.race()`方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```javascript\nconst p = Promise.race([p1, p2, p3]);\n```\n\n只要`p1`、`p2`、`p3`之中有一个实例率先改变状态，`p`的状态就跟着改变。那**个率先改变的 Promise 实例的返回值，**就传递给`p`的回调函数。\n\n`Promise.race()`方法的参数与`Promise.all()`方法一样，如果不是 Promise 实例，就会先调用下面讲到的`Promise.resolve()`方法，将参数转为 Promise 实例，再进一步处理。\n\n\n\n**`Promise.any()`跟`Promise.race()`方法很像，只有一点不同，就是`Promise.any()`不会因为某个 Promise 变成`rejected`状态而结束，必须等到所有参数 Promise 变成`rejected`状态才会结束**\n\n### 宏任务微任务\n\n#### 1.任务分类\n\n- 同步任务\n- 异步任务\n  - 宏任务\n  - 微任务\n\n#### 2.任务详情\n\n1. 同步任务\n\n   定义：立即执行的任务\n\n2. 异步任务\n\n   定义：调用后不会立即执行的任务，例如定时器，promise,requestAnimationFrame\n\n   - 宏任务\n     1. 定时器\n     2. requestAnimationFrame\n   - 微任务\n     1. promise\n\n   \n\n#### 3.任务执行顺序\n\n##### 1..执行顺序\n\n- 先执行同步任务，再执行异步任务\n- 先执行微任务，再执行宏任务\n\n```js\nconsole.log(1); //同步执行1\n\nnew Promise(resolve=> {\n  setTimeout(()=> {\n    console.log(2);\n  }, 4); //宏任务1  定时器1\n\n  resolve();\n\n  console.log(3);\t//同步执行2\n})\n\n.then(_ => {\n  console.log(4);  //微任务1\n})\n\nsetTimeout(()=> { //宏任务2 定时器2\n  new Promise(resolve => {\n    console.log(5);\n\n    resolve();\n  })\n  .then(_ => {\n    console.log(6);\n  })\n},4)\n\n//当执行promise内的代码时，语句遵循同步执行的规则\n//此处有一个简写 _ => 表示舍弃参数，不进行传值操作\n\n```\n\n##### 2.注意：\n\n- 当执行promise内的代码时，语句遵循同步执行的规则\n\n\n\n#### 4.任务执行的原理*\n\n---\n\n​\t\t众所周知，js语言在刚研发出来的时候，请求量很少，不像想在有那么多进程，即被设计为一个单线程语言。\n\n​\t\t当浏览器在执行一个js代码的时候，首先他会从上往下执行代码，当碰到同步任务的时候，它就会让他进入到主线程之中立即执行。**但是**,当它解析到异步代码的时候，它就会将该任务放到一个子进程中去跑，然后继续向下执行，当再遇到同步代码时依旧立即执行，再遇到异步任务同样将其挂载到子进程，直到执行到最后一句代码。\n\n​\t\t此时，主进程空了以后，浏览器就会做一件事情--Event-loop--,什么是eventloop呢，可以理解为，浏览器问任务队列，你的异步任务有执行完成的吗？如果没有我等一下再来问。好，如果此时有异步任务那么就让这个异步事件立即执行。这时就得讲一讲**异步任务从子进程到任务队列的过程**，当异步任务在子进程运行（跑）的时候，....然后有一个运行结束，就比如一个定时器，定时3000，3秒后他跑完，然后就将他的回调加载到任务队列里面去。在任务队列里任务执行的先后，遵循先进先出。\n\n​\t\t到这同步异步就这些，然后宏任务和微任务是怎么执行的呢？这时候就把任务队列划分宏任务队列和微任务队列，宏任务执行完了进宏任务队列，微任务执行完了进微任务队列，当执行Event-loop的时候，先执行宏任务队列里面的任务，再执行微任务队列里面的任务。\n\n#### 4..**requestAnimationFrame\t请求动画帧**\n\nrequestAnimationFrame最大的优势是**由系统来决定回调函数的执行时机**\n\n- 具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。**它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次**，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。\n\n- ```js\n      let box = document.querySelector('.box');\n      let len = 0;\n      function fn() {\n          len += 5;\n          box.style.left = len + 'px';\n          if (len < 1280) {\n              window.requestAnimationFrame(fn);\n          }\n      }\n      window.requestAnimationFrame(fn);\n  ```\n\n  （1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回 流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 \n\n  （2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然 就意味着更少的 CPU、GPU 和内存使用量 \n\n  （3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动 优化方法的调用，**并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销**\n\n","slug":"js里面的事件执行顺序","published":1,"updated":"2025-01-07T02:30:25.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0ckr000e572o45ktd26n","content":"<p>主要是关于js运行顺序，宏任务，微任务，任务队列，Event loop，同步事件异步事件</p>\n<h3 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h3><p>背景：js诞生之际是一门单线程语言，功能较少。后随着计算机的发展，ajax等的兴起。当计算机执行一个需要较长时间的进程时候，为了提高计算机效率，不让其空闲，就有了异步。</p>\n<h4 id=\"什么是异步js\"><a href=\"#什么是异步js\" class=\"headerlink\" title=\"什么是异步js\"></a>什么是异步js</h4><ul>\n<li>​    在js中，任务分为两种，同步任务和异步任务。同步任务在主线程中，一开始就执行，而异步任务在需要时或者特点条件下才会执行。    <ul>\n<li><p>异步js主要有：</p>\n<ol>\n<li>DOM操作</li>\n<li>定时器</li>\n<li>AJAX请求</li>\n</ol>\n</li>\n<li><p>在程序执行过程中，所以的同步任务都会在主线程上执行，形成一个执行栈</p>\n</li>\n<li><p>主线程之外还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件，当同步任务执行完，或者说执行栈一被清空。主线程就开始执行任务队列里面的异步事件，即当前异步事件的回调函数。再任务队列中，事件遵循先进后出规则。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"异步事件注意点\"><a href=\"#异步事件注意点\" class=\"headerlink\" title=\"异步事件注意点\"></a>异步事件注意点</h4><ul>\n<li>异步事件的发生先后顺序是不确定的，这取决于当前事件在子进程中完成的先后顺序，先完成的先进入任务队列，先执行。</li>\n<li>定时器由于任务队列的先进后出，可能会延时发生。当定时器时间到达时，才会在任务队列中添加事件（在这之前，挂载在子进程上），而此时定时器需要等到先排队的事件执行完才能执行。（前提是执行栈也已经被清空）</li>\n<li>Event loop 主线程在任务队列中执行事件是循环不断的，整个这个的运行机制叫做Event loop。</li>\n<li>html5 规定定时器最短时间间隔为4ms，足的会变为4ms。老版本的规定为10ms，DOM时间触发后不会立即执行，会延误16ms。</li>\n</ul>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><ul>\n<li><p>Promise是异步编程的一种解决方案。比传统的解决方案 ——回调函数和事件——更合理强大。</p>\n</li>\n<li><p>可以说是一个容器，里面保存着某个未来才会结束的事件，（通常是一个异步操作）的结果。可以获取异步操作的消息</p>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>对象的状态不受外界影响，~代表一个异步操作，有三种状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n<p>只有异步的操作结果，可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态。</p>\n</li>\n<li><p>一旦状态改变就不会再变，只有两种可能</p>\n<ul>\n<li>pending -&gt; fulfilled</li>\n<li>pending -&gt; rejected</li>\n</ul>\n<p>只要是事件发生了，就不会再改变，叫做定型resolved。</p>\n<p>而事件的特点是，如果你错过了他，再去监听，是得不到结果的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化Promise对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;&#125; , (err) =&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">catch</span>((err)=&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果后面嵌套then。里面返回promise对象</li>\n<li><strong>.then 可以链式不断调用</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">&#125; , (err) =&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">&#125;, (err) =&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"property\">then</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//.catch 每一个状态为reject都会执行catch()</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await\"></a>async await</h5><ul>\n<li>用await替代then，<strong>await</strong>和<strong>async</strong>需要配合使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> p1 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;./a.json&#x27;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// console.log(p1)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> data1 = p1.<span class=\"property\">src</span></span><br><span class=\"line\">            <span class=\"comment\">// console.log(data1)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> p2 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,data1);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> data2 = p2.<span class=\"property\">src</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> p3 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,data2)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p3.<span class=\"property\">msg</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">move</span>()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"async-和-await-执行顺序\"><a href=\"#async-和-await-执行顺序\" class=\"headerlink\" title=\"async 和 await 执行顺序*\"></a>async 和 await 执行顺序*</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 start&#x27;</span>) <span class=\"comment\">//执行3</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()              <span class=\"comment\">//执行函数 4</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)   <span class=\"comment\">//挂载等待1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2&#x27;</span>) <span class=\"comment\">//执行5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)   <span class=\"comment\">//顺序执行1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)  <span class=\"comment\">//等待微任务1</span></span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"title function_\">async1</span>();   <span class=\"comment\">//执行函数 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>) <span class=\"comment\">//立即执行 6 </span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;       <span class=\"comment\">//挂载等待2</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)   <span class=\"comment\">//立即执行7</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果</span><br><span class=\"line\">script start</span><br><span class=\"line\">async1 start</span><br><span class=\"line\">async2</span><br><span class=\"line\">promise1</span><br><span class=\"line\">script end</span><br><span class=\"line\">async1 end</span><br><span class=\"line\">promise2</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br><span class=\"line\"></span><br><span class=\"line\">知识点</span><br><span class=\"line\">显然，这考察的是js中的事件循环和回调队列。注意以下几点：</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>优先于<span class=\"built_in\">setTimeout</span>宏任务。所以，<span class=\"built_in\">setTimeout</span>回调会在最后执行。</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>一旦被定义，就会立即执行。</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>的reject和resolve是异步执行的回调。所以，<span class=\"title function_\">resolve</span>()会被放到回调队列中，在主函数执行完和<span class=\"built_in\">setTimeout</span>前调用。</span><br><span class=\"line\">     *   <span class=\"keyword\">await</span>执行完后，会让出线程。<span class=\"keyword\">async</span>标记的函数会返回一个<span class=\"title class_\">Promise</span>对象</span><br><span class=\"line\"><span class=\"keyword\">await</span>后面的语句会在<span class=\"keyword\">await</span>执行完之后再执行。定时器为宏任务，会在微任务执行完之后再执行。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queryData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      # <span class=\"number\">2.1</span>  添加<span class=\"keyword\">await</span>之后 当前的<span class=\"keyword\">await</span> 返回结果之后才会执行后面的代码   </span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">var</span> info = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;async1&#x27;</span>);</span><br><span class=\"line\">      #<span class=\"number\">2.2</span>  让异步代码看起来、表现起来更像同步代码</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ret = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;async2?info=&#x27;</span> + info.<span class=\"property\">data</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">————————————————</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ajax-配合async\"><a href=\"#ajax-配合async\" class=\"headerlink\" title=\"ajax 配合async\"></a>ajax 配合async</h5><h5 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h5><p>用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>\n<p>不管<code>promise</code>最后的状态，在执行完<code>then</code>或<code>catch</code>指定的回调函数以后，都会执行<code>finally</code>方法指定的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h5><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 Promise 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p>\n<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>\n<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，<strong>此时第一个被<code>reject</code>的实例的返回值</strong>，会传递给<code>p</code>的回调函数。</p>\n<h5 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h5><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那<strong>个率先改变的 Promise 实例的返回值，</strong>就传递给<code>p</code>的回调函数。</p>\n<p><code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是 Promise 实例，就会先调用下面讲到的<code>Promise.resolve()</code>方法，将参数转为 Promise 实例，再进一步处理。</p>\n<p><strong><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是<code>Promise.any()</code>不会因为某个 Promise 变成<code>rejected</code>状态而结束，必须等到所有参数 Promise 变成<code>rejected</code>状态才会结束</strong></p>\n<h3 id=\"宏任务微任务\"><a href=\"#宏任务微任务\" class=\"headerlink\" title=\"宏任务微任务\"></a>宏任务微任务</h3><h4 id=\"1-任务分类\"><a href=\"#1-任务分类\" class=\"headerlink\" title=\"1.任务分类\"></a>1.任务分类</h4><ul>\n<li>同步任务</li>\n<li>异步任务<ul>\n<li>宏任务</li>\n<li>微任务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-任务详情\"><a href=\"#2-任务详情\" class=\"headerlink\" title=\"2.任务详情\"></a>2.任务详情</h4><ol>\n<li><p>同步任务</p>\n<p>定义：立即执行的任务</p>\n</li>\n<li><p>异步任务</p>\n<p>定义：调用后不会立即执行的任务，例如定时器，promise,requestAnimationFrame</p>\n<ul>\n<li>宏任务<ol>\n<li>定时器</li>\n<li>requestAnimationFrame</li>\n</ol>\n</li>\n<li>微任务<ol>\n<li>promise</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-任务执行顺序\"><a href=\"#3-任务执行顺序\" class=\"headerlink\" title=\"3.任务执行顺序\"></a>3.任务执行顺序</h4><h5 id=\"1-执行顺序\"><a href=\"#1-执行顺序\" class=\"headerlink\" title=\"1..执行顺序\"></a>1..执行顺序</h5><ul>\n<li>先执行同步任务，再执行异步任务</li>\n<li>先执行微任务，再执行宏任务</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); <span class=\"comment\">//同步执行1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">4</span>); <span class=\"comment\">//宏任务1  定时器1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);\t<span class=\"comment\">//同步执行2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);  <span class=\"comment\">//微任务1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123; <span class=\"comment\">//宏任务2 定时器2</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当执行promise内的代码时，语句遵循同步执行的规则</span></span><br><span class=\"line\"><span class=\"comment\">//此处有一个简写 _ =&gt; 表示舍弃参数，不进行传值操作</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-注意：\"><a href=\"#2-注意：\" class=\"headerlink\" title=\"2.注意：\"></a>2.注意：</h5><ul>\n<li>当执行promise内的代码时，语句遵循同步执行的规则</li>\n</ul>\n<h4 id=\"4-任务执行的原理\"><a href=\"#4-任务执行的原理\" class=\"headerlink\" title=\"4.任务执行的原理*\"></a>4.任务执行的原理*</h4><hr>\n<p>​        众所周知，js语言在刚研发出来的时候，请求量很少，不像想在有那么多进程，即被设计为一个单线程语言。</p>\n<p>​        当浏览器在执行一个js代码的时候，首先他会从上往下执行代码，当碰到同步任务的时候，它就会让他进入到主线程之中立即执行。<strong>但是</strong>,当它解析到异步代码的时候，它就会将该任务放到一个子进程中去跑，然后继续向下执行，当再遇到同步代码时依旧立即执行，再遇到异步任务同样将其挂载到子进程，直到执行到最后一句代码。</p>\n<p>​        此时，主进程空了以后，浏览器就会做一件事情–Event-loop–,什么是eventloop呢，可以理解为，浏览器问任务队列，你的异步任务有执行完成的吗？如果没有我等一下再来问。好，如果此时有异步任务那么就让这个异步事件立即执行。这时就得讲一讲<strong>异步任务从子进程到任务队列的过程</strong>，当异步任务在子进程运行（跑）的时候，….然后有一个运行结束，就比如一个定时器，定时3000，3秒后他跑完，然后就将他的回调加载到任务队列里面去。在任务队列里任务执行的先后，遵循先进先出。</p>\n<p>​        到这同步异步就这些，然后宏任务和微任务是怎么执行的呢？这时候就把任务队列划分宏任务队列和微任务队列，宏任务执行完了进宏任务队列，微任务执行完了进微任务队列，当执行Event-loop的时候，先执行宏任务队列里面的任务，再执行微任务队列里面的任务。</p>\n<h4 id=\"4-requestAnimationFrame-请求动画帧\"><a href=\"#4-requestAnimationFrame-请求动画帧\" class=\"headerlink\" title=\"4..requestAnimationFrame    请求动画帧\"></a>4..<strong>requestAnimationFrame    请求动画帧</strong></h4><p>requestAnimationFrame最大的优势是<strong>由系统来决定回调函数的执行时机</strong></p>\n<ul>\n<li><p>具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000&#x2F;75&#x3D;13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。<strong>它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次</strong>，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p>\n</li>\n<li><pre><code class=\"js\">    let box = document.querySelector(&#39;.box&#39;);\n    let len = 0;\n    function fn() &#123;\n        len += 5;\n        box.style.left = len + &#39;px&#39;;\n        if (len &lt; 1280) &#123;\n            window.requestAnimationFrame(fn);\n        &#125;\n    &#125;\n    window.requestAnimationFrame(fn);\n</code></pre>\n<p>（1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回 流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 </p>\n<p>（2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然 就意味着更少的 CPU、GPU 和内存使用量 </p>\n<p>（3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动 优化方法的调用，<strong>并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销</strong></p>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>主要是关于js运行顺序，宏任务，微任务，任务队列，Event loop，同步事件异步事件</p>\n<h3 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h3><p>背景：js诞生之际是一门单线程语言，功能较少。后随着计算机的发展，ajax等的兴起。当计算机执行一个需要较长时间的进程时候，为了提高计算机效率，不让其空闲，就有了异步。</p>\n<h4 id=\"什么是异步js\"><a href=\"#什么是异步js\" class=\"headerlink\" title=\"什么是异步js\"></a>什么是异步js</h4><ul>\n<li>​    在js中，任务分为两种，同步任务和异步任务。同步任务在主线程中，一开始就执行，而异步任务在需要时或者特点条件下才会执行。    <ul>\n<li><p>异步js主要有：</p>\n<ol>\n<li>DOM操作</li>\n<li>定时器</li>\n<li>AJAX请求</li>\n</ol>\n</li>\n<li><p>在程序执行过程中，所以的同步任务都会在主线程上执行，形成一个执行栈</p>\n</li>\n<li><p>主线程之外还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件，当同步任务执行完，或者说执行栈一被清空。主线程就开始执行任务队列里面的异步事件，即当前异步事件的回调函数。再任务队列中，事件遵循先进后出规则。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"异步事件注意点\"><a href=\"#异步事件注意点\" class=\"headerlink\" title=\"异步事件注意点\"></a>异步事件注意点</h4><ul>\n<li>异步事件的发生先后顺序是不确定的，这取决于当前事件在子进程中完成的先后顺序，先完成的先进入任务队列，先执行。</li>\n<li>定时器由于任务队列的先进后出，可能会延时发生。当定时器时间到达时，才会在任务队列中添加事件（在这之前，挂载在子进程上），而此时定时器需要等到先排队的事件执行完才能执行。（前提是执行栈也已经被清空）</li>\n<li>Event loop 主线程在任务队列中执行事件是循环不断的，整个这个的运行机制叫做Event loop。</li>\n<li>html5 规定定时器最短时间间隔为4ms，足的会变为4ms。老版本的规定为10ms，DOM时间触发后不会立即执行，会延误16ms。</li>\n</ul>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><ul>\n<li><p>Promise是异步编程的一种解决方案。比传统的解决方案 ——回调函数和事件——更合理强大。</p>\n</li>\n<li><p>可以说是一个容器，里面保存着某个未来才会结束的事件，（通常是一个异步操作）的结果。可以获取异步操作的消息</p>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>对象的状态不受外界影响，~代表一个异步操作，有三种状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n<p>只有异步的操作结果，可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态。</p>\n</li>\n<li><p>一旦状态改变就不会再变，只有两种可能</p>\n<ul>\n<li>pending -&gt; fulfilled</li>\n<li>pending -&gt; rejected</li>\n</ul>\n<p>只要是事件发生了，就不会再改变，叫做定型resolved。</p>\n<p>而事件的特点是，如果你错过了他，再去监听，是得不到结果的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化Promise对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;&#125; , (err) =&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">catch</span>((err)=&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果后面嵌套then。里面返回promise对象</li>\n<li><strong>.then 可以链式不断调用</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">&#125; , (err) =&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>() <span class=\"title function_\">resolve</span>(info);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">&#125;, (err) =&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"property\">then</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//.catch 每一个状态为reject都会执行catch()</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await\"></a>async await</h5><ul>\n<li>用await替代then，<strong>await</strong>和<strong>async</strong>需要配合使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> p1 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,<span class=\"string\">&#x27;./a.json&#x27;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// console.log(p1)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> data1 = p1.<span class=\"property\">src</span></span><br><span class=\"line\">            <span class=\"comment\">// console.log(data1)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> p2 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,data1);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> data2 = p2.<span class=\"property\">src</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> p3 = <span class=\"keyword\">await</span> <span class=\"title function_\">ajax</span>(<span class=\"string\">&#x27;get&#x27;</span>,data2)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p3.<span class=\"property\">msg</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">move</span>()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"async-和-await-执行顺序\"><a href=\"#async-和-await-执行顺序\" class=\"headerlink\" title=\"async 和 await 执行顺序*\"></a>async 和 await 执行顺序*</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 start&#x27;</span>) <span class=\"comment\">//执行3</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()              <span class=\"comment\">//执行函数 4</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)   <span class=\"comment\">//挂载等待1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2&#x27;</span>) <span class=\"comment\">//执行5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)   <span class=\"comment\">//顺序执行1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)  <span class=\"comment\">//等待微任务1</span></span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"title function_\">async1</span>();   <span class=\"comment\">//执行函数 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>) <span class=\"comment\">//立即执行 6 </span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;       <span class=\"comment\">//挂载等待2</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)   <span class=\"comment\">//立即执行7</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果</span><br><span class=\"line\">script start</span><br><span class=\"line\">async1 start</span><br><span class=\"line\">async2</span><br><span class=\"line\">promise1</span><br><span class=\"line\">script end</span><br><span class=\"line\">async1 end</span><br><span class=\"line\">promise2</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br><span class=\"line\"></span><br><span class=\"line\">知识点</span><br><span class=\"line\">显然，这考察的是js中的事件循环和回调队列。注意以下几点：</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>优先于<span class=\"built_in\">setTimeout</span>宏任务。所以，<span class=\"built_in\">setTimeout</span>回调会在最后执行。</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>一旦被定义，就会立即执行。</span><br><span class=\"line\">     *   <span class=\"title class_\">Promise</span>的reject和resolve是异步执行的回调。所以，<span class=\"title function_\">resolve</span>()会被放到回调队列中，在主函数执行完和<span class=\"built_in\">setTimeout</span>前调用。</span><br><span class=\"line\">     *   <span class=\"keyword\">await</span>执行完后，会让出线程。<span class=\"keyword\">async</span>标记的函数会返回一个<span class=\"title class_\">Promise</span>对象</span><br><span class=\"line\"><span class=\"keyword\">await</span>后面的语句会在<span class=\"keyword\">await</span>执行完之后再执行。定时器为宏任务，会在微任务执行完之后再执行。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queryData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      # <span class=\"number\">2.1</span>  添加<span class=\"keyword\">await</span>之后 当前的<span class=\"keyword\">await</span> 返回结果之后才会执行后面的代码   </span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">var</span> info = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;async1&#x27;</span>);</span><br><span class=\"line\">      #<span class=\"number\">2.2</span>  让异步代码看起来、表现起来更像同步代码</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ret = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;async2?info=&#x27;</span> + info.<span class=\"property\">data</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">————————————————</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ajax-配合async\"><a href=\"#ajax-配合async\" class=\"headerlink\" title=\"ajax 配合async\"></a>ajax 配合async</h5><h5 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h5><p>用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>\n<p>不管<code>promise</code>最后的状态，在执行完<code>then</code>或<code>catch</code>指定的回调函数以后，都会执行<code>finally</code>方法指定的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h5><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 Promise 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p>\n<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>\n<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，<strong>此时第一个被<code>reject</code>的实例的返回值</strong>，会传递给<code>p</code>的回调函数。</p>\n<h5 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h5><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那<strong>个率先改变的 Promise 实例的返回值，</strong>就传递给<code>p</code>的回调函数。</p>\n<p><code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是 Promise 实例，就会先调用下面讲到的<code>Promise.resolve()</code>方法，将参数转为 Promise 实例，再进一步处理。</p>\n<p><strong><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是<code>Promise.any()</code>不会因为某个 Promise 变成<code>rejected</code>状态而结束，必须等到所有参数 Promise 变成<code>rejected</code>状态才会结束</strong></p>\n<h3 id=\"宏任务微任务\"><a href=\"#宏任务微任务\" class=\"headerlink\" title=\"宏任务微任务\"></a>宏任务微任务</h3><h4 id=\"1-任务分类\"><a href=\"#1-任务分类\" class=\"headerlink\" title=\"1.任务分类\"></a>1.任务分类</h4><ul>\n<li>同步任务</li>\n<li>异步任务<ul>\n<li>宏任务</li>\n<li>微任务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-任务详情\"><a href=\"#2-任务详情\" class=\"headerlink\" title=\"2.任务详情\"></a>2.任务详情</h4><ol>\n<li><p>同步任务</p>\n<p>定义：立即执行的任务</p>\n</li>\n<li><p>异步任务</p>\n<p>定义：调用后不会立即执行的任务，例如定时器，promise,requestAnimationFrame</p>\n<ul>\n<li>宏任务<ol>\n<li>定时器</li>\n<li>requestAnimationFrame</li>\n</ol>\n</li>\n<li>微任务<ol>\n<li>promise</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-任务执行顺序\"><a href=\"#3-任务执行顺序\" class=\"headerlink\" title=\"3.任务执行顺序\"></a>3.任务执行顺序</h4><h5 id=\"1-执行顺序\"><a href=\"#1-执行顺序\" class=\"headerlink\" title=\"1..执行顺序\"></a>1..执行顺序</h5><ul>\n<li>先执行同步任务，再执行异步任务</li>\n<li>先执行微任务，再执行宏任务</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); <span class=\"comment\">//同步执行1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">4</span>); <span class=\"comment\">//宏任务1  定时器1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);\t<span class=\"comment\">//同步执行2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);  <span class=\"comment\">//微任务1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123; <span class=\"comment\">//宏任务2 定时器2</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当执行promise内的代码时，语句遵循同步执行的规则</span></span><br><span class=\"line\"><span class=\"comment\">//此处有一个简写 _ =&gt; 表示舍弃参数，不进行传值操作</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-注意：\"><a href=\"#2-注意：\" class=\"headerlink\" title=\"2.注意：\"></a>2.注意：</h5><ul>\n<li>当执行promise内的代码时，语句遵循同步执行的规则</li>\n</ul>\n<h4 id=\"4-任务执行的原理\"><a href=\"#4-任务执行的原理\" class=\"headerlink\" title=\"4.任务执行的原理*\"></a>4.任务执行的原理*</h4><hr>\n<p>​        众所周知，js语言在刚研发出来的时候，请求量很少，不像想在有那么多进程，即被设计为一个单线程语言。</p>\n<p>​        当浏览器在执行一个js代码的时候，首先他会从上往下执行代码，当碰到同步任务的时候，它就会让他进入到主线程之中立即执行。<strong>但是</strong>,当它解析到异步代码的时候，它就会将该任务放到一个子进程中去跑，然后继续向下执行，当再遇到同步代码时依旧立即执行，再遇到异步任务同样将其挂载到子进程，直到执行到最后一句代码。</p>\n<p>​        此时，主进程空了以后，浏览器就会做一件事情–Event-loop–,什么是eventloop呢，可以理解为，浏览器问任务队列，你的异步任务有执行完成的吗？如果没有我等一下再来问。好，如果此时有异步任务那么就让这个异步事件立即执行。这时就得讲一讲<strong>异步任务从子进程到任务队列的过程</strong>，当异步任务在子进程运行（跑）的时候，….然后有一个运行结束，就比如一个定时器，定时3000，3秒后他跑完，然后就将他的回调加载到任务队列里面去。在任务队列里任务执行的先后，遵循先进先出。</p>\n<p>​        到这同步异步就这些，然后宏任务和微任务是怎么执行的呢？这时候就把任务队列划分宏任务队列和微任务队列，宏任务执行完了进宏任务队列，微任务执行完了进微任务队列，当执行Event-loop的时候，先执行宏任务队列里面的任务，再执行微任务队列里面的任务。</p>\n<h4 id=\"4-requestAnimationFrame-请求动画帧\"><a href=\"#4-requestAnimationFrame-请求动画帧\" class=\"headerlink\" title=\"4..requestAnimationFrame    请求动画帧\"></a>4..<strong>requestAnimationFrame    请求动画帧</strong></h4><p>requestAnimationFrame最大的优势是<strong>由系统来决定回调函数的执行时机</strong></p>\n<ul>\n<li><p>具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000&#x2F;75&#x3D;13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。<strong>它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次</strong>，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p>\n</li>\n<li><pre><code class=\"js\">    let box = document.querySelector(&#39;.box&#39;);\n    let len = 0;\n    function fn() &#123;\n        len += 5;\n        box.style.left = len + &#39;px&#39;;\n        if (len &lt; 1280) &#123;\n            window.requestAnimationFrame(fn);\n        &#125;\n    &#125;\n    window.requestAnimationFrame(fn);\n</code></pre>\n<p>（1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回 流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 </p>\n<p>（2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然 就意味着更少的 CPU、GPU 和内存使用量 </p>\n<p>（3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动 优化方法的调用，<strong>并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销</strong></p>\n</li>\n</ul>\n"},{"title":"sql语法学习","author":"codefish","date":"2022-06-30T10:14:07.000Z","top_img":"/img/man-sunglasses.jpg","cover":"/img/man-sunglasses.jpg","_content":"\n作为一个前端，我认为sql的学习有助于理解业务，当别人告诉你这个表这个表时，不至于一知半解，我不指望一次入门学习能带来很多，但收获远比我想象的多的多。\n\n## 1,基本使用\n\n### 1.删除目录\n\n1.点击安装文件夹，删除profile下面的文件夹\n\n2.环境变量安装到sql下面的bin 文件夹\n\n3.mySql 服务自动启动， 启动才能使用\n\n### 2.命令启用服务\n\n```js\nnet start MySQL\nnet stop MySQL\n```\n\n### 3.使用客户端连接数据库服务器\n\n```js\n mysql -uroot -p密码 显示密码\n mysql -u root -p 隐藏密码\n exit 退出\n```\n\n**查看数据库**\n\nshow database\n\n**使用数据库**\n\nuse myDatabase\n\n**创建数据库**\n\ncreate database bjdatabse\n\n****\n\n**数据库的基本单元**\n\n表\n\n\n\n## 2.基础知识\n\n### 1.约束\n\n**唯一性约束**\n\nshow tables **查看**数据库下面有那些**表**\n\n### 2.sql语句的分类\n\n1. DQL 数据查询语句 select\n2. DML 数据操作语言 insert delete update **主要操作表中的数据**\n3. DDL  数据定义语言 操作表的结构，删除列 create drop alter\n4. RTL 事务控制语言 事务提交 事务回滚\n5. DCL 数据控制语言，grant revote\n\n### 3.表操作\n\n- 查看表中数据\n\nselect * from dept 查看表 dept（查看所有数据\n\n**只看结构**\n\nselect * from dept emp\n\n不见分号不执行-sql 语句\n\n```js\nsql 语句以分号结尾\nsql语句不区分大小写\n\n```\n\n\n\n查询语句\n\nselect name from 表名\n\n查询两个字段-用逗号隔开\n\n1.**查询所有的字段**\n\n1. select * form fm_sn\n\n2. select a,b,c fm_sn\n\n3. **注意**：第一种写法可读性差，效率低（将*转换为所有的字段），实际中不建议此种方法\n\n   \n\n2.**起别名**\n\nselect name,id as newName from dept;\n\n**注意**：注意只是将显示的表名改为新民，不改变原表\n\nas关键字可以省略吗\n\nselect name ,id  newName from fm_sn;\n\n*假设起的别名有空格，怎么办*?\n\n结果： 报错\n\n**'用单引号将别名包起来可以解决'** -双引号也可以\n\n字符串统一使用单引号括起来，在其他数据库不能用（标准单引号\n\n别名如果是中文需要用单引号包起来\n\n\n\n**3.条件查询**\n\n定义： 不是将所有数据查出来\n\n```sql\nselect \n\ta,b;\nfrom\n\t表名\nwhere\n\ta = 100; //条件\n\t \n\t ! 不等于 <>\n\t between and >= <= \n\t sal >= 100 and sal <=300\n\t between 100 and 300 必须左边数值小，右边数值大\n\t = 是不行的 必须为 is null \n\t is not null 不为空\n\t 在数据库中null 不能使用= 进行衡量\n```\n\n\n\n### 4.单行处理函数\n\n**定义**：一行一行的处理\n\n**1.select  lower(ename) from eap;**\n\n将表eap中的ename转小写\n\n-*起别名处理*\n\nselect lower(ename) as ename from eap;\n\n一一对应\n\n**2.upper 转换为大写**\n\n**3.取子串**\n\nselect substr(ename,1,1) from eap;\n\n起始下标从1开始，没有0\n\neg: 找出员工第一个字母为a的信息\n\n```sql\n//1.\nselect ename from emp where ename like \"A%\";\nselect ename from where substr(ename , 1, 1) = \"A\"\n//substr 从位置1开始截取，截取一个长度\n//concat 字符串拼接\n```\n\n**4.str_to_date**\n\n**5.data_format**\n\n**6.format设置千分位**\n\n**7.round四舍五入**\n\nselect round(123.567,1 ) from eap;\n\n保留一位小数\n\nselect round(123.567,-1 ) from eap;    -> 1240\n\n**8.rand生成随机数**\n\n**9.ifnull 将null 转换为一个具体值**\n\n在数据库中，只要又null 参与的数学计算，最后的结果一定是null\n\neg:计算员工的年薪\n\n年薪 = （月薪 + 月补助）*12\n\n问题： 如补助null，然后null参与了计算最后的结果一定为null，需要使用到ifNull函数\n\nifNull (args1,args2)\n\nargs1 数据\n\nargs2 把数据当那个默认值\n\neg: ifNull(a, 0)    //如果a为null把他当作0 来进行处理\n\n*即对空值进行处理*\n\n**10.case when then when then else and**\n\neg： 当岗位为normal时候，工资上调10%,当岗位为CEO时候，工资上调50%\n\nselect ename,jop,sal from emp;\n\n```sql\nselect \nename,job,sal, \n(case job when 'normal' then sal*1.1 when 'CEO' then sal*1.5 else sal end) as newsal\nfrom emp;\n//else后面的没有进行处理\n```\n\n\n\n**注意字面量和字面值**\n\n```sql\n//\nselect 'abc' as bleming from emp;\n生成若干abc()\n\nselect abc from emp;\n//将abc当作一个字段的名字，去表里面找abc字段\n\n//字面量：当前列名\n//字面值：所有值为当前的字段\n```\n\n\n\n**11.分组函数**\n\n定义： 输入多行，输出一行\n\n5个：\n\ncount 计数\n\nsum 求和\n\navg 平均值\n\nmin 最小\n\nmax 最大\n\n注意：分组函数必须对数据进行分组才能使用， 如果没有对数据进行分组，整个表默认为一组\n\neg1:\n\n1.找出最高工资\n\n select   max(sal) from emp;\n\n2.找出最低工资\n\nselect min(sal) from emp;\n\n3.计算工资和\n\nselect sun(sal) from emp;\n\n4.计算平均\n\n\n\n### 5.分组函数\n\n```sql\ncount\nsum\navg\nmax\nmin\n```\n\n\n\n分组函数自动忽略null\n\n#### 1.count字段\n\n1. count() 统计字段下不为NULL的元素的总数(某一列null的数量)\n2. count(*) 统计所有行数，（只要有一行数据count++)\n3. 不存在所有的列都为空的列\n4. 1\n\n \n\n注意点： 分组函数不能直接使用在where子句中\n\n找出比最低工资高的员工信息\n\n```sql\nselect enamel，sal,from emp where sal >  min(sal)\nreason: 分组函数必须分组才能使用，where之后不能使用分组函数\n\nselect sum(sal) from emp;\n\n```\n\n**所有的分组函数可以组合起来一起用**\n\nselect sum(sal),min(sal),max(sal),avg(sal),count(*) from emp\n\n### 6.分组查询*****\n\n定义： 先对数据进行分组，再进行计算，对每一组的数据进行操作\n\n```sql\nselect \n...\nfrom \n...\ngroup by\n..\n\neg:计算每个部门的平均和\neg：计算每个岗位的平均薪资\neg:找出每个工作岗位的最高薪资\n```\n\n**语句执行顺序**\n\n```sql\nselect 4\n..\nfrom 1\n..\nwhere 2\n.. \ngroup by 3\n...\norder by 5\n```\n\n注意： **在一条selecte语句中，如果有group by 语句，select 后面只能有分组的字段**\n\n**按照多个字段进行分组**\n\n找出每个部门不同工作岗位的最高薪资\n\nselect ename,job from emp where ename,job\n\n**having子句**-对分组后的数据进行再一步过滤\n\n不能单独使用，需要在group子句后面使用\n\n```sql\nselect \ndeptno,max(sal)\nfrom emp\ngroup by \n\tdeptno\nhaving \n\tmax(sal) > 3000\n\t//以上的sql语句执行效率低-> 先筛选后分组\n\nselect \n\txxx\nfrom \n\temp\nwhere \n\tsal > 3000\ngroup by \n    deptno;\n//能使用where的尽量使用where,优先使用where，实现不了的使用having\n\n\n```\n\neg:找出每个部门平均薪资，要求平均薪资高于2500\n\n```sql\nselect \n\tdeptno ,avg(sal)\nfrom \n\temp \ngroup by deptno\n\n=====>\n==>必须使用having\nselect \n\tdeptno ,avg(sal)\nfrom \n\temp\ngroup by deptno\n\tsal > 2500\nhaving\n\tavg(sal) > 2500;\n```\n\n**.数据**\n\n```sql\n//2.创建数据库\ncreate database bjpowernode;\n//3.选择数据库\nuse bjpowernode;\n//4.导入数据\nsource d:\\bjpowernode.sql;\n//5.删除数据库\ndrop database bjpowernode;\n\n**查看表的结构\ndesc dept;\n```\n\n## 7.连接查询\n\n定义：多张表联合起来查询数据-连接查询\n\nSQL92 92年出现的语法\n\nSQL99 99年出现的语法\n\n根据表连接的方式分类\n\n- 内连接\n  - 等值连接\n  - 非等值连接\n  - 自连接\n- 外连接\n  - 左外连接\n  - 右外连接\n- 全连接（使用少\n\n**现象**\n\n：两种表进行连接查询时候，没有任何条件限制的时候，会出现什么现象\n\n拿一条表的数据对另一个表所有数据进行查询\n\n```sql\nselect ename,dname from emp ,dept;\n```\n\n**问题：笛卡儿积现象**\n\n查询结果：最终查询结果条数，为两个表数量之积\n\n14*4 = 56\n\n**解决**：连接时加条件，满足此条件的记录被筛选出来\n\n```sql\nselect \n\tename ,dname\nfrom \n\temp,dept\nwhere emp.deptno = dept.deptno;\n```\n\n思考：查询结果提条数为14条，但是匹配的次数没有减少(56次)\n\n问题：**查询效率低**\n\n```sql\nselect \n\temp.ename,dept.dname\nfrom \n\temp,dept\nwhere \n\temp.deptno = dept.deptno;\n```\n\n\n\n**别名-效率**\n\n```sql\nselect \n\te.ename ,d.dname\nfrom \n\temp e,dept d\nwhere \n\te.ename = d.dname \n```\n\ne.ename = d.dname  **SQL92语法**\n\n*减少表的连接次数-加快速率*-提升程序执行速率\n\n**注意**：笛卡尔积-表的连接次数越多效率越低\n\n## 8.内连接\n\n**特点**：完全能够匹配这个条件的数据查询出来\n\n### 1.等值连接\n\neg:查询每个员工所在的部门名称，显示员工名和部门名\n\n```sql\nSQL 92 内连接-等值连接\nselect \n\te.ename,d.dname\nfrom \n\temp e,dept d\nwhere \n\te.deptnp = d.deptnp\n\n```\n\n\n\n````sql\nSQL 99\nselect \n\te.ename , d.dname\nfrom \n\temp e,\njoin\n\tdpart d\nwhere \n\te.dpartno = d.dpartno\n````\n\n内连接（inner\n\n```sql\nselect \n\te.name , d.dname\nfrom \n\temp e,\ninner join \n\tdpart d\nwhere \n\te.dpartno = d.dpartno\n\t\n```\n\n\n\n**非等值连接**\n\n```sql\nselect \n\te.ename , e.sal, s.grade\nfrom \n\temp e\njoin \n\tsalgrade s\nwhere \n\te.sal between s.losal and s.hisal;\n\t//条件不是一个等量关系，称为非等值连接\n```\n\n### 2.内连接之自连接\n\n查询员工的上级领导，要求显示员工名和对应的领导名\n\n![image-20220712085749880](D:\\桌面\\tools\\开发问题\\img\\image-20220712085749880.png)\n\n**技巧：一张表看作两张表**\n\n```sql\nselect \n\ta.ename as colleage, b ename sa leader\nfrom \n\tedpart a\njoin \n\tedpart b\non\n\ta.mgr = b.empno\n\t\n```\n\n内连接：两表之间没有主次关系\n\n## 9.外连接\n\neg1\n\n```sql\nselect \n\te.ename , d.ename \nfrom \n\temp e\nright join \n\tdept d\non \n\te.deptno = d.deptno\n\n```\n\n**右外连接**:right代码将join右边的关键字看作主表，捎带关联查询左边表，又叫做右连接\n\n在外连接中：两张表存在这主次关系\n\n左外连接：同右，又叫做左连接，左连接右连接可以实现同一个效果（写法不一样\n\n*外连接查询结果条数一定大于等于内连接*\n\nouter 可以省略，代表外连接\n\n```sql\nselect \n\te.ename , d.ename \nfrom emp\n\temp e\nright outer join \n\tdept d\non \n\te.deptno = d.deptno\n\n```\n\neg:查询每个员工的上级领导，要求显示所有员工的名字和领导名\n\n```sql\nselect \n\ta.ename , b.ename\nfrom \n\temp a\nleft join\n\temp b\non e.mgr = b.empno\n```\n\n## 10.多表连接\n\n```sql\nselect \n\t...\nfrom \n\ta\njoin \n\tb\non \n\ta 和 b 的连接条件\njoin\n\tc\non \n\ta 和 c 的连接条件\nright join \n\td\non \n\ta 和 d 的连接条件\n\n```\n\neg:要求找出每个员工的部门名称以及工资等级，要求显示员工名，部门名，薪资，薪资等级\n\n![image-20220712094430009](D:\\桌面\\tools\\开发问题\\img\\image-20220712094430009.png)\n\n```SQL\nselect \n\te.ename , e.sal,d.mname,s.grade\nfrom \n\temp e\njoin \n\tdept d\non \n\te.deptno = d.deptno\njoin \n\tsalgrade s\non e.sal between s.losal and s.hisal;\n```\n\n**多查一个上级领导怎么办**，显示领导名字\n\n思路：加一个外连接\n\n```sql\nleft join \n\temp i \non a.mgr = i.empno\n\n```\n\n## 11.子查询\n\n定义：select中嵌套select语句。被嵌套的select为子查询\n\n可以出现的位置\n\n```sql\nselect \n\t..(select)\nfrom \n\t..(select)\nwhere\n\t..(select)\n```\n\n### 1.where 子句中出现子查询\n\neg1:找出比最低工资高的员工姓名和工资\n\n```sql\nselect \n\tename,sal\nfrom \n\temp\nwhere\n \tsal>min(sal);\n //where后面不能直接使用分组函数\n```\n\n实现思路：\n\n- 查询最低工资值\n- 查询比最低>800\n\n```sql\nselect \n\tename\nfrom \n\temp\nwhere\n\tsal > (select min(sal) from emp);\n```\n\n### 2.from子句中的子查询\n\n**注意**：from后面的子查询，可以将子查询的查询结果当作一张临时表\n\neg:找出每个岗位的平均工资的薪资等级\n\n- 找出每个岗位的平均薪资\n\n  select job,avg(sal) from emp group by job\n\n  ![image-20220712110949665](D:\\桌面\\tools\\开发问题\\img\\image-20220712110949665.png)\n\n- 把以上查询结果当成已知的表\n\n![image-20220712111109125](D:\\桌面\\tools\\开发问题\\img\\image-20220712111109125.png)\n\n```sql\nselect \n\tt.* ,s.grade\nfrom \n\tt\njoin \n\tsalgrade s\non \n\tt.avs(sal) betweent s.losal and s.hisal\n```\n\n完整写法\n\n```sql\nselect \n\tt.* ,s.grade\nfrom \n\t(select job,avg(sal) as avgsal from emp group by job) t\njoin \n\tsalgrade s\non \n\tt.avs(sal) betweent s.losal and s.hisal\n```\n\n### 3.select 后面出现的子查询\n\neg:找出每个员工的部门名称，要求显示所有的员工名，部门名\n\n```sql\nselect \n\te.ename, e.dpartno,(select d.dname from dept d where e.deptno \t\t=d.deptno) as dname \nfrom \n\temp e;\n```\n\n**注意：对于select**后面的子查询，只能返回一条结果，多余一条就报错***\n\n## 12.union 合并查询结果集\n\neg:查询工作岗位是MANAGER和SALESMAN的员工\n\n```sql\nselect \n\tename ,job \nfrom \n\temp \nwhere \n\tjob = 'MANAGER' or job = 'SALESMAN'\n-------------------------------------------\nselect \n\tename , job \nfrom \n\temp \nwhere \n\tjob in ('MANAGER','SALESMAN')\n```\n\n**union 效率更高**\n\nps：对于表连连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍的翻。。。\n\nunion 可以减少匹配的次数，在减少匹配次数的情况下，还可以完成两个结果的拼接。。。\n\na-b-c = 10 - 10 -10 /1000\n\n**如果使用union**\n\n```sql\na-b 10*10\na-c 10*10\n总次数 200\n```\n\nOracle要求，union列数相同，，并且数据的类型必须相同\n\n## 13.limit\n\n使用场景：分页查询\n\n定义：将查询结果的一部分取出来\n\n作用：提高用户的体验，一次都查询出来体验差\n\n**eg1:**按照薪资降序，取出排名在前五名的员工\n\n```sql\nselect \n\tename ,sal\nfrom \n\temp\norder by\n\tsal desc\nlimit 5;\n----------------------------\n完整用法\nlimit 0,5; startIndex起始下标（默认为0） ,length\n缺省用法\nlimit 5\n\n\n```\n\n注意：**limit在order by 之后执行**\n\n**eg2** ：取出第3-5名的员工\n\n```sql\nselect \n\tename ,sal\nfrom \n\temp\norder by\n\tsal desc\nlimit 2,3\n```\n\neg3:取出工资排名在5-9名的员工\n\n```sql\nselect \n\tename,sal\nfrom \n\temp\norder by \n\tsal desc\nlimit 4,5\n\n```\n\n\n\n## 14.分页\n\n假设：每页显示三条数据\n\n```sql\nlimit 0,3\nlimit 3,3\nlimit 6,3\nlimit 9,3\n```\n\nps：每页显示pageSizes条记录，第pageNo页：limit ? ,pageSize\n\n 第pageNo页：limit (pageNo - 1) * pageSize , pageSIze\n\n**通用写法**\n\nlimit (pageNo - 1)*pageSize , pageSize\n\n## DQL 总结\n\n```sql\nselect \t\t5.\n\t...\nfrom        1.\n\t...\nwhere \t\t2.\n\t....    \ngroup by\t3.\n\t...\nhaving\t\t4.\n\t...\norder by\t6.\n\t...\nlimit \t\t7.\n\t...\n```\n\n**多表联查**\n\n\n\n## 15.表的创建\n\n属于DDL语句\n\ncreate ,drap , alter\n\n```sql\n1.\ncreate table 表名（字段名1，数据类型,字段名2，数据类型\n2.\ncreate table 表名（\n\t字段名1，数据类型,\n\t字段名2，数据类型\n）\n```\n\n**数据类型**- 关于sql\n\n表名：建议见表知名，字段名同样。fm_part\n\n- varchar\n- char\n- int\n- bigint\n- float\n- double\n- string\n- datetime\n- date\n- clob\n- blob\n\n### 1.varchar\n\nps：可变长度字符串（255） \n\n​\t\tname varchar(10)\n\n新增一个字段name,动态分配长度，根据数据动态判断，实际动态长度，比较智能，节省空间，会根据实际的数据长度动态分配空间\n\n### 2.char（255\n\nps：定长字符串\n\nname char(10)\n\nname = jack \n\n不管实际的数据长度是多少，分配固定长度的空间去存储数据，使用不当的情况下，可能造成数据空间的浪费\n\n- varchar  节省空间但是慢\n- char        快，使用不当可以造成空间浪费\n\neg1 ： 性别->char\n\neg3 ： 姓名->varchar   (variable)\n\n### 3.int（11位数\n\nps：数字中的整数型\n\n### 4.bigInt \n\nps: 等同于java中的long\n\n### 5.date \n\nps：短日期类型\n\n### 6.datetime\n\nps:长日期类型\n\n### 7.clob\n\nps: 字符大的对象，最大可以存储4G的字符串\n\n比如:存储超过255个字符的都要使用CLOB字符大对象来存储\n\nCharacter Large Object :\n\n### 8.blob\n\n二进制大对象\n\nBinary Large Object\n\n专门用来存储图片，声音，视频等流媒体数据\n\n往BOLB类型的字段上插入数据的时候，例如插入一个图片，视频等，你需要使用IO流才行。\n\n```js\nt_table 表\n编号 no(bigint)\n名字 name(varchar)\n描述信息 description(clob)\n上映时间 playtime(date)\n时长 time(double)\n海报 image(blob)\n类型 type(int)\n```\n\n\n\n\n\neg1:创建一个学生表\n\n```sql\ncreate table t_student{\n\tno int,\n\tname varchar(32),\n\tsex char(1) default 1,\n\tage int(3),\n\temail varchar(255)\n}\n```\n\n删除表\n\n​\tdrop table t_student;\n\n注意：但他不存在的时候会报错\n\n​\tdrop  tablet if exists t_studen ;   -> 表存在才删除\n\n## 16.数据操作\n\n语法：\n\n​\tinsert into 表名（字段名1，字段名2，字段名3...) values (值1，值2，值3)\n\n注意：字段名和值要一一对应，数量要对应，数据类型要对应。\n\n```sql\ninsert into t_student (no ,name, sex,age,email) values (1, 'zhangsan','m','20','zhangsan','12534652@163.com')\n\n------------------------值与字段一一对应---------------------------\ninsert into t_student (no ,name, sex,age,email) values (1, 'zhangsan','m','20','zhangsan','12534652@163.com')\n```\n\nps:可以只添加部分字段，未赋值的字段，值为null\n\ntips:insert 语句但凡执行成功，必然会多一条记录，其他值为null,不指定默认值。默认值为null\n\ninsert 语句中的字段名 可以省略吗\n\n```sql\ninsert into t_student values(2)\n--缺省表示写上所有字段\n```\n\n### 1.插入日期\n\n1\n\n```sql\n```\n\n### 2.格式化数字\n\n```sql\nselect ename ,format(sal,'$999,999') as sal from emp;\n```\n\n加入千分位\n\n### 3.str_to_date\n\n将字符串varchar类型转换为date类型\n\n通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，通常需要改函数将字符串转换为date\n\n```sql\ninsert into t_user(id,name,birth) value(1, 'zhangsan'， str_to_date('01-10-1990'),'%d-%m-%Y')\n```\n\n如果提供的日期时1990-10-01，str_to_data函数就不需要了\n\n```sql\ninsert into t_user(id,name,birth) values('1','list','1990-10-01')\n```\n\n查询的时候可以使用特定的日期格式转换吗\n\n```sql\nselect id，name,date_format(birth,'%m/%d/%Y') as birth from t_user\n```\n\n\n\n\n\n### 4.date_format\n\n将date类型转换为具有一定格式的varchar字符串类型\n\n```sql\ndate_format(日期类型数据，‘日期格式’)\n这个函数通常使用在查询日期方面，设置展示的日期格式\nselect id,name,birth from t_user\n以上sql语句实际上进行了默认的日期格式化，\n自动将数据库中的date类型转换为varchar字符串\n采用的时mysql默认的日期格式，‘%Y-%m-%d'\n```\n\n\n\n### 5，数据库命名规范\n\n所有的标识符全部小写，单词之间使用下划线连接\n\n### 6.mysql的日期格式\n\n- %Y 年\n- %m 月\n- %d 日\n- %h 时\n- %m 分\n- %s 秒\n\n### 7.date和datetime区别\n\ndatetime包含年月日时分秒信息\n\n```sql\ndrop table if exists t_user;\ncreate table t_user (\n\tid int,\n    name varchar(32),\n    birth date,\n    create_time datetime\n)\n```\n\n短日期默认格式： %Y-%m-%d\n\n长日期默认格式： %Y-%m-%d %h:%i:%s\n\n```sql\ninsert into t_user(id,name,birth,create_time) values('1','zhangsan','1990-10-10','2022-07-13 19:29:29')\n```\n\n#### now函数\n\n定义：获取系统当前时间，带有时分秒信息\n\n## 17.修改update(DML)\n\n语法：update 表名 set 字段名1 = 值1 ，字段名2 = 值2，字段名3 = 值3...where 条件\n\n注意：没有条件限制会导致所有的数据全部更新\n\n```sql\nupdate t_user set name = 'jack',birth = '2000-10-11' where id = 2\n```\n\n## 18.删除语句\n\ndelete from 表名 where 条件\n\n注意: 没有条件整张表的数据都会被删除\n\n```sql\ndelete from t_user where id = 2;\ninsert into t_user(id) value(2);\ndelete from t_user; //删除所有\n```\n\n**去除重复记录**\n\n*只能出现在所有字段的最前面*，出现在job,deptno两个字段之前，表示两个字段联合起来去重\n\n```sql\nselect distinct job from emp;\n```\n\n错误写法：select ename , distinct fob from emp;\n\n正确写法：select fistinct job,deptno from emp;\n\neg1:统计一下岗位总数-技巧\n\n```sql\nselect count(distinct  job) from emp;\n```\n\n\n\n\n\n## 19.连接查询\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/sql基础语法学习.md","raw":"---\ntitle: sql语法学习\n\nauthor: codefish\ndate: 2022-6-30 18:14:07\ncategories: extension\ntags: [sql,mysql]\ntop_img: /img/man-sunglasses.jpg\ncover: /img/man-sunglasses.jpg\n---\n\n作为一个前端，我认为sql的学习有助于理解业务，当别人告诉你这个表这个表时，不至于一知半解，我不指望一次入门学习能带来很多，但收获远比我想象的多的多。\n\n## 1,基本使用\n\n### 1.删除目录\n\n1.点击安装文件夹，删除profile下面的文件夹\n\n2.环境变量安装到sql下面的bin 文件夹\n\n3.mySql 服务自动启动， 启动才能使用\n\n### 2.命令启用服务\n\n```js\nnet start MySQL\nnet stop MySQL\n```\n\n### 3.使用客户端连接数据库服务器\n\n```js\n mysql -uroot -p密码 显示密码\n mysql -u root -p 隐藏密码\n exit 退出\n```\n\n**查看数据库**\n\nshow database\n\n**使用数据库**\n\nuse myDatabase\n\n**创建数据库**\n\ncreate database bjdatabse\n\n****\n\n**数据库的基本单元**\n\n表\n\n\n\n## 2.基础知识\n\n### 1.约束\n\n**唯一性约束**\n\nshow tables **查看**数据库下面有那些**表**\n\n### 2.sql语句的分类\n\n1. DQL 数据查询语句 select\n2. DML 数据操作语言 insert delete update **主要操作表中的数据**\n3. DDL  数据定义语言 操作表的结构，删除列 create drop alter\n4. RTL 事务控制语言 事务提交 事务回滚\n5. DCL 数据控制语言，grant revote\n\n### 3.表操作\n\n- 查看表中数据\n\nselect * from dept 查看表 dept（查看所有数据\n\n**只看结构**\n\nselect * from dept emp\n\n不见分号不执行-sql 语句\n\n```js\nsql 语句以分号结尾\nsql语句不区分大小写\n\n```\n\n\n\n查询语句\n\nselect name from 表名\n\n查询两个字段-用逗号隔开\n\n1.**查询所有的字段**\n\n1. select * form fm_sn\n\n2. select a,b,c fm_sn\n\n3. **注意**：第一种写法可读性差，效率低（将*转换为所有的字段），实际中不建议此种方法\n\n   \n\n2.**起别名**\n\nselect name,id as newName from dept;\n\n**注意**：注意只是将显示的表名改为新民，不改变原表\n\nas关键字可以省略吗\n\nselect name ,id  newName from fm_sn;\n\n*假设起的别名有空格，怎么办*?\n\n结果： 报错\n\n**'用单引号将别名包起来可以解决'** -双引号也可以\n\n字符串统一使用单引号括起来，在其他数据库不能用（标准单引号\n\n别名如果是中文需要用单引号包起来\n\n\n\n**3.条件查询**\n\n定义： 不是将所有数据查出来\n\n```sql\nselect \n\ta,b;\nfrom\n\t表名\nwhere\n\ta = 100; //条件\n\t \n\t ! 不等于 <>\n\t between and >= <= \n\t sal >= 100 and sal <=300\n\t between 100 and 300 必须左边数值小，右边数值大\n\t = 是不行的 必须为 is null \n\t is not null 不为空\n\t 在数据库中null 不能使用= 进行衡量\n```\n\n\n\n### 4.单行处理函数\n\n**定义**：一行一行的处理\n\n**1.select  lower(ename) from eap;**\n\n将表eap中的ename转小写\n\n-*起别名处理*\n\nselect lower(ename) as ename from eap;\n\n一一对应\n\n**2.upper 转换为大写**\n\n**3.取子串**\n\nselect substr(ename,1,1) from eap;\n\n起始下标从1开始，没有0\n\neg: 找出员工第一个字母为a的信息\n\n```sql\n//1.\nselect ename from emp where ename like \"A%\";\nselect ename from where substr(ename , 1, 1) = \"A\"\n//substr 从位置1开始截取，截取一个长度\n//concat 字符串拼接\n```\n\n**4.str_to_date**\n\n**5.data_format**\n\n**6.format设置千分位**\n\n**7.round四舍五入**\n\nselect round(123.567,1 ) from eap;\n\n保留一位小数\n\nselect round(123.567,-1 ) from eap;    -> 1240\n\n**8.rand生成随机数**\n\n**9.ifnull 将null 转换为一个具体值**\n\n在数据库中，只要又null 参与的数学计算，最后的结果一定是null\n\neg:计算员工的年薪\n\n年薪 = （月薪 + 月补助）*12\n\n问题： 如补助null，然后null参与了计算最后的结果一定为null，需要使用到ifNull函数\n\nifNull (args1,args2)\n\nargs1 数据\n\nargs2 把数据当那个默认值\n\neg: ifNull(a, 0)    //如果a为null把他当作0 来进行处理\n\n*即对空值进行处理*\n\n**10.case when then when then else and**\n\neg： 当岗位为normal时候，工资上调10%,当岗位为CEO时候，工资上调50%\n\nselect ename,jop,sal from emp;\n\n```sql\nselect \nename,job,sal, \n(case job when 'normal' then sal*1.1 when 'CEO' then sal*1.5 else sal end) as newsal\nfrom emp;\n//else后面的没有进行处理\n```\n\n\n\n**注意字面量和字面值**\n\n```sql\n//\nselect 'abc' as bleming from emp;\n生成若干abc()\n\nselect abc from emp;\n//将abc当作一个字段的名字，去表里面找abc字段\n\n//字面量：当前列名\n//字面值：所有值为当前的字段\n```\n\n\n\n**11.分组函数**\n\n定义： 输入多行，输出一行\n\n5个：\n\ncount 计数\n\nsum 求和\n\navg 平均值\n\nmin 最小\n\nmax 最大\n\n注意：分组函数必须对数据进行分组才能使用， 如果没有对数据进行分组，整个表默认为一组\n\neg1:\n\n1.找出最高工资\n\n select   max(sal) from emp;\n\n2.找出最低工资\n\nselect min(sal) from emp;\n\n3.计算工资和\n\nselect sun(sal) from emp;\n\n4.计算平均\n\n\n\n### 5.分组函数\n\n```sql\ncount\nsum\navg\nmax\nmin\n```\n\n\n\n分组函数自动忽略null\n\n#### 1.count字段\n\n1. count() 统计字段下不为NULL的元素的总数(某一列null的数量)\n2. count(*) 统计所有行数，（只要有一行数据count++)\n3. 不存在所有的列都为空的列\n4. 1\n\n \n\n注意点： 分组函数不能直接使用在where子句中\n\n找出比最低工资高的员工信息\n\n```sql\nselect enamel，sal,from emp where sal >  min(sal)\nreason: 分组函数必须分组才能使用，where之后不能使用分组函数\n\nselect sum(sal) from emp;\n\n```\n\n**所有的分组函数可以组合起来一起用**\n\nselect sum(sal),min(sal),max(sal),avg(sal),count(*) from emp\n\n### 6.分组查询*****\n\n定义： 先对数据进行分组，再进行计算，对每一组的数据进行操作\n\n```sql\nselect \n...\nfrom \n...\ngroup by\n..\n\neg:计算每个部门的平均和\neg：计算每个岗位的平均薪资\neg:找出每个工作岗位的最高薪资\n```\n\n**语句执行顺序**\n\n```sql\nselect 4\n..\nfrom 1\n..\nwhere 2\n.. \ngroup by 3\n...\norder by 5\n```\n\n注意： **在一条selecte语句中，如果有group by 语句，select 后面只能有分组的字段**\n\n**按照多个字段进行分组**\n\n找出每个部门不同工作岗位的最高薪资\n\nselect ename,job from emp where ename,job\n\n**having子句**-对分组后的数据进行再一步过滤\n\n不能单独使用，需要在group子句后面使用\n\n```sql\nselect \ndeptno,max(sal)\nfrom emp\ngroup by \n\tdeptno\nhaving \n\tmax(sal) > 3000\n\t//以上的sql语句执行效率低-> 先筛选后分组\n\nselect \n\txxx\nfrom \n\temp\nwhere \n\tsal > 3000\ngroup by \n    deptno;\n//能使用where的尽量使用where,优先使用where，实现不了的使用having\n\n\n```\n\neg:找出每个部门平均薪资，要求平均薪资高于2500\n\n```sql\nselect \n\tdeptno ,avg(sal)\nfrom \n\temp \ngroup by deptno\n\n=====>\n==>必须使用having\nselect \n\tdeptno ,avg(sal)\nfrom \n\temp\ngroup by deptno\n\tsal > 2500\nhaving\n\tavg(sal) > 2500;\n```\n\n**.数据**\n\n```sql\n//2.创建数据库\ncreate database bjpowernode;\n//3.选择数据库\nuse bjpowernode;\n//4.导入数据\nsource d:\\bjpowernode.sql;\n//5.删除数据库\ndrop database bjpowernode;\n\n**查看表的结构\ndesc dept;\n```\n\n## 7.连接查询\n\n定义：多张表联合起来查询数据-连接查询\n\nSQL92 92年出现的语法\n\nSQL99 99年出现的语法\n\n根据表连接的方式分类\n\n- 内连接\n  - 等值连接\n  - 非等值连接\n  - 自连接\n- 外连接\n  - 左外连接\n  - 右外连接\n- 全连接（使用少\n\n**现象**\n\n：两种表进行连接查询时候，没有任何条件限制的时候，会出现什么现象\n\n拿一条表的数据对另一个表所有数据进行查询\n\n```sql\nselect ename,dname from emp ,dept;\n```\n\n**问题：笛卡儿积现象**\n\n查询结果：最终查询结果条数，为两个表数量之积\n\n14*4 = 56\n\n**解决**：连接时加条件，满足此条件的记录被筛选出来\n\n```sql\nselect \n\tename ,dname\nfrom \n\temp,dept\nwhere emp.deptno = dept.deptno;\n```\n\n思考：查询结果提条数为14条，但是匹配的次数没有减少(56次)\n\n问题：**查询效率低**\n\n```sql\nselect \n\temp.ename,dept.dname\nfrom \n\temp,dept\nwhere \n\temp.deptno = dept.deptno;\n```\n\n\n\n**别名-效率**\n\n```sql\nselect \n\te.ename ,d.dname\nfrom \n\temp e,dept d\nwhere \n\te.ename = d.dname \n```\n\ne.ename = d.dname  **SQL92语法**\n\n*减少表的连接次数-加快速率*-提升程序执行速率\n\n**注意**：笛卡尔积-表的连接次数越多效率越低\n\n## 8.内连接\n\n**特点**：完全能够匹配这个条件的数据查询出来\n\n### 1.等值连接\n\neg:查询每个员工所在的部门名称，显示员工名和部门名\n\n```sql\nSQL 92 内连接-等值连接\nselect \n\te.ename,d.dname\nfrom \n\temp e,dept d\nwhere \n\te.deptnp = d.deptnp\n\n```\n\n\n\n````sql\nSQL 99\nselect \n\te.ename , d.dname\nfrom \n\temp e,\njoin\n\tdpart d\nwhere \n\te.dpartno = d.dpartno\n````\n\n内连接（inner\n\n```sql\nselect \n\te.name , d.dname\nfrom \n\temp e,\ninner join \n\tdpart d\nwhere \n\te.dpartno = d.dpartno\n\t\n```\n\n\n\n**非等值连接**\n\n```sql\nselect \n\te.ename , e.sal, s.grade\nfrom \n\temp e\njoin \n\tsalgrade s\nwhere \n\te.sal between s.losal and s.hisal;\n\t//条件不是一个等量关系，称为非等值连接\n```\n\n### 2.内连接之自连接\n\n查询员工的上级领导，要求显示员工名和对应的领导名\n\n![image-20220712085749880](D:\\桌面\\tools\\开发问题\\img\\image-20220712085749880.png)\n\n**技巧：一张表看作两张表**\n\n```sql\nselect \n\ta.ename as colleage, b ename sa leader\nfrom \n\tedpart a\njoin \n\tedpart b\non\n\ta.mgr = b.empno\n\t\n```\n\n内连接：两表之间没有主次关系\n\n## 9.外连接\n\neg1\n\n```sql\nselect \n\te.ename , d.ename \nfrom \n\temp e\nright join \n\tdept d\non \n\te.deptno = d.deptno\n\n```\n\n**右外连接**:right代码将join右边的关键字看作主表，捎带关联查询左边表，又叫做右连接\n\n在外连接中：两张表存在这主次关系\n\n左外连接：同右，又叫做左连接，左连接右连接可以实现同一个效果（写法不一样\n\n*外连接查询结果条数一定大于等于内连接*\n\nouter 可以省略，代表外连接\n\n```sql\nselect \n\te.ename , d.ename \nfrom emp\n\temp e\nright outer join \n\tdept d\non \n\te.deptno = d.deptno\n\n```\n\neg:查询每个员工的上级领导，要求显示所有员工的名字和领导名\n\n```sql\nselect \n\ta.ename , b.ename\nfrom \n\temp a\nleft join\n\temp b\non e.mgr = b.empno\n```\n\n## 10.多表连接\n\n```sql\nselect \n\t...\nfrom \n\ta\njoin \n\tb\non \n\ta 和 b 的连接条件\njoin\n\tc\non \n\ta 和 c 的连接条件\nright join \n\td\non \n\ta 和 d 的连接条件\n\n```\n\neg:要求找出每个员工的部门名称以及工资等级，要求显示员工名，部门名，薪资，薪资等级\n\n![image-20220712094430009](D:\\桌面\\tools\\开发问题\\img\\image-20220712094430009.png)\n\n```SQL\nselect \n\te.ename , e.sal,d.mname,s.grade\nfrom \n\temp e\njoin \n\tdept d\non \n\te.deptno = d.deptno\njoin \n\tsalgrade s\non e.sal between s.losal and s.hisal;\n```\n\n**多查一个上级领导怎么办**，显示领导名字\n\n思路：加一个外连接\n\n```sql\nleft join \n\temp i \non a.mgr = i.empno\n\n```\n\n## 11.子查询\n\n定义：select中嵌套select语句。被嵌套的select为子查询\n\n可以出现的位置\n\n```sql\nselect \n\t..(select)\nfrom \n\t..(select)\nwhere\n\t..(select)\n```\n\n### 1.where 子句中出现子查询\n\neg1:找出比最低工资高的员工姓名和工资\n\n```sql\nselect \n\tename,sal\nfrom \n\temp\nwhere\n \tsal>min(sal);\n //where后面不能直接使用分组函数\n```\n\n实现思路：\n\n- 查询最低工资值\n- 查询比最低>800\n\n```sql\nselect \n\tename\nfrom \n\temp\nwhere\n\tsal > (select min(sal) from emp);\n```\n\n### 2.from子句中的子查询\n\n**注意**：from后面的子查询，可以将子查询的查询结果当作一张临时表\n\neg:找出每个岗位的平均工资的薪资等级\n\n- 找出每个岗位的平均薪资\n\n  select job,avg(sal) from emp group by job\n\n  ![image-20220712110949665](D:\\桌面\\tools\\开发问题\\img\\image-20220712110949665.png)\n\n- 把以上查询结果当成已知的表\n\n![image-20220712111109125](D:\\桌面\\tools\\开发问题\\img\\image-20220712111109125.png)\n\n```sql\nselect \n\tt.* ,s.grade\nfrom \n\tt\njoin \n\tsalgrade s\non \n\tt.avs(sal) betweent s.losal and s.hisal\n```\n\n完整写法\n\n```sql\nselect \n\tt.* ,s.grade\nfrom \n\t(select job,avg(sal) as avgsal from emp group by job) t\njoin \n\tsalgrade s\non \n\tt.avs(sal) betweent s.losal and s.hisal\n```\n\n### 3.select 后面出现的子查询\n\neg:找出每个员工的部门名称，要求显示所有的员工名，部门名\n\n```sql\nselect \n\te.ename, e.dpartno,(select d.dname from dept d where e.deptno \t\t=d.deptno) as dname \nfrom \n\temp e;\n```\n\n**注意：对于select**后面的子查询，只能返回一条结果，多余一条就报错***\n\n## 12.union 合并查询结果集\n\neg:查询工作岗位是MANAGER和SALESMAN的员工\n\n```sql\nselect \n\tename ,job \nfrom \n\temp \nwhere \n\tjob = 'MANAGER' or job = 'SALESMAN'\n-------------------------------------------\nselect \n\tename , job \nfrom \n\temp \nwhere \n\tjob in ('MANAGER','SALESMAN')\n```\n\n**union 效率更高**\n\nps：对于表连连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍的翻。。。\n\nunion 可以减少匹配的次数，在减少匹配次数的情况下，还可以完成两个结果的拼接。。。\n\na-b-c = 10 - 10 -10 /1000\n\n**如果使用union**\n\n```sql\na-b 10*10\na-c 10*10\n总次数 200\n```\n\nOracle要求，union列数相同，，并且数据的类型必须相同\n\n## 13.limit\n\n使用场景：分页查询\n\n定义：将查询结果的一部分取出来\n\n作用：提高用户的体验，一次都查询出来体验差\n\n**eg1:**按照薪资降序，取出排名在前五名的员工\n\n```sql\nselect \n\tename ,sal\nfrom \n\temp\norder by\n\tsal desc\nlimit 5;\n----------------------------\n完整用法\nlimit 0,5; startIndex起始下标（默认为0） ,length\n缺省用法\nlimit 5\n\n\n```\n\n注意：**limit在order by 之后执行**\n\n**eg2** ：取出第3-5名的员工\n\n```sql\nselect \n\tename ,sal\nfrom \n\temp\norder by\n\tsal desc\nlimit 2,3\n```\n\neg3:取出工资排名在5-9名的员工\n\n```sql\nselect \n\tename,sal\nfrom \n\temp\norder by \n\tsal desc\nlimit 4,5\n\n```\n\n\n\n## 14.分页\n\n假设：每页显示三条数据\n\n```sql\nlimit 0,3\nlimit 3,3\nlimit 6,3\nlimit 9,3\n```\n\nps：每页显示pageSizes条记录，第pageNo页：limit ? ,pageSize\n\n 第pageNo页：limit (pageNo - 1) * pageSize , pageSIze\n\n**通用写法**\n\nlimit (pageNo - 1)*pageSize , pageSize\n\n## DQL 总结\n\n```sql\nselect \t\t5.\n\t...\nfrom        1.\n\t...\nwhere \t\t2.\n\t....    \ngroup by\t3.\n\t...\nhaving\t\t4.\n\t...\norder by\t6.\n\t...\nlimit \t\t7.\n\t...\n```\n\n**多表联查**\n\n\n\n## 15.表的创建\n\n属于DDL语句\n\ncreate ,drap , alter\n\n```sql\n1.\ncreate table 表名（字段名1，数据类型,字段名2，数据类型\n2.\ncreate table 表名（\n\t字段名1，数据类型,\n\t字段名2，数据类型\n）\n```\n\n**数据类型**- 关于sql\n\n表名：建议见表知名，字段名同样。fm_part\n\n- varchar\n- char\n- int\n- bigint\n- float\n- double\n- string\n- datetime\n- date\n- clob\n- blob\n\n### 1.varchar\n\nps：可变长度字符串（255） \n\n​\t\tname varchar(10)\n\n新增一个字段name,动态分配长度，根据数据动态判断，实际动态长度，比较智能，节省空间，会根据实际的数据长度动态分配空间\n\n### 2.char（255\n\nps：定长字符串\n\nname char(10)\n\nname = jack \n\n不管实际的数据长度是多少，分配固定长度的空间去存储数据，使用不当的情况下，可能造成数据空间的浪费\n\n- varchar  节省空间但是慢\n- char        快，使用不当可以造成空间浪费\n\neg1 ： 性别->char\n\neg3 ： 姓名->varchar   (variable)\n\n### 3.int（11位数\n\nps：数字中的整数型\n\n### 4.bigInt \n\nps: 等同于java中的long\n\n### 5.date \n\nps：短日期类型\n\n### 6.datetime\n\nps:长日期类型\n\n### 7.clob\n\nps: 字符大的对象，最大可以存储4G的字符串\n\n比如:存储超过255个字符的都要使用CLOB字符大对象来存储\n\nCharacter Large Object :\n\n### 8.blob\n\n二进制大对象\n\nBinary Large Object\n\n专门用来存储图片，声音，视频等流媒体数据\n\n往BOLB类型的字段上插入数据的时候，例如插入一个图片，视频等，你需要使用IO流才行。\n\n```js\nt_table 表\n编号 no(bigint)\n名字 name(varchar)\n描述信息 description(clob)\n上映时间 playtime(date)\n时长 time(double)\n海报 image(blob)\n类型 type(int)\n```\n\n\n\n\n\neg1:创建一个学生表\n\n```sql\ncreate table t_student{\n\tno int,\n\tname varchar(32),\n\tsex char(1) default 1,\n\tage int(3),\n\temail varchar(255)\n}\n```\n\n删除表\n\n​\tdrop table t_student;\n\n注意：但他不存在的时候会报错\n\n​\tdrop  tablet if exists t_studen ;   -> 表存在才删除\n\n## 16.数据操作\n\n语法：\n\n​\tinsert into 表名（字段名1，字段名2，字段名3...) values (值1，值2，值3)\n\n注意：字段名和值要一一对应，数量要对应，数据类型要对应。\n\n```sql\ninsert into t_student (no ,name, sex,age,email) values (1, 'zhangsan','m','20','zhangsan','12534652@163.com')\n\n------------------------值与字段一一对应---------------------------\ninsert into t_student (no ,name, sex,age,email) values (1, 'zhangsan','m','20','zhangsan','12534652@163.com')\n```\n\nps:可以只添加部分字段，未赋值的字段，值为null\n\ntips:insert 语句但凡执行成功，必然会多一条记录，其他值为null,不指定默认值。默认值为null\n\ninsert 语句中的字段名 可以省略吗\n\n```sql\ninsert into t_student values(2)\n--缺省表示写上所有字段\n```\n\n### 1.插入日期\n\n1\n\n```sql\n```\n\n### 2.格式化数字\n\n```sql\nselect ename ,format(sal,'$999,999') as sal from emp;\n```\n\n加入千分位\n\n### 3.str_to_date\n\n将字符串varchar类型转换为date类型\n\n通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，通常需要改函数将字符串转换为date\n\n```sql\ninsert into t_user(id,name,birth) value(1, 'zhangsan'， str_to_date('01-10-1990'),'%d-%m-%Y')\n```\n\n如果提供的日期时1990-10-01，str_to_data函数就不需要了\n\n```sql\ninsert into t_user(id,name,birth) values('1','list','1990-10-01')\n```\n\n查询的时候可以使用特定的日期格式转换吗\n\n```sql\nselect id，name,date_format(birth,'%m/%d/%Y') as birth from t_user\n```\n\n\n\n\n\n### 4.date_format\n\n将date类型转换为具有一定格式的varchar字符串类型\n\n```sql\ndate_format(日期类型数据，‘日期格式’)\n这个函数通常使用在查询日期方面，设置展示的日期格式\nselect id,name,birth from t_user\n以上sql语句实际上进行了默认的日期格式化，\n自动将数据库中的date类型转换为varchar字符串\n采用的时mysql默认的日期格式，‘%Y-%m-%d'\n```\n\n\n\n### 5，数据库命名规范\n\n所有的标识符全部小写，单词之间使用下划线连接\n\n### 6.mysql的日期格式\n\n- %Y 年\n- %m 月\n- %d 日\n- %h 时\n- %m 分\n- %s 秒\n\n### 7.date和datetime区别\n\ndatetime包含年月日时分秒信息\n\n```sql\ndrop table if exists t_user;\ncreate table t_user (\n\tid int,\n    name varchar(32),\n    birth date,\n    create_time datetime\n)\n```\n\n短日期默认格式： %Y-%m-%d\n\n长日期默认格式： %Y-%m-%d %h:%i:%s\n\n```sql\ninsert into t_user(id,name,birth,create_time) values('1','zhangsan','1990-10-10','2022-07-13 19:29:29')\n```\n\n#### now函数\n\n定义：获取系统当前时间，带有时分秒信息\n\n## 17.修改update(DML)\n\n语法：update 表名 set 字段名1 = 值1 ，字段名2 = 值2，字段名3 = 值3...where 条件\n\n注意：没有条件限制会导致所有的数据全部更新\n\n```sql\nupdate t_user set name = 'jack',birth = '2000-10-11' where id = 2\n```\n\n## 18.删除语句\n\ndelete from 表名 where 条件\n\n注意: 没有条件整张表的数据都会被删除\n\n```sql\ndelete from t_user where id = 2;\ninsert into t_user(id) value(2);\ndelete from t_user; //删除所有\n```\n\n**去除重复记录**\n\n*只能出现在所有字段的最前面*，出现在job,deptno两个字段之前，表示两个字段联合起来去重\n\n```sql\nselect distinct job from emp;\n```\n\n错误写法：select ename , distinct fob from emp;\n\n正确写法：select fistinct job,deptno from emp;\n\neg1:统计一下岗位总数-技巧\n\n```sql\nselect count(distinct  job) from emp;\n```\n\n\n\n\n\n## 19.连接查询\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"sql基础语法学习","published":1,"updated":"2025-01-07T02:30:25.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0cr7001g572o3xhf4fjr","content":"<p>作为一个前端，我认为sql的学习有助于理解业务，当别人告诉你这个表这个表时，不至于一知半解，我不指望一次入门学习能带来很多，但收获远比我想象的多的多。</p>\n<h2 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1,基本使用\"></a>1,基本使用</h2><h3 id=\"1-删除目录\"><a href=\"#1-删除目录\" class=\"headerlink\" title=\"1.删除目录\"></a>1.删除目录</h3><p>1.点击安装文件夹，删除profile下面的文件夹</p>\n<p>2.环境变量安装到sql下面的bin 文件夹</p>\n<p>3.mySql 服务自动启动， 启动才能使用</p>\n<h3 id=\"2-命令启用服务\"><a href=\"#2-命令启用服务\" class=\"headerlink\" title=\"2.命令启用服务\"></a>2.命令启用服务</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start <span class=\"title class_\">MySQL</span></span><br><span class=\"line\">net stop <span class=\"title class_\">MySQL</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用客户端连接数据库服务器\"><a href=\"#3-使用客户端连接数据库服务器\" class=\"headerlink\" title=\"3.使用客户端连接数据库服务器\"></a>3.使用客户端连接数据库服务器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p密码 显示密码</span><br><span class=\"line\">mysql -u root -p 隐藏密码</span><br><span class=\"line\">exit 退出</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看数据库</strong></p>\n<p>show database</p>\n<p><strong>使用数据库</strong></p>\n<p>use myDatabase</p>\n<p><strong>创建数据库</strong></p>\n<p>create database bjdatabse</p>\n<hr>\n<p><strong>数据库的基本单元</strong></p>\n<p>表</p>\n<h2 id=\"2-基础知识\"><a href=\"#2-基础知识\" class=\"headerlink\" title=\"2.基础知识\"></a>2.基础知识</h2><h3 id=\"1-约束\"><a href=\"#1-约束\" class=\"headerlink\" title=\"1.约束\"></a>1.约束</h3><p><strong>唯一性约束</strong></p>\n<p>show tables <strong>查看</strong>数据库下面有那些<strong>表</strong></p>\n<h3 id=\"2-sql语句的分类\"><a href=\"#2-sql语句的分类\" class=\"headerlink\" title=\"2.sql语句的分类\"></a>2.sql语句的分类</h3><ol>\n<li>DQL 数据查询语句 select</li>\n<li>DML 数据操作语言 insert delete update <strong>主要操作表中的数据</strong></li>\n<li>DDL  数据定义语言 操作表的结构，删除列 create drop alter</li>\n<li>RTL 事务控制语言 事务提交 事务回滚</li>\n<li>DCL 数据控制语言，grant revote</li>\n</ol>\n<h3 id=\"3-表操作\"><a href=\"#3-表操作\" class=\"headerlink\" title=\"3.表操作\"></a>3.表操作</h3><ul>\n<li>查看表中数据</li>\n</ul>\n<p>select * from dept 查看表 dept（查看所有数据</p>\n<p><strong>只看结构</strong></p>\n<p>select * from dept emp</p>\n<p>不见分号不执行-sql 语句</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql 语句以分号结尾</span><br><span class=\"line\">sql语句不区分大小写</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询语句</p>\n<p>select name from 表名</p>\n<p>查询两个字段-用逗号隔开</p>\n<p>1.<strong>查询所有的字段</strong></p>\n<ol>\n<li><p>select * form fm_sn</p>\n</li>\n<li><p>select a,b,c fm_sn</p>\n</li>\n<li><p><strong>注意</strong>：第一种写法可读性差，效率低（将*转换为所有的字段），实际中不建议此种方法</p>\n</li>\n</ol>\n<p>2.<strong>起别名</strong></p>\n<p>select name,id as newName from dept;</p>\n<p><strong>注意</strong>：注意只是将显示的表名改为新民，不改变原表</p>\n<p>as关键字可以省略吗</p>\n<p>select name ,id  newName from fm_sn;</p>\n<p><em>假设起的别名有空格，怎么办</em>?</p>\n<p>结果： 报错</p>\n<p><strong>‘用单引号将别名包起来可以解决’</strong> -双引号也可以</p>\n<p>字符串统一使用单引号括起来，在其他数据库不能用（标准单引号</p>\n<p>别名如果是中文需要用单引号包起来</p>\n<p><strong>3.条件查询</strong></p>\n<p>定义： 不是将所有数据查出来</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\ta,b;</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\t表名</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">\ta <span class=\"operator\">=</span> <span class=\"number\">100</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>条件</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t <span class=\"operator\">!</span> 不等于 <span class=\"operator\">&lt;&gt;</span></span><br><span class=\"line\">\t <span class=\"keyword\">between</span> <span class=\"keyword\">and</span> <span class=\"operator\">&gt;=</span> <span class=\"operator\">&lt;=</span> </span><br><span class=\"line\">\t sal <span class=\"operator\">&gt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">and</span> sal <span class=\"operator\">&lt;=</span><span class=\"number\">300</span></span><br><span class=\"line\">\t <span class=\"keyword\">between</span> <span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"number\">300</span> 必须左边数值小，右边数值大</span><br><span class=\"line\">\t <span class=\"operator\">=</span> 是不行的 必须为 <span class=\"keyword\">is</span> <span class=\"keyword\">null</span> </span><br><span class=\"line\">\t <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> 不为空</span><br><span class=\"line\">\t 在数据库中<span class=\"keyword\">null</span> 不能使用<span class=\"operator\">=</span> 进行衡量</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-单行处理函数\"><a href=\"#4-单行处理函数\" class=\"headerlink\" title=\"4.单行处理函数\"></a>4.单行处理函数</h3><p><strong>定义</strong>：一行一行的处理</p>\n<p><strong>1.select  lower(ename) from eap;</strong></p>\n<p>将表eap中的ename转小写</p>\n<p>-<em>起别名处理</em></p>\n<p>select lower(ename) as ename from eap;</p>\n<p>一一对应</p>\n<p><strong>2.upper 转换为大写</strong></p>\n<p><strong>3.取子串</strong></p>\n<p>select substr(ename,1,1) from eap;</p>\n<p>起始下标从1开始，没有0</p>\n<p>eg: 找出员工第一个字母为a的信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> ename <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename <span class=\"keyword\">like</span> &quot;A%&quot;;</span><br><span class=\"line\"><span class=\"keyword\">select</span> ename <span class=\"keyword\">from</span> <span class=\"keyword\">where</span> substr(ename , <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"operator\">=</span> &quot;A&quot;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>substr 从位置<span class=\"number\">1</span>开始截取，截取一个长度</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>concat 字符串拼接</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.str_to_date</strong></p>\n<p><strong>5.data_format</strong></p>\n<p><strong>6.format设置千分位</strong></p>\n<p><strong>7.round四舍五入</strong></p>\n<p>select round(123.567,1 ) from eap;</p>\n<p>保留一位小数</p>\n<p>select round(123.567,-1 ) from eap;    -&gt; 1240</p>\n<p><strong>8.rand生成随机数</strong></p>\n<p><strong>9.ifnull 将null 转换为一个具体值</strong></p>\n<p>在数据库中，只要又null 参与的数学计算，最后的结果一定是null</p>\n<p>eg:计算员工的年薪</p>\n<p>年薪 &#x3D; （月薪 + 月补助）*12</p>\n<p>问题： 如补助null，然后null参与了计算最后的结果一定为null，需要使用到ifNull函数</p>\n<p>ifNull (args1,args2)</p>\n<p>args1 数据</p>\n<p>args2 把数据当那个默认值</p>\n<p>eg: ifNull(a, 0)    &#x2F;&#x2F;如果a为null把他当作0 来进行处理</p>\n<p><em>即对空值进行处理</em></p>\n<p><strong>10.case when then when then else and</strong></p>\n<p>eg： 当岗位为normal时候，工资上调10%,当岗位为CEO时候，工资上调50%</p>\n<p>select ename,jop,sal from emp;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">ename,job,sal, </span><br><span class=\"line\">(<span class=\"keyword\">case</span> job <span class=\"keyword\">when</span> <span class=\"string\">&#x27;normal&#x27;</span> <span class=\"keyword\">then</span> sal<span class=\"operator\">*</span><span class=\"number\">1.1</span> <span class=\"keyword\">when</span> <span class=\"string\">&#x27;CEO&#x27;</span> <span class=\"keyword\">then</span> sal<span class=\"operator\">*</span><span class=\"number\">1.5</span> <span class=\"keyword\">else</span> sal <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> newsal</span><br><span class=\"line\"><span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"keyword\">else</span>后面的没有进行处理</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>注意字面量和字面值</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"keyword\">as</span> bleming <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\">生成若干abc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> abc <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>将abc当作一个字段的名字，去表里面找abc字段</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>字面量：当前列名</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>字面值：所有值为当前的字段</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>11.分组函数</strong></p>\n<p>定义： 输入多行，输出一行</p>\n<p>5个：</p>\n<p>count 计数</p>\n<p>sum 求和</p>\n<p>avg 平均值</p>\n<p>min 最小</p>\n<p>max 最大</p>\n<p>注意：分组函数必须对数据进行分组才能使用， 如果没有对数据进行分组，整个表默认为一组</p>\n<p>eg1:</p>\n<p>1.找出最高工资</p>\n<p> select   max(sal) from emp;</p>\n<p>2.找出最低工资</p>\n<p>select min(sal) from emp;</p>\n<p>3.计算工资和</p>\n<p>select sun(sal) from emp;</p>\n<p>4.计算平均</p>\n<h3 id=\"5-分组函数\"><a href=\"#5-分组函数\" class=\"headerlink\" title=\"5.分组函数\"></a>5.分组函数</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count</span><br><span class=\"line\">sum</span><br><span class=\"line\">avg</span><br><span class=\"line\">max</span><br><span class=\"line\">min</span><br></pre></td></tr></table></figure>\n\n\n\n<p>分组函数自动忽略null</p>\n<h4 id=\"1-count字段\"><a href=\"#1-count字段\" class=\"headerlink\" title=\"1.count字段\"></a>1.count字段</h4><ol>\n<li>count() 统计字段下不为NULL的元素的总数(某一列null的数量)</li>\n<li>count(*) 统计所有行数，（只要有一行数据count++)</li>\n<li>不存在所有的列都为空的列</li>\n<li>1</li>\n</ol>\n<p>注意点： 分组函数不能直接使用在where子句中</p>\n<p>找出比最低工资高的员工信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> enamel，sal,<span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> sal <span class=\"operator\">&gt;</span>  <span class=\"built_in\">min</span>(sal)</span><br><span class=\"line\">reason: 分组函数必须分组才能使用，<span class=\"keyword\">where</span>之后不能使用分组函数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">sum</span>(sal) <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>所有的分组函数可以组合起来一起用</strong></p>\n<p>select sum(sal),min(sal),max(sal),avg(sal),count(*) from emp</p>\n<h3 id=\"6-分组查询\"><a href=\"#6-分组查询\" class=\"headerlink\" title=\"6.分组查询*****\"></a>6.分组查询*****</h3><p>定义： 先对数据进行分组，再进行计算，对每一组的数据进行操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">..</span><br><span class=\"line\"></span><br><span class=\"line\">eg:计算每个部门的平均和</span><br><span class=\"line\">eg：计算每个岗位的平均薪资</span><br><span class=\"line\">eg:找出每个工作岗位的最高薪资</span><br></pre></td></tr></table></figure>\n\n<p><strong>语句执行顺序</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">4</span></span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"number\">1</span></span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"number\">2</span></span><br><span class=\"line\">.. </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>注意： <strong>在一条selecte语句中，如果有group by 语句，select 后面只能有分组的字段</strong></p>\n<p><strong>按照多个字段进行分组</strong></p>\n<p>找出每个部门不同工作岗位的最高薪资</p>\n<p>select ename,job from emp where ename,job</p>\n<p><strong>having子句</strong>-对分组后的数据进行再一步过滤</p>\n<p>不能单独使用，需要在group子句后面使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">deptno,<span class=\"built_in\">max</span>(sal)</span><br><span class=\"line\"><span class=\"keyword\">from</span> emp</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> </span><br><span class=\"line\">\tdeptno</span><br><span class=\"line\"><span class=\"keyword\">having</span> </span><br><span class=\"line\">\t<span class=\"built_in\">max</span>(sal) <span class=\"operator\">&gt;</span> <span class=\"number\">3000</span></span><br><span class=\"line\">\t<span class=\"operator\">/</span><span class=\"operator\">/</span>以上的<span class=\"keyword\">sql</span>语句执行效率低<span class=\"operator\">-</span><span class=\"operator\">&gt;</span> 先筛选后分组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\txxx</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\tsal <span class=\"operator\">&gt;</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> </span><br><span class=\"line\">    deptno;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>能使用<span class=\"keyword\">where</span>的尽量使用<span class=\"keyword\">where</span>,优先使用<span class=\"keyword\">where</span>，实现不了的使用<span class=\"keyword\">having</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>eg:找出每个部门平均薪资，要求平均薪资高于2500</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tdeptno ,<span class=\"built_in\">avg</span>(sal)</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> deptno</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span>必须使用<span class=\"keyword\">having</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tdeptno ,<span class=\"built_in\">avg</span>(sal)</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> deptno</span><br><span class=\"line\">\tsal <span class=\"operator\">&gt;</span> <span class=\"number\">2500</span></span><br><span class=\"line\"><span class=\"keyword\">having</span></span><br><span class=\"line\">\t<span class=\"built_in\">avg</span>(sal) <span class=\"operator\">&gt;</span> <span class=\"number\">2500</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>.数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">2.</span>创建数据库</span><br><span class=\"line\"><span class=\"keyword\">create</span> database bjpowernode;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">3.</span>选择数据库</span><br><span class=\"line\">use bjpowernode;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">4.</span>导入数据</span><br><span class=\"line\">source d:\\bjpowernode.sql;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">5.</span>删除数据库</span><br><span class=\"line\"><span class=\"keyword\">drop</span> database bjpowernode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">*</span><span class=\"operator\">*</span>查看表的结构</span><br><span class=\"line\"><span class=\"keyword\">desc</span> dept;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-连接查询\"><a href=\"#7-连接查询\" class=\"headerlink\" title=\"7.连接查询\"></a>7.连接查询</h2><p>定义：多张表联合起来查询数据-连接查询</p>\n<p>SQL92 92年出现的语法</p>\n<p>SQL99 99年出现的语法</p>\n<p>根据表连接的方式分类</p>\n<ul>\n<li>内连接<ul>\n<li>等值连接</li>\n<li>非等值连接</li>\n<li>自连接</li>\n</ul>\n</li>\n<li>外连接<ul>\n<li>左外连接</li>\n<li>右外连接</li>\n</ul>\n</li>\n<li>全连接（使用少</li>\n</ul>\n<p><strong>现象</strong></p>\n<p>：两种表进行连接查询时候，没有任何条件限制的时候，会出现什么现象</p>\n<p>拿一条表的数据对另一个表所有数据进行查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ename,dname <span class=\"keyword\">from</span> emp ,dept;</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题：笛卡儿积现象</strong></p>\n<p>查询结果：最终查询结果条数，为两个表数量之积</p>\n<p>14*4 &#x3D; 56</p>\n<p><strong>解决</strong>：连接时加条件，满足此条件的记录被筛选出来</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename ,dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp,dept</span><br><span class=\"line\"><span class=\"keyword\">where</span> emp.deptno <span class=\"operator\">=</span> dept.deptno;</span><br></pre></td></tr></table></figure>\n\n<p>思考：查询结果提条数为14条，但是匹配的次数没有减少(56次)</p>\n<p>问题：<strong>查询效率低</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\temp.ename,dept.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp,dept</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\temp.deptno <span class=\"operator\">=</span> dept.deptno;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>别名-效率</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename ,d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e,dept d</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.ename <span class=\"operator\">=</span> d.dname </span><br></pre></td></tr></table></figure>\n\n<p>e.ename &#x3D; d.dname  <strong>SQL92语法</strong></p>\n<p><em>减少表的连接次数-加快速率</em>-提升程序执行速率</p>\n<p><strong>注意</strong>：笛卡尔积-表的连接次数越多效率越低</p>\n<h2 id=\"8-内连接\"><a href=\"#8-内连接\" class=\"headerlink\" title=\"8.内连接\"></a>8.内连接</h2><p><strong>特点</strong>：完全能够匹配这个条件的数据查询出来</p>\n<h3 id=\"1-等值连接\"><a href=\"#1-等值连接\" class=\"headerlink\" title=\"1.等值连接\"></a>1.等值连接</h3><p>eg:查询每个员工所在的部门名称，显示员工名和部门名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SQL</span> <span class=\"number\">92</span> 内连接<span class=\"operator\">-</span>等值连接</span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename,d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e,dept d</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.deptnp <span class=\"operator\">=</span> d.deptnp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SQL</span> <span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e,</span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\">\tdpart d</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.dpartno <span class=\"operator\">=</span> d.dpartno</span><br></pre></td></tr></table></figure>\n\n<p>内连接（inner</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.name , d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e,</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\tdpart d</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.dpartno <span class=\"operator\">=</span> d.dpartno</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>非等值连接</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , e.sal, s.grade</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.sal <span class=\"keyword\">between</span> s.losal <span class=\"keyword\">and</span> s.hisal;</span><br><span class=\"line\">\t<span class=\"operator\">/</span><span class=\"operator\">/</span>条件不是一个等量关系，称为非等值连接</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-内连接之自连接\"><a href=\"#2-内连接之自连接\" class=\"headerlink\" title=\"2.内连接之自连接\"></a>2.内连接之自连接</h3><p>查询员工的上级领导，要求显示员工名和对应的领导名</p>\n<p><img src=\"D:\\桌面\\tools\\开发问题\\img\\image-20220712085749880.png\" alt=\"image-20220712085749880\"></p>\n<p><strong>技巧：一张表看作两张表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\ta.ename <span class=\"keyword\">as</span> colleage, b ename sa leader</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\tedpart a</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tedpart b</span><br><span class=\"line\"><span class=\"keyword\">on</span></span><br><span class=\"line\">\ta.mgr <span class=\"operator\">=</span> b.empno</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p>内连接：两表之间没有主次关系</p>\n<h2 id=\"9-外连接\"><a href=\"#9-外连接\" class=\"headerlink\" title=\"9.外连接\"></a>9.外连接</h2><p>eg1</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , d.ename </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\tdept d</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\te.deptno <span class=\"operator\">=</span> d.deptno</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>右外连接</strong>:right代码将join右边的关键字看作主表，捎带关联查询左边表，又叫做右连接</p>\n<p>在外连接中：两张表存在这主次关系</p>\n<p>左外连接：同右，又叫做左连接，左连接右连接可以实现同一个效果（写法不一样</p>\n<p><em>外连接查询结果条数一定大于等于内连接</em></p>\n<p>outer 可以省略，代表外连接</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , d.ename </span><br><span class=\"line\"><span class=\"keyword\">from</span> emp</span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\tdept d</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\te.deptno <span class=\"operator\">=</span> d.deptno</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>eg:查询每个员工的上级领导，要求显示所有员工的名字和领导名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\ta.ename , b.ename</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp a</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\temp b</span><br><span class=\"line\"><span class=\"keyword\">on</span> e.mgr <span class=\"operator\">=</span> b.empno</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-多表连接\"><a href=\"#10-多表连接\" class=\"headerlink\" title=\"10.多表连接\"></a>10.多表连接</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\ta</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tb</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\ta 和 b 的连接条件</span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\">\tc</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\ta 和 c 的连接条件</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\td</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\ta 和 d 的连接条件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>eg:要求找出每个员工的部门名称以及工资等级，要求显示员工名，部门名，薪资，薪资等级</p>\n<p><img src=\"D:\\桌面\\tools\\开发问题\\img\\image-20220712094430009.png\" alt=\"image-20220712094430009\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , e.sal,d.mname,s.grade</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tdept d</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\te.deptno <span class=\"operator\">=</span> d.deptno</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\"><span class=\"keyword\">on</span> e.sal <span class=\"keyword\">between</span> s.losal <span class=\"keyword\">and</span> s.hisal;</span><br></pre></td></tr></table></figure>\n\n<p><strong>多查一个上级领导怎么办</strong>，显示领导名字</p>\n<p>思路：加一个外连接</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\temp i </span><br><span class=\"line\"><span class=\"keyword\">on</span> a.mgr <span class=\"operator\">=</span> i.empno</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-子查询\"><a href=\"#11-子查询\" class=\"headerlink\" title=\"11.子查询\"></a>11.子查询</h2><p>定义：select中嵌套select语句。被嵌套的select为子查询</p>\n<p>可以出现的位置</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\t..(<span class=\"keyword\">select</span>)</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\t..(<span class=\"keyword\">select</span>)</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">\t..(<span class=\"keyword\">select</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-where-子句中出现子查询\"><a href=\"#1-where-子句中出现子查询\" class=\"headerlink\" title=\"1.where 子句中出现子查询\"></a>1.where 子句中出现子查询</h3><p>eg1:找出比最低工资高的员工姓名和工资</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename,sal</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\"> \tsal<span class=\"operator\">&gt;</span><span class=\"built_in\">min</span>(sal);</span><br><span class=\"line\"> <span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"keyword\">where</span>后面不能直接使用分组函数</span><br></pre></td></tr></table></figure>\n\n<p>实现思路：</p>\n<ul>\n<li>查询最低工资值</li>\n<li>查询比最低&gt;800</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">\tsal <span class=\"operator\">&gt;</span> (<span class=\"keyword\">select</span> <span class=\"built_in\">min</span>(sal) <span class=\"keyword\">from</span> emp);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-from子句中的子查询\"><a href=\"#2-from子句中的子查询\" class=\"headerlink\" title=\"2.from子句中的子查询\"></a>2.from子句中的子查询</h3><p><strong>注意</strong>：from后面的子查询，可以将子查询的查询结果当作一张临时表</p>\n<p>eg:找出每个岗位的平均工资的薪资等级</p>\n<ul>\n<li><p>找出每个岗位的平均薪资</p>\n<p>select job,avg(sal) from emp group by job</p>\n<p><img src=\"D:\\桌面\\tools\\开发问题\\img\\image-20220712110949665.png\" alt=\"image-20220712110949665\"></p>\n</li>\n<li><p>把以上查询结果当成已知的表</p>\n</li>\n</ul>\n<p><img src=\"D:\\桌面\\tools\\开发问题\\img\\image-20220712111109125.png\" alt=\"image-20220712111109125\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tt.<span class=\"operator\">*</span> ,s.grade</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\tt</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\tt.avs(sal) betweent s.losal <span class=\"keyword\">and</span> s.hisal</span><br></pre></td></tr></table></figure>\n\n<p>完整写法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tt.<span class=\"operator\">*</span> ,s.grade</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\t(<span class=\"keyword\">select</span> job,<span class=\"built_in\">avg</span>(sal) <span class=\"keyword\">as</span> avgsal <span class=\"keyword\">from</span> emp <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> job) t</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\tt.avs(sal) betweent s.losal <span class=\"keyword\">and</span> s.hisal</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-select-后面出现的子查询\"><a href=\"#3-select-后面出现的子查询\" class=\"headerlink\" title=\"3.select 后面出现的子查询\"></a>3.select 后面出现的子查询</h3><p>eg:找出每个员工的部门名称，要求显示所有的员工名，部门名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename, e.dpartno,(<span class=\"keyword\">select</span> d.dname <span class=\"keyword\">from</span> dept d <span class=\"keyword\">where</span> e.deptno \t\t<span class=\"operator\">=</span>d.deptno) <span class=\"keyword\">as</span> dname </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：对于select</strong>后面的子查询，只能返回一条结果，多余一条就报错***</p>\n<h2 id=\"12-union-合并查询结果集\"><a href=\"#12-union-合并查询结果集\" class=\"headerlink\" title=\"12.union 合并查询结果集\"></a>12.union 合并查询结果集</h2><p>eg:查询工作岗位是MANAGER和SALESMAN的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename ,job </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp </span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\tjob <span class=\"operator\">=</span> <span class=\"string\">&#x27;MANAGER&#x27;</span> <span class=\"keyword\">or</span> job <span class=\"operator\">=</span> <span class=\"string\">&#x27;SALESMAN&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">-------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename , job </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp </span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\tjob <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;MANAGER&#x27;</span>,<span class=\"string\">&#x27;SALESMAN&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>union 效率更高</strong></p>\n<p>ps：对于表连连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍的翻。。。</p>\n<p>union 可以减少匹配的次数，在减少匹配次数的情况下，还可以完成两个结果的拼接。。。</p>\n<p>a-b-c &#x3D; 10 - 10 -10 &#x2F;1000</p>\n<p><strong>如果使用union</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a<span class=\"operator\">-</span>b <span class=\"number\">10</span><span class=\"operator\">*</span><span class=\"number\">10</span></span><br><span class=\"line\">a<span class=\"operator\">-</span>c <span class=\"number\">10</span><span class=\"operator\">*</span><span class=\"number\">10</span></span><br><span class=\"line\">总次数 <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n\n<p>Oracle要求，union列数相同，，并且数据的类型必须相同</p>\n<h2 id=\"13-limit\"><a href=\"#13-limit\" class=\"headerlink\" title=\"13.limit\"></a>13.limit</h2><p>使用场景：分页查询</p>\n<p>定义：将查询结果的一部分取出来</p>\n<p>作用：提高用户的体验，一次都查询出来体验差</p>\n<p>**eg1:**按照薪资降序，取出排名在前五名的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename ,sal</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\tsal <span class=\"keyword\">desc</span></span><br><span class=\"line\">limit <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">----------------------------</span></span><br><span class=\"line\">完整用法</span><br><span class=\"line\">limit <span class=\"number\">0</span>,<span class=\"number\">5</span>; startIndex起始下标（默认为<span class=\"number\">0</span>） ,length</span><br><span class=\"line\">缺省用法</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：<strong>limit在order by 之后执行</strong></p>\n<p><strong>eg2</strong> ：取出第3-5名的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename ,sal</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\tsal <span class=\"keyword\">desc</span></span><br><span class=\"line\">limit <span class=\"number\">2</span>,<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>eg3:取出工资排名在5-9名的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename,sal</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> </span><br><span class=\"line\">\tsal <span class=\"keyword\">desc</span></span><br><span class=\"line\">limit <span class=\"number\">4</span>,<span class=\"number\">5</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"14-分页\"><a href=\"#14-分页\" class=\"headerlink\" title=\"14.分页\"></a>14.分页</h2><p>假设：每页显示三条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit <span class=\"number\">0</span>,<span class=\"number\">3</span></span><br><span class=\"line\">limit <span class=\"number\">3</span>,<span class=\"number\">3</span></span><br><span class=\"line\">limit <span class=\"number\">6</span>,<span class=\"number\">3</span></span><br><span class=\"line\">limit <span class=\"number\">9</span>,<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>ps：每页显示pageSizes条记录，第pageNo页：limit ? ,pageSize</p>\n<p> 第pageNo页：limit (pageNo - 1) * pageSize , pageSIze</p>\n<p><strong>通用写法</strong></p>\n<p>limit (pageNo - 1)*pageSize , pageSize</p>\n<h2 id=\"DQL-总结\"><a href=\"#DQL-总结\" class=\"headerlink\" title=\"DQL 总结\"></a>DQL 总结</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> \t\t<span class=\"number\">5.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">from</span>        <span class=\"number\">1.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">where</span> \t\t<span class=\"number\">2.</span></span><br><span class=\"line\">\t....    </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span>\t<span class=\"number\">3.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">having</span>\t\t<span class=\"number\">4.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span>\t<span class=\"number\">6.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">limit \t\t<span class=\"number\">7.</span></span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n\n<p><strong>多表联查</strong></p>\n<h2 id=\"15-表的创建\"><a href=\"#15-表的创建\" class=\"headerlink\" title=\"15.表的创建\"></a>15.表的创建</h2><p>属于DDL语句</p>\n<p>create ,drap , alter</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> 表名（字段名<span class=\"number\">1</span>，数据类型,字段名<span class=\"number\">2</span>，数据类型</span><br><span class=\"line\"><span class=\"number\">2.</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> 表名（</span><br><span class=\"line\">\t字段名<span class=\"number\">1</span>，数据类型,</span><br><span class=\"line\">\t字段名<span class=\"number\">2</span>，数据类型</span><br><span class=\"line\">）</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据类型</strong>- 关于sql</p>\n<p>表名：建议见表知名，字段名同样。fm_part</p>\n<ul>\n<li>varchar</li>\n<li>char</li>\n<li>int</li>\n<li>bigint</li>\n<li>float</li>\n<li>double</li>\n<li>string</li>\n<li>datetime</li>\n<li>date</li>\n<li>clob</li>\n<li>blob</li>\n</ul>\n<h3 id=\"1-varchar\"><a href=\"#1-varchar\" class=\"headerlink\" title=\"1.varchar\"></a>1.varchar</h3><p>ps：可变长度字符串（255） </p>\n<p>​        name varchar(10)</p>\n<p>新增一个字段name,动态分配长度，根据数据动态判断，实际动态长度，比较智能，节省空间，会根据实际的数据长度动态分配空间</p>\n<h3 id=\"2-char（255\"><a href=\"#2-char（255\" class=\"headerlink\" title=\"2.char（255\"></a>2.char（255</h3><p>ps：定长字符串</p>\n<p>name char(10)</p>\n<p>name &#x3D; jack </p>\n<p>不管实际的数据长度是多少，分配固定长度的空间去存储数据，使用不当的情况下，可能造成数据空间的浪费</p>\n<ul>\n<li>varchar  节省空间但是慢</li>\n<li>char        快，使用不当可以造成空间浪费</li>\n</ul>\n<p>eg1 ： 性别-&gt;char</p>\n<p>eg3 ： 姓名-&gt;varchar   (variable)</p>\n<h3 id=\"3-int（11位数\"><a href=\"#3-int（11位数\" class=\"headerlink\" title=\"3.int（11位数\"></a>3.int（11位数</h3><p>ps：数字中的整数型</p>\n<h3 id=\"4-bigInt\"><a href=\"#4-bigInt\" class=\"headerlink\" title=\"4.bigInt\"></a>4.bigInt</h3><p>ps: 等同于java中的long</p>\n<h3 id=\"5-date\"><a href=\"#5-date\" class=\"headerlink\" title=\"5.date\"></a>5.date</h3><p>ps：短日期类型</p>\n<h3 id=\"6-datetime\"><a href=\"#6-datetime\" class=\"headerlink\" title=\"6.datetime\"></a>6.datetime</h3><p>ps:长日期类型</p>\n<h3 id=\"7-clob\"><a href=\"#7-clob\" class=\"headerlink\" title=\"7.clob\"></a>7.clob</h3><p>ps: 字符大的对象，最大可以存储4G的字符串</p>\n<p>比如:存储超过255个字符的都要使用CLOB字符大对象来存储</p>\n<p>Character Large Object :</p>\n<h3 id=\"8-blob\"><a href=\"#8-blob\" class=\"headerlink\" title=\"8.blob\"></a>8.blob</h3><p>二进制大对象</p>\n<p>Binary Large Object</p>\n<p>专门用来存储图片，声音，视频等流媒体数据</p>\n<p>往BOLB类型的字段上插入数据的时候，例如插入一个图片，视频等，你需要使用IO流才行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t_table 表</span><br><span class=\"line\">编号 <span class=\"title function_\">no</span>(bigint)</span><br><span class=\"line\">名字 <span class=\"title function_\">name</span>(varchar)</span><br><span class=\"line\">描述信息 <span class=\"title function_\">description</span>(clob)</span><br><span class=\"line\">上映时间 <span class=\"title function_\">playtime</span>(date)</span><br><span class=\"line\">时长 <span class=\"title function_\">time</span>(double)</span><br><span class=\"line\">海报 <span class=\"title function_\">image</span>(blob)</span><br><span class=\"line\">类型 <span class=\"title function_\">type</span>(int)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>eg1:创建一个学生表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_student&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"type\">int</span>,</span><br><span class=\"line\">\tname <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tsex <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">default</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">\tage <span class=\"type\">int</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">\temail <span class=\"type\">varchar</span>(<span class=\"number\">255</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除表</p>\n<p>​    drop table t_student;</p>\n<p>注意：但他不存在的时候会报错</p>\n<p>​    drop  tablet if exists t_studen ;   -&gt; 表存在才删除</p>\n<h2 id=\"16-数据操作\"><a href=\"#16-数据操作\" class=\"headerlink\" title=\"16.数据操作\"></a>16.数据操作</h2><p>语法：</p>\n<p>​    insert into 表名（字段名1，字段名2，字段名3…) values (值1，值2，值3)</p>\n<p>注意：字段名和值要一一对应，数量要对应，数据类型要对应。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_student (<span class=\"keyword\">no</span> ,name, sex,age,email) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;12534652@163.com&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">------------------------值与字段一一对应---------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_student (<span class=\"keyword\">no</span> ,name, sex,age,email) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;12534652@163.com&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>ps:可以只添加部分字段，未赋值的字段，值为null</p>\n<p>tips:insert 语句但凡执行成功，必然会多一条记录，其他值为null,不指定默认值。默认值为null</p>\n<p>insert 语句中的字段名 可以省略吗</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_student <span class=\"keyword\">values</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">--缺省表示写上所有字段</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-插入日期\"><a href=\"#1-插入日期\" class=\"headerlink\" title=\"1.插入日期\"></a>1.插入日期</h3><p>1</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">2.</span>格式化数字</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"keyword\">sql</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> ename ,format(sal,<span class=\"string\">&#x27;$999,999&#x27;</span>) <span class=\"keyword\">as</span> sal <span class=\"keyword\">from</span> emp;</span><br></pre></td></tr></table></figure>\n\n<p>加入千分位</p>\n<h3 id=\"3-str-to-date\"><a href=\"#3-str-to-date\" class=\"headerlink\" title=\"3.str_to_date\"></a>3.str_to_date</h3><p>将字符串varchar类型转换为date类型</p>\n<p>通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，通常需要改函数将字符串转换为date</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(id,name,birth) <span class=\"keyword\">value</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>， str_to_date(<span class=\"string\">&#x27;01-10-1990&#x27;</span>),<span class=\"string\">&#x27;%d-%m-%Y&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果提供的日期时1990-10-01，str_to_data函数就不需要了</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(id,name,birth) <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;list&#x27;</span>,<span class=\"string\">&#x27;1990-10-01&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>查询的时候可以使用特定的日期格式转换吗</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id，name,date_format(birth,<span class=\"string\">&#x27;%m/%d/%Y&#x27;</span>) <span class=\"keyword\">as</span> birth <span class=\"keyword\">from</span> t_user</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"4-date-format\"><a href=\"#4-date-format\" class=\"headerlink\" title=\"4.date_format\"></a>4.date_format</h3><p>将date类型转换为具有一定格式的varchar字符串类型</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date_format(日期类型数据，‘日期格式’)</span><br><span class=\"line\">这个函数通常使用在查询日期方面，设置展示的日期格式</span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,birth <span class=\"keyword\">from</span> t_user</span><br><span class=\"line\">以上<span class=\"keyword\">sql</span>语句实际上进行了默认的日期格式化，</span><br><span class=\"line\">自动将数据库中的<span class=\"type\">date</span>类型转换为<span class=\"type\">varchar</span>字符串</span><br><span class=\"line\">采用的时mysql默认的日期格式，‘<span class=\"operator\">%</span>Y<span class=\"operator\">-</span><span class=\"operator\">%</span>m<span class=\"operator\">-</span><span class=\"operator\">%</span>d<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5，数据库命名规范\"><a href=\"#5，数据库命名规范\" class=\"headerlink\" title=\"5，数据库命名规范\"></a>5，数据库命名规范</h3><p>所有的标识符全部小写，单词之间使用下划线连接</p>\n<h3 id=\"6-mysql的日期格式\"><a href=\"#6-mysql的日期格式\" class=\"headerlink\" title=\"6.mysql的日期格式\"></a>6.mysql的日期格式</h3><ul>\n<li>%Y 年</li>\n<li>%m 月</li>\n<li>%d 日</li>\n<li>%h 时</li>\n<li>%m 分</li>\n<li>%s 秒</li>\n</ul>\n<h3 id=\"7-date和datetime区别\"><a href=\"#7-date和datetime区别\" class=\"headerlink\" title=\"7.date和datetime区别\"></a>7.date和datetime区别</h3><p>datetime包含年月日时分秒信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_user;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_user (</span><br><span class=\"line\">\tid <span class=\"type\">int</span>,</span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    birth <span class=\"type\">date</span>,</span><br><span class=\"line\">    create_time datetime</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>短日期默认格式： %Y-%m-%d</p>\n<p>长日期默认格式： %Y-%m-%d %h:%i:%s</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(id,name,birth,create_time) <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;1990-10-10&#x27;</span>,<span class=\"string\">&#x27;2022-07-13 19:29:29&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"now函数\"><a href=\"#now函数\" class=\"headerlink\" title=\"now函数\"></a>now函数</h4><p>定义：获取系统当前时间，带有时分秒信息</p>\n<h2 id=\"17-修改update-DML\"><a href=\"#17-修改update-DML\" class=\"headerlink\" title=\"17.修改update(DML)\"></a>17.修改update(DML)</h2><p>语法：update 表名 set 字段名1 &#x3D; 值1 ，字段名2 &#x3D; 值2，字段名3 &#x3D; 值3…where 条件</p>\n<p>注意：没有条件限制会导致所有的数据全部更新</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> t_user <span class=\"keyword\">set</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;jack&#x27;</span>,birth <span class=\"operator\">=</span> <span class=\"string\">&#x27;2000-10-11&#x27;</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18-删除语句\"><a href=\"#18-删除语句\" class=\"headerlink\" title=\"18.删除语句\"></a>18.删除语句</h2><p>delete from 表名 where 条件</p>\n<p>注意: 没有条件整张表的数据都会被删除</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> t_user <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(id) <span class=\"keyword\">value</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> t_user; <span class=\"operator\">/</span><span class=\"operator\">/</span>删除所有</span><br></pre></td></tr></table></figure>\n\n<p><strong>去除重复记录</strong></p>\n<p><em>只能出现在所有字段的最前面</em>，出现在job,deptno两个字段之前，表示两个字段联合起来去重</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> job <span class=\"keyword\">from</span> emp;</span><br></pre></td></tr></table></figure>\n\n<p>错误写法：select ename , distinct fob from emp;</p>\n<p>正确写法：select fistinct job,deptno from emp;</p>\n<p>eg1:统计一下岗位总数-技巧</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span>  job) <span class=\"keyword\">from</span> emp;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"19-连接查询\"><a href=\"#19-连接查询\" class=\"headerlink\" title=\"19.连接查询\"></a>19.连接查询</h2>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>作为一个前端，我认为sql的学习有助于理解业务，当别人告诉你这个表这个表时，不至于一知半解，我不指望一次入门学习能带来很多，但收获远比我想象的多的多。</p>\n<h2 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1,基本使用\"></a>1,基本使用</h2><h3 id=\"1-删除目录\"><a href=\"#1-删除目录\" class=\"headerlink\" title=\"1.删除目录\"></a>1.删除目录</h3><p>1.点击安装文件夹，删除profile下面的文件夹</p>\n<p>2.环境变量安装到sql下面的bin 文件夹</p>\n<p>3.mySql 服务自动启动， 启动才能使用</p>\n<h3 id=\"2-命令启用服务\"><a href=\"#2-命令启用服务\" class=\"headerlink\" title=\"2.命令启用服务\"></a>2.命令启用服务</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start <span class=\"title class_\">MySQL</span></span><br><span class=\"line\">net stop <span class=\"title class_\">MySQL</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-使用客户端连接数据库服务器\"><a href=\"#3-使用客户端连接数据库服务器\" class=\"headerlink\" title=\"3.使用客户端连接数据库服务器\"></a>3.使用客户端连接数据库服务器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p密码 显示密码</span><br><span class=\"line\">mysql -u root -p 隐藏密码</span><br><span class=\"line\">exit 退出</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看数据库</strong></p>\n<p>show database</p>\n<p><strong>使用数据库</strong></p>\n<p>use myDatabase</p>\n<p><strong>创建数据库</strong></p>\n<p>create database bjdatabse</p>\n<hr>\n<p><strong>数据库的基本单元</strong></p>\n<p>表</p>\n<h2 id=\"2-基础知识\"><a href=\"#2-基础知识\" class=\"headerlink\" title=\"2.基础知识\"></a>2.基础知识</h2><h3 id=\"1-约束\"><a href=\"#1-约束\" class=\"headerlink\" title=\"1.约束\"></a>1.约束</h3><p><strong>唯一性约束</strong></p>\n<p>show tables <strong>查看</strong>数据库下面有那些<strong>表</strong></p>\n<h3 id=\"2-sql语句的分类\"><a href=\"#2-sql语句的分类\" class=\"headerlink\" title=\"2.sql语句的分类\"></a>2.sql语句的分类</h3><ol>\n<li>DQL 数据查询语句 select</li>\n<li>DML 数据操作语言 insert delete update <strong>主要操作表中的数据</strong></li>\n<li>DDL  数据定义语言 操作表的结构，删除列 create drop alter</li>\n<li>RTL 事务控制语言 事务提交 事务回滚</li>\n<li>DCL 数据控制语言，grant revote</li>\n</ol>\n<h3 id=\"3-表操作\"><a href=\"#3-表操作\" class=\"headerlink\" title=\"3.表操作\"></a>3.表操作</h3><ul>\n<li>查看表中数据</li>\n</ul>\n<p>select * from dept 查看表 dept（查看所有数据</p>\n<p><strong>只看结构</strong></p>\n<p>select * from dept emp</p>\n<p>不见分号不执行-sql 语句</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql 语句以分号结尾</span><br><span class=\"line\">sql语句不区分大小写</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询语句</p>\n<p>select name from 表名</p>\n<p>查询两个字段-用逗号隔开</p>\n<p>1.<strong>查询所有的字段</strong></p>\n<ol>\n<li><p>select * form fm_sn</p>\n</li>\n<li><p>select a,b,c fm_sn</p>\n</li>\n<li><p><strong>注意</strong>：第一种写法可读性差，效率低（将*转换为所有的字段），实际中不建议此种方法</p>\n</li>\n</ol>\n<p>2.<strong>起别名</strong></p>\n<p>select name,id as newName from dept;</p>\n<p><strong>注意</strong>：注意只是将显示的表名改为新民，不改变原表</p>\n<p>as关键字可以省略吗</p>\n<p>select name ,id  newName from fm_sn;</p>\n<p><em>假设起的别名有空格，怎么办</em>?</p>\n<p>结果： 报错</p>\n<p><strong>‘用单引号将别名包起来可以解决’</strong> -双引号也可以</p>\n<p>字符串统一使用单引号括起来，在其他数据库不能用（标准单引号</p>\n<p>别名如果是中文需要用单引号包起来</p>\n<p><strong>3.条件查询</strong></p>\n<p>定义： 不是将所有数据查出来</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\ta,b;</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\t表名</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">\ta <span class=\"operator\">=</span> <span class=\"number\">100</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>条件</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t <span class=\"operator\">!</span> 不等于 <span class=\"operator\">&lt;&gt;</span></span><br><span class=\"line\">\t <span class=\"keyword\">between</span> <span class=\"keyword\">and</span> <span class=\"operator\">&gt;=</span> <span class=\"operator\">&lt;=</span> </span><br><span class=\"line\">\t sal <span class=\"operator\">&gt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">and</span> sal <span class=\"operator\">&lt;=</span><span class=\"number\">300</span></span><br><span class=\"line\">\t <span class=\"keyword\">between</span> <span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"number\">300</span> 必须左边数值小，右边数值大</span><br><span class=\"line\">\t <span class=\"operator\">=</span> 是不行的 必须为 <span class=\"keyword\">is</span> <span class=\"keyword\">null</span> </span><br><span class=\"line\">\t <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> 不为空</span><br><span class=\"line\">\t 在数据库中<span class=\"keyword\">null</span> 不能使用<span class=\"operator\">=</span> 进行衡量</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-单行处理函数\"><a href=\"#4-单行处理函数\" class=\"headerlink\" title=\"4.单行处理函数\"></a>4.单行处理函数</h3><p><strong>定义</strong>：一行一行的处理</p>\n<p><strong>1.select  lower(ename) from eap;</strong></p>\n<p>将表eap中的ename转小写</p>\n<p>-<em>起别名处理</em></p>\n<p>select lower(ename) as ename from eap;</p>\n<p>一一对应</p>\n<p><strong>2.upper 转换为大写</strong></p>\n<p><strong>3.取子串</strong></p>\n<p>select substr(ename,1,1) from eap;</p>\n<p>起始下标从1开始，没有0</p>\n<p>eg: 找出员工第一个字母为a的信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> ename <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename <span class=\"keyword\">like</span> &quot;A%&quot;;</span><br><span class=\"line\"><span class=\"keyword\">select</span> ename <span class=\"keyword\">from</span> <span class=\"keyword\">where</span> substr(ename , <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"operator\">=</span> &quot;A&quot;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>substr 从位置<span class=\"number\">1</span>开始截取，截取一个长度</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>concat 字符串拼接</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.str_to_date</strong></p>\n<p><strong>5.data_format</strong></p>\n<p><strong>6.format设置千分位</strong></p>\n<p><strong>7.round四舍五入</strong></p>\n<p>select round(123.567,1 ) from eap;</p>\n<p>保留一位小数</p>\n<p>select round(123.567,-1 ) from eap;    -&gt; 1240</p>\n<p><strong>8.rand生成随机数</strong></p>\n<p><strong>9.ifnull 将null 转换为一个具体值</strong></p>\n<p>在数据库中，只要又null 参与的数学计算，最后的结果一定是null</p>\n<p>eg:计算员工的年薪</p>\n<p>年薪 &#x3D; （月薪 + 月补助）*12</p>\n<p>问题： 如补助null，然后null参与了计算最后的结果一定为null，需要使用到ifNull函数</p>\n<p>ifNull (args1,args2)</p>\n<p>args1 数据</p>\n<p>args2 把数据当那个默认值</p>\n<p>eg: ifNull(a, 0)    &#x2F;&#x2F;如果a为null把他当作0 来进行处理</p>\n<p><em>即对空值进行处理</em></p>\n<p><strong>10.case when then when then else and</strong></p>\n<p>eg： 当岗位为normal时候，工资上调10%,当岗位为CEO时候，工资上调50%</p>\n<p>select ename,jop,sal from emp;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">ename,job,sal, </span><br><span class=\"line\">(<span class=\"keyword\">case</span> job <span class=\"keyword\">when</span> <span class=\"string\">&#x27;normal&#x27;</span> <span class=\"keyword\">then</span> sal<span class=\"operator\">*</span><span class=\"number\">1.1</span> <span class=\"keyword\">when</span> <span class=\"string\">&#x27;CEO&#x27;</span> <span class=\"keyword\">then</span> sal<span class=\"operator\">*</span><span class=\"number\">1.5</span> <span class=\"keyword\">else</span> sal <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> newsal</span><br><span class=\"line\"><span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"keyword\">else</span>后面的没有进行处理</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>注意字面量和字面值</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;abc&#x27;</span> <span class=\"keyword\">as</span> bleming <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\">生成若干abc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> abc <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>将abc当作一个字段的名字，去表里面找abc字段</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>字面量：当前列名</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>字面值：所有值为当前的字段</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>11.分组函数</strong></p>\n<p>定义： 输入多行，输出一行</p>\n<p>5个：</p>\n<p>count 计数</p>\n<p>sum 求和</p>\n<p>avg 平均值</p>\n<p>min 最小</p>\n<p>max 最大</p>\n<p>注意：分组函数必须对数据进行分组才能使用， 如果没有对数据进行分组，整个表默认为一组</p>\n<p>eg1:</p>\n<p>1.找出最高工资</p>\n<p> select   max(sal) from emp;</p>\n<p>2.找出最低工资</p>\n<p>select min(sal) from emp;</p>\n<p>3.计算工资和</p>\n<p>select sun(sal) from emp;</p>\n<p>4.计算平均</p>\n<h3 id=\"5-分组函数\"><a href=\"#5-分组函数\" class=\"headerlink\" title=\"5.分组函数\"></a>5.分组函数</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count</span><br><span class=\"line\">sum</span><br><span class=\"line\">avg</span><br><span class=\"line\">max</span><br><span class=\"line\">min</span><br></pre></td></tr></table></figure>\n\n\n\n<p>分组函数自动忽略null</p>\n<h4 id=\"1-count字段\"><a href=\"#1-count字段\" class=\"headerlink\" title=\"1.count字段\"></a>1.count字段</h4><ol>\n<li>count() 统计字段下不为NULL的元素的总数(某一列null的数量)</li>\n<li>count(*) 统计所有行数，（只要有一行数据count++)</li>\n<li>不存在所有的列都为空的列</li>\n<li>1</li>\n</ol>\n<p>注意点： 分组函数不能直接使用在where子句中</p>\n<p>找出比最低工资高的员工信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> enamel，sal,<span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> sal <span class=\"operator\">&gt;</span>  <span class=\"built_in\">min</span>(sal)</span><br><span class=\"line\">reason: 分组函数必须分组才能使用，<span class=\"keyword\">where</span>之后不能使用分组函数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">sum</span>(sal) <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>所有的分组函数可以组合起来一起用</strong></p>\n<p>select sum(sal),min(sal),max(sal),avg(sal),count(*) from emp</p>\n<h3 id=\"6-分组查询\"><a href=\"#6-分组查询\" class=\"headerlink\" title=\"6.分组查询*****\"></a>6.分组查询*****</h3><p>定义： 先对数据进行分组，再进行计算，对每一组的数据进行操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">..</span><br><span class=\"line\"></span><br><span class=\"line\">eg:计算每个部门的平均和</span><br><span class=\"line\">eg：计算每个岗位的平均薪资</span><br><span class=\"line\">eg:找出每个工作岗位的最高薪资</span><br></pre></td></tr></table></figure>\n\n<p><strong>语句执行顺序</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">4</span></span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"number\">1</span></span><br><span class=\"line\">..</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"number\">2</span></span><br><span class=\"line\">.. </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>注意： <strong>在一条selecte语句中，如果有group by 语句，select 后面只能有分组的字段</strong></p>\n<p><strong>按照多个字段进行分组</strong></p>\n<p>找出每个部门不同工作岗位的最高薪资</p>\n<p>select ename,job from emp where ename,job</p>\n<p><strong>having子句</strong>-对分组后的数据进行再一步过滤</p>\n<p>不能单独使用，需要在group子句后面使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">deptno,<span class=\"built_in\">max</span>(sal)</span><br><span class=\"line\"><span class=\"keyword\">from</span> emp</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> </span><br><span class=\"line\">\tdeptno</span><br><span class=\"line\"><span class=\"keyword\">having</span> </span><br><span class=\"line\">\t<span class=\"built_in\">max</span>(sal) <span class=\"operator\">&gt;</span> <span class=\"number\">3000</span></span><br><span class=\"line\">\t<span class=\"operator\">/</span><span class=\"operator\">/</span>以上的<span class=\"keyword\">sql</span>语句执行效率低<span class=\"operator\">-</span><span class=\"operator\">&gt;</span> 先筛选后分组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\txxx</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\tsal <span class=\"operator\">&gt;</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> </span><br><span class=\"line\">    deptno;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>能使用<span class=\"keyword\">where</span>的尽量使用<span class=\"keyword\">where</span>,优先使用<span class=\"keyword\">where</span>，实现不了的使用<span class=\"keyword\">having</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>eg:找出每个部门平均薪资，要求平均薪资高于2500</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tdeptno ,<span class=\"built_in\">avg</span>(sal)</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> deptno</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span>必须使用<span class=\"keyword\">having</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tdeptno ,<span class=\"built_in\">avg</span>(sal)</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> deptno</span><br><span class=\"line\">\tsal <span class=\"operator\">&gt;</span> <span class=\"number\">2500</span></span><br><span class=\"line\"><span class=\"keyword\">having</span></span><br><span class=\"line\">\t<span class=\"built_in\">avg</span>(sal) <span class=\"operator\">&gt;</span> <span class=\"number\">2500</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>.数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">2.</span>创建数据库</span><br><span class=\"line\"><span class=\"keyword\">create</span> database bjpowernode;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">3.</span>选择数据库</span><br><span class=\"line\">use bjpowernode;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">4.</span>导入数据</span><br><span class=\"line\">source d:\\bjpowernode.sql;</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">5.</span>删除数据库</span><br><span class=\"line\"><span class=\"keyword\">drop</span> database bjpowernode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">*</span><span class=\"operator\">*</span>查看表的结构</span><br><span class=\"line\"><span class=\"keyword\">desc</span> dept;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-连接查询\"><a href=\"#7-连接查询\" class=\"headerlink\" title=\"7.连接查询\"></a>7.连接查询</h2><p>定义：多张表联合起来查询数据-连接查询</p>\n<p>SQL92 92年出现的语法</p>\n<p>SQL99 99年出现的语法</p>\n<p>根据表连接的方式分类</p>\n<ul>\n<li>内连接<ul>\n<li>等值连接</li>\n<li>非等值连接</li>\n<li>自连接</li>\n</ul>\n</li>\n<li>外连接<ul>\n<li>左外连接</li>\n<li>右外连接</li>\n</ul>\n</li>\n<li>全连接（使用少</li>\n</ul>\n<p><strong>现象</strong></p>\n<p>：两种表进行连接查询时候，没有任何条件限制的时候，会出现什么现象</p>\n<p>拿一条表的数据对另一个表所有数据进行查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ename,dname <span class=\"keyword\">from</span> emp ,dept;</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题：笛卡儿积现象</strong></p>\n<p>查询结果：最终查询结果条数，为两个表数量之积</p>\n<p>14*4 &#x3D; 56</p>\n<p><strong>解决</strong>：连接时加条件，满足此条件的记录被筛选出来</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename ,dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp,dept</span><br><span class=\"line\"><span class=\"keyword\">where</span> emp.deptno <span class=\"operator\">=</span> dept.deptno;</span><br></pre></td></tr></table></figure>\n\n<p>思考：查询结果提条数为14条，但是匹配的次数没有减少(56次)</p>\n<p>问题：<strong>查询效率低</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\temp.ename,dept.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp,dept</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\temp.deptno <span class=\"operator\">=</span> dept.deptno;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>别名-效率</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename ,d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e,dept d</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.ename <span class=\"operator\">=</span> d.dname </span><br></pre></td></tr></table></figure>\n\n<p>e.ename &#x3D; d.dname  <strong>SQL92语法</strong></p>\n<p><em>减少表的连接次数-加快速率</em>-提升程序执行速率</p>\n<p><strong>注意</strong>：笛卡尔积-表的连接次数越多效率越低</p>\n<h2 id=\"8-内连接\"><a href=\"#8-内连接\" class=\"headerlink\" title=\"8.内连接\"></a>8.内连接</h2><p><strong>特点</strong>：完全能够匹配这个条件的数据查询出来</p>\n<h3 id=\"1-等值连接\"><a href=\"#1-等值连接\" class=\"headerlink\" title=\"1.等值连接\"></a>1.等值连接</h3><p>eg:查询每个员工所在的部门名称，显示员工名和部门名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SQL</span> <span class=\"number\">92</span> 内连接<span class=\"operator\">-</span>等值连接</span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename,d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e,dept d</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.deptnp <span class=\"operator\">=</span> d.deptnp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SQL</span> <span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e,</span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\">\tdpart d</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.dpartno <span class=\"operator\">=</span> d.dpartno</span><br></pre></td></tr></table></figure>\n\n<p>内连接（inner</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.name , d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e,</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\tdpart d</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.dpartno <span class=\"operator\">=</span> d.dpartno</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>非等值连接</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , e.sal, s.grade</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\te.sal <span class=\"keyword\">between</span> s.losal <span class=\"keyword\">and</span> s.hisal;</span><br><span class=\"line\">\t<span class=\"operator\">/</span><span class=\"operator\">/</span>条件不是一个等量关系，称为非等值连接</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-内连接之自连接\"><a href=\"#2-内连接之自连接\" class=\"headerlink\" title=\"2.内连接之自连接\"></a>2.内连接之自连接</h3><p>查询员工的上级领导，要求显示员工名和对应的领导名</p>\n<p><img src=\"D:\\桌面\\tools\\开发问题\\img\\image-20220712085749880.png\" alt=\"image-20220712085749880\"></p>\n<p><strong>技巧：一张表看作两张表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\ta.ename <span class=\"keyword\">as</span> colleage, b ename sa leader</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\tedpart a</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tedpart b</span><br><span class=\"line\"><span class=\"keyword\">on</span></span><br><span class=\"line\">\ta.mgr <span class=\"operator\">=</span> b.empno</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p>内连接：两表之间没有主次关系</p>\n<h2 id=\"9-外连接\"><a href=\"#9-外连接\" class=\"headerlink\" title=\"9.外连接\"></a>9.外连接</h2><p>eg1</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , d.ename </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\tdept d</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\te.deptno <span class=\"operator\">=</span> d.deptno</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>右外连接</strong>:right代码将join右边的关键字看作主表，捎带关联查询左边表，又叫做右连接</p>\n<p>在外连接中：两张表存在这主次关系</p>\n<p>左外连接：同右，又叫做左连接，左连接右连接可以实现同一个效果（写法不一样</p>\n<p><em>外连接查询结果条数一定大于等于内连接</em></p>\n<p>outer 可以省略，代表外连接</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , d.ename </span><br><span class=\"line\"><span class=\"keyword\">from</span> emp</span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\tdept d</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\te.deptno <span class=\"operator\">=</span> d.deptno</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>eg:查询每个员工的上级领导，要求显示所有员工的名字和领导名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\ta.ename , b.ename</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp a</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\temp b</span><br><span class=\"line\"><span class=\"keyword\">on</span> e.mgr <span class=\"operator\">=</span> b.empno</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-多表连接\"><a href=\"#10-多表连接\" class=\"headerlink\" title=\"10.多表连接\"></a>10.多表连接</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\ta</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tb</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\ta 和 b 的连接条件</span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\">\tc</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\ta 和 c 的连接条件</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\td</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\ta 和 d 的连接条件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>eg:要求找出每个员工的部门名称以及工资等级，要求显示员工名，部门名，薪资，薪资等级</p>\n<p><img src=\"D:\\桌面\\tools\\开发问题\\img\\image-20220712094430009.png\" alt=\"image-20220712094430009\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename , e.sal,d.mname,s.grade</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tdept d</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\te.deptno <span class=\"operator\">=</span> d.deptno</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\"><span class=\"keyword\">on</span> e.sal <span class=\"keyword\">between</span> s.losal <span class=\"keyword\">and</span> s.hisal;</span><br></pre></td></tr></table></figure>\n\n<p><strong>多查一个上级领导怎么办</strong>，显示领导名字</p>\n<p>思路：加一个外连接</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\">\temp i </span><br><span class=\"line\"><span class=\"keyword\">on</span> a.mgr <span class=\"operator\">=</span> i.empno</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-子查询\"><a href=\"#11-子查询\" class=\"headerlink\" title=\"11.子查询\"></a>11.子查询</h2><p>定义：select中嵌套select语句。被嵌套的select为子查询</p>\n<p>可以出现的位置</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\t..(<span class=\"keyword\">select</span>)</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\t..(<span class=\"keyword\">select</span>)</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">\t..(<span class=\"keyword\">select</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-where-子句中出现子查询\"><a href=\"#1-where-子句中出现子查询\" class=\"headerlink\" title=\"1.where 子句中出现子查询\"></a>1.where 子句中出现子查询</h3><p>eg1:找出比最低工资高的员工姓名和工资</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename,sal</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\"> \tsal<span class=\"operator\">&gt;</span><span class=\"built_in\">min</span>(sal);</span><br><span class=\"line\"> <span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"keyword\">where</span>后面不能直接使用分组函数</span><br></pre></td></tr></table></figure>\n\n<p>实现思路：</p>\n<ul>\n<li>查询最低工资值</li>\n<li>查询比最低&gt;800</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">\tsal <span class=\"operator\">&gt;</span> (<span class=\"keyword\">select</span> <span class=\"built_in\">min</span>(sal) <span class=\"keyword\">from</span> emp);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-from子句中的子查询\"><a href=\"#2-from子句中的子查询\" class=\"headerlink\" title=\"2.from子句中的子查询\"></a>2.from子句中的子查询</h3><p><strong>注意</strong>：from后面的子查询，可以将子查询的查询结果当作一张临时表</p>\n<p>eg:找出每个岗位的平均工资的薪资等级</p>\n<ul>\n<li><p>找出每个岗位的平均薪资</p>\n<p>select job,avg(sal) from emp group by job</p>\n<p><img src=\"D:\\桌面\\tools\\开发问题\\img\\image-20220712110949665.png\" alt=\"image-20220712110949665\"></p>\n</li>\n<li><p>把以上查询结果当成已知的表</p>\n</li>\n</ul>\n<p><img src=\"D:\\桌面\\tools\\开发问题\\img\\image-20220712111109125.png\" alt=\"image-20220712111109125\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tt.<span class=\"operator\">*</span> ,s.grade</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\tt</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\tt.avs(sal) betweent s.losal <span class=\"keyword\">and</span> s.hisal</span><br></pre></td></tr></table></figure>\n\n<p>完整写法</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tt.<span class=\"operator\">*</span> ,s.grade</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\t(<span class=\"keyword\">select</span> job,<span class=\"built_in\">avg</span>(sal) <span class=\"keyword\">as</span> avgsal <span class=\"keyword\">from</span> emp <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> job) t</span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\"><span class=\"keyword\">on</span> </span><br><span class=\"line\">\tt.avs(sal) betweent s.losal <span class=\"keyword\">and</span> s.hisal</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-select-后面出现的子查询\"><a href=\"#3-select-后面出现的子查询\" class=\"headerlink\" title=\"3.select 后面出现的子查询\"></a>3.select 后面出现的子查询</h3><p>eg:找出每个员工的部门名称，要求显示所有的员工名，部门名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\te.ename, e.dpartno,(<span class=\"keyword\">select</span> d.dname <span class=\"keyword\">from</span> dept d <span class=\"keyword\">where</span> e.deptno \t\t<span class=\"operator\">=</span>d.deptno) <span class=\"keyword\">as</span> dname </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp e;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：对于select</strong>后面的子查询，只能返回一条结果，多余一条就报错***</p>\n<h2 id=\"12-union-合并查询结果集\"><a href=\"#12-union-合并查询结果集\" class=\"headerlink\" title=\"12.union 合并查询结果集\"></a>12.union 合并查询结果集</h2><p>eg:查询工作岗位是MANAGER和SALESMAN的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename ,job </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp </span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\tjob <span class=\"operator\">=</span> <span class=\"string\">&#x27;MANAGER&#x27;</span> <span class=\"keyword\">or</span> job <span class=\"operator\">=</span> <span class=\"string\">&#x27;SALESMAN&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">-------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename , job </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp </span><br><span class=\"line\"><span class=\"keyword\">where</span> </span><br><span class=\"line\">\tjob <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;MANAGER&#x27;</span>,<span class=\"string\">&#x27;SALESMAN&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>union 效率更高</strong></p>\n<p>ps：对于表连连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍的翻。。。</p>\n<p>union 可以减少匹配的次数，在减少匹配次数的情况下，还可以完成两个结果的拼接。。。</p>\n<p>a-b-c &#x3D; 10 - 10 -10 &#x2F;1000</p>\n<p><strong>如果使用union</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a<span class=\"operator\">-</span>b <span class=\"number\">10</span><span class=\"operator\">*</span><span class=\"number\">10</span></span><br><span class=\"line\">a<span class=\"operator\">-</span>c <span class=\"number\">10</span><span class=\"operator\">*</span><span class=\"number\">10</span></span><br><span class=\"line\">总次数 <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n\n<p>Oracle要求，union列数相同，，并且数据的类型必须相同</p>\n<h2 id=\"13-limit\"><a href=\"#13-limit\" class=\"headerlink\" title=\"13.limit\"></a>13.limit</h2><p>使用场景：分页查询</p>\n<p>定义：将查询结果的一部分取出来</p>\n<p>作用：提高用户的体验，一次都查询出来体验差</p>\n<p>**eg1:**按照薪资降序，取出排名在前五名的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename ,sal</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\tsal <span class=\"keyword\">desc</span></span><br><span class=\"line\">limit <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">----------------------------</span></span><br><span class=\"line\">完整用法</span><br><span class=\"line\">limit <span class=\"number\">0</span>,<span class=\"number\">5</span>; startIndex起始下标（默认为<span class=\"number\">0</span>） ,length</span><br><span class=\"line\">缺省用法</span><br><span class=\"line\">limit <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：<strong>limit在order by 之后执行</strong></p>\n<p><strong>eg2</strong> ：取出第3-5名的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename ,sal</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span></span><br><span class=\"line\">\tsal <span class=\"keyword\">desc</span></span><br><span class=\"line\">limit <span class=\"number\">2</span>,<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>eg3:取出工资排名在5-9名的员工</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tename,sal</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">\temp</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> </span><br><span class=\"line\">\tsal <span class=\"keyword\">desc</span></span><br><span class=\"line\">limit <span class=\"number\">4</span>,<span class=\"number\">5</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"14-分页\"><a href=\"#14-分页\" class=\"headerlink\" title=\"14.分页\"></a>14.分页</h2><p>假设：每页显示三条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit <span class=\"number\">0</span>,<span class=\"number\">3</span></span><br><span class=\"line\">limit <span class=\"number\">3</span>,<span class=\"number\">3</span></span><br><span class=\"line\">limit <span class=\"number\">6</span>,<span class=\"number\">3</span></span><br><span class=\"line\">limit <span class=\"number\">9</span>,<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>ps：每页显示pageSizes条记录，第pageNo页：limit ? ,pageSize</p>\n<p> 第pageNo页：limit (pageNo - 1) * pageSize , pageSIze</p>\n<p><strong>通用写法</strong></p>\n<p>limit (pageNo - 1)*pageSize , pageSize</p>\n<h2 id=\"DQL-总结\"><a href=\"#DQL-总结\" class=\"headerlink\" title=\"DQL 总结\"></a>DQL 总结</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> \t\t<span class=\"number\">5.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">from</span>        <span class=\"number\">1.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">where</span> \t\t<span class=\"number\">2.</span></span><br><span class=\"line\">\t....    </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span>\t<span class=\"number\">3.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">having</span>\t\t<span class=\"number\">4.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span>\t<span class=\"number\">6.</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">limit \t\t<span class=\"number\">7.</span></span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n\n<p><strong>多表联查</strong></p>\n<h2 id=\"15-表的创建\"><a href=\"#15-表的创建\" class=\"headerlink\" title=\"15.表的创建\"></a>15.表的创建</h2><p>属于DDL语句</p>\n<p>create ,drap , alter</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> 表名（字段名<span class=\"number\">1</span>，数据类型,字段名<span class=\"number\">2</span>，数据类型</span><br><span class=\"line\"><span class=\"number\">2.</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> 表名（</span><br><span class=\"line\">\t字段名<span class=\"number\">1</span>，数据类型,</span><br><span class=\"line\">\t字段名<span class=\"number\">2</span>，数据类型</span><br><span class=\"line\">）</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据类型</strong>- 关于sql</p>\n<p>表名：建议见表知名，字段名同样。fm_part</p>\n<ul>\n<li>varchar</li>\n<li>char</li>\n<li>int</li>\n<li>bigint</li>\n<li>float</li>\n<li>double</li>\n<li>string</li>\n<li>datetime</li>\n<li>date</li>\n<li>clob</li>\n<li>blob</li>\n</ul>\n<h3 id=\"1-varchar\"><a href=\"#1-varchar\" class=\"headerlink\" title=\"1.varchar\"></a>1.varchar</h3><p>ps：可变长度字符串（255） </p>\n<p>​        name varchar(10)</p>\n<p>新增一个字段name,动态分配长度，根据数据动态判断，实际动态长度，比较智能，节省空间，会根据实际的数据长度动态分配空间</p>\n<h3 id=\"2-char（255\"><a href=\"#2-char（255\" class=\"headerlink\" title=\"2.char（255\"></a>2.char（255</h3><p>ps：定长字符串</p>\n<p>name char(10)</p>\n<p>name &#x3D; jack </p>\n<p>不管实际的数据长度是多少，分配固定长度的空间去存储数据，使用不当的情况下，可能造成数据空间的浪费</p>\n<ul>\n<li>varchar  节省空间但是慢</li>\n<li>char        快，使用不当可以造成空间浪费</li>\n</ul>\n<p>eg1 ： 性别-&gt;char</p>\n<p>eg3 ： 姓名-&gt;varchar   (variable)</p>\n<h3 id=\"3-int（11位数\"><a href=\"#3-int（11位数\" class=\"headerlink\" title=\"3.int（11位数\"></a>3.int（11位数</h3><p>ps：数字中的整数型</p>\n<h3 id=\"4-bigInt\"><a href=\"#4-bigInt\" class=\"headerlink\" title=\"4.bigInt\"></a>4.bigInt</h3><p>ps: 等同于java中的long</p>\n<h3 id=\"5-date\"><a href=\"#5-date\" class=\"headerlink\" title=\"5.date\"></a>5.date</h3><p>ps：短日期类型</p>\n<h3 id=\"6-datetime\"><a href=\"#6-datetime\" class=\"headerlink\" title=\"6.datetime\"></a>6.datetime</h3><p>ps:长日期类型</p>\n<h3 id=\"7-clob\"><a href=\"#7-clob\" class=\"headerlink\" title=\"7.clob\"></a>7.clob</h3><p>ps: 字符大的对象，最大可以存储4G的字符串</p>\n<p>比如:存储超过255个字符的都要使用CLOB字符大对象来存储</p>\n<p>Character Large Object :</p>\n<h3 id=\"8-blob\"><a href=\"#8-blob\" class=\"headerlink\" title=\"8.blob\"></a>8.blob</h3><p>二进制大对象</p>\n<p>Binary Large Object</p>\n<p>专门用来存储图片，声音，视频等流媒体数据</p>\n<p>往BOLB类型的字段上插入数据的时候，例如插入一个图片，视频等，你需要使用IO流才行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t_table 表</span><br><span class=\"line\">编号 <span class=\"title function_\">no</span>(bigint)</span><br><span class=\"line\">名字 <span class=\"title function_\">name</span>(varchar)</span><br><span class=\"line\">描述信息 <span class=\"title function_\">description</span>(clob)</span><br><span class=\"line\">上映时间 <span class=\"title function_\">playtime</span>(date)</span><br><span class=\"line\">时长 <span class=\"title function_\">time</span>(double)</span><br><span class=\"line\">海报 <span class=\"title function_\">image</span>(blob)</span><br><span class=\"line\">类型 <span class=\"title function_\">type</span>(int)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>eg1:创建一个学生表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_student&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"type\">int</span>,</span><br><span class=\"line\">\tname <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">\tsex <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">default</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">\tage <span class=\"type\">int</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">\temail <span class=\"type\">varchar</span>(<span class=\"number\">255</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除表</p>\n<p>​    drop table t_student;</p>\n<p>注意：但他不存在的时候会报错</p>\n<p>​    drop  tablet if exists t_studen ;   -&gt; 表存在才删除</p>\n<h2 id=\"16-数据操作\"><a href=\"#16-数据操作\" class=\"headerlink\" title=\"16.数据操作\"></a>16.数据操作</h2><p>语法：</p>\n<p>​    insert into 表名（字段名1，字段名2，字段名3…) values (值1，值2，值3)</p>\n<p>注意：字段名和值要一一对应，数量要对应，数据类型要对应。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_student (<span class=\"keyword\">no</span> ,name, sex,age,email) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;12534652@163.com&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">------------------------值与字段一一对应---------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_student (<span class=\"keyword\">no</span> ,name, sex,age,email) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;12534652@163.com&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>ps:可以只添加部分字段，未赋值的字段，值为null</p>\n<p>tips:insert 语句但凡执行成功，必然会多一条记录，其他值为null,不指定默认值。默认值为null</p>\n<p>insert 语句中的字段名 可以省略吗</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_student <span class=\"keyword\">values</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">--缺省表示写上所有字段</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-插入日期\"><a href=\"#1-插入日期\" class=\"headerlink\" title=\"1.插入日期\"></a>1.插入日期</h3><p>1</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">2.</span>格式化数字</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"keyword\">sql</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> ename ,format(sal,<span class=\"string\">&#x27;$999,999&#x27;</span>) <span class=\"keyword\">as</span> sal <span class=\"keyword\">from</span> emp;</span><br></pre></td></tr></table></figure>\n\n<p>加入千分位</p>\n<h3 id=\"3-str-to-date\"><a href=\"#3-str-to-date\" class=\"headerlink\" title=\"3.str_to_date\"></a>3.str_to_date</h3><p>将字符串varchar类型转换为date类型</p>\n<p>通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，通常需要改函数将字符串转换为date</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(id,name,birth) <span class=\"keyword\">value</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>， str_to_date(<span class=\"string\">&#x27;01-10-1990&#x27;</span>),<span class=\"string\">&#x27;%d-%m-%Y&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>如果提供的日期时1990-10-01，str_to_data函数就不需要了</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(id,name,birth) <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;list&#x27;</span>,<span class=\"string\">&#x27;1990-10-01&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>查询的时候可以使用特定的日期格式转换吗</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id，name,date_format(birth,<span class=\"string\">&#x27;%m/%d/%Y&#x27;</span>) <span class=\"keyword\">as</span> birth <span class=\"keyword\">from</span> t_user</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"4-date-format\"><a href=\"#4-date-format\" class=\"headerlink\" title=\"4.date_format\"></a>4.date_format</h3><p>将date类型转换为具有一定格式的varchar字符串类型</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date_format(日期类型数据，‘日期格式’)</span><br><span class=\"line\">这个函数通常使用在查询日期方面，设置展示的日期格式</span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,birth <span class=\"keyword\">from</span> t_user</span><br><span class=\"line\">以上<span class=\"keyword\">sql</span>语句实际上进行了默认的日期格式化，</span><br><span class=\"line\">自动将数据库中的<span class=\"type\">date</span>类型转换为<span class=\"type\">varchar</span>字符串</span><br><span class=\"line\">采用的时mysql默认的日期格式，‘<span class=\"operator\">%</span>Y<span class=\"operator\">-</span><span class=\"operator\">%</span>m<span class=\"operator\">-</span><span class=\"operator\">%</span>d<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5，数据库命名规范\"><a href=\"#5，数据库命名规范\" class=\"headerlink\" title=\"5，数据库命名规范\"></a>5，数据库命名规范</h3><p>所有的标识符全部小写，单词之间使用下划线连接</p>\n<h3 id=\"6-mysql的日期格式\"><a href=\"#6-mysql的日期格式\" class=\"headerlink\" title=\"6.mysql的日期格式\"></a>6.mysql的日期格式</h3><ul>\n<li>%Y 年</li>\n<li>%m 月</li>\n<li>%d 日</li>\n<li>%h 时</li>\n<li>%m 分</li>\n<li>%s 秒</li>\n</ul>\n<h3 id=\"7-date和datetime区别\"><a href=\"#7-date和datetime区别\" class=\"headerlink\" title=\"7.date和datetime区别\"></a>7.date和datetime区别</h3><p>datetime包含年月日时分秒信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_user;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_user (</span><br><span class=\"line\">\tid <span class=\"type\">int</span>,</span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    birth <span class=\"type\">date</span>,</span><br><span class=\"line\">    create_time datetime</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>短日期默认格式： %Y-%m-%d</p>\n<p>长日期默认格式： %Y-%m-%d %h:%i:%s</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(id,name,birth,create_time) <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;1990-10-10&#x27;</span>,<span class=\"string\">&#x27;2022-07-13 19:29:29&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"now函数\"><a href=\"#now函数\" class=\"headerlink\" title=\"now函数\"></a>now函数</h4><p>定义：获取系统当前时间，带有时分秒信息</p>\n<h2 id=\"17-修改update-DML\"><a href=\"#17-修改update-DML\" class=\"headerlink\" title=\"17.修改update(DML)\"></a>17.修改update(DML)</h2><p>语法：update 表名 set 字段名1 &#x3D; 值1 ，字段名2 &#x3D; 值2，字段名3 &#x3D; 值3…where 条件</p>\n<p>注意：没有条件限制会导致所有的数据全部更新</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> t_user <span class=\"keyword\">set</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;jack&#x27;</span>,birth <span class=\"operator\">=</span> <span class=\"string\">&#x27;2000-10-11&#x27;</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18-删除语句\"><a href=\"#18-删除语句\" class=\"headerlink\" title=\"18.删除语句\"></a>18.删除语句</h2><p>delete from 表名 where 条件</p>\n<p>注意: 没有条件整张表的数据都会被删除</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> t_user <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_user(id) <span class=\"keyword\">value</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> t_user; <span class=\"operator\">/</span><span class=\"operator\">/</span>删除所有</span><br></pre></td></tr></table></figure>\n\n<p><strong>去除重复记录</strong></p>\n<p><em>只能出现在所有字段的最前面</em>，出现在job,deptno两个字段之前，表示两个字段联合起来去重</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> job <span class=\"keyword\">from</span> emp;</span><br></pre></td></tr></table></figure>\n\n<p>错误写法：select ename , distinct fob from emp;</p>\n<p>正确写法：select fistinct job,deptno from emp;</p>\n<p>eg1:统计一下岗位总数-技巧</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span>  job) <span class=\"keyword\">from</span> emp;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"19-连接查询\"><a href=\"#19-连接查询\" class=\"headerlink\" title=\"19.连接查询\"></a>19.连接查询</h2>"},{"title":"react","author":"codefish","date":"2022-08-10T14:08:07.000Z","top_img":"/img/basketball.jpg","cover":"/img/basketball.jpg","_content":"hexo对于{}处理会有问题\n\n### 1.基础语法\n\n组件必须有一个根节点，组件名字必须大写\n\n**内联样式**\n\n```js\n\n    <div className=\"arr\" style={{ color: \"#F40\",fontSize:20 }}>\n      {arr}\n    </div>\n\n\n```\n\nstyle如果是对象，要两个{}内嵌，写属性要加引号，fontSize小驼峰\n\n1. 定义虚拟dom时候，不写引号\n\n2. 标签中混入js要用{}\n\n3. jsx即是js和html混用，{}匹配js,<>匹配html\n\n4. 内联用{}内嵌写法\n\n5. 只有一个根标签\n\n6. 标签需要闭合\n\n7. 写一个不存在的标签\n\n   ```js\n   写的小写标签当作浏览器标签识别 <good>\n   写的大写标签(首字母)当作component组件,如果不存在,报错com is not undefinded\n   ```\n\n   如果{}里面是一个数组，可以自动遍历，如果是对象，则出错\n\n   **表达式和代码**\n\n   jsx里面{}只能是一个表达式，不能是js代码\n\n   - arr.map\n   - demo(1)\n   - const a = function(){}\n   - \n   - if\n   - for\n   - switch\n\n\n\ndom.render()\n\n- react解析组件标签，找到了Mycomponent\n- 发现组件时使用函数定义的，随后调用改函数，将返回的虚拟DOM转换为真实DOM,然后呈现在页面当中\n\n### 2.两种组件写法\n\n1. 函数式写法\n\n   ```js\n   import ARRCOM from \"./arr.js\";\n   import MyClass from \"./myclass.js\";\n   function MyApp() {\n     const arr = [\"angular\", \"react\", \"vue\"];\n     return (\n       <div className=\"myapp\">\n         <header className=\"App-logo\">\n           {arr.map((item, index) => {\n             return (\n                 <li key={index}>\n                   {index}:{item}\n                 </li>\n             );\n           })}\n         </header>\n         <ARRCOM></ARRCOM><MyClass></MyClass>\n       </div>\n     );\n   }\n   \n   export default MyApp;\n   \n   ```\n\n   \n\n2. 类写法\n\n   ```js\n   import React, { Component } from \"react\";\n   \n   class MyClass extends Component {\n     render() {\n       console.log(this);\n       return (\n         <div>\n           <h1>当前求和为：</h1>\n           <button>点我+1</button>\n         </div>\n       );\n     }\n   }\n   export default MyClass;\n   \n   ```\n\n   \n\n   ### 3.简单/复杂组件\n\n   D:组件是否有状态 - 状态驱动页面\n\n   ps:需要注意\n\n   ```js\n   State 的更新可能是异步的\n   出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用。\n   \n   因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。\n   ```\n\n   **父子组件传参数和生命周期**\n\n   子组件\n\n   ```js\n   import React, { Component } from \"react\";\n   class MyClass extends Component {\n     render() {\n       console.log(this);\n       return (\n         <div>\n           <h1>Hello, world!</h1>\n           <h2>It is {this.props.date.toLocaleTimeString()}</h2>\n         </div>\n       );\n     }\n   }\n   export default MyClass;\n   ```\n\n   \n\n父组件\n\n```js\nimport { Component } from \"react\";\nimport MyClass from \"./myclass.js\";\nclass MyApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n    };\n  }\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState({ date: new Date() });\n    }, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  render() {\n    return (\n      <div className=\"myapp\">\n        <MyClass date={this.state.date}></MyClass>\n      </div>\n    );\n  }\n}\n\nexport default MyApp;\n```\n\n**componentWillUnmount组件销毁时候触发，componentDidMount组件挂载的时候触发**\n\n\n\nps（注意）:\n\n1. state和props时预先定义的，你也可以定义别的\n2. 修改state需要使用到setSate构造函数的方法，别的方法修改报错\n3. 直接在子组件通过this.props.xxx使用父组件传递的参数\n4. 这里的合并是浅合并，所以 `this.setState({comments})` 完整保留了 `this.state.posts`， 但是完全替换了 `this.state.comments`。\n\n\n\nOfficial 阻止默认事件\n\n```js\nfunction ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onClick={handleClick}>\n      Click me\n    </a>\n  );\n}\n//e.preventDefault();不需要担心兼容性\n```\n\n### 3.state\n\n**存疑**\n\n此处this.handleClick = this.handleClick.bind(this)为es6的public class field，handleClick的this执行什么呢？\n\n不写下面那句话的话，this指向underfinded\n\n```js\nconstructor(props) {\n      super(props);\n      this.state = {isToggleOn: true};\n  \n      // 为了在回调中使用 `this`，这个绑定是必不可少的\n      this.handleClick = this.handleClick.bind(this);\n    }\n  \n    handleClick() {\n      this.setState(state => ({\n        isToggleOn: !state.isToggleOn\n      }));\n    }\n```\n\n\n\n如果你没有使用public class fields 语法，你可以在回调中使用[箭头函数](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)：\n\n```\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。    return (      <button onClick={() => this.handleClick()}>        Click me\n      </button>\n    );\n  }\n}\n```\n\n根据逻辑判断进行条件渲染\n\n```js\n{unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n```\n\n之所以能这样做，是因为在 JavaScript 中，`true && expression` 总是会返回 `expression`, 而 `false && expression` 总是会返回 `false`。\n\n类中的方法默认开启严格模式\n\nsetState执行的是合并操作，不会把其他属性删除\n\nsuper(props)的操作，必须在this.xx = xx前面\n\n条件渲染中，当状态改变之后组件重新渲染\n\n##### state的简写方式\n\n```js\nthis.demo1 =this.demo1.bind(this) \n...\nclass Person{\n    demo1 = demo1.bind(this)\n}\n## 相当于在person添加一个属性\n```\n\n在优化函数写法\n\n```js\nclass Person {\n    //初始化状态\n    state = {value:'value'}\n    //自定义方法 -- 赋值语句和箭头函数相结合\n    changeColor =()=>{\n        console.log(this)\n    }\n}\n// 如果写普通函数还是不行，箭头函数没有自己的this,往外找，找到了当前函数的外层，即是Person的实例化对象\n```\n\n更新组件的状态 - > 组件重新渲染\n\n### 4.props\n\n**1.props语法糖**\n\n```js\nlet obj = {name:\"a\", age:23}\n<person age={19}/>\n<person {...obj}/>\n//只在标签传递有效\n```\n\narray.reduce() 求和\n\n```js\nfunction sum(..nums){\n\treturn nums.reduce((preVal,curVal)=>{\n\t\treturn preVal + curVal\n    })\n}\n```\n\n--标签属性类型的限制和非必须限制--\n\n指定默认值--\n\npoops是只读的，单向数据流\n\n对props进行限制 -**Person.propsTypes**\n\n```js\nPerson.propTypes = {\n    name:React.PropTypes.string\n}\n//上述被启用 在15版本以后\n//16之后单独抽出porp-types\nPerson.propTypes = {\n    name:React.PropTypes.string.isRequired,\n}\nPerson.defaultProps = {\n    name:'zhangsan'\n}\n//isRequired-是否非必须\n//defaultProps-默认值\n```\n\n**传递方法**\n\n```js\nPerson.propTypes = {\n    speak:React.PropTypes.func.isRequired,\n}\n//string 区别于类型的String\nfunction speak(){\n    console.log('speak')\n}\n<person speak={speak}/>\n// ->类型限制 function - func\n```\n\n此种写法写在class外部 - 移除到class内部\n\n```js\nclass Person extends Component {\n    static propTypes = {\n        \n    }\n    static defaultProps = {\n        \n    }\n    render(){\n\t\treturn ()\n    }\n}\n```\n\n**constructor和super**\n\n完全可以省略，constructor主要是给state初始化，给实例绑定方法，完全可以使用public class field写法替代。如果写了构造器constructor，一起把super加上，否则会出现问题，\n\n```js\nconstructor(){\n\tsuper()\n    console.log(this.porps)  // 结果是underfinded\n}\n```\n\n构造器是否接受props,传递给super,取决于是否需要在constructor通过this拿到props\n\n##### 函数式组件使用props(只能使用props)\n\n```js\nfunction Person(props){\n    const {age,name,sex} = props\n    return (\n    <div>apple</div>\n    )\n}\nPerson.propTypes = {}\nPerson.defaultProps = {}\n//props接受所有的传递参数，Object\n```\n\n### 5.refs\n\n通过refs拿到dom\n\n```js\nclass Person extends Component{\n    showData = () => {} //fn\n    render(){\n        return (\n            <div></div>\n        ...\n        )\n    }\n}\n```\n\n**三种写法**\n\n**1.string写法（后续可能被移除**\n\n```js\n<input ref=\"getEle\"></input>\nthis.refs.getEle.focus()\n```\n\ntips:提示使用creatRef写法，warning\n\n**2.回调写法**\n\n```js\n<input ref={(dom)=>{this.domNode = dom }}></input>\nthis.domNode.focus()\nthis.domNode.style.color = \"#f40\"\n//此处的dom即当前节点 <span>ele</span>\n```\n\nps:回调函数的内联函数写法在组件更新时候(state/条件渲染)，会触发两次，第一次获取的domNode为null\n\n--> **改进**class的绑定写法\n\n```js\noutFn = e => e //错误写法\noutFn = e => { this.input1 = c //domnode绑定给input1}\n\n<input ref={this.outFn}>class绑定语法</div>\n\nthis.input1.style.color = \"#f40\"\n```\n\noutFn = e => e\n\n拿到的只有当前这个函数，拿不到dom\n\n\n\n**3.createRef**写法\n\ncreatRef调用后返回一个容器，改容器可以储存被ref所标识的节点\n\n```js\ngetEle = React.createRef()\n<input ref={getEle}></input>\nthis.getEle.current.focus()\n{current: span}\n\n\n    alert(this.try.current.value); \t\t\t//有效\n    this.check.current.color = \"#f40\"\t\t//无效\n    this.check.current.innerHtml = \"#f40\";  //无效\n```\n\n该容器专人专用（相当于原生获取dom)，再次被赋值会被覆盖\n\n**关于onClick和onclick**\n\n```js\n所有的原生事件都被二次封装\n/1）通过onXXX属性指定事件处理函数（主要大小写\n\ta>react使用的是自定义（合成）事件，而不是使用的原生的DOM事件， --为了更好的兼容性\n    b>react中的事件委托方式处理的（委托给组件最外层的元素）--高效\n/2）通过event.target得到发送事件的发生源\n```\n\n\n\n**jsx的注释不同于其他注释**\n\n```js\n{/*...js代码*/}\n```\n\n\n\n### 6.**高阶函数**\n\n定义：如果一个函数符号下面2个规范中的任何一个，那该函数就是高阶函数\n\n- 若A函数，接受的是一个函数，那么A就可以称之为高阶函数\n\n- 若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数\n\n  \n\n  **函数的柯里化**：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式\n\n```js\n折叠技巧\n//#region endregion#//\n```\n\n常见的高阶函数：Promise,  setTimeout , array.map\n\n```js\nsaveFormData = (dataType)=>{\n\t\t\t\treturn (event)=>{\n\t\t\t\t\tthis.setState({[dataType]:event.target.value})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t用户名：<input onChange={this.saveFormData('username')} type=\"text\" name=\"username\"/>\n\t\t\t\t\t\t密码：<input onChange={this.saveFormData('password')} type=\"password\" name=\"password\"/>\n\t\t\t\t\t\t<button>登录</button>\n\t\t\t\t\t</form>\n\t\t\t\t)\n\t\t\t}\n```\n\n**非柯里化写法**\n\n```JS\nsaveFormData = (dataType,event)=>{\n\t\t\t\tthis.setState({[dataType]:event.target.value})\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t用户名：<input onChange={event => this.saveFormData('username',event) } type=\"text\" name=\"username\"/>\n\t\t\t\t\t\t密码：<input onChange={event => this.saveFormData('password',event) } type=\"password\" name=\"password\"/>\n\t\t\t\t\t\t<button>登录</button>\n\t\t\t\t\t</form>\n\t\t\t\t)\n\t\t\t}\n```\n\n原因：onchange函数是被自动调用的，需要的是一个函数，如果写成this.fn()表示调用的是当前函数的返回值\n\n注意：只要组件state修改，组件就会重新挂载-setState\n\n定时器的使用时机：挂载的时候，开启定时器\n\n**forceUpdate(强制更新**\n\n触发两个钩子\n\n- componentWillUpdate - \n- render - ..\n- 不更新任何state强制更新\n\n**componentWillReceiveProps**生命周期\n\n```js\n并不会在第一次传递props调用，只会在porps更新时调用\n```\n\n1.初始化阶段\n\n```js\n1.constructor\n2.conponentWillMount()\n3.render()\n4.componentDidMount()\n```\n\n2.更新阶段\n\n```js\n1.shouldComponentUpdate() //有一个阀门，必须返回一个boolean，是否继续执行\n2.componentWillUpdate()\n3.remder() \n4.conponentDidMount()\n```\n\n3.销毁阶段\n\nReactDom.unmountComponentAtNode()触发 --销毁节点\n\n```js\ncomponentWillUnmount()\n```\n\n常用钩子：\n\na.componentDidMount()\n\n```\n1.初始化事件\n2.网络请求\n```\n\nb.componentWillUnmount()\n\n```js\n清理定时器\n```\n\nc.render()\n\n*bootCDN*\n\n\n\n### 7.**新版生命周期**\n\n*新版本可以使用旧的生命周期* - waring-不被推荐使用\n\nUNSAFE_componentWillMount  加入UNSAFE\n\n```js\n需要加UNSAFE\nUNSAFE_componentWillMount()\nUNSAFE_componentWillReceiveProps()\nUNSAFE_componentWillUpdate()\n```\n\n新版废弃上述三个钩子，新增两个钩子\n\n#### **1.getDerivedStateFromPorps (derived派生)**\n\n```js\ngetDerivefStateFromPorps() \n返回状态对象，或者null\n```\n\n1.返回null\n\n2.返回object\n\n````js\nreturn {count:108}\n如果当前state有count,不能修改\n````\n\n使用场景：即state取决于props\n\n缺点：代码冗余，定时器难以维护,组件难以维护\n\n#### **2.getSnapshotBeforeUpdate**\n\n--在最近一次渲染输出（提交到 DOM 节点）之前调用。\n\n（快照）*更新之前获取快照* -  任何值都可以为一个快照值\n\n必须返回一个快照，或者null\n\ncomponent\n\n#### **3.diff算法**\n\n遍历列表的时候不要使用inde作为key\n\nPS:\n\n简单：key时虚拟Dom对象的标识\n\n详细：当状态中的数据发生改变时，rract会根据新数据生成新的虚拟都没,随后react进行，新老dom进行diff比较\n\n**比较规则：**\n\n​\ta.旧虚拟dom找到了禹新dom相同的key\n\n​\t\t1)如果内容没变，那么直接使用之前的dom,\n\n​\t\t2)如果不同的话，则生成新的dom,替换旧的dom\n\n  b.index作为key,可能会引发的问题、\n\n​\t\t1.索引值被打乱，造成无用的dom更新（效率低，无用的资源浪费\n\n​\t\t2.需求：\n\n#### **4.样式冲突（模块化解决**\n\n后面引入的覆盖之前引用的\n\nless 嵌套\n\n```js\nimport hello from './a.module.css'\n```\n\n这样之后当前css的样式都以对象的形式，包含在hello里面\n\n```jsx\n<div class = {hello.title}></div>\n```\n\n此时title为类选择器，如果为其他选择器怎么办？\n\n```css\n.title{\n    background-color:\"#fff\"\n}\n```\n\n#### **5.插件使用**\n\n代码块\n\n#### **6.受控组件和非受控组件浅析**\n\ncheckout 可以写一个defaultValue，后续defaultChecked的值可以改，如果使用checked,则必须使用onChange来改变checkout选中状态，此处defaultChecked的写法就是非受控组件，而使用onChange函数自己改变状态的，则是受控组件\n\n*解构技巧*\n\nconst {...} = this.props\n\nconst {...} = this\n\n#### **7.组件传参**\n\n- 父子组件传参\n\n  ```js\n  <item todos={todos}> \n  //父组件将其内部的变量 todos传给子组件items,子组件接受到的值为todos\n  <item {...todos}>\n  //解构写法 - 将todos这个对象的值逐一的传递到子组件\n      \n  ```\n\n  \n\n- 子传父 \n\n  ```js\n  原理：父组件向子组件传递一个函数（通过props)，然后子组件调用当前函数\n  ```\n\n  id库\n\n  ```js\n  uuid - 唯一id\n  nanoid - 比uuid库小，功能一样\n  ```\n\n*浅拷贝小tips*\n\n```js\nlet obj = {a:1,b:2}\nlet obj1 = {..obj,b:3}\n```\n\ntodolist案例中更改状态\n\n```js\nupdateTodo = (id,done) => {\n    const {todos} = this.state\n    todos.map((todoObj)=>{\n        if(todoObj.id === id) return {...todoObj,done}\n        else return todoObj\n    })\n}\n```\n\narray.reduce()\n\n#### **8.消息订阅与发布**\n\n订阅与取消订阅\n\n```js\ncomponentDidMount() {\n    // publish 发布消息 消息名为：publish_one 内容为：This is publish\n    PubSub.subscribe(\"publish_one\", (msg, data) => {\n      this.setState({ userData: data });\n    });\n  }\n  //取消消息订阅\n  componentWillUnmount(){\n    PubSub.unsubscribe(\"publish_one\")\n  }\n```\n\n发布消息\n\n```js\nPubSub.publish(\"publish_one\", data.data.items);\n```\n\nPS：注意在需要消息的地方订阅，在传递数据的地方发布消息，记得在组件销毁之前取消订阅\n\n**fetch**\n\n- xhr(传统ajax)\n  - jquery\n  - axios\n- fetch\n  - 关注分离(复杂的事情简单化\n\n\n\n关注分离具体到发送请求：将请求服务器和拿到数据分开处理\n\n```js\nfetch(`url`).then(response=>{\n    return response.josn()\n}),err=>{\n    console.log('connect failed')\n    return new Promise()\n    //返回一个初始化的promise,获取数据失败，直接返回，不走下一步回调\n}.then(()=>{\n    console.log('get data success')\n},()=>{})\n//此处返回的response.json()的为一个promise,then链式调用的为返回的promise,只走成功的或者失败的回调，不会同时走，即下面的一个.then为上面成功或者失败的回调\n//使用catch代替失败的回调\nfetch(`url`).then(response=>{\n    return response.josn()\n}).then(()=>{\n    console.log('get data success')\n},()=>{}).catch((err)=>{\n    console.log(err) //统一处理错误\n})\n//await\ntry{\n    const res = await fetch(`url`)\n    const data = await res.json()\n}catch(err){\n    console.log('请求出错',err)\n}\n```\n\nfetch使用较少，老版本浏览器不支持fetch请求\n\n### 8.路由（旧版\n\nSPA:单页面应用\n\n- 只有一个页面\n\n- 无刷更新数据\n\n- 数据请求，异步展示\n\n#### 1.react-router-dom 5\n\n```js\n//#1\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n//#2\n<NavLink\n          activeClassName=\"ative\"\n          className=\"list-group-item\"\n          to=\"/http\"\n        >\n          http\n</NavLink>\n//#3\n<Route path=\"/http\" component={Basic} />\n```\n\n路由器分类\n\n- BrowserRouter\n- HashRouter   \n\n#### 1.link\n\n```js\n<BrowserRouter>\n    <linK to='/home'>home</link>\n</BrowserRouter>\n```\n\nlink都需要被router包裹，故在最大的app外面包裹browserRouter\n\nlink被转化为A标签，\n\n#### 2.navlink\n\n当前被点击的内容加一个navlink类名（默认，可以加一个activeClassName绑定一个类名\n\n#### 3.switch\n\n```js\n<switch>\n    <Route path=\"/about\" component={About}></Route>\n    </switch>\n```\n\n用switch包裹的组件集合，匹配到了第一个就不会往下匹配，\n\nSwitch可以提高路由匹配效率(单一匹配)。\n\n#### 4.多级路由的样式更新问题\n\n​        1.public/index.html 中 引入样式时不写 ./ 写 / （常用）\n\n​        2.public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用）\n\n​\t\t3.如果是hasuRouter则没有问题\n\n#### 5.模糊匹配\n\n```js\n<NavLink\n          activeClassName=\"ative\"\n          className=\"list-group-item\"\n          to=\"/http/aa\"\n        >\n          http\n</NavLink>\n<NavLink\n          activeClassName=\"ative\"\n          className=\"list-group-item\"\n          to=\"/a/http/aa\"\n        >\n          http\n</NavLink>\n//#3\n<Route path=\"/http\" component={Basic} />\n```\n\n当前情况下跳转至/http/aa可以匹配到Basic组件（模糊匹配）,而不能匹配到/a/http/aa\n\n严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由\n\n**精准匹配**\n\n```js\n<Route extra={true} path=\"/http\" component={Basic} />\n```\n\n**重定向Redirect**\n\n```js\n<switch>\n<Route path=\"/http\" component={Basic} />\n<Route path=\"/input\" component={Basic} />\n<redirect to=\"/a\"/>\n    </switch>\n```\n\n当http,input都无法匹配的时候，重定向到..\n\n一般把redirect写在所有的路由下方，当所有的都无法匹配时候，redirct---\n\n#### 6.嵌套路由\n\nPS:不能使用严格匹配，会导致路由丢失\n\n- 注册子路由时候，加上父路由的path值\n- 路由的匹配是按照注册路由的顺序进行的\n\n#### 7.向路由组件传参\n\n```jsx\n<Link to={`/home/message/detail/${msgObj.id}/${msgObj.title}`}>{msgObj.title}</Link>\n<Route path=\"/home/message/detail/:id/:title\" component={Detail}/>\n\t\t\t\t\n//detail组件\nconst {id,title} = this.props.match.params\n```\n\n- params传参\n\n  ```js\n  <link to='demo/18/zhangsan'/>\n  <Route path='demo/:id/name'\n  ```\n\n  接受参数: **this.props.match.params**\n\n- search传参\n\n  ```js\n  <link to='demo?id=18&zhangsan'/>\n  <Route path='demo'/>\n  ```\n\n  接受参数：**this.props.location.search**\n\n- state传参\n\n  ```js\n  <link to='demo' state={name:\"tom\"}/>\n  <Route path='demo'/>\n  ```\n\n  接受参数：**this.props.location.state**\n\n#### 8.编程式导航\n\n```js\nthis.prosp.history.push()\t\t\t\t\t\t\tthis.prosp.history.replace()\t\t\t\t\tthis.prosp.history.goBack()\nthis.prosp.history.goForward()\t\t\t\t\t\tthis.prosp.history.go()\n//prosP,location...等等只有路由组件才有\n```\n\n**BrowserRouter与HashRouter的区别**\n\n- 兼容性\n  - 不支持IE9及下\n  - 使用的 URL的哈希值\n- path\n  - 路径没有#\n- state的影响\n  - browserRouter无影响\n  - HashRouter刷新后导致路由state参数的丢失\n- 可以解决路径错误问题\n\n**withRouter**\n\n一个函数\n\n```js\nexport default withRouter(myApp)\n```\n\n使一般组件具有路由路由组件特有的api，返回值是一个新组件\n\n#### 9.使用antd组件库\n\n```js\n// npm i antd\nimport { Button } from \"antd\";\nimport 'antd/dist/antd.min.css';\n```\n\n*注意有的版本导入antd.css会有问题，此处改为antd.min.css*\n\n### 10.redux\n\n[参考阮一峰](https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)\n\n*:只要调用setSate，就能更新状态，更新dom\n\n**redux**：只能管理状态，但不会触发更新\n\n```js\ncomponentDidMount(){\n\t\t//检测redux中状态的变化，只要变化，就调用render\n\t\tstore.subscribe(()=>{\n\t\t\tthis.setState({}) //幌一下\n\t\t})\n}\n```\n\nsetState存在效率问题，此处是一个**小技巧**\n\n#### 1.监听单个组件\n\nredux 文件夹下\n\n*1.store.js*\n\n```js\nimport {createStore} from 'redux'\nimport countReducer from './count_reducer'\nexport default createStore(countReducer)\n```\n\n2.count_reducer\n\n```js\nconst initState = 0 //初始化状态\nexport default function countReducer(preState=initState,action){\n\t//从action对象中获取：type、data\n\tconst {type,data} = action\n\t//根据type决定如何加工数据\n\tswitch (type) {\n\t\tcase 'increment': //如果是加\n\t\t\treturn preState + data\n\t\tcase 'decrement': //若果是减\n\t\t\treturn preState - data\n\t\tdefault:\n\t\t\treturn preState\n\t}\n}\n```\n\n第一次调用的时候，preState为underfinded,因此需要赋一个默认值\n\n3.use.js 使用store\n\n```js\ncomponentDidMount(){\n\t\t//检测redux中状态的变化，只要变化，就调用render\n\t\tstore.subscribe(()=>{\n\t\t\tthis.setState({})\n\t\t})\n}\n<select ref={c => this.selectNumber = c}>\n\t\t\t\t\t<option value=\"1\">1</option>\n\t\t\t\t\t<option value=\"2\">2</option>\n\t\t\t\t\t<option value=\"3\">3</option>\n</select>\nimport store from '../../redux/store'\nfn = ()=>{\n\tconst {value} = this.selectNumber\n    store.dispatch({type:'increment',data:value*1})\n}\n```\n\n**此处一个重要的点就是监听store状态，只要改变了，就触发setState更新视图**，可以将监听放在index.js里面，进行全局监听\n\n```js\nstore.subscribe(()=>{\nReactDom.render(<APP/>,document.getElementById('root'))\n})\n```\n\n此处有diff算法兜底，不会造成大未改变页面更新\n\n**pnpm使用**\n\n使用 `pnpm install` 安装项目依赖时出现：`ERR_PNPM_PEER_DEP_ISSUES Unmet peer dependencies`\n\n问题原因：在 npm 3 中，不会再强制安装 peerDependencies （对等依赖）中所指定的包，而是通过警告的方式来提示我们。pnpm 会在全局缓存已经下载过的依赖包，如果全局缓存的依赖版本与项目 package.json 中指定的版本不一致，就会出现这种 hint 警告。\n\n**处理方案**\n\n1. 在项目的 `package.json` 中配置 `peerDependencyRules` 忽略对应的警告提示：\n\n   ```js\n   \"pnpm\": {\n       \"peerDependencyRules\": {\n         \"ignoreMissing\": [\n           \"react\"\n         ]\n       }\n     }\n   ```\n\n   \n\n2. 在 `.npmrc` 配置文件中添加 `strict-peer-dependencies=false` ，这意味着将关闭严格的对等依赖模式。操作命令如下：\n\n   ```js\n   npm config set strict-peer-dependencies=false\n   ```\n\n   \n\n**箭头函数补充**\n\n```js\ndata => 1   //返回1\ndata => {} //不会返回空对象，会把里面当作函数体\n-解决\ndata => ({})\n```\n\n","source":"_posts/react_first.md","raw":"---\n\ntitle: react\nauthor: codefish\ndate: 2022-8-10 22:08:07\ncategories: react\ntags: [react redux]\ntop_img: /img/basketball.jpg\ncover: /img/basketball.jpg\n\n---\nhexo对于{}处理会有问题\n\n### 1.基础语法\n\n组件必须有一个根节点，组件名字必须大写\n\n**内联样式**\n\n```js\n\n    <div className=\"arr\" style={{ color: \"#F40\",fontSize:20 }}>\n      {arr}\n    </div>\n\n\n```\n\nstyle如果是对象，要两个{}内嵌，写属性要加引号，fontSize小驼峰\n\n1. 定义虚拟dom时候，不写引号\n\n2. 标签中混入js要用{}\n\n3. jsx即是js和html混用，{}匹配js,<>匹配html\n\n4. 内联用{}内嵌写法\n\n5. 只有一个根标签\n\n6. 标签需要闭合\n\n7. 写一个不存在的标签\n\n   ```js\n   写的小写标签当作浏览器标签识别 <good>\n   写的大写标签(首字母)当作component组件,如果不存在,报错com is not undefinded\n   ```\n\n   如果{}里面是一个数组，可以自动遍历，如果是对象，则出错\n\n   **表达式和代码**\n\n   jsx里面{}只能是一个表达式，不能是js代码\n\n   - arr.map\n   - demo(1)\n   - const a = function(){}\n   - \n   - if\n   - for\n   - switch\n\n\n\ndom.render()\n\n- react解析组件标签，找到了Mycomponent\n- 发现组件时使用函数定义的，随后调用改函数，将返回的虚拟DOM转换为真实DOM,然后呈现在页面当中\n\n### 2.两种组件写法\n\n1. 函数式写法\n\n   ```js\n   import ARRCOM from \"./arr.js\";\n   import MyClass from \"./myclass.js\";\n   function MyApp() {\n     const arr = [\"angular\", \"react\", \"vue\"];\n     return (\n       <div className=\"myapp\">\n         <header className=\"App-logo\">\n           {arr.map((item, index) => {\n             return (\n                 <li key={index}>\n                   {index}:{item}\n                 </li>\n             );\n           })}\n         </header>\n         <ARRCOM></ARRCOM><MyClass></MyClass>\n       </div>\n     );\n   }\n   \n   export default MyApp;\n   \n   ```\n\n   \n\n2. 类写法\n\n   ```js\n   import React, { Component } from \"react\";\n   \n   class MyClass extends Component {\n     render() {\n       console.log(this);\n       return (\n         <div>\n           <h1>当前求和为：</h1>\n           <button>点我+1</button>\n         </div>\n       );\n     }\n   }\n   export default MyClass;\n   \n   ```\n\n   \n\n   ### 3.简单/复杂组件\n\n   D:组件是否有状态 - 状态驱动页面\n\n   ps:需要注意\n\n   ```js\n   State 的更新可能是异步的\n   出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用。\n   \n   因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。\n   ```\n\n   **父子组件传参数和生命周期**\n\n   子组件\n\n   ```js\n   import React, { Component } from \"react\";\n   class MyClass extends Component {\n     render() {\n       console.log(this);\n       return (\n         <div>\n           <h1>Hello, world!</h1>\n           <h2>It is {this.props.date.toLocaleTimeString()}</h2>\n         </div>\n       );\n     }\n   }\n   export default MyClass;\n   ```\n\n   \n\n父组件\n\n```js\nimport { Component } from \"react\";\nimport MyClass from \"./myclass.js\";\nclass MyApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n    };\n  }\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState({ date: new Date() });\n    }, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  render() {\n    return (\n      <div className=\"myapp\">\n        <MyClass date={this.state.date}></MyClass>\n      </div>\n    );\n  }\n}\n\nexport default MyApp;\n```\n\n**componentWillUnmount组件销毁时候触发，componentDidMount组件挂载的时候触发**\n\n\n\nps（注意）:\n\n1. state和props时预先定义的，你也可以定义别的\n2. 修改state需要使用到setSate构造函数的方法，别的方法修改报错\n3. 直接在子组件通过this.props.xxx使用父组件传递的参数\n4. 这里的合并是浅合并，所以 `this.setState({comments})` 完整保留了 `this.state.posts`， 但是完全替换了 `this.state.comments`。\n\n\n\nOfficial 阻止默认事件\n\n```js\nfunction ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onClick={handleClick}>\n      Click me\n    </a>\n  );\n}\n//e.preventDefault();不需要担心兼容性\n```\n\n### 3.state\n\n**存疑**\n\n此处this.handleClick = this.handleClick.bind(this)为es6的public class field，handleClick的this执行什么呢？\n\n不写下面那句话的话，this指向underfinded\n\n```js\nconstructor(props) {\n      super(props);\n      this.state = {isToggleOn: true};\n  \n      // 为了在回调中使用 `this`，这个绑定是必不可少的\n      this.handleClick = this.handleClick.bind(this);\n    }\n  \n    handleClick() {\n      this.setState(state => ({\n        isToggleOn: !state.isToggleOn\n      }));\n    }\n```\n\n\n\n如果你没有使用public class fields 语法，你可以在回调中使用[箭头函数](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)：\n\n```\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。    return (      <button onClick={() => this.handleClick()}>        Click me\n      </button>\n    );\n  }\n}\n```\n\n根据逻辑判断进行条件渲染\n\n```js\n{unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n```\n\n之所以能这样做，是因为在 JavaScript 中，`true && expression` 总是会返回 `expression`, 而 `false && expression` 总是会返回 `false`。\n\n类中的方法默认开启严格模式\n\nsetState执行的是合并操作，不会把其他属性删除\n\nsuper(props)的操作，必须在this.xx = xx前面\n\n条件渲染中，当状态改变之后组件重新渲染\n\n##### state的简写方式\n\n```js\nthis.demo1 =this.demo1.bind(this) \n...\nclass Person{\n    demo1 = demo1.bind(this)\n}\n## 相当于在person添加一个属性\n```\n\n在优化函数写法\n\n```js\nclass Person {\n    //初始化状态\n    state = {value:'value'}\n    //自定义方法 -- 赋值语句和箭头函数相结合\n    changeColor =()=>{\n        console.log(this)\n    }\n}\n// 如果写普通函数还是不行，箭头函数没有自己的this,往外找，找到了当前函数的外层，即是Person的实例化对象\n```\n\n更新组件的状态 - > 组件重新渲染\n\n### 4.props\n\n**1.props语法糖**\n\n```js\nlet obj = {name:\"a\", age:23}\n<person age={19}/>\n<person {...obj}/>\n//只在标签传递有效\n```\n\narray.reduce() 求和\n\n```js\nfunction sum(..nums){\n\treturn nums.reduce((preVal,curVal)=>{\n\t\treturn preVal + curVal\n    })\n}\n```\n\n--标签属性类型的限制和非必须限制--\n\n指定默认值--\n\npoops是只读的，单向数据流\n\n对props进行限制 -**Person.propsTypes**\n\n```js\nPerson.propTypes = {\n    name:React.PropTypes.string\n}\n//上述被启用 在15版本以后\n//16之后单独抽出porp-types\nPerson.propTypes = {\n    name:React.PropTypes.string.isRequired,\n}\nPerson.defaultProps = {\n    name:'zhangsan'\n}\n//isRequired-是否非必须\n//defaultProps-默认值\n```\n\n**传递方法**\n\n```js\nPerson.propTypes = {\n    speak:React.PropTypes.func.isRequired,\n}\n//string 区别于类型的String\nfunction speak(){\n    console.log('speak')\n}\n<person speak={speak}/>\n// ->类型限制 function - func\n```\n\n此种写法写在class外部 - 移除到class内部\n\n```js\nclass Person extends Component {\n    static propTypes = {\n        \n    }\n    static defaultProps = {\n        \n    }\n    render(){\n\t\treturn ()\n    }\n}\n```\n\n**constructor和super**\n\n完全可以省略，constructor主要是给state初始化，给实例绑定方法，完全可以使用public class field写法替代。如果写了构造器constructor，一起把super加上，否则会出现问题，\n\n```js\nconstructor(){\n\tsuper()\n    console.log(this.porps)  // 结果是underfinded\n}\n```\n\n构造器是否接受props,传递给super,取决于是否需要在constructor通过this拿到props\n\n##### 函数式组件使用props(只能使用props)\n\n```js\nfunction Person(props){\n    const {age,name,sex} = props\n    return (\n    <div>apple</div>\n    )\n}\nPerson.propTypes = {}\nPerson.defaultProps = {}\n//props接受所有的传递参数，Object\n```\n\n### 5.refs\n\n通过refs拿到dom\n\n```js\nclass Person extends Component{\n    showData = () => {} //fn\n    render(){\n        return (\n            <div></div>\n        ...\n        )\n    }\n}\n```\n\n**三种写法**\n\n**1.string写法（后续可能被移除**\n\n```js\n<input ref=\"getEle\"></input>\nthis.refs.getEle.focus()\n```\n\ntips:提示使用creatRef写法，warning\n\n**2.回调写法**\n\n```js\n<input ref={(dom)=>{this.domNode = dom }}></input>\nthis.domNode.focus()\nthis.domNode.style.color = \"#f40\"\n//此处的dom即当前节点 <span>ele</span>\n```\n\nps:回调函数的内联函数写法在组件更新时候(state/条件渲染)，会触发两次，第一次获取的domNode为null\n\n--> **改进**class的绑定写法\n\n```js\noutFn = e => e //错误写法\noutFn = e => { this.input1 = c //domnode绑定给input1}\n\n<input ref={this.outFn}>class绑定语法</div>\n\nthis.input1.style.color = \"#f40\"\n```\n\noutFn = e => e\n\n拿到的只有当前这个函数，拿不到dom\n\n\n\n**3.createRef**写法\n\ncreatRef调用后返回一个容器，改容器可以储存被ref所标识的节点\n\n```js\ngetEle = React.createRef()\n<input ref={getEle}></input>\nthis.getEle.current.focus()\n{current: span}\n\n\n    alert(this.try.current.value); \t\t\t//有效\n    this.check.current.color = \"#f40\"\t\t//无效\n    this.check.current.innerHtml = \"#f40\";  //无效\n```\n\n该容器专人专用（相当于原生获取dom)，再次被赋值会被覆盖\n\n**关于onClick和onclick**\n\n```js\n所有的原生事件都被二次封装\n/1）通过onXXX属性指定事件处理函数（主要大小写\n\ta>react使用的是自定义（合成）事件，而不是使用的原生的DOM事件， --为了更好的兼容性\n    b>react中的事件委托方式处理的（委托给组件最外层的元素）--高效\n/2）通过event.target得到发送事件的发生源\n```\n\n\n\n**jsx的注释不同于其他注释**\n\n```js\n{/*...js代码*/}\n```\n\n\n\n### 6.**高阶函数**\n\n定义：如果一个函数符号下面2个规范中的任何一个，那该函数就是高阶函数\n\n- 若A函数，接受的是一个函数，那么A就可以称之为高阶函数\n\n- 若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数\n\n  \n\n  **函数的柯里化**：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式\n\n```js\n折叠技巧\n//#region endregion#//\n```\n\n常见的高阶函数：Promise,  setTimeout , array.map\n\n```js\nsaveFormData = (dataType)=>{\n\t\t\t\treturn (event)=>{\n\t\t\t\t\tthis.setState({[dataType]:event.target.value})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t用户名：<input onChange={this.saveFormData('username')} type=\"text\" name=\"username\"/>\n\t\t\t\t\t\t密码：<input onChange={this.saveFormData('password')} type=\"password\" name=\"password\"/>\n\t\t\t\t\t\t<button>登录</button>\n\t\t\t\t\t</form>\n\t\t\t\t)\n\t\t\t}\n```\n\n**非柯里化写法**\n\n```JS\nsaveFormData = (dataType,event)=>{\n\t\t\t\tthis.setState({[dataType]:event.target.value})\n\t\t\t}\n\t\t\trender(){\n\t\t\t\treturn(\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t用户名：<input onChange={event => this.saveFormData('username',event) } type=\"text\" name=\"username\"/>\n\t\t\t\t\t\t密码：<input onChange={event => this.saveFormData('password',event) } type=\"password\" name=\"password\"/>\n\t\t\t\t\t\t<button>登录</button>\n\t\t\t\t\t</form>\n\t\t\t\t)\n\t\t\t}\n```\n\n原因：onchange函数是被自动调用的，需要的是一个函数，如果写成this.fn()表示调用的是当前函数的返回值\n\n注意：只要组件state修改，组件就会重新挂载-setState\n\n定时器的使用时机：挂载的时候，开启定时器\n\n**forceUpdate(强制更新**\n\n触发两个钩子\n\n- componentWillUpdate - \n- render - ..\n- 不更新任何state强制更新\n\n**componentWillReceiveProps**生命周期\n\n```js\n并不会在第一次传递props调用，只会在porps更新时调用\n```\n\n1.初始化阶段\n\n```js\n1.constructor\n2.conponentWillMount()\n3.render()\n4.componentDidMount()\n```\n\n2.更新阶段\n\n```js\n1.shouldComponentUpdate() //有一个阀门，必须返回一个boolean，是否继续执行\n2.componentWillUpdate()\n3.remder() \n4.conponentDidMount()\n```\n\n3.销毁阶段\n\nReactDom.unmountComponentAtNode()触发 --销毁节点\n\n```js\ncomponentWillUnmount()\n```\n\n常用钩子：\n\na.componentDidMount()\n\n```\n1.初始化事件\n2.网络请求\n```\n\nb.componentWillUnmount()\n\n```js\n清理定时器\n```\n\nc.render()\n\n*bootCDN*\n\n\n\n### 7.**新版生命周期**\n\n*新版本可以使用旧的生命周期* - waring-不被推荐使用\n\nUNSAFE_componentWillMount  加入UNSAFE\n\n```js\n需要加UNSAFE\nUNSAFE_componentWillMount()\nUNSAFE_componentWillReceiveProps()\nUNSAFE_componentWillUpdate()\n```\n\n新版废弃上述三个钩子，新增两个钩子\n\n#### **1.getDerivedStateFromPorps (derived派生)**\n\n```js\ngetDerivefStateFromPorps() \n返回状态对象，或者null\n```\n\n1.返回null\n\n2.返回object\n\n````js\nreturn {count:108}\n如果当前state有count,不能修改\n````\n\n使用场景：即state取决于props\n\n缺点：代码冗余，定时器难以维护,组件难以维护\n\n#### **2.getSnapshotBeforeUpdate**\n\n--在最近一次渲染输出（提交到 DOM 节点）之前调用。\n\n（快照）*更新之前获取快照* -  任何值都可以为一个快照值\n\n必须返回一个快照，或者null\n\ncomponent\n\n#### **3.diff算法**\n\n遍历列表的时候不要使用inde作为key\n\nPS:\n\n简单：key时虚拟Dom对象的标识\n\n详细：当状态中的数据发生改变时，rract会根据新数据生成新的虚拟都没,随后react进行，新老dom进行diff比较\n\n**比较规则：**\n\n​\ta.旧虚拟dom找到了禹新dom相同的key\n\n​\t\t1)如果内容没变，那么直接使用之前的dom,\n\n​\t\t2)如果不同的话，则生成新的dom,替换旧的dom\n\n  b.index作为key,可能会引发的问题、\n\n​\t\t1.索引值被打乱，造成无用的dom更新（效率低，无用的资源浪费\n\n​\t\t2.需求：\n\n#### **4.样式冲突（模块化解决**\n\n后面引入的覆盖之前引用的\n\nless 嵌套\n\n```js\nimport hello from './a.module.css'\n```\n\n这样之后当前css的样式都以对象的形式，包含在hello里面\n\n```jsx\n<div class = {hello.title}></div>\n```\n\n此时title为类选择器，如果为其他选择器怎么办？\n\n```css\n.title{\n    background-color:\"#fff\"\n}\n```\n\n#### **5.插件使用**\n\n代码块\n\n#### **6.受控组件和非受控组件浅析**\n\ncheckout 可以写一个defaultValue，后续defaultChecked的值可以改，如果使用checked,则必须使用onChange来改变checkout选中状态，此处defaultChecked的写法就是非受控组件，而使用onChange函数自己改变状态的，则是受控组件\n\n*解构技巧*\n\nconst {...} = this.props\n\nconst {...} = this\n\n#### **7.组件传参**\n\n- 父子组件传参\n\n  ```js\n  <item todos={todos}> \n  //父组件将其内部的变量 todos传给子组件items,子组件接受到的值为todos\n  <item {...todos}>\n  //解构写法 - 将todos这个对象的值逐一的传递到子组件\n      \n  ```\n\n  \n\n- 子传父 \n\n  ```js\n  原理：父组件向子组件传递一个函数（通过props)，然后子组件调用当前函数\n  ```\n\n  id库\n\n  ```js\n  uuid - 唯一id\n  nanoid - 比uuid库小，功能一样\n  ```\n\n*浅拷贝小tips*\n\n```js\nlet obj = {a:1,b:2}\nlet obj1 = {..obj,b:3}\n```\n\ntodolist案例中更改状态\n\n```js\nupdateTodo = (id,done) => {\n    const {todos} = this.state\n    todos.map((todoObj)=>{\n        if(todoObj.id === id) return {...todoObj,done}\n        else return todoObj\n    })\n}\n```\n\narray.reduce()\n\n#### **8.消息订阅与发布**\n\n订阅与取消订阅\n\n```js\ncomponentDidMount() {\n    // publish 发布消息 消息名为：publish_one 内容为：This is publish\n    PubSub.subscribe(\"publish_one\", (msg, data) => {\n      this.setState({ userData: data });\n    });\n  }\n  //取消消息订阅\n  componentWillUnmount(){\n    PubSub.unsubscribe(\"publish_one\")\n  }\n```\n\n发布消息\n\n```js\nPubSub.publish(\"publish_one\", data.data.items);\n```\n\nPS：注意在需要消息的地方订阅，在传递数据的地方发布消息，记得在组件销毁之前取消订阅\n\n**fetch**\n\n- xhr(传统ajax)\n  - jquery\n  - axios\n- fetch\n  - 关注分离(复杂的事情简单化\n\n\n\n关注分离具体到发送请求：将请求服务器和拿到数据分开处理\n\n```js\nfetch(`url`).then(response=>{\n    return response.josn()\n}),err=>{\n    console.log('connect failed')\n    return new Promise()\n    //返回一个初始化的promise,获取数据失败，直接返回，不走下一步回调\n}.then(()=>{\n    console.log('get data success')\n},()=>{})\n//此处返回的response.json()的为一个promise,then链式调用的为返回的promise,只走成功的或者失败的回调，不会同时走，即下面的一个.then为上面成功或者失败的回调\n//使用catch代替失败的回调\nfetch(`url`).then(response=>{\n    return response.josn()\n}).then(()=>{\n    console.log('get data success')\n},()=>{}).catch((err)=>{\n    console.log(err) //统一处理错误\n})\n//await\ntry{\n    const res = await fetch(`url`)\n    const data = await res.json()\n}catch(err){\n    console.log('请求出错',err)\n}\n```\n\nfetch使用较少，老版本浏览器不支持fetch请求\n\n### 8.路由（旧版\n\nSPA:单页面应用\n\n- 只有一个页面\n\n- 无刷更新数据\n\n- 数据请求，异步展示\n\n#### 1.react-router-dom 5\n\n```js\n//#1\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n//#2\n<NavLink\n          activeClassName=\"ative\"\n          className=\"list-group-item\"\n          to=\"/http\"\n        >\n          http\n</NavLink>\n//#3\n<Route path=\"/http\" component={Basic} />\n```\n\n路由器分类\n\n- BrowserRouter\n- HashRouter   \n\n#### 1.link\n\n```js\n<BrowserRouter>\n    <linK to='/home'>home</link>\n</BrowserRouter>\n```\n\nlink都需要被router包裹，故在最大的app外面包裹browserRouter\n\nlink被转化为A标签，\n\n#### 2.navlink\n\n当前被点击的内容加一个navlink类名（默认，可以加一个activeClassName绑定一个类名\n\n#### 3.switch\n\n```js\n<switch>\n    <Route path=\"/about\" component={About}></Route>\n    </switch>\n```\n\n用switch包裹的组件集合，匹配到了第一个就不会往下匹配，\n\nSwitch可以提高路由匹配效率(单一匹配)。\n\n#### 4.多级路由的样式更新问题\n\n​        1.public/index.html 中 引入样式时不写 ./ 写 / （常用）\n\n​        2.public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用）\n\n​\t\t3.如果是hasuRouter则没有问题\n\n#### 5.模糊匹配\n\n```js\n<NavLink\n          activeClassName=\"ative\"\n          className=\"list-group-item\"\n          to=\"/http/aa\"\n        >\n          http\n</NavLink>\n<NavLink\n          activeClassName=\"ative\"\n          className=\"list-group-item\"\n          to=\"/a/http/aa\"\n        >\n          http\n</NavLink>\n//#3\n<Route path=\"/http\" component={Basic} />\n```\n\n当前情况下跳转至/http/aa可以匹配到Basic组件（模糊匹配）,而不能匹配到/a/http/aa\n\n严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由\n\n**精准匹配**\n\n```js\n<Route extra={true} path=\"/http\" component={Basic} />\n```\n\n**重定向Redirect**\n\n```js\n<switch>\n<Route path=\"/http\" component={Basic} />\n<Route path=\"/input\" component={Basic} />\n<redirect to=\"/a\"/>\n    </switch>\n```\n\n当http,input都无法匹配的时候，重定向到..\n\n一般把redirect写在所有的路由下方，当所有的都无法匹配时候，redirct---\n\n#### 6.嵌套路由\n\nPS:不能使用严格匹配，会导致路由丢失\n\n- 注册子路由时候，加上父路由的path值\n- 路由的匹配是按照注册路由的顺序进行的\n\n#### 7.向路由组件传参\n\n```jsx\n<Link to={`/home/message/detail/${msgObj.id}/${msgObj.title}`}>{msgObj.title}</Link>\n<Route path=\"/home/message/detail/:id/:title\" component={Detail}/>\n\t\t\t\t\n//detail组件\nconst {id,title} = this.props.match.params\n```\n\n- params传参\n\n  ```js\n  <link to='demo/18/zhangsan'/>\n  <Route path='demo/:id/name'\n  ```\n\n  接受参数: **this.props.match.params**\n\n- search传参\n\n  ```js\n  <link to='demo?id=18&zhangsan'/>\n  <Route path='demo'/>\n  ```\n\n  接受参数：**this.props.location.search**\n\n- state传参\n\n  ```js\n  <link to='demo' state={name:\"tom\"}/>\n  <Route path='demo'/>\n  ```\n\n  接受参数：**this.props.location.state**\n\n#### 8.编程式导航\n\n```js\nthis.prosp.history.push()\t\t\t\t\t\t\tthis.prosp.history.replace()\t\t\t\t\tthis.prosp.history.goBack()\nthis.prosp.history.goForward()\t\t\t\t\t\tthis.prosp.history.go()\n//prosP,location...等等只有路由组件才有\n```\n\n**BrowserRouter与HashRouter的区别**\n\n- 兼容性\n  - 不支持IE9及下\n  - 使用的 URL的哈希值\n- path\n  - 路径没有#\n- state的影响\n  - browserRouter无影响\n  - HashRouter刷新后导致路由state参数的丢失\n- 可以解决路径错误问题\n\n**withRouter**\n\n一个函数\n\n```js\nexport default withRouter(myApp)\n```\n\n使一般组件具有路由路由组件特有的api，返回值是一个新组件\n\n#### 9.使用antd组件库\n\n```js\n// npm i antd\nimport { Button } from \"antd\";\nimport 'antd/dist/antd.min.css';\n```\n\n*注意有的版本导入antd.css会有问题，此处改为antd.min.css*\n\n### 10.redux\n\n[参考阮一峰](https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)\n\n*:只要调用setSate，就能更新状态，更新dom\n\n**redux**：只能管理状态，但不会触发更新\n\n```js\ncomponentDidMount(){\n\t\t//检测redux中状态的变化，只要变化，就调用render\n\t\tstore.subscribe(()=>{\n\t\t\tthis.setState({}) //幌一下\n\t\t})\n}\n```\n\nsetState存在效率问题，此处是一个**小技巧**\n\n#### 1.监听单个组件\n\nredux 文件夹下\n\n*1.store.js*\n\n```js\nimport {createStore} from 'redux'\nimport countReducer from './count_reducer'\nexport default createStore(countReducer)\n```\n\n2.count_reducer\n\n```js\nconst initState = 0 //初始化状态\nexport default function countReducer(preState=initState,action){\n\t//从action对象中获取：type、data\n\tconst {type,data} = action\n\t//根据type决定如何加工数据\n\tswitch (type) {\n\t\tcase 'increment': //如果是加\n\t\t\treturn preState + data\n\t\tcase 'decrement': //若果是减\n\t\t\treturn preState - data\n\t\tdefault:\n\t\t\treturn preState\n\t}\n}\n```\n\n第一次调用的时候，preState为underfinded,因此需要赋一个默认值\n\n3.use.js 使用store\n\n```js\ncomponentDidMount(){\n\t\t//检测redux中状态的变化，只要变化，就调用render\n\t\tstore.subscribe(()=>{\n\t\t\tthis.setState({})\n\t\t})\n}\n<select ref={c => this.selectNumber = c}>\n\t\t\t\t\t<option value=\"1\">1</option>\n\t\t\t\t\t<option value=\"2\">2</option>\n\t\t\t\t\t<option value=\"3\">3</option>\n</select>\nimport store from '../../redux/store'\nfn = ()=>{\n\tconst {value} = this.selectNumber\n    store.dispatch({type:'increment',data:value*1})\n}\n```\n\n**此处一个重要的点就是监听store状态，只要改变了，就触发setState更新视图**，可以将监听放在index.js里面，进行全局监听\n\n```js\nstore.subscribe(()=>{\nReactDom.render(<APP/>,document.getElementById('root'))\n})\n```\n\n此处有diff算法兜底，不会造成大未改变页面更新\n\n**pnpm使用**\n\n使用 `pnpm install` 安装项目依赖时出现：`ERR_PNPM_PEER_DEP_ISSUES Unmet peer dependencies`\n\n问题原因：在 npm 3 中，不会再强制安装 peerDependencies （对等依赖）中所指定的包，而是通过警告的方式来提示我们。pnpm 会在全局缓存已经下载过的依赖包，如果全局缓存的依赖版本与项目 package.json 中指定的版本不一致，就会出现这种 hint 警告。\n\n**处理方案**\n\n1. 在项目的 `package.json` 中配置 `peerDependencyRules` 忽略对应的警告提示：\n\n   ```js\n   \"pnpm\": {\n       \"peerDependencyRules\": {\n         \"ignoreMissing\": [\n           \"react\"\n         ]\n       }\n     }\n   ```\n\n   \n\n2. 在 `.npmrc` 配置文件中添加 `strict-peer-dependencies=false` ，这意味着将关闭严格的对等依赖模式。操作命令如下：\n\n   ```js\n   npm config set strict-peer-dependencies=false\n   ```\n\n   \n\n**箭头函数补充**\n\n```js\ndata => 1   //返回1\ndata => {} //不会返回空对象，会把里面当作函数体\n-解决\ndata => ({})\n```\n\n","slug":"react_first","published":1,"updated":"2025-01-07T02:30:25.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0cr7001h572o1yjp0xnc","content":"<p>hexo对于{}处理会有问题</p>\n<h3 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1.基础语法\"></a>1.基础语法</h3><p>组件必须有一个根节点，组件名字必须大写</p>\n<p><strong>内联样式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div className=<span class=\"string\">&quot;arr&quot;</span> style=&#123;&#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;#F40&quot;</span>,<span class=\"attr\">fontSize</span>:<span class=\"number\">20</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &#123;arr&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>style如果是对象，要两个{}内嵌，写属性要加引号，fontSize小驼峰</p>\n<ol>\n<li><p>定义虚拟dom时候，不写引号</p>\n</li>\n<li><p>标签中混入js要用{}</p>\n</li>\n<li><p>jsx即是js和html混用，{}匹配js,&lt;&gt;匹配html</p>\n</li>\n<li><p>内联用{}内嵌写法</p>\n</li>\n<li><p>只有一个根标签</p>\n</li>\n<li><p>标签需要闭合</p>\n</li>\n<li><p>写一个不存在的标签</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写的小写标签当作浏览器标签识别 &lt;good&gt;</span><br><span class=\"line\">写的大写标签(首字母)当作component组件,如果不存在,报错com is not undefinded</span><br></pre></td></tr></table></figure>\n\n<p>如果{}里面是一个数组，可以自动遍历，如果是对象，则出错</p>\n<p><strong>表达式和代码</strong></p>\n<p>jsx里面{}只能是一个表达式，不能是js代码</p>\n<ul>\n<li>arr.map</li>\n<li>demo(1)</li>\n<li>const a &#x3D; function(){}</li>\n<li></li>\n<li>if</li>\n<li>for</li>\n<li>switch</li>\n</ul>\n</li>\n</ol>\n<p>dom.render()</p>\n<ul>\n<li>react解析组件标签，找到了Mycomponent</li>\n<li>发现组件时使用函数定义的，随后调用改函数，将返回的虚拟DOM转换为真实DOM,然后呈现在页面当中</li>\n</ul>\n<h3 id=\"2-两种组件写法\"><a href=\"#2-两种组件写法\" class=\"headerlink\" title=\"2.两种组件写法\"></a>2.两种组件写法</h3><ol>\n<li><p>函数式写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">ARRCOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./arr.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./myclass.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyApp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;angular&quot;</span>, <span class=\"string\">&quot;react&quot;</span>, <span class=\"string\">&quot;vue&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;myapp&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-logo&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;arr.map((item, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return (</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;index&#125;:&#123;item&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          );</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ARRCOM</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ARRCOM</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">MyClass</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyClass</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyApp</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>类写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>当前求和为：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>点我+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyClass</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-简单-x2F-复杂组件\"><a href=\"#3-简单-x2F-复杂组件\" class=\"headerlink\" title=\"3.简单&#x2F;复杂组件\"></a>3.简单&#x2F;复杂组件</h3><p>D:组件是否有状态 - 状态驱动页面</p>\n<p>ps:需要注意</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">State</span> 的更新可能是异步的</span><br><span class=\"line\">出于性能考虑，<span class=\"title class_\">React</span> 可能会把多个 <span class=\"title function_\">setState</span>() 调用合并成一个调用。</span><br><span class=\"line\"></span><br><span class=\"line\">因为 <span class=\"variable language_\">this</span>.<span class=\"property\">props</span> 和 <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</span><br></pre></td></tr></table></figure>\n\n<p><strong>父子组件传参数和生命周期</strong></p>\n<p>子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>It is &#123;this.props.date.toLocaleTimeString()&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyClass</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>父组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./myclass.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;myapp&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">MyClass</span> <span class=\"attr\">date</span>=<span class=\"string\">&#123;this.state.date&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyClass</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyApp</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>componentWillUnmount组件销毁时候触发，componentDidMount组件挂载的时候触发</strong></p>\n<p>ps（注意）:</p>\n<ol>\n<li>state和props时预先定义的，你也可以定义别的</li>\n<li>修改state需要使用到setSate构造函数的方法，别的方法修改报错</li>\n<li>直接在子组件通过this.props.xxx使用父组件传递的参数</li>\n<li>这里的合并是浅合并，所以 <code>this.setState(&#123;comments&#125;)</code> 完整保留了 <code>this.state.posts</code>， 但是完全替换了 <code>this.state.comments</code>。</li>\n</ol>\n<p>Official 阻止默认事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ActionLink</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;The link was clicked.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//e.preventDefault();不需要担心兼容性</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-state\"><a href=\"#3-state\" class=\"headerlink\" title=\"3.state\"></a>3.state</h3><p><strong>存疑</strong></p>\n<p>此处this.handleClick &#x3D; this.handleClick.bind(this)为es6的public class field，handleClick的this执行什么呢？</p>\n<p>不写下面那句话的话，this指向underfinded</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">isToggleOn</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 为了在回调中使用 `this`，这个绑定是必不可少的</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</span><br><span class=\"line\">        <span class=\"attr\">isToggleOn</span>: !state.<span class=\"property\">isToggleOn</span></span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果你没有使用public class fields 语法，你可以在回调中使用<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭头函数</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class LoggingButton extends React.Component &#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    console.log(&#x27;this is:&#x27;, this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 此语法确保 `handleClick` 内的 `this` 已被绑定。    return (      &lt;button onClick=&#123;() =&gt; this.handleClick()&#125;&gt;        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据逻辑判断进行条件渲染</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;unreadMessages.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          You have &#123;unreadMessages.length&#125; unread messages.</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>之所以能这样做，是因为在 JavaScript 中，<code>true &amp;&amp; expression</code> 总是会返回 <code>expression</code>, 而 <code>false &amp;&amp; expression</code> 总是会返回 <code>false</code>。</p>\n<p>类中的方法默认开启严格模式</p>\n<p>setState执行的是合并操作，不会把其他属性删除</p>\n<p>super(props)的操作，必须在this.xx &#x3D; xx前面</p>\n<p>条件渲染中，当状态改变之后组件重新渲染</p>\n<h5 id=\"state的简写方式\"><a href=\"#state的简写方式\" class=\"headerlink\" title=\"state的简写方式\"></a>state的简写方式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">demo1</span> =<span class=\"variable language_\">this</span>.<span class=\"property\">demo1</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>) </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    demo1 = demo1.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">## 相当于在person添加一个属性</span><br></pre></td></tr></table></figure>\n\n<p>在优化函数写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化状态</span></span><br><span class=\"line\">    state = &#123;<span class=\"attr\">value</span>:<span class=\"string\">&#x27;value&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">//自定义方法 -- 赋值语句和箭头函数相结合</span></span><br><span class=\"line\">    changeColor =<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果写普通函数还是不行，箭头函数没有自己的this,往外找，找到了当前函数的外层，即是Person的实例化对象</span></span><br></pre></td></tr></table></figure>\n\n<p>更新组件的状态 - &gt; 组件重新渲染</p>\n<h3 id=\"4-props\"><a href=\"#4-props\" class=\"headerlink\" title=\"4.props\"></a>4.props</h3><p><strong>1.props语法糖</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;a&quot;</span>, <span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\">&lt;person age=&#123;<span class=\"number\">19</span>&#125;/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">person</span> &#123;<span class=\"attr\">...obj</span>&#125;/&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//只在标签传递有效</span></span><br></pre></td></tr></table></figure>\n\n<p>array.reduce() 求和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">..nums</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nums.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">preVal,curVal</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> preVal + curVal</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>–标签属性类型的限制和非必须限制–</p>\n<p>指定默认值–</p>\n<p>poops是只读的，单向数据流</p>\n<p>对props进行限制 -<strong>Person.propsTypes</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"title class_\">React</span>.<span class=\"property\">PropTypes</span>.<span class=\"property\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//上述被启用 在15版本以后</span></span><br><span class=\"line\"><span class=\"comment\">//16之后单独抽出porp-types</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"title class_\">React</span>.<span class=\"property\">PropTypes</span>.<span class=\"property\">string</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">defaultProps</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//isRequired-是否非必须</span></span><br><span class=\"line\"><span class=\"comment\">//defaultProps-默认值</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>传递方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">speak</span>:<span class=\"title class_\">React</span>.<span class=\"property\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//string 区别于类型的String</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">speak</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;speak&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;person speak=&#123;speak&#125;/&gt;</span><br><span class=\"line\"><span class=\"comment\">// -&gt;类型限制 function - func</span></span><br></pre></td></tr></table></figure>\n\n<p>此种写法写在class外部 - 移除到class内部</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>constructor和super</strong></p>\n<p>完全可以省略，constructor主要是给state初始化，给实例绑定方法，完全可以使用public class field写法替代。如果写了构造器constructor，一起把super加上，否则会出现问题，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">porps</span>)  <span class=\"comment\">// 结果是underfinded</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造器是否接受props,传递给super,取决于是否需要在constructor通过this拿到props</p>\n<h5 id=\"函数式组件使用props-只能使用props\"><a href=\"#函数式组件使用props-只能使用props\" class=\"headerlink\" title=\"函数式组件使用props(只能使用props)\"></a>函数式组件使用props(只能使用props)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">props</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;age,name,sex&#125; = props</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>apple<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">propTypes</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">defaultProps</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//props接受所有的传递参数，Object</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-refs\"><a href=\"#5-refs\" class=\"headerlink\" title=\"5.refs\"></a>5.refs</h3><p>通过refs拿到dom</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span>&#123;</span><br><span class=\"line\">    showData = <span class=\"function\">() =&gt;</span> &#123;&#125; <span class=\"comment\">//fn</span></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>三种写法</strong></p>\n<p><strong>1.string写法（后续可能被移除</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input ref=<span class=\"string\">&quot;getEle&quot;</span>&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">refs</span>.<span class=\"property\">getEle</span>.<span class=\"title function_\">focus</span>()</span><br></pre></td></tr></table></figure>\n\n<p>tips:提示使用creatRef写法，warning</p>\n<p><strong>2.回调写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input ref=&#123;<span class=\"function\">(<span class=\"params\">dom</span>)=&gt;</span>&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">domNode</span> = dom &#125;&#125;&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">domNode</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">domNode</span>.<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&quot;#f40&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//此处的dom即当前节点 &lt;span&gt;ele&lt;/span&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>ps:回调函数的内联函数写法在组件更新时候(state&#x2F;条件渲染)，会触发两次，第一次获取的domNode为null</p>\n<p>–&gt; <strong>改进</strong>class的绑定写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outFn = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e <span class=\"comment\">//错误写法</span></span><br><span class=\"line\">outFn = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">input1</span> = c <span class=\"comment\">//domnode绑定给input1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input ref=&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">outFn</span>&#125;&gt;<span class=\"keyword\">class</span>绑定语法&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">input1</span>.<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&quot;#f40&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>outFn &#x3D; e &#x3D;&gt; e</p>\n<p>拿到的只有当前这个函数，拿不到dom</p>\n<p><strong>3.createRef</strong>写法</p>\n<p>creatRef调用后返回一个容器，改容器可以储存被ref所标识的节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getEle = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">&lt;input ref=&#123;getEle&#125;&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">getEle</span>.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123;<span class=\"attr\">current</span>: span&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">try</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>); \t\t\t<span class=\"comment\">//有效</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">check</span>.<span class=\"property\">current</span>.<span class=\"property\">color</span> = <span class=\"string\">&quot;#f40&quot;</span>\t\t<span class=\"comment\">//无效</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">check</span>.<span class=\"property\">current</span>.<span class=\"property\">innerHtml</span> = <span class=\"string\">&quot;#f40&quot;</span>;  <span class=\"comment\">//无效</span></span><br></pre></td></tr></table></figure>\n\n<p>该容器专人专用（相当于原生获取dom)，再次被赋值会被覆盖</p>\n<p><strong>关于onClick和onclick</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有的原生事件都被二次封装</span><br><span class=\"line\">/<span class=\"number\">1</span>）通过onXXX属性指定事件处理函数（主要大小写</span><br><span class=\"line\">\ta&gt;react使用的是自定义（合成）事件，而不是使用的原生的<span class=\"variable constant_\">DOM</span>事件， --为了更好的兼容性</span><br><span class=\"line\">    b&gt;react中的事件委托方式处理的（委托给组件最外层的元素）--高效</span><br><span class=\"line\">/<span class=\"number\">2</span>）通过event.<span class=\"property\">target</span>得到发送事件的发生源</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>jsx的注释不同于其他注释</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"comment\">/*...js代码*/</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-高阶函数\"><a href=\"#6-高阶函数\" class=\"headerlink\" title=\"6.高阶函数\"></a>6.<strong>高阶函数</strong></h3><p>定义：如果一个函数符号下面2个规范中的任何一个，那该函数就是高阶函数</p>\n<ul>\n<li><p>若A函数，接受的是一个函数，那么A就可以称之为高阶函数</p>\n</li>\n<li><p>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数</p>\n<p><strong>函数的柯里化</strong>：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">折叠技巧</span><br><span class=\"line\"><span class=\"comment\">//#region endregion#//</span></span><br></pre></td></tr></table></figure>\n\n<p>常见的高阶函数：Promise,  setTimeout , array.map</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">saveFormData = <span class=\"function\">(<span class=\"params\">dataType</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;[dataType]:event.<span class=\"property\">target</span>.<span class=\"property\">value</span>&#125;)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.saveFormData(</span>&#x27;<span class=\"attr\">username</span>&#x27;)&#125; <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.saveFormData(</span>&#x27;<span class=\"attr\">password</span>&#x27;)&#125; <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t)</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>非柯里化写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">saveFormData = <span class=\"function\">(<span class=\"params\">dataType,event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;[dataType]:event.<span class=\"property\">target</span>.<span class=\"property\">value</span>&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;,event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;,event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t)</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原因：onchange函数是被自动调用的，需要的是一个函数，如果写成this.fn()表示调用的是当前函数的返回值</p>\n<p>注意：只要组件state修改，组件就会重新挂载-setState</p>\n<p>定时器的使用时机：挂载的时候，开启定时器</p>\n<p><strong>forceUpdate(强制更新</strong></p>\n<p>触发两个钩子</p>\n<ul>\n<li>componentWillUpdate - </li>\n<li>render - ..</li>\n<li>不更新任何state强制更新</li>\n</ul>\n<p><strong>componentWillReceiveProps</strong>生命周期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">并不会在第一次传递props调用，只会在porps更新时调用</span><br></pre></td></tr></table></figure>\n\n<p>1.初始化阶段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>constructor</span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"title function_\">conponentWillMount</span>()</span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"title function_\">render</span>()</span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"title function_\">componentDidMount</span>()</span><br></pre></td></tr></table></figure>\n\n<p>2.更新阶段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span><span class=\"title function_\">shouldComponentUpdate</span>() <span class=\"comment\">//有一个阀门，必须返回一个boolean，是否继续执行</span></span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"title function_\">componentWillUpdate</span>()</span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"title function_\">remder</span>() </span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"title function_\">conponentDidMount</span>()</span><br></pre></td></tr></table></figure>\n\n<p>3.销毁阶段</p>\n<p>ReactDom.unmountComponentAtNode()触发 –销毁节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentWillUnmount</span>()</span><br></pre></td></tr></table></figure>\n\n<p>常用钩子：</p>\n<p>a.componentDidMount()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.初始化事件</span><br><span class=\"line\">2.网络请求</span><br></pre></td></tr></table></figure>\n\n<p>b.componentWillUnmount()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清理定时器</span><br></pre></td></tr></table></figure>\n\n<p>c.render()</p>\n<p><em>bootCDN</em></p>\n<h3 id=\"7-新版生命周期\"><a href=\"#7-新版生命周期\" class=\"headerlink\" title=\"7.新版生命周期\"></a>7.<strong>新版生命周期</strong></h3><p><em>新版本可以使用旧的生命周期</em> - waring-不被推荐使用</p>\n<p>UNSAFE_componentWillMount  加入UNSAFE</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要加<span class=\"variable constant_\">UNSAFE</span></span><br><span class=\"line\"><span class=\"title function_\">UNSAFE_componentWillMount</span>()</span><br><span class=\"line\"><span class=\"title function_\">UNSAFE_componentWillReceiveProps</span>()</span><br><span class=\"line\"><span class=\"title function_\">UNSAFE_componentWillUpdate</span>()</span><br></pre></td></tr></table></figure>\n\n<p>新版废弃上述三个钩子，新增两个钩子</p>\n<h4 id=\"1-getDerivedStateFromPorps-derived派生\"><a href=\"#1-getDerivedStateFromPorps-derived派生\" class=\"headerlink\" title=\"1.getDerivedStateFromPorps (derived派生)\"></a><strong>1.getDerivedStateFromPorps (derived派生)</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getDerivefStateFromPorps</span>() </span><br><span class=\"line\">返回状态对象，或者<span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>1.返回null</p>\n<p>2.返回object</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> &#123;<span class=\"attr\">count</span>:<span class=\"number\">108</span>&#125;</span><br><span class=\"line\">如果当前state有count,不能修改</span><br></pre></td></tr></table></figure>\n\n<p>使用场景：即state取决于props</p>\n<p>缺点：代码冗余，定时器难以维护,组件难以维护</p>\n<h4 id=\"2-getSnapshotBeforeUpdate\"><a href=\"#2-getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"2.getSnapshotBeforeUpdate\"></a><strong>2.getSnapshotBeforeUpdate</strong></h4><p>–在最近一次渲染输出（提交到 DOM 节点）之前调用。</p>\n<p>（快照）<em>更新之前获取快照</em> -  任何值都可以为一个快照值</p>\n<p>必须返回一个快照，或者null</p>\n<p>component</p>\n<h4 id=\"3-diff算法\"><a href=\"#3-diff算法\" class=\"headerlink\" title=\"3.diff算法\"></a><strong>3.diff算法</strong></h4><p>遍历列表的时候不要使用inde作为key</p>\n<p>PS:</p>\n<p>简单：key时虚拟Dom对象的标识</p>\n<p>详细：当状态中的数据发生改变时，rract会根据新数据生成新的虚拟都没,随后react进行，新老dom进行diff比较</p>\n<p><strong>比较规则：</strong></p>\n<p>​    a.旧虚拟dom找到了禹新dom相同的key</p>\n<p>​        1)如果内容没变，那么直接使用之前的dom,</p>\n<p>​        2)如果不同的话，则生成新的dom,替换旧的dom</p>\n<p>  b.index作为key,可能会引发的问题、</p>\n<p>​        1.索引值被打乱，造成无用的dom更新（效率低，无用的资源浪费</p>\n<p>​        2.需求：</p>\n<h4 id=\"4-样式冲突（模块化解决\"><a href=\"#4-样式冲突（模块化解决\" class=\"headerlink\" title=\"4.样式冲突（模块化解决\"></a><strong>4.样式冲突（模块化解决</strong></h4><p>后面引入的覆盖之前引用的</p>\n<p>less 嵌套</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hello <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a.module.css&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样之后当前css的样式都以对象的形式，包含在hello里面</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span> = &#123;hello.<span class=\"property\">title</span>&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此时title为类选择器，如果为其他选择器怎么办？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:<span class=\"string\">&quot;#fff&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-插件使用\"><a href=\"#5-插件使用\" class=\"headerlink\" title=\"5.插件使用\"></a><strong>5.插件使用</strong></h4><p>代码块</p>\n<h4 id=\"6-受控组件和非受控组件浅析\"><a href=\"#6-受控组件和非受控组件浅析\" class=\"headerlink\" title=\"6.受控组件和非受控组件浅析\"></a><strong>6.受控组件和非受控组件浅析</strong></h4><p>checkout 可以写一个defaultValue，后续defaultChecked的值可以改，如果使用checked,则必须使用onChange来改变checkout选中状态，此处defaultChecked的写法就是非受控组件，而使用onChange函数自己改变状态的，则是受控组件</p>\n<p><em>解构技巧</em></p>\n<p>const {…} &#x3D; this.props</p>\n<p>const {…} &#x3D; this</p>\n<h4 id=\"7-组件传参\"><a href=\"#7-组件传参\" class=\"headerlink\" title=\"7.组件传参\"></a><strong>7.组件传参</strong></h4><ul>\n<li><p>父子组件传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;item todos=&#123;todos&#125;&gt; </span><br><span class=\"line\"><span class=\"comment\">//父组件将其内部的变量 todos传给子组件items,子组件接受到的值为todos</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">item</span> &#123;<span class=\"attr\">...todos</span>&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">//解构写法 - 将todos这个对象的值逐一的传递到子组件</span></span><br><span class=\"line\"><span class=\"language-xml\">    </span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>子传父 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原理：父组件向子组件传递一个函数（通过props)，然后子组件调用当前函数</span><br></pre></td></tr></table></figure>\n\n<p>id库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uuid - 唯一id</span><br><span class=\"line\">nanoid - 比uuid库小，功能一样</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><em>浅拷贝小tips</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;..<span class=\"property\">obj</span>,<span class=\"attr\">b</span>:<span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>todolist案例中更改状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateTodo = <span class=\"function\">(<span class=\"params\">id,done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;todos&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    todos.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">todoObj</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(todoObj.<span class=\"property\">id</span> === id) <span class=\"keyword\">return</span> &#123;...todoObj,done&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> todoObj</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>array.reduce()</p>\n<h4 id=\"8-消息订阅与发布\"><a href=\"#8-消息订阅与发布\" class=\"headerlink\" title=\"8.消息订阅与发布\"></a><strong>8.消息订阅与发布</strong></h4><p>订阅与取消订阅</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// publish 发布消息 消息名为：publish_one 内容为：This is publish</span></span><br><span class=\"line\">    <span class=\"title class_\">PubSub</span>.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&quot;publish_one&quot;</span>, <span class=\"function\">(<span class=\"params\">msg, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">userData</span>: data &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//取消消息订阅</span></span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">PubSub</span>.<span class=\"title function_\">unsubscribe</span>(<span class=\"string\">&quot;publish_one&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>发布消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">PubSub</span>.<span class=\"title function_\">publish</span>(<span class=\"string\">&quot;publish_one&quot;</span>, data.<span class=\"property\">data</span>.<span class=\"property\">items</span>);</span><br></pre></td></tr></table></figure>\n\n<p>PS：注意在需要消息的地方订阅，在传递数据的地方发布消息，记得在组件销毁之前取消订阅</p>\n<p><strong>fetch</strong></p>\n<ul>\n<li>xhr(传统ajax)<ul>\n<li>jquery</li>\n<li>axios</li>\n</ul>\n</li>\n<li>fetch<ul>\n<li>关注分离(复杂的事情简单化</li>\n</ul>\n</li>\n</ul>\n<p>关注分离具体到发送请求：将请求服务器和拿到数据分开处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">`url`</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.<span class=\"title function_\">josn</span>()</span><br><span class=\"line\">&#125;),<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;connect failed&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>()</span><br><span class=\"line\">    <span class=\"comment\">//返回一个初始化的promise,获取数据失败，直接返回，不走下一步回调</span></span><br><span class=\"line\">&#125;.<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;get data success&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"function\">()=&gt;</span>&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//此处返回的response.json()的为一个promise,then链式调用的为返回的promise,只走成功的或者失败的回调，不会同时走，即下面的一个.then为上面成功或者失败的回调</span></span><br><span class=\"line\"><span class=\"comment\">//使用catch代替失败的回调</span></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">`url`</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.<span class=\"title function_\">josn</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;get data success&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"function\">()=&gt;</span>&#123;&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err) <span class=\"comment\">//统一处理错误</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//await</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`url`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;请求出错&#x27;</span>,err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>fetch使用较少，老版本浏览器不支持fetch请求</p>\n<h3 id=\"8-路由（旧版\"><a href=\"#8-路由（旧版\" class=\"headerlink\" title=\"8.路由（旧版\"></a>8.路由（旧版</h3><p>SPA:单页面应用</p>\n<ul>\n<li><p>只有一个页面</p>\n</li>\n<li><p>无刷更新数据</p>\n</li>\n<li><p>数据请求，异步展示</p>\n</li>\n</ul>\n<h4 id=\"1-react-router-dom-5\"><a href=\"#1-react-router-dom-5\" class=\"headerlink\" title=\"1.react-router-dom 5\"></a>1.react-router-dom 5</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#1</span></span><br><span class=\"line\">  &lt;<span class=\"title class_\">React</span>.<span class=\"property\">StrictMode</span>&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\">  &lt;/<span class=\"title class_\">React</span>.<span class=\"property\">StrictMode</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">//#2</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">activeClassName</span>=<span class=\"string\">&quot;ative&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&quot;list-group-item&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">to</span>=<span class=\"string\">&quot;/http&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          http</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#3</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/http&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Basic&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>路由器分类</p>\n<ul>\n<li>BrowserRouter</li>\n<li>HashRouter</li>\n</ul>\n<h4 id=\"1-link\"><a href=\"#1-link\" class=\"headerlink\" title=\"1.link\"></a>1.link</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">BrowserRouter</span>&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">linK</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">link</span>&gt;</span></span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">BrowserRouter</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>link都需要被router包裹，故在最大的app外面包裹browserRouter</p>\n<p>link被转化为A标签，</p>\n<h4 id=\"2-navlink\"><a href=\"#2-navlink\" class=\"headerlink\" title=\"2.navlink\"></a>2.navlink</h4><p>当前被点击的内容加一个navlink类名（默认，可以加一个activeClassName绑定一个类名</p>\n<h4 id=\"3-switch\"><a href=\"#3-switch\" class=\"headerlink\" title=\"3.switch\"></a>3.switch</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">switch</span>&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/about&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;About&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/<span class=\"keyword\">switch</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>用switch包裹的组件集合，匹配到了第一个就不会往下匹配，</p>\n<p>Switch可以提高路由匹配效率(单一匹配)。</p>\n<h4 id=\"4-多级路由的样式更新问题\"><a href=\"#4-多级路由的样式更新问题\" class=\"headerlink\" title=\"4.多级路由的样式更新问题\"></a>4.多级路由的样式更新问题</h4><p>​        1.public&#x2F;index.html 中 引入样式时不写 .&#x2F; 写 &#x2F; （常用）</p>\n<p>​        2.public&#x2F;index.html 中 引入样式时不写 .&#x2F; 写 %PUBLIC_URL% （常用）</p>\n<p>​        3.如果是hasuRouter则没有问题</p>\n<h4 id=\"5-模糊匹配\"><a href=\"#5-模糊匹配\" class=\"headerlink\" title=\"5.模糊匹配\"></a>5.模糊匹配</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">NavLink</span></span><br><span class=\"line\">          activeClassName=<span class=\"string\">&quot;ative&quot;</span></span><br><span class=\"line\">          className=<span class=\"string\">&quot;list-group-item&quot;</span></span><br><span class=\"line\">          to=<span class=\"string\">&quot;/http/aa&quot;</span></span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          http</span><br><span class=\"line\">&lt;/<span class=\"title class_\">NavLink</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">activeClassName</span>=<span class=\"string\">&quot;ative&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&quot;list-group-item&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">to</span>=<span class=\"string\">&quot;/a/http/aa&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          http</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#3</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/http&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Basic&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>当前情况下跳转至&#x2F;http&#x2F;aa可以匹配到Basic组件（模糊匹配）,而不能匹配到&#x2F;a&#x2F;http&#x2F;aa</p>\n<p>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p>\n<p><strong>精准匹配</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Route</span> extra=&#123;<span class=\"literal\">true</span>&#125; path=<span class=\"string\">&quot;/http&quot;</span> component=&#123;<span class=\"title class_\">Basic</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>重定向Redirect</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">switch</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/http&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Basic&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/input&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Basic&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">redirect</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/a&quot;</span>/&gt;</span></span></span><br><span class=\"line\">    &lt;/<span class=\"keyword\">switch</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当http,input都无法匹配的时候，重定向到..</p>\n<p>一般把redirect写在所有的路由下方，当所有的都无法匹配时候，redirct—</p>\n<h4 id=\"6-嵌套路由\"><a href=\"#6-嵌套路由\" class=\"headerlink\" title=\"6.嵌套路由\"></a>6.嵌套路由</h4><p>PS:不能使用严格匹配，会导致路由丢失</p>\n<ul>\n<li>注册子路由时候，加上父路由的path值</li>\n<li>路由的匹配是按照注册路由的顺序进行的</li>\n</ul>\n<h4 id=\"7-向路由组件传参\"><a href=\"#7-向路由组件传参\" class=\"headerlink\" title=\"7.向路由组件传参\"></a>7.向路由组件传参</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Link</span> to=&#123;<span class=\"string\">`/home/message/detail/<span class=\"subst\">$&#123;msgObj.id&#125;</span>/<span class=\"subst\">$&#123;msgObj.title&#125;</span>`</span>&#125;&gt;&#123;msgObj.<span class=\"property\">title</span>&#125;&lt;/<span class=\"title class_\">Link</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/home/message/detail/:id/:title&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//detail组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;id,title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">match</span>.<span class=\"property\">params</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>params传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link to=<span class=\"string\">&#x27;demo/18/zhangsan&#x27;</span>/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;demo/:id/name&#x27;</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p>接受参数: <strong>this.props.match.params</strong></p>\n</li>\n<li><p>search传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link to=<span class=\"string\">&#x27;demo?id=18&amp;zhangsan&#x27;</span>/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;demo&#x27;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>接受参数：<strong>this.props.location.search</strong></p>\n</li>\n<li><p>state传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link to=<span class=\"string\">&#x27;demo&#x27;</span> state=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;tom&quot;</span>&#125;/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;demo&#x27;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>接受参数：<strong>this.props.location.state</strong></p>\n</li>\n</ul>\n<h4 id=\"8-编程式导航\"><a href=\"#8-编程式导航\" class=\"headerlink\" title=\"8.编程式导航\"></a>8.编程式导航</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">push</span>()\t\t\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">replace</span>()\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">goBack</span>()</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">goForward</span>()\t\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">go</span>()</span><br><span class=\"line\"><span class=\"comment\">//prosP,location...等等只有路由组件才有</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>BrowserRouter与HashRouter的区别</strong></p>\n<ul>\n<li>兼容性<ul>\n<li>不支持IE9及下</li>\n<li>使用的 URL的哈希值</li>\n</ul>\n</li>\n<li>path<ul>\n<li>路径没有#</li>\n</ul>\n</li>\n<li>state的影响<ul>\n<li>browserRouter无影响</li>\n<li>HashRouter刷新后导致路由state参数的丢失</li>\n</ul>\n</li>\n<li>可以解决路径错误问题</li>\n</ul>\n<p><strong>withRouter</strong></p>\n<p>一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withRouter</span>(myApp)</span><br></pre></td></tr></table></figure>\n\n<p>使一般组件具有路由路由组件特有的api，返回值是一个新组件</p>\n<h4 id=\"9-使用antd组件库\"><a href=\"#9-使用antd组件库\" class=\"headerlink\" title=\"9.使用antd组件库\"></a>9.使用antd组件库</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm i antd</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Button</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;antd&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;antd/dist/antd.min.css&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><em>注意有的版本导入antd.css会有问题，此处改为antd.min.css</em></p>\n<h3 id=\"10-redux\"><a href=\"#10-redux\" class=\"headerlink\" title=\"10.redux\"></a>10.redux</h3><p><a href=\"https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\">参考阮一峰</a></p>\n<p>*:只要调用setSate，就能更新状态，更新dom</p>\n<p><strong>redux</strong>：只能管理状态，但不会触发更新</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class=\"line\">\t\tstore.<span class=\"title function_\">subscribe</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;&#125;) <span class=\"comment\">//幌一下</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>setState存在效率问题，此处是一个<strong>小技巧</strong></p>\n<h4 id=\"1-监听单个组件\"><a href=\"#1-监听单个组件\" class=\"headerlink\" title=\"1.监听单个组件\"></a>1.监听单个组件</h4><p>redux 文件夹下</p>\n<p><em>1.store.js</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> countReducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./count_reducer&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createStore</span>(countReducer)</span><br></pre></td></tr></table></figure>\n\n<p>2.count_reducer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initState = <span class=\"number\">0</span> <span class=\"comment\">//初始化状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">countReducer</span>(<span class=\"params\">preState=initState,action</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//从action对象中获取：type、data</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123;type,data&#125; = action</span><br><span class=\"line\">\t<span class=\"comment\">//根据type决定如何加工数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;increment&#x27;</span>: <span class=\"comment\">//如果是加</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> preState + data</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;decrement&#x27;</span>: <span class=\"comment\">//若果是减</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> preState - data</span><br><span class=\"line\">\t\t<span class=\"attr\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> preState</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一次调用的时候，preState为underfinded,因此需要赋一个默认值</p>\n<p>3.use.js 使用store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class=\"line\">\t\tstore.<span class=\"title function_\">subscribe</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;select ref=&#123;<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectNumber</span> = c&#125;&gt;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../redux/store&#x27;</span></span><br><span class=\"line\">fn = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123;value&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">selectNumber</span></span><br><span class=\"line\">    store.<span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;increment&#x27;</span>,<span class=\"attr\">data</span>:value*<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>此处一个重要的点就是监听store状态，只要改变了，就触发setState更新视图</strong>，可以将监听放在index.js里面，进行全局监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"title class_\">ReactDom</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">APP</span>/&gt;</span></span>,<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>此处有diff算法兜底，不会造成大未改变页面更新</p>\n<p><strong>pnpm使用</strong></p>\n<p>使用 <code>pnpm install</code> 安装项目依赖时出现：<code>ERR_PNPM_PEER_DEP_ISSUES Unmet peer dependencies</code></p>\n<p>问题原因：在 npm 3 中，不会再强制安装 peerDependencies （对等依赖）中所指定的包，而是通过警告的方式来提示我们。pnpm 会在全局缓存已经下载过的依赖包，如果全局缓存的依赖版本与项目 package.json 中指定的版本不一致，就会出现这种 hint 警告。</p>\n<p><strong>处理方案</strong></p>\n<ol>\n<li><p>在项目的 <code>package.json</code> 中配置 <code>peerDependencyRules</code> 忽略对应的警告提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;pnpm&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;peerDependencyRules&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;ignoreMissing&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在 <code>.npmrc</code> 配置文件中添加 <code>strict-peer-dependencies=false</code> ，这意味着将关闭严格的对等依赖模式。操作命令如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set strict-peer-dependencies=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>箭头函数补充</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data =&gt; <span class=\"number\">1</span>   <span class=\"comment\">//返回1</span></span><br><span class=\"line\">data =&gt; &#123;&#125; <span class=\"comment\">//不会返回空对象，会把里面当作函数体</span></span><br><span class=\"line\">-解决</span><br><span class=\"line\">data =&gt; (&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>hexo对于{}处理会有问题</p>\n<h3 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1.基础语法\"></a>1.基础语法</h3><p>组件必须有一个根节点，组件名字必须大写</p>\n<p><strong>内联样式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div className=<span class=\"string\">&quot;arr&quot;</span> style=&#123;&#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;#F40&quot;</span>,<span class=\"attr\">fontSize</span>:<span class=\"number\">20</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &#123;arr&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>style如果是对象，要两个{}内嵌，写属性要加引号，fontSize小驼峰</p>\n<ol>\n<li><p>定义虚拟dom时候，不写引号</p>\n</li>\n<li><p>标签中混入js要用{}</p>\n</li>\n<li><p>jsx即是js和html混用，{}匹配js,&lt;&gt;匹配html</p>\n</li>\n<li><p>内联用{}内嵌写法</p>\n</li>\n<li><p>只有一个根标签</p>\n</li>\n<li><p>标签需要闭合</p>\n</li>\n<li><p>写一个不存在的标签</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写的小写标签当作浏览器标签识别 &lt;good&gt;</span><br><span class=\"line\">写的大写标签(首字母)当作component组件,如果不存在,报错com is not undefinded</span><br></pre></td></tr></table></figure>\n\n<p>如果{}里面是一个数组，可以自动遍历，如果是对象，则出错</p>\n<p><strong>表达式和代码</strong></p>\n<p>jsx里面{}只能是一个表达式，不能是js代码</p>\n<ul>\n<li>arr.map</li>\n<li>demo(1)</li>\n<li>const a &#x3D; function(){}</li>\n<li></li>\n<li>if</li>\n<li>for</li>\n<li>switch</li>\n</ul>\n</li>\n</ol>\n<p>dom.render()</p>\n<ul>\n<li>react解析组件标签，找到了Mycomponent</li>\n<li>发现组件时使用函数定义的，随后调用改函数，将返回的虚拟DOM转换为真实DOM,然后呈现在页面当中</li>\n</ul>\n<h3 id=\"2-两种组件写法\"><a href=\"#2-两种组件写法\" class=\"headerlink\" title=\"2.两种组件写法\"></a>2.两种组件写法</h3><ol>\n<li><p>函数式写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">ARRCOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./arr.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./myclass.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyApp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;angular&quot;</span>, <span class=\"string\">&quot;react&quot;</span>, <span class=\"string\">&quot;vue&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;myapp&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App-logo&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;arr.map((item, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return (</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;index&#125;:&#123;item&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          );</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ARRCOM</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ARRCOM</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">MyClass</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyClass</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyApp</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>类写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>当前求和为：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>点我+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyClass</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-简单-x2F-复杂组件\"><a href=\"#3-简单-x2F-复杂组件\" class=\"headerlink\" title=\"3.简单&#x2F;复杂组件\"></a>3.简单&#x2F;复杂组件</h3><p>D:组件是否有状态 - 状态驱动页面</p>\n<p>ps:需要注意</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">State</span> 的更新可能是异步的</span><br><span class=\"line\">出于性能考虑，<span class=\"title class_\">React</span> 可能会把多个 <span class=\"title function_\">setState</span>() 调用合并成一个调用。</span><br><span class=\"line\"></span><br><span class=\"line\">因为 <span class=\"variable language_\">this</span>.<span class=\"property\">props</span> 和 <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</span><br></pre></td></tr></table></figure>\n\n<p><strong>父子组件传参数和生命周期</strong></p>\n<p>子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>It is &#123;this.props.date.toLocaleTimeString()&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyClass</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>父组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./myclass.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;myapp&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">MyClass</span> <span class=\"attr\">date</span>=<span class=\"string\">&#123;this.state.date&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyClass</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MyApp</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>componentWillUnmount组件销毁时候触发，componentDidMount组件挂载的时候触发</strong></p>\n<p>ps（注意）:</p>\n<ol>\n<li>state和props时预先定义的，你也可以定义别的</li>\n<li>修改state需要使用到setSate构造函数的方法，别的方法修改报错</li>\n<li>直接在子组件通过this.props.xxx使用父组件传递的参数</li>\n<li>这里的合并是浅合并，所以 <code>this.setState(&#123;comments&#125;)</code> 完整保留了 <code>this.state.posts</code>， 但是完全替换了 <code>this.state.comments</code>。</li>\n</ol>\n<p>Official 阻止默认事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ActionLink</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;The link was clicked.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//e.preventDefault();不需要担心兼容性</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-state\"><a href=\"#3-state\" class=\"headerlink\" title=\"3.state\"></a>3.state</h3><p><strong>存疑</strong></p>\n<p>此处this.handleClick &#x3D; this.handleClick.bind(this)为es6的public class field，handleClick的this执行什么呢？</p>\n<p>不写下面那句话的话，this指向underfinded</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">isToggleOn</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 为了在回调中使用 `this`，这个绑定是必不可少的</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">handleClick</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</span><br><span class=\"line\">        <span class=\"attr\">isToggleOn</span>: !state.<span class=\"property\">isToggleOn</span></span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果你没有使用public class fields 语法，你可以在回调中使用<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭头函数</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class LoggingButton extends React.Component &#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    console.log(&#x27;this is:&#x27;, this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 此语法确保 `handleClick` 内的 `this` 已被绑定。    return (      &lt;button onClick=&#123;() =&gt; this.handleClick()&#125;&gt;        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据逻辑判断进行条件渲染</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;unreadMessages.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          You have &#123;unreadMessages.length&#125; unread messages.</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>之所以能这样做，是因为在 JavaScript 中，<code>true &amp;&amp; expression</code> 总是会返回 <code>expression</code>, 而 <code>false &amp;&amp; expression</code> 总是会返回 <code>false</code>。</p>\n<p>类中的方法默认开启严格模式</p>\n<p>setState执行的是合并操作，不会把其他属性删除</p>\n<p>super(props)的操作，必须在this.xx &#x3D; xx前面</p>\n<p>条件渲染中，当状态改变之后组件重新渲染</p>\n<h5 id=\"state的简写方式\"><a href=\"#state的简写方式\" class=\"headerlink\" title=\"state的简写方式\"></a>state的简写方式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">demo1</span> =<span class=\"variable language_\">this</span>.<span class=\"property\">demo1</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>) </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    demo1 = demo1.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">## 相当于在person添加一个属性</span><br></pre></td></tr></table></figure>\n\n<p>在优化函数写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化状态</span></span><br><span class=\"line\">    state = &#123;<span class=\"attr\">value</span>:<span class=\"string\">&#x27;value&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">//自定义方法 -- 赋值语句和箭头函数相结合</span></span><br><span class=\"line\">    changeColor =<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果写普通函数还是不行，箭头函数没有自己的this,往外找，找到了当前函数的外层，即是Person的实例化对象</span></span><br></pre></td></tr></table></figure>\n\n<p>更新组件的状态 - &gt; 组件重新渲染</p>\n<h3 id=\"4-props\"><a href=\"#4-props\" class=\"headerlink\" title=\"4.props\"></a>4.props</h3><p><strong>1.props语法糖</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;a&quot;</span>, <span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\">&lt;person age=&#123;<span class=\"number\">19</span>&#125;/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">person</span> &#123;<span class=\"attr\">...obj</span>&#125;/&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//只在标签传递有效</span></span><br></pre></td></tr></table></figure>\n\n<p>array.reduce() 求和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">..nums</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nums.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">preVal,curVal</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> preVal + curVal</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>–标签属性类型的限制和非必须限制–</p>\n<p>指定默认值–</p>\n<p>poops是只读的，单向数据流</p>\n<p>对props进行限制 -<strong>Person.propsTypes</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"title class_\">React</span>.<span class=\"property\">PropTypes</span>.<span class=\"property\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//上述被启用 在15版本以后</span></span><br><span class=\"line\"><span class=\"comment\">//16之后单独抽出porp-types</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"title class_\">React</span>.<span class=\"property\">PropTypes</span>.<span class=\"property\">string</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">defaultProps</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;zhangsan&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//isRequired-是否非必须</span></span><br><span class=\"line\"><span class=\"comment\">//defaultProps-默认值</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>传递方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">speak</span>:<span class=\"title class_\">React</span>.<span class=\"property\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//string 区别于类型的String</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">speak</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;speak&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;person speak=&#123;speak&#125;/&gt;</span><br><span class=\"line\"><span class=\"comment\">// -&gt;类型限制 function - func</span></span><br></pre></td></tr></table></figure>\n\n<p>此种写法写在class外部 - 移除到class内部</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>constructor和super</strong></p>\n<p>完全可以省略，constructor主要是给state初始化，给实例绑定方法，完全可以使用public class field写法替代。如果写了构造器constructor，一起把super加上，否则会出现问题，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">porps</span>)  <span class=\"comment\">// 结果是underfinded</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造器是否接受props,传递给super,取决于是否需要在constructor通过this拿到props</p>\n<h5 id=\"函数式组件使用props-只能使用props\"><a href=\"#函数式组件使用props-只能使用props\" class=\"headerlink\" title=\"函数式组件使用props(只能使用props)\"></a>函数式组件使用props(只能使用props)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">props</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;age,name,sex&#125; = props</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>apple<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">propTypes</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">defaultProps</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//props接受所有的传递参数，Object</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-refs\"><a href=\"#5-refs\" class=\"headerlink\" title=\"5.refs\"></a>5.refs</h3><p>通过refs拿到dom</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span>&#123;</span><br><span class=\"line\">    showData = <span class=\"function\">() =&gt;</span> &#123;&#125; <span class=\"comment\">//fn</span></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>三种写法</strong></p>\n<p><strong>1.string写法（后续可能被移除</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input ref=<span class=\"string\">&quot;getEle&quot;</span>&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">refs</span>.<span class=\"property\">getEle</span>.<span class=\"title function_\">focus</span>()</span><br></pre></td></tr></table></figure>\n\n<p>tips:提示使用creatRef写法，warning</p>\n<p><strong>2.回调写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input ref=&#123;<span class=\"function\">(<span class=\"params\">dom</span>)=&gt;</span>&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">domNode</span> = dom &#125;&#125;&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">domNode</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">domNode</span>.<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&quot;#f40&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//此处的dom即当前节点 &lt;span&gt;ele&lt;/span&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>ps:回调函数的内联函数写法在组件更新时候(state&#x2F;条件渲染)，会触发两次，第一次获取的domNode为null</p>\n<p>–&gt; <strong>改进</strong>class的绑定写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outFn = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e <span class=\"comment\">//错误写法</span></span><br><span class=\"line\">outFn = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">input1</span> = c <span class=\"comment\">//domnode绑定给input1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input ref=&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">outFn</span>&#125;&gt;<span class=\"keyword\">class</span>绑定语法&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">input1</span>.<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&quot;#f40&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>outFn &#x3D; e &#x3D;&gt; e</p>\n<p>拿到的只有当前这个函数，拿不到dom</p>\n<p><strong>3.createRef</strong>写法</p>\n<p>creatRef调用后返回一个容器，改容器可以储存被ref所标识的节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getEle = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRef</span>()</span><br><span class=\"line\">&lt;input ref=&#123;getEle&#125;&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">getEle</span>.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123;<span class=\"attr\">current</span>: span&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">try</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>); \t\t\t<span class=\"comment\">//有效</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">check</span>.<span class=\"property\">current</span>.<span class=\"property\">color</span> = <span class=\"string\">&quot;#f40&quot;</span>\t\t<span class=\"comment\">//无效</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">check</span>.<span class=\"property\">current</span>.<span class=\"property\">innerHtml</span> = <span class=\"string\">&quot;#f40&quot;</span>;  <span class=\"comment\">//无效</span></span><br></pre></td></tr></table></figure>\n\n<p>该容器专人专用（相当于原生获取dom)，再次被赋值会被覆盖</p>\n<p><strong>关于onClick和onclick</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有的原生事件都被二次封装</span><br><span class=\"line\">/<span class=\"number\">1</span>）通过onXXX属性指定事件处理函数（主要大小写</span><br><span class=\"line\">\ta&gt;react使用的是自定义（合成）事件，而不是使用的原生的<span class=\"variable constant_\">DOM</span>事件， --为了更好的兼容性</span><br><span class=\"line\">    b&gt;react中的事件委托方式处理的（委托给组件最外层的元素）--高效</span><br><span class=\"line\">/<span class=\"number\">2</span>）通过event.<span class=\"property\">target</span>得到发送事件的发生源</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>jsx的注释不同于其他注释</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"comment\">/*...js代码*/</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-高阶函数\"><a href=\"#6-高阶函数\" class=\"headerlink\" title=\"6.高阶函数\"></a>6.<strong>高阶函数</strong></h3><p>定义：如果一个函数符号下面2个规范中的任何一个，那该函数就是高阶函数</p>\n<ul>\n<li><p>若A函数，接受的是一个函数，那么A就可以称之为高阶函数</p>\n</li>\n<li><p>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数</p>\n<p><strong>函数的柯里化</strong>：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">折叠技巧</span><br><span class=\"line\"><span class=\"comment\">//#region endregion#//</span></span><br></pre></td></tr></table></figure>\n\n<p>常见的高阶函数：Promise,  setTimeout , array.map</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">saveFormData = <span class=\"function\">(<span class=\"params\">dataType</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;[dataType]:event.<span class=\"property\">target</span>.<span class=\"property\">value</span>&#125;)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.saveFormData(</span>&#x27;<span class=\"attr\">username</span>&#x27;)&#125; <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.saveFormData(</span>&#x27;<span class=\"attr\">password</span>&#x27;)&#125; <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t)</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>非柯里化写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">saveFormData = <span class=\"function\">(<span class=\"params\">dataType,event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;[dataType]:event.<span class=\"property\">target</span>.<span class=\"property\">value</span>&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;,event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;,event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t)</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原因：onchange函数是被自动调用的，需要的是一个函数，如果写成this.fn()表示调用的是当前函数的返回值</p>\n<p>注意：只要组件state修改，组件就会重新挂载-setState</p>\n<p>定时器的使用时机：挂载的时候，开启定时器</p>\n<p><strong>forceUpdate(强制更新</strong></p>\n<p>触发两个钩子</p>\n<ul>\n<li>componentWillUpdate - </li>\n<li>render - ..</li>\n<li>不更新任何state强制更新</li>\n</ul>\n<p><strong>componentWillReceiveProps</strong>生命周期</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">并不会在第一次传递props调用，只会在porps更新时调用</span><br></pre></td></tr></table></figure>\n\n<p>1.初始化阶段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>constructor</span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"title function_\">conponentWillMount</span>()</span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"title function_\">render</span>()</span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"title function_\">componentDidMount</span>()</span><br></pre></td></tr></table></figure>\n\n<p>2.更新阶段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span><span class=\"title function_\">shouldComponentUpdate</span>() <span class=\"comment\">//有一个阀门，必须返回一个boolean，是否继续执行</span></span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"title function_\">componentWillUpdate</span>()</span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"title function_\">remder</span>() </span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"title function_\">conponentDidMount</span>()</span><br></pre></td></tr></table></figure>\n\n<p>3.销毁阶段</p>\n<p>ReactDom.unmountComponentAtNode()触发 –销毁节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentWillUnmount</span>()</span><br></pre></td></tr></table></figure>\n\n<p>常用钩子：</p>\n<p>a.componentDidMount()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.初始化事件</span><br><span class=\"line\">2.网络请求</span><br></pre></td></tr></table></figure>\n\n<p>b.componentWillUnmount()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清理定时器</span><br></pre></td></tr></table></figure>\n\n<p>c.render()</p>\n<p><em>bootCDN</em></p>\n<h3 id=\"7-新版生命周期\"><a href=\"#7-新版生命周期\" class=\"headerlink\" title=\"7.新版生命周期\"></a>7.<strong>新版生命周期</strong></h3><p><em>新版本可以使用旧的生命周期</em> - waring-不被推荐使用</p>\n<p>UNSAFE_componentWillMount  加入UNSAFE</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要加<span class=\"variable constant_\">UNSAFE</span></span><br><span class=\"line\"><span class=\"title function_\">UNSAFE_componentWillMount</span>()</span><br><span class=\"line\"><span class=\"title function_\">UNSAFE_componentWillReceiveProps</span>()</span><br><span class=\"line\"><span class=\"title function_\">UNSAFE_componentWillUpdate</span>()</span><br></pre></td></tr></table></figure>\n\n<p>新版废弃上述三个钩子，新增两个钩子</p>\n<h4 id=\"1-getDerivedStateFromPorps-derived派生\"><a href=\"#1-getDerivedStateFromPorps-derived派生\" class=\"headerlink\" title=\"1.getDerivedStateFromPorps (derived派生)\"></a><strong>1.getDerivedStateFromPorps (derived派生)</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getDerivefStateFromPorps</span>() </span><br><span class=\"line\">返回状态对象，或者<span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>1.返回null</p>\n<p>2.返回object</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> &#123;<span class=\"attr\">count</span>:<span class=\"number\">108</span>&#125;</span><br><span class=\"line\">如果当前state有count,不能修改</span><br></pre></td></tr></table></figure>\n\n<p>使用场景：即state取决于props</p>\n<p>缺点：代码冗余，定时器难以维护,组件难以维护</p>\n<h4 id=\"2-getSnapshotBeforeUpdate\"><a href=\"#2-getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"2.getSnapshotBeforeUpdate\"></a><strong>2.getSnapshotBeforeUpdate</strong></h4><p>–在最近一次渲染输出（提交到 DOM 节点）之前调用。</p>\n<p>（快照）<em>更新之前获取快照</em> -  任何值都可以为一个快照值</p>\n<p>必须返回一个快照，或者null</p>\n<p>component</p>\n<h4 id=\"3-diff算法\"><a href=\"#3-diff算法\" class=\"headerlink\" title=\"3.diff算法\"></a><strong>3.diff算法</strong></h4><p>遍历列表的时候不要使用inde作为key</p>\n<p>PS:</p>\n<p>简单：key时虚拟Dom对象的标识</p>\n<p>详细：当状态中的数据发生改变时，rract会根据新数据生成新的虚拟都没,随后react进行，新老dom进行diff比较</p>\n<p><strong>比较规则：</strong></p>\n<p>​    a.旧虚拟dom找到了禹新dom相同的key</p>\n<p>​        1)如果内容没变，那么直接使用之前的dom,</p>\n<p>​        2)如果不同的话，则生成新的dom,替换旧的dom</p>\n<p>  b.index作为key,可能会引发的问题、</p>\n<p>​        1.索引值被打乱，造成无用的dom更新（效率低，无用的资源浪费</p>\n<p>​        2.需求：</p>\n<h4 id=\"4-样式冲突（模块化解决\"><a href=\"#4-样式冲突（模块化解决\" class=\"headerlink\" title=\"4.样式冲突（模块化解决\"></a><strong>4.样式冲突（模块化解决</strong></h4><p>后面引入的覆盖之前引用的</p>\n<p>less 嵌套</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hello <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a.module.css&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样之后当前css的样式都以对象的形式，包含在hello里面</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span> = &#123;hello.<span class=\"property\">title</span>&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此时title为类选择器，如果为其他选择器怎么办？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:<span class=\"string\">&quot;#fff&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-插件使用\"><a href=\"#5-插件使用\" class=\"headerlink\" title=\"5.插件使用\"></a><strong>5.插件使用</strong></h4><p>代码块</p>\n<h4 id=\"6-受控组件和非受控组件浅析\"><a href=\"#6-受控组件和非受控组件浅析\" class=\"headerlink\" title=\"6.受控组件和非受控组件浅析\"></a><strong>6.受控组件和非受控组件浅析</strong></h4><p>checkout 可以写一个defaultValue，后续defaultChecked的值可以改，如果使用checked,则必须使用onChange来改变checkout选中状态，此处defaultChecked的写法就是非受控组件，而使用onChange函数自己改变状态的，则是受控组件</p>\n<p><em>解构技巧</em></p>\n<p>const {…} &#x3D; this.props</p>\n<p>const {…} &#x3D; this</p>\n<h4 id=\"7-组件传参\"><a href=\"#7-组件传参\" class=\"headerlink\" title=\"7.组件传参\"></a><strong>7.组件传参</strong></h4><ul>\n<li><p>父子组件传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;item todos=&#123;todos&#125;&gt; </span><br><span class=\"line\"><span class=\"comment\">//父组件将其内部的变量 todos传给子组件items,子组件接受到的值为todos</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">item</span> &#123;<span class=\"attr\">...todos</span>&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">//解构写法 - 将todos这个对象的值逐一的传递到子组件</span></span><br><span class=\"line\"><span class=\"language-xml\">    </span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>子传父 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原理：父组件向子组件传递一个函数（通过props)，然后子组件调用当前函数</span><br></pre></td></tr></table></figure>\n\n<p>id库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uuid - 唯一id</span><br><span class=\"line\">nanoid - 比uuid库小，功能一样</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><em>浅拷贝小tips</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;..<span class=\"property\">obj</span>,<span class=\"attr\">b</span>:<span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>todolist案例中更改状态</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateTodo = <span class=\"function\">(<span class=\"params\">id,done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;todos&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span></span><br><span class=\"line\">    todos.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">todoObj</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(todoObj.<span class=\"property\">id</span> === id) <span class=\"keyword\">return</span> &#123;...todoObj,done&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> todoObj</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>array.reduce()</p>\n<h4 id=\"8-消息订阅与发布\"><a href=\"#8-消息订阅与发布\" class=\"headerlink\" title=\"8.消息订阅与发布\"></a><strong>8.消息订阅与发布</strong></h4><p>订阅与取消订阅</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// publish 发布消息 消息名为：publish_one 内容为：This is publish</span></span><br><span class=\"line\">    <span class=\"title class_\">PubSub</span>.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&quot;publish_one&quot;</span>, <span class=\"function\">(<span class=\"params\">msg, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">userData</span>: data &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//取消消息订阅</span></span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">PubSub</span>.<span class=\"title function_\">unsubscribe</span>(<span class=\"string\">&quot;publish_one&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>发布消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">PubSub</span>.<span class=\"title function_\">publish</span>(<span class=\"string\">&quot;publish_one&quot;</span>, data.<span class=\"property\">data</span>.<span class=\"property\">items</span>);</span><br></pre></td></tr></table></figure>\n\n<p>PS：注意在需要消息的地方订阅，在传递数据的地方发布消息，记得在组件销毁之前取消订阅</p>\n<p><strong>fetch</strong></p>\n<ul>\n<li>xhr(传统ajax)<ul>\n<li>jquery</li>\n<li>axios</li>\n</ul>\n</li>\n<li>fetch<ul>\n<li>关注分离(复杂的事情简单化</li>\n</ul>\n</li>\n</ul>\n<p>关注分离具体到发送请求：将请求服务器和拿到数据分开处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">`url`</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.<span class=\"title function_\">josn</span>()</span><br><span class=\"line\">&#125;),<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;connect failed&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>()</span><br><span class=\"line\">    <span class=\"comment\">//返回一个初始化的promise,获取数据失败，直接返回，不走下一步回调</span></span><br><span class=\"line\">&#125;.<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;get data success&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"function\">()=&gt;</span>&#123;&#125;)</span><br><span class=\"line\"><span class=\"comment\">//此处返回的response.json()的为一个promise,then链式调用的为返回的promise,只走成功的或者失败的回调，不会同时走，即下面的一个.then为上面成功或者失败的回调</span></span><br><span class=\"line\"><span class=\"comment\">//使用catch代替失败的回调</span></span><br><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">`url`</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.<span class=\"title function_\">josn</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;get data success&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"function\">()=&gt;</span>&#123;&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err) <span class=\"comment\">//统一处理错误</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//await</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`url`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;请求出错&#x27;</span>,err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>fetch使用较少，老版本浏览器不支持fetch请求</p>\n<h3 id=\"8-路由（旧版\"><a href=\"#8-路由（旧版\" class=\"headerlink\" title=\"8.路由（旧版\"></a>8.路由（旧版</h3><p>SPA:单页面应用</p>\n<ul>\n<li><p>只有一个页面</p>\n</li>\n<li><p>无刷更新数据</p>\n</li>\n<li><p>数据请求，异步展示</p>\n</li>\n</ul>\n<h4 id=\"1-react-router-dom-5\"><a href=\"#1-react-router-dom-5\" class=\"headerlink\" title=\"1.react-router-dom 5\"></a>1.react-router-dom 5</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#1</span></span><br><span class=\"line\">  &lt;<span class=\"title class_\">React</span>.<span class=\"property\">StrictMode</span>&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">BrowserRouter</span>&gt;</span></span></span><br><span class=\"line\">  &lt;/<span class=\"title class_\">React</span>.<span class=\"property\">StrictMode</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">//#2</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">activeClassName</span>=<span class=\"string\">&quot;ative&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&quot;list-group-item&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">to</span>=<span class=\"string\">&quot;/http&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          http</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#3</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/http&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Basic&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>路由器分类</p>\n<ul>\n<li>BrowserRouter</li>\n<li>HashRouter</li>\n</ul>\n<h4 id=\"1-link\"><a href=\"#1-link\" class=\"headerlink\" title=\"1.link\"></a>1.link</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">BrowserRouter</span>&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">linK</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">link</span>&gt;</span></span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">BrowserRouter</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>link都需要被router包裹，故在最大的app外面包裹browserRouter</p>\n<p>link被转化为A标签，</p>\n<h4 id=\"2-navlink\"><a href=\"#2-navlink\" class=\"headerlink\" title=\"2.navlink\"></a>2.navlink</h4><p>当前被点击的内容加一个navlink类名（默认，可以加一个activeClassName绑定一个类名</p>\n<h4 id=\"3-switch\"><a href=\"#3-switch\" class=\"headerlink\" title=\"3.switch\"></a>3.switch</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">switch</span>&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/about&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;About&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\">    &lt;/<span class=\"keyword\">switch</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>用switch包裹的组件集合，匹配到了第一个就不会往下匹配，</p>\n<p>Switch可以提高路由匹配效率(单一匹配)。</p>\n<h4 id=\"4-多级路由的样式更新问题\"><a href=\"#4-多级路由的样式更新问题\" class=\"headerlink\" title=\"4.多级路由的样式更新问题\"></a>4.多级路由的样式更新问题</h4><p>​        1.public&#x2F;index.html 中 引入样式时不写 .&#x2F; 写 &#x2F; （常用）</p>\n<p>​        2.public&#x2F;index.html 中 引入样式时不写 .&#x2F; 写 %PUBLIC_URL% （常用）</p>\n<p>​        3.如果是hasuRouter则没有问题</p>\n<h4 id=\"5-模糊匹配\"><a href=\"#5-模糊匹配\" class=\"headerlink\" title=\"5.模糊匹配\"></a>5.模糊匹配</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">NavLink</span></span><br><span class=\"line\">          activeClassName=<span class=\"string\">&quot;ative&quot;</span></span><br><span class=\"line\">          className=<span class=\"string\">&quot;list-group-item&quot;</span></span><br><span class=\"line\">          to=<span class=\"string\">&quot;/http/aa&quot;</span></span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          http</span><br><span class=\"line\">&lt;/<span class=\"title class_\">NavLink</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">NavLink</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">activeClassName</span>=<span class=\"string\">&quot;ative&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&quot;list-group-item&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">to</span>=<span class=\"string\">&quot;/a/http/aa&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          http</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">NavLink</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#3</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/http&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Basic&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>当前情况下跳转至&#x2F;http&#x2F;aa可以匹配到Basic组件（模糊匹配）,而不能匹配到&#x2F;a&#x2F;http&#x2F;aa</p>\n<p>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p>\n<p><strong>精准匹配</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Route</span> extra=&#123;<span class=\"literal\">true</span>&#125; path=<span class=\"string\">&quot;/http&quot;</span> component=&#123;<span class=\"title class_\">Basic</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>重定向Redirect</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">switch</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/http&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Basic&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/input&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Basic&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">redirect</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/a&quot;</span>/&gt;</span></span></span><br><span class=\"line\">    &lt;/<span class=\"keyword\">switch</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当http,input都无法匹配的时候，重定向到..</p>\n<p>一般把redirect写在所有的路由下方，当所有的都无法匹配时候，redirct—</p>\n<h4 id=\"6-嵌套路由\"><a href=\"#6-嵌套路由\" class=\"headerlink\" title=\"6.嵌套路由\"></a>6.嵌套路由</h4><p>PS:不能使用严格匹配，会导致路由丢失</p>\n<ul>\n<li>注册子路由时候，加上父路由的path值</li>\n<li>路由的匹配是按照注册路由的顺序进行的</li>\n</ul>\n<h4 id=\"7-向路由组件传参\"><a href=\"#7-向路由组件传参\" class=\"headerlink\" title=\"7.向路由组件传参\"></a>7.向路由组件传参</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Link</span> to=&#123;<span class=\"string\">`/home/message/detail/<span class=\"subst\">$&#123;msgObj.id&#125;</span>/<span class=\"subst\">$&#123;msgObj.title&#125;</span>`</span>&#125;&gt;&#123;msgObj.<span class=\"property\">title</span>&#125;&lt;/<span class=\"title class_\">Link</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/home/message/detail/:id/:title&quot;</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//detail组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;id,title&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">match</span>.<span class=\"property\">params</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>params传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link to=<span class=\"string\">&#x27;demo/18/zhangsan&#x27;</span>/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;demo/:id/name&#x27;</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p>接受参数: <strong>this.props.match.params</strong></p>\n</li>\n<li><p>search传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link to=<span class=\"string\">&#x27;demo?id=18&amp;zhangsan&#x27;</span>/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;demo&#x27;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>接受参数：<strong>this.props.location.search</strong></p>\n</li>\n<li><p>state传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link to=<span class=\"string\">&#x27;demo&#x27;</span> state=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;tom&quot;</span>&#125;/&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;demo&#x27;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>接受参数：<strong>this.props.location.state</strong></p>\n</li>\n</ul>\n<h4 id=\"8-编程式导航\"><a href=\"#8-编程式导航\" class=\"headerlink\" title=\"8.编程式导航\"></a>8.编程式导航</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">push</span>()\t\t\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">replace</span>()\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">goBack</span>()</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">goForward</span>()\t\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">prosp</span>.<span class=\"property\">history</span>.<span class=\"title function_\">go</span>()</span><br><span class=\"line\"><span class=\"comment\">//prosP,location...等等只有路由组件才有</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>BrowserRouter与HashRouter的区别</strong></p>\n<ul>\n<li>兼容性<ul>\n<li>不支持IE9及下</li>\n<li>使用的 URL的哈希值</li>\n</ul>\n</li>\n<li>path<ul>\n<li>路径没有#</li>\n</ul>\n</li>\n<li>state的影响<ul>\n<li>browserRouter无影响</li>\n<li>HashRouter刷新后导致路由state参数的丢失</li>\n</ul>\n</li>\n<li>可以解决路径错误问题</li>\n</ul>\n<p><strong>withRouter</strong></p>\n<p>一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withRouter</span>(myApp)</span><br></pre></td></tr></table></figure>\n\n<p>使一般组件具有路由路由组件特有的api，返回值是一个新组件</p>\n<h4 id=\"9-使用antd组件库\"><a href=\"#9-使用antd组件库\" class=\"headerlink\" title=\"9.使用antd组件库\"></a>9.使用antd组件库</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm i antd</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Button</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;antd&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;antd/dist/antd.min.css&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><em>注意有的版本导入antd.css会有问题，此处改为antd.min.css</em></p>\n<h3 id=\"10-redux\"><a href=\"#10-redux\" class=\"headerlink\" title=\"10.redux\"></a>10.redux</h3><p><a href=\"https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\">参考阮一峰</a></p>\n<p>*:只要调用setSate，就能更新状态，更新dom</p>\n<p><strong>redux</strong>：只能管理状态，但不会触发更新</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class=\"line\">\t\tstore.<span class=\"title function_\">subscribe</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;&#125;) <span class=\"comment\">//幌一下</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>setState存在效率问题，此处是一个<strong>小技巧</strong></p>\n<h4 id=\"1-监听单个组件\"><a href=\"#1-监听单个组件\" class=\"headerlink\" title=\"1.监听单个组件\"></a>1.监听单个组件</h4><p>redux 文件夹下</p>\n<p><em>1.store.js</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> countReducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./count_reducer&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createStore</span>(countReducer)</span><br></pre></td></tr></table></figure>\n\n<p>2.count_reducer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initState = <span class=\"number\">0</span> <span class=\"comment\">//初始化状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">countReducer</span>(<span class=\"params\">preState=initState,action</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//从action对象中获取：type、data</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123;type,data&#125; = action</span><br><span class=\"line\">\t<span class=\"comment\">//根据type决定如何加工数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;increment&#x27;</span>: <span class=\"comment\">//如果是加</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> preState + data</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;decrement&#x27;</span>: <span class=\"comment\">//若果是减</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> preState - data</span><br><span class=\"line\">\t\t<span class=\"attr\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> preState</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一次调用的时候，preState为underfinded,因此需要赋一个默认值</p>\n<p>3.use.js 使用store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class=\"line\">\t\tstore.<span class=\"title function_\">subscribe</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;select ref=&#123;<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectNumber</span> = c&#125;&gt;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../redux/store&#x27;</span></span><br><span class=\"line\">fn = <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123;value&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">selectNumber</span></span><br><span class=\"line\">    store.<span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>:<span class=\"string\">&#x27;increment&#x27;</span>,<span class=\"attr\">data</span>:value*<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>此处一个重要的点就是监听store状态，只要改变了，就触发setState更新视图</strong>，可以将监听放在index.js里面，进行全局监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"title class_\">ReactDom</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">APP</span>/&gt;</span></span>,<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>此处有diff算法兜底，不会造成大未改变页面更新</p>\n<p><strong>pnpm使用</strong></p>\n<p>使用 <code>pnpm install</code> 安装项目依赖时出现：<code>ERR_PNPM_PEER_DEP_ISSUES Unmet peer dependencies</code></p>\n<p>问题原因：在 npm 3 中，不会再强制安装 peerDependencies （对等依赖）中所指定的包，而是通过警告的方式来提示我们。pnpm 会在全局缓存已经下载过的依赖包，如果全局缓存的依赖版本与项目 package.json 中指定的版本不一致，就会出现这种 hint 警告。</p>\n<p><strong>处理方案</strong></p>\n<ol>\n<li><p>在项目的 <code>package.json</code> 中配置 <code>peerDependencyRules</code> 忽略对应的警告提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;pnpm&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;peerDependencyRules&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;ignoreMissing&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;react&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在 <code>.npmrc</code> 配置文件中添加 <code>strict-peer-dependencies=false</code> ，这意味着将关闭严格的对等依赖模式。操作命令如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set strict-peer-dependencies=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>箭头函数补充</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data =&gt; <span class=\"number\">1</span>   <span class=\"comment\">//返回1</span></span><br><span class=\"line\">data =&gt; &#123;&#125; <span class=\"comment\">//不会返回空对象，会把里面当作函数体</span></span><br><span class=\"line\">-解决</span><br><span class=\"line\">data =&gt; (&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"node基础","author":"codefish","date":"2022-06-10T12:12:10.000Z","top_img":"/img/Craig Adderley.jpg","cover":"/img/Craig Adderley.jpg","_content":"\nnode主要是利用ECMAScript的核心语法封装的js库，你可以用它构建一个简单的服务器，或者读取excel,修改本地文件等\n\n## 1.fs模块\n\n*fs.readFile()  用来读取指定文件中的内容*\n\n*fs.writeFile()  写入文件*\n\n```js\n//1.存放路径\n//2.编码格式\n//3.回调函数\nconst fs = require('fs')\nfs.readFile('./assets/read.txt','utf-8',function(err,dataStr){\n    console.log(err+'-失败')\n    console.log(dataStr+'成功读取的数据')\n})\n\n-> 结果\nnull-失败\n读取文件\n成功读取的数据\n\n-> 读取失败\nerr的值为错误对象\ndataStr 为 underfinded\n    \n```\n\n\n\n### 1.**判断是否读取成功**\n\n判断err是否为空\n\n### 2，向指定文件写入内容\n\n````js\n//1.文件路径\n//2.写入内容\n//3.编码格式\n//4.回调函数-\nconst fs = require('fs')\nfs.writeFile('./assets/a.txt','111','utf-8',function(err){\n    if(err){\n        return console.log('写入失败',err.message)\n    }\n    console.log('文件写入成功')\n})\n// fs.writeFile('G:/assets/a.txt','111','utf-8',function(err,a){\n//     console.log(err,a)\n// })\n\n//结果\nnull\n\n如果写入失败-err的值为一个错位对象\n\n````\n\n### 3.整理文件\n\n**问题**\n\n*1.replace不写正则为单个匹配*\n\n*2.写入时候replace替代的是%n无效果*\n\n*3.\\n 与 ，/n*\n\n```js\nconst fs = require(\"fs\");\nfs.readFile(\"./assets/read.txt\", \"utf-8\", (err, res) => {\n  if (err) {\n    return console.log(\"读取失败\" + err.message);\n  }\n  let data = fn(res);\n  write(data);\n});\nfunction fn(res) {\n  // return res.replace('-',':').replace(' ','%n')\n  let data = res.split(\" \");\n  let newstr = \"\";\n  for (var i = 0; i < data.length; i++) {\n    newstr = data[i].replace(\"-\", \":\") + \" \\n\" + newstr;\n  }\n  return newstr;\n}\nfunction write(data) {\n  fs.writeFile(\"./assets/write.txt\", data, \"utf-8\", (err) => {\n    if (err) {\n      return console.log(\"写入失败\" + err.message);\n    }\n    console.log(\"写入成功\");\n  });\n}\n\n```\n\n#### ，路径动态拼接的问题\n\n*在使用fs模块操作文件时，如果提供的操作路径是以./或者../开头的相对路径时，很容易出现路径动态拼接错误的问题*\n\n*原因：代码在执行的时候，会以执行node命令时所处的目录，动态拼接出被操作文件的完整路径*\n\n**即在当前路径下执行代码不会有问题，如果在其他路径下执行就会出现问题**\n\n---\n\n**解决：**\n\n```js\n//使用绝对路径去替换相对路径\n__dirname 代表当前文件所在路径\n\n//使用当前文件路径拼接\nreadFile(__dirname+\"/assets/read.txt\", \"utf-8\", ()=>{})\n```\n\n\n\n，11\n\n\n\n## 2.path模块\n\n***path.join()***:用来将多个路径片段拼接为一个完整的路径字符串\n\n***path.basename()***：用来从路径字符串中，将文件名解析出来\n\n\n\n### 1.*path.join([...args])*\n\n*../ 可以抵消路径 抵消上一层路径*\n\n**eg:**\n\n['/a/b','../'] \n\n**此处可以抵消/b**\n\n\n\n凡是涉及路径拼接的操作之后都使用**path.join()**来处理\n\n\n\n### 2.path.basename()\n\n```js\npath.basename(filespath[,ext])\n//1.filespath一个路径的字符串\n//2.ext 可选参数 ，表示文件扩展名\n//3.返回：<string> 表示路径的最后一部分\n```\n\n\n\neg：\n\n```js\nconst fpath = '/b/c/index.html'\nvar fullName = path.basename(fpath)\nconsole.log(fullName)  //  index.html\n\nvar nameWithoutExt = path.basename('path','.html')\nconsole.log(nameWidthExt) // -> 输出 index\n```\n\n### 3.path.extname()\n\n打印拓展名\n\n```js\nconst fext = path.extname(fpath)\nconsole.log(fext,'-fext')\n```\n\n\n\n## 3.分离css,html,js案例\n\n注意点；\n\n- 重复调用fs.writeFile() 后写入的会覆盖之前写入的\n\n- fs.writeFile()只能用来创建文件，不能用来创建路径\n\n  ```js\n  const fs = require('fs')\n  const { resolve } = require('path')\n  const path = require('path')\n  fs.readFile('./eg1/eg.html','utf-8',(err,sucmsg)=>{\n      if(err){\n          console.log('读取失败',err.message)\n          return\n      }\n      handle(sucmsg)\n  })\n  function handle(data){\n      //匹配三个模块的正则\n      let cssexg = /<style>[\\s\\S]*<\\/style>/ ///<style>[\\s\\S]*</style>/g\n      let jsexg = /<script>[\\s\\S]*<\\/script>/\n      let htmlmsg = data.match()\n      //定义处理css样式的方法\n      //使用正则提取内容\n      var cssPart = cssexg.exec(data) + ''\n      var jsPart = jsexg.exec(data) + ''\n      var htmlPart = data.replace(cssPart,'<link rel=\"stylesheet\" href=\"./index.css\">').replace(jsPart,'<script src=\"./index.js\"></script>')\n      //去掉首尾的style和script标签\n      cssPart = cssPart.replace('<style>','').replace('</style>','')\n      jsPart = jsPart.replace('<script>','').replace('<script>','')\n      //存储在当前的文件中\n      fs.writeFile(path.join(__dirname,'./index.css'),cssPart,(err)=>{\n          if(err){\n              return console.log(\"存储css文件失败\",err.message)\n          }\n      })\n      fs.writeFile(path.join(__dirname,'./index.js'),jsPart,(err)=>{\n          if(err){\n             return console.log(\"存储js文件失败\",err.message)\n          }\n      })\n      fs.writeFile(path.join(__dirname,'./index.html'),htmlPart,(err)=>{\n          if(err){\n              console.log(\"存储html文件失败\",err.message)\n          }\n      })\n      //开始写为fs.writeFile(path.join(__dirname,'./clock/index.js'),由于clock文件夹不存在导致存储失败\n  }\n  ```\n\n  \n\n## 4.http模块\n\n**1.初步接触**\n\n```js\n//web服务器\n//1.导入http模块\n//2.创建web服务器实例\n//3.绑定requise事件\n//4.启动服务器\n\nconst http =  require('http')\nconst server = http.createServer()\n// 3.绑定requise事件\nserver.on('request',function(req,res){\n    console.log('Someone visit our web server');\n})\n//4.启动服务器\nserver.listen(8080,function(){\n    console.log('server listenging 8080')\n    //有人访问-就会一直响应\n})\n```\n\n\n\n**2.返回中文会出现乱码问题**-res\n\n**解决**：res.setHeader('Content-Type','text/html;charset=utf-8')\n\n中间为分号（非冒号)\n\n```js\n//req请求对象\n//只要服务器接收到了客户端的请求，就会通过调用server.on()为服务器绑定的request事件处理函数，\n//如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式\nconst http = require('http')\nconst server = http.createServer()\nserver.on('request',(req,res)=>{\n    console.log('server is running ',req.url,req.method)\n    const url = req.url\n    const method = req.method\n    const str = `Your request url is ${url},and request method id ${method},'中文'`\n    res.setHeader('Content-Type','text/html;charset=utf-8')\n    res.end(str)\n})\nserver.listen(8080,function(){\n    return console.log('serve running at http://localhost:8080/')\n})\n```\n\n**3.根据不同url响应不同的页面内容**\n\n1.核心实现步骤\n\n- 获取请求的url\n- 设置默认的响应内容为404 Not found\n- 判断用户的请求是否为/或index.html页面\n- 判断用户请求是否为/about.html关于页面\n- 设置Content-Type响应头，防止中文乱码\n- 使用res.end()把内容响应给客户端\n\n```js\nconst http = require('http')\nconst server = http.createServer()\nserver.on('request',(req,res)=>{\n    console.log('server is running ',req.url,req.method)\n    const url = req.url\n    const method = req.method\n    res.setHeader('Content-Type','text/html;charset=utf-8')\n    let content = `<h3>404 not found</h3> </br>Your request url is ${url},and request method id ${method},'中文'`\n    if(url==='/'||url=='/index.html'){\n        content = `<h3>首页</h3>`\n    }else if(url==='/about.html'){\n        content = `<h1>关于页面</h1>`\n    }\n    res.end(content)\n})\nserver.listen(8080,function(){\n    return console.log('serve running at http://localhost:8080/')\n})\n```\n\n## 5.http案例\n\n**将时钟案例的三个文件，根据url地址的不同，返回给客户端**\n\n实现思路\n\n**将文件的实际路径，作为每个资源的url地址**\n\n\n\n磁盘文件-由服务端读取-返回给客户端（文件流，数据的形式\n\n1. 导入需要的模块\n2. 创建基本的web服务器\n3. 将资源的请求url地址映射为文件的存放路径\n4. 读取文件内容并响应给客户端\n5. 优化资源的请求路径\n\n\n\n**问题**：..path 无法读取文件\n\nfpath = '../eg1' = url\n\n解决path.join(__dirname,fpath)\n\n\n\n\n\n## 6.Node模块化\n\n### 1.模块分类\n\n1. 内置模块\n\n   ---\n\n   由Node.js官方提供的，例如fs,path,http\n\n2. 自定义模块\n\n   ---\n\n   用户创建的每个js文件都是自定义模块\n\n3. 第三方模块\n\n   ---\n\n   由第三方开发的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，试用前需要先下载\n\n4. 1\n\n   \n\n### 2.加载模块\n\n使用强大的require()方法，可以加载需要的内置模块，用户自定义模块，第三方模块使用\n\n- const fs = require('fs')  加载内置的fs模块\n- const custom = require('./custom.js') 加载用户的自定义模块\n- const moment = require('moment') 加载第三方模块（关于第三方模块的下载和使用）\n- \n\n**注意**：使用require()方法加载其他模块时，会执行加载模块中的代码\n\n\n\n### 3.对象和属性\n\n#### 1.module.exports对象\n\n在自定义对象中，可以使用module.exports对象，将模块内的成员共享出去，供外界使用，外界使用require() 导入自定义模块时，得到的就是module.exports所指向的对象。\n\n**使用require()时导入的以**module.export为准\n\n**exports和module.exports**-挂载对象结果一致\n\n**最终共享的结果，以module.exports以准**\n\n\n\n**1.案例1**\n\n```js\n//当exports 和 module.exports 同时存在的时候，module会覆盖之前export挂载的内容\n\nexport.username = \"张三\"\n\nmodule.exports = {\n    name:\"里斯\",\n    age:23\n}\n//最终结果为： Object\n{name:\"里斯\",age:23}\n\n```\n\n**2.案例2**\n\n````js\nmodule.exports.username = \"张三\" //object 1\n\nexports = {  //object 2\n    name:\"里斯\",\n    age:23\n}\n//最终结果为： Object\n{username:\"张三\"}\n\n//开始时候，export和module.export指向object1 \n//exports = {}  让export指向对象2\n````\n\n**3.案例3**\n\n```js\nmodule.exports.name = \"zhang\"\nexport.age = 23\n\n//结果为\n{name:\"zhang\",age: 23}\n```\n\n**案例4**\n\n```js\nexport = {  //object 2\n    name:\"里斯\",\n    age:23\n}\nmodule.exports = exports\nmodule.exports.sex = \"female\"\n\n//结果-具备所有的属性\n```\n\n\n\n\n\n#### 2.common.js规范\n\n1. 每个模块内部，module()变量代表当前模块\n2. module变量是一个对象，他的exports属性（module.exports)是对外的接口，\n3. 加载某个模块，其实是加载改模块的module.exports属性，require()用于加载模块\n\n\n\n#### 3.npm 与 包\n\n--(node Package Manager)--\n\n包： 第三方模块\n\n包的来源： 第三方个人或者团队开发出来的，免费提供所有人使用\n\n注意：Node.js中的包都是免费开源的 ，不需要付费既可以免费下载使用\n\n需要包： 基于内置 模块开发时，效率很低-包是基于内置模块封装出来的\n\n包的下载： npm,inc公司下的npm.js\n\n##### 1.格式化时间\n\n```js\n1.创建格式化时间的函数\n2.创建补零函数\n3.导出格式化时间的函数\n```\n\n```js\nfunction dataForm(dtStr){\n\tconst dt = new Date(daStr)\n    const y = padZero(dt.getFullYear()) //所有的都需要补0\n    const m = dt.getMonth() + 1\n    const d = dt.getDate()\n    const h = dt.getHours()\n    const mins = dt.getMinutes()\n    const s = dt.getSeconds()\n    //return 'YYYY-MM-DD HH:mm:ss'\n    return `${y}-${m}-${d} ${h}:${m}:${s}`\n}\n\nfunction padZero(n){\n    return n>9 ? n : '0' +n\n}\n\nmodule.exports = {\n    dataForm()\n}\n```\n\n\n\n##### 2.使用包\n\n```js\nconst moment = require('moment')\nconst dt = moment().format(\"YYYY-MM-DD HH-mm-ss\")\n\nmoment() //获取当前时间\n//   一个m不补零 - 其他相同\n```\n\n### 4.模块加载机制\n\n**1.优先从缓存加载**\n\n模块在第一次加载后会被缓存\n\nrequire 同时三次 - 后面的不会执行\n\n**2,内置模块的加载机制**\n\n内置模块的优先级最高\n\n### 5.自定义模块的加载机制\n\n1. 没有指定./ -- 把其当作内置模块或者第三方模块\n\n2. 省略了文件名，\n\n   ```js\n   1.安装切确的文件名进行加载 \n   2.补全.js进行加载\n   3.补全.json扩展名进行加载\n   4.补全.node拓展名进行加载\n   5.加载失败提示\n   ```\n\n   ### \n\n\n\n### 6.加载第三方模块\n\n```js\n//如果不是一个内置模块，也没有以../或者./开通，则会在node_modules文件夹中加载第三方模块\n\n//如果没有找到对应的第三方模块，则移动到再上一级父目录中，进行加载，直到文件系统的根目录\n\n\n```\n\n\n\n### 7.目录作为模块\n\n当把目录当作模块标识符，传递给require()进行加载的时候，有三种加载方式。\n\n1. 被加载的目录下查找一个叫做package.json的文件，并寻找main属性，作为require() 加载的入口\n2. 如果入口没有package.json文件，或者入口不存在或无法解析，则node.js会试图加载目录下的index.js文件\n3. 如果以上两步都失败了，则node.js会在终端打印错误信息，报告模块的缺失。Error:cannot find module \"xxx\"\n\n\n\n## 7.express模块\n\n1. 托管静态资源\n2. 使用路由精简项目结构\n3. 能够使用常见的中间键\n4. 能够使用express创建API接口\n5. 能够在express中启用CORS跨域资源共享\n\nexpress: 快速，开放，极简的web开发框架，进一步开发，极大的提示开发效率\n\n- web网站服务器：提供web网页资源的服务器\n- API接口服务器：专门对外提供api接口的服务器\n\n\n\n#### 1.基本使用\n\n- 创建基本web服务器\n\n  ```js\n  //1.导入express\n  const express = require('express')\n  //2.创建web服务器\n  const app = express()\n  //4.监听get和post请求-并响应\n  app.get('/user',(req,res)=>{\n      //调用express提供的res.send()方法，向客户端响应一个json对象\n      res.send({name:\"zs\",age:20,gender:\"男\"})\n  })\n  app.post('/user',(req.res)=>{\n      app.send({name:\"ls\",age:20,gender:\"女\"})\n  })\n  //启动服务器\n  app.listen(80,()=>{\n  console.log(\"express server running at http://127.0.0.1\")\n  })\n  ```\n\n  \n\n- 监听Get请求\n\n  ```js\n  ///通过app.get()方法 ，可以监听客户端的GET请求，具体的语法格式如下：\n  /*\n  *params\n  *1.url地址\n  *2.处理函数-\n  *   1.req请求对象 (包含了与请i去对象相关的属性和方法)\n  *   2.res响应对象（包含了与响应相关的属性和方法\n  *\n  app.get('url',function(req,res){ \n  //处理函数\n  })\n  ```\n\n  \n\n- app.post监听post请求\n\n- send **把内容响应给客户端**\n\n  ```js\n  app.post('/user',(req,res)=>{\n      //向客户端发送文本内容\n      res.send(\"请求成功\")\n  })\n  ```\n\n  \n\n- **报错**express : 无法将“express”项识别为 cmdlet、函数、脚本文件或可运行程序的名称\n\n如上我们使用 node 的 npm 安装了 express 框架后，并不会顺带着把 express 脚手架安装。\n\n此时，如果直接输入 express 会进行报错，即关键字不识别（环境变量中没有express.exe）。\n\n需要输入如下命令，安装“脚手架”。\n\n```js\nnpm install express express-generator -g\n```\n\n#### 2.中间件加载静态资源\n\n要提供静态文件（如图像，CSS文件和JavaScript文件），请使用`express.static`Express中的内置中间件功能。\n\n函数签名是：\n\n```javascript\nexpress.static(root, [options])\n```\n\n复制\n\n`root`参数指定要从中为静态资产提供服务的根目录。有关`options`参数的更多信息，请参阅express.static。\n\n例如，使用以下代码在名为`public`的目录中提供图像，CSS文件和JavaScript文件：\n\n```javascript\napp.use(express.static('public'))\n```\n\n复制\n\n现在，您可以加载`public`目录中的文件：\n\n```javascript\nhttp://localhost:3000/images/kitten.jpg\nhttp://localhost:3000/css/style.css\nhttp://localhost:3000/js/app.js\nhttp://localhost:3000/images/bg.png\nhttp://localhost:3000/hello.html\n```\n\n复制\n\n Express查找相对于静态目录的文件，因此静态目录的名称不是URL的一部分。 \n\n要使用多个静态资产目录，请`express.static`多次调用中间件函数：\n\n```javascript\napp.use(express.static('public'))\napp.use(express.static('files'))\n```\n\n复制\n\nExpress按照您使用`express.static`中间件功能设置静态目录的顺序查找文件。\n\n注：为获得最佳结果，请使用反向代理缓存来提高服务静态资产的性能。\n\n要为`express.static`函数提供的文件创建虚拟路径前缀（路径实际上不存在于文件系统中），请为静态目录指定一个装载路径，如下所示：\n\n```javascript\napp.use('/static', express.static('public'))\n```\n\n复制\n\n现在，您可以从`/static`路径前缀中加载目录`public`中的文件。\n\n```javascript\nhttp://localhost:3000/static/images/kitten.jpg\nhttp://localhost:3000/static/css/style.css\nhttp://localhost:3000/static/js/app.js\nhttp://localhost:3000/static/images/bg.png\nhttp://localhost:3000/static/hello.html\n```\n\n复制\n\n但是，您提供给`express.static`函数的路径是相对于启动`node`过程的目录。如果您从其他目录运行快速应用程序，则使用您想要提供的目录的绝对路径更安全：\n\n```javascript\napp.use('/static', express.static(path.join(__dirname, 'public')))\n```\n\n复制\n\n有关该`serve-static`函数及其选项的更多详细信息，请参阅[serve-static](http://expressjs.com/en/resources/middleware/serve-static.html)。\n\n**注意：**\n\n1. public 目录默认找的是当前运行的目录-即如果你在a目录下运行./src/express/index.js，他最终会在当前目录下寻找public文件夹\n\n\n\n#### 3.路由\n\nExpress支持对应于HTTP方法的下列路由方法：`get`，`post`，`put`，`head`，`delete`，`options`，`trace`，`copy`，`lock`，`mkcol`，`move`，`purge`，`unlock`，`report`，`mkactivity`，`checkout`，`merge`，`m-search`，`notify`，`subscribe`，`unsubscribe`，`patch`和`search`。\n\n路由转换为无效JavaScript变量名称的方法，请使用括号表示法。例如，`app['m-search']('/', function ...`\n\n有一种特殊的路由方法，`app.all()`它不是从任何HTTP方法派生的。此方法用于为所有请求方法的路径提供加载中间件功能。\n\napp.all('/secret', function (req, res, next) {  console.log('Accessing the secret section ...')  next() // pass control to the next handler })\n\n**路由路径**\n\n路由路径与请求方法一起定义了可以进行请求的端点。路径路径可以是字符串，字符串模式或正则表达式。\n\n字符`?`，`+`，`*`，和`()`是他们的正则表达式的对应的子集。字符串路径会逐字解释连字符（`-`）和点（`.`）。\n\n如果您需要在路径字符串中使用字符（`$`），请将其包含在`([])`之内。例如，“ `/data/$book`” 处的请求的路径字符串将是“ `/data/([\\$])book`”。\n\n**以下是一些基于字符串模式的路由路径示例。**\n\n此路由路径将匹配`acd`并`abcd`。\n\n```javascript\napp.get('/ab?cd', function (req, res) {\n  res.send('ab?cd')\n})\n```\n\n复制\n\n这条路由的路径将会匹配`abcd`，`abbcd`，`abbbcd`等等。\n\n```javascript\napp.get('/ab+cd', function (req, res) {\n  res.send('ab+cd')\n})\n```\n\n复制\n\n这条路线的路径匹配`abcd`，`abxcd`，`abRANDOMcd`，`ab123cd`等。\n\n```javascript\napp.get('/ab*cd', function (req, res) {\n  res.send('ab*cd')\n})\n```\n\n复制\n\n此路由路径将匹配`/abe`并`/abcde`。\n\n```javascript\napp.get('/ab(cd)?e', function (req, res) {\n  res.send('ab(cd)?e')\n})\n```\n\n**在Express 4.x中，[正则表达式中](https://github.com/expressjs/express/issues/2495)[的`*`字符不以通常的方式解释](https://github.com/expressjs/express/issues/2495)。作为解决方法，请使用`{0,}`而不是`*`。Express 5可能会解决这个问题。**\n\n##### 1.响应方法\n\n`res`下表中响应对象（）的方法可以向客户端发送响应，并终止请求 - 响应循环。如果这些方法都不是从路由处理程序调用的，则客户端请求将被挂起。\n\n| 方法               | 描述                                                   |\n| :----------------- | :----------------------------------------------------- |\n| res.download()     | 提示要下载的文件。                                     |\n| res.end()          | 结束响应过程。                                         |\n| res.json（）       | 发送JSON响应。                                         |\n| res.jsonp（）      | 用JSONP支持发送JSON响应。                              |\n| res.redirect（）   | 重定向请求。                                           |\n| res.render（）     | 呈现视图模板。                                         |\n| res.send（）       | 发送各种类型的响应。                                   |\n| res.sendFile（）   | 以八位字节流的形式发送文件。                           |\n| res.sendStatus（） | 设置响应状态代码并将其字符串表示形式作为响应主体发送。 |\n\n##### 2.app.route()\n\n通过使用可以为路由路径创建可链接的路由处理程序`app.route()`。由于路径是在单个位置指定的，所以创建模块化路由很有帮助，因为这可以减少冗余和拼写错误。有关路由的更多信息，请参阅：Router（）文档。\n\n以下是使用定义的链接路由处理程序`app.route()`的示例。\n\n```javascript\napp.route('/book')\n  .get(function (req, res) {\n    res.send('Get a random book')\n  })\n  .post(function (req, res) {\n    res.send('Add a book')\n  })\n  .put(function (req, res) {\n    res.send('Update the book')\n  })\n```\n\n##### 3.express.Router\n\n使用`express.Router`类创建模块化，可挂载的路由处理程序。一个`Router`实例是一个完整的中间件和路由系统; 出于这个原因，它通常被称为“迷你应用程序”。\n\n以下示例将路由器创建为模块，在其中加载中间件功能，定义一些路由并将路由器模块安装在主应用程序的路径中。\n\n在app目录中创建一个`birds.js，`\n\n##### *4.可配置的中间件\n\n如果您需要中间件可配置，则导出一个接受选项对象或其他参数的函数，然后根据输入参数返回中间件实现。\n\nFile: `my-middleware.js`\n\n```javascript\nmodule.exports = function(options) {\n  return function(req, res, next) {\n    // Implement the middleware function based on the options object\n    next()\n  }\n}\n```\n\n复制\n\n现在可以使用中间件，如下所示。\n\n```javascript\nvar mw = require('./my-middleware.js')\n\napp.use(mw({ option1: '1', option2: '2' }))\n```\n\n#### 4.使用中间件\n\n- 执行任何代码。\n\n- 对请求和响应对象进行更改。\n\n- 结束请求 - 响应循环。\n\n- 调用堆栈中的下一个中间件功能。next()\n\n如果当前的中间件功能没有结束请求 - 响应周期，则它必须调用`next()`以将控制传递给下一个中间件功能。否则，请求将被挂起。\n\nExpress应用程序可以使用以下类型的中间件：\n\n- Application-level middleware\n\n- 路由器级中间件\n\n- 错误处理中间件\n\n- 内置中间件\n\n- 第三方中间件\n\n\n\n---\n\n下面是一个在装载点加载一系列中间件功能的例子，带有装载路径。它演示了一个中间件子堆栈，用于打印任何类型的HTTP请求到`/user/:id`路径的请求信息。\n\n```javascript\napp.use('/user/:id', function (req, res, next) {\n  console.log('Request URL:', req.originalUrl)\n  next()\n}, function (req, res, next) {\n  console.log('Request Type:', req.method)\n  next()\n})\n```\n\n## 路由器级中间件\n\n路由器级中间件的工作方式与应用级中间件的工作方式相同，只是它绑定到一个实例`express.Router()`。\n\n```javascript\nvar router = express.Router()\n```\n\n复制\n\n使用`router.use()`和`router.METHOD()`函数加载路由器级中间件。\n\n以下示例代码通过使用路由器级中间件来复制上面显示的用于应用程序级中间件的中间件系统：\n\n```javascript\nvar app = express()\nvar router = express.Router()\n\n// a middleware function with no mount path. This code is executed for every request to the router\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\n\n// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path\nrouter.use('/user/:id', function (req, res, next) {\n  console.log('Request URL:', req.originalUrl)\n  next()\n}, function (req, res, next) {\n  console.log('Request Type:', req.method)\n  next()\n})\n\n// a middleware sub-stack that handles GET requests to the /user/:id path\nrouter.get('/user/:id', function (req, res, next) {\n  // if the user ID is 0, skip to the next router\n  if (req.params.id === '0') next('route')\n  // otherwise pass control to the next middleware function in this stack\n  else next()\n}, function (req, res, next) {\n  // render a regular page\n  res.render('regular')\n})\n\n// handler for the /user/:id path, which renders a special page\nrouter.get('/user/:id', function (req, res, next) {\n  console.log(req.params.id)\n  res.render('special')\n})\n\n// mount the router on the app\napp.use('/', router)\n```\n\n***next('router')** ?\n\n跳过路由器的其他中间件功能，请调用`next('router')`以将控制权从路由器实例中退出\n","source":"_posts/node入门.md","raw":"---\ntitle: node基础\n\nauthor: codefish\ndate: 2022-6-10 20:12:10\ncategories: extension\ntags: [node]\ntop_img: /img/Craig Adderley.jpg\ncover: /img/Craig Adderley.jpg\n---\n\nnode主要是利用ECMAScript的核心语法封装的js库，你可以用它构建一个简单的服务器，或者读取excel,修改本地文件等\n\n## 1.fs模块\n\n*fs.readFile()  用来读取指定文件中的内容*\n\n*fs.writeFile()  写入文件*\n\n```js\n//1.存放路径\n//2.编码格式\n//3.回调函数\nconst fs = require('fs')\nfs.readFile('./assets/read.txt','utf-8',function(err,dataStr){\n    console.log(err+'-失败')\n    console.log(dataStr+'成功读取的数据')\n})\n\n-> 结果\nnull-失败\n读取文件\n成功读取的数据\n\n-> 读取失败\nerr的值为错误对象\ndataStr 为 underfinded\n    \n```\n\n\n\n### 1.**判断是否读取成功**\n\n判断err是否为空\n\n### 2，向指定文件写入内容\n\n````js\n//1.文件路径\n//2.写入内容\n//3.编码格式\n//4.回调函数-\nconst fs = require('fs')\nfs.writeFile('./assets/a.txt','111','utf-8',function(err){\n    if(err){\n        return console.log('写入失败',err.message)\n    }\n    console.log('文件写入成功')\n})\n// fs.writeFile('G:/assets/a.txt','111','utf-8',function(err,a){\n//     console.log(err,a)\n// })\n\n//结果\nnull\n\n如果写入失败-err的值为一个错位对象\n\n````\n\n### 3.整理文件\n\n**问题**\n\n*1.replace不写正则为单个匹配*\n\n*2.写入时候replace替代的是%n无效果*\n\n*3.\\n 与 ，/n*\n\n```js\nconst fs = require(\"fs\");\nfs.readFile(\"./assets/read.txt\", \"utf-8\", (err, res) => {\n  if (err) {\n    return console.log(\"读取失败\" + err.message);\n  }\n  let data = fn(res);\n  write(data);\n});\nfunction fn(res) {\n  // return res.replace('-',':').replace(' ','%n')\n  let data = res.split(\" \");\n  let newstr = \"\";\n  for (var i = 0; i < data.length; i++) {\n    newstr = data[i].replace(\"-\", \":\") + \" \\n\" + newstr;\n  }\n  return newstr;\n}\nfunction write(data) {\n  fs.writeFile(\"./assets/write.txt\", data, \"utf-8\", (err) => {\n    if (err) {\n      return console.log(\"写入失败\" + err.message);\n    }\n    console.log(\"写入成功\");\n  });\n}\n\n```\n\n#### ，路径动态拼接的问题\n\n*在使用fs模块操作文件时，如果提供的操作路径是以./或者../开头的相对路径时，很容易出现路径动态拼接错误的问题*\n\n*原因：代码在执行的时候，会以执行node命令时所处的目录，动态拼接出被操作文件的完整路径*\n\n**即在当前路径下执行代码不会有问题，如果在其他路径下执行就会出现问题**\n\n---\n\n**解决：**\n\n```js\n//使用绝对路径去替换相对路径\n__dirname 代表当前文件所在路径\n\n//使用当前文件路径拼接\nreadFile(__dirname+\"/assets/read.txt\", \"utf-8\", ()=>{})\n```\n\n\n\n，11\n\n\n\n## 2.path模块\n\n***path.join()***:用来将多个路径片段拼接为一个完整的路径字符串\n\n***path.basename()***：用来从路径字符串中，将文件名解析出来\n\n\n\n### 1.*path.join([...args])*\n\n*../ 可以抵消路径 抵消上一层路径*\n\n**eg:**\n\n['/a/b','../'] \n\n**此处可以抵消/b**\n\n\n\n凡是涉及路径拼接的操作之后都使用**path.join()**来处理\n\n\n\n### 2.path.basename()\n\n```js\npath.basename(filespath[,ext])\n//1.filespath一个路径的字符串\n//2.ext 可选参数 ，表示文件扩展名\n//3.返回：<string> 表示路径的最后一部分\n```\n\n\n\neg：\n\n```js\nconst fpath = '/b/c/index.html'\nvar fullName = path.basename(fpath)\nconsole.log(fullName)  //  index.html\n\nvar nameWithoutExt = path.basename('path','.html')\nconsole.log(nameWidthExt) // -> 输出 index\n```\n\n### 3.path.extname()\n\n打印拓展名\n\n```js\nconst fext = path.extname(fpath)\nconsole.log(fext,'-fext')\n```\n\n\n\n## 3.分离css,html,js案例\n\n注意点；\n\n- 重复调用fs.writeFile() 后写入的会覆盖之前写入的\n\n- fs.writeFile()只能用来创建文件，不能用来创建路径\n\n  ```js\n  const fs = require('fs')\n  const { resolve } = require('path')\n  const path = require('path')\n  fs.readFile('./eg1/eg.html','utf-8',(err,sucmsg)=>{\n      if(err){\n          console.log('读取失败',err.message)\n          return\n      }\n      handle(sucmsg)\n  })\n  function handle(data){\n      //匹配三个模块的正则\n      let cssexg = /<style>[\\s\\S]*<\\/style>/ ///<style>[\\s\\S]*</style>/g\n      let jsexg = /<script>[\\s\\S]*<\\/script>/\n      let htmlmsg = data.match()\n      //定义处理css样式的方法\n      //使用正则提取内容\n      var cssPart = cssexg.exec(data) + ''\n      var jsPart = jsexg.exec(data) + ''\n      var htmlPart = data.replace(cssPart,'<link rel=\"stylesheet\" href=\"./index.css\">').replace(jsPart,'<script src=\"./index.js\"></script>')\n      //去掉首尾的style和script标签\n      cssPart = cssPart.replace('<style>','').replace('</style>','')\n      jsPart = jsPart.replace('<script>','').replace('<script>','')\n      //存储在当前的文件中\n      fs.writeFile(path.join(__dirname,'./index.css'),cssPart,(err)=>{\n          if(err){\n              return console.log(\"存储css文件失败\",err.message)\n          }\n      })\n      fs.writeFile(path.join(__dirname,'./index.js'),jsPart,(err)=>{\n          if(err){\n             return console.log(\"存储js文件失败\",err.message)\n          }\n      })\n      fs.writeFile(path.join(__dirname,'./index.html'),htmlPart,(err)=>{\n          if(err){\n              console.log(\"存储html文件失败\",err.message)\n          }\n      })\n      //开始写为fs.writeFile(path.join(__dirname,'./clock/index.js'),由于clock文件夹不存在导致存储失败\n  }\n  ```\n\n  \n\n## 4.http模块\n\n**1.初步接触**\n\n```js\n//web服务器\n//1.导入http模块\n//2.创建web服务器实例\n//3.绑定requise事件\n//4.启动服务器\n\nconst http =  require('http')\nconst server = http.createServer()\n// 3.绑定requise事件\nserver.on('request',function(req,res){\n    console.log('Someone visit our web server');\n})\n//4.启动服务器\nserver.listen(8080,function(){\n    console.log('server listenging 8080')\n    //有人访问-就会一直响应\n})\n```\n\n\n\n**2.返回中文会出现乱码问题**-res\n\n**解决**：res.setHeader('Content-Type','text/html;charset=utf-8')\n\n中间为分号（非冒号)\n\n```js\n//req请求对象\n//只要服务器接收到了客户端的请求，就会通过调用server.on()为服务器绑定的request事件处理函数，\n//如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式\nconst http = require('http')\nconst server = http.createServer()\nserver.on('request',(req,res)=>{\n    console.log('server is running ',req.url,req.method)\n    const url = req.url\n    const method = req.method\n    const str = `Your request url is ${url},and request method id ${method},'中文'`\n    res.setHeader('Content-Type','text/html;charset=utf-8')\n    res.end(str)\n})\nserver.listen(8080,function(){\n    return console.log('serve running at http://localhost:8080/')\n})\n```\n\n**3.根据不同url响应不同的页面内容**\n\n1.核心实现步骤\n\n- 获取请求的url\n- 设置默认的响应内容为404 Not found\n- 判断用户的请求是否为/或index.html页面\n- 判断用户请求是否为/about.html关于页面\n- 设置Content-Type响应头，防止中文乱码\n- 使用res.end()把内容响应给客户端\n\n```js\nconst http = require('http')\nconst server = http.createServer()\nserver.on('request',(req,res)=>{\n    console.log('server is running ',req.url,req.method)\n    const url = req.url\n    const method = req.method\n    res.setHeader('Content-Type','text/html;charset=utf-8')\n    let content = `<h3>404 not found</h3> </br>Your request url is ${url},and request method id ${method},'中文'`\n    if(url==='/'||url=='/index.html'){\n        content = `<h3>首页</h3>`\n    }else if(url==='/about.html'){\n        content = `<h1>关于页面</h1>`\n    }\n    res.end(content)\n})\nserver.listen(8080,function(){\n    return console.log('serve running at http://localhost:8080/')\n})\n```\n\n## 5.http案例\n\n**将时钟案例的三个文件，根据url地址的不同，返回给客户端**\n\n实现思路\n\n**将文件的实际路径，作为每个资源的url地址**\n\n\n\n磁盘文件-由服务端读取-返回给客户端（文件流，数据的形式\n\n1. 导入需要的模块\n2. 创建基本的web服务器\n3. 将资源的请求url地址映射为文件的存放路径\n4. 读取文件内容并响应给客户端\n5. 优化资源的请求路径\n\n\n\n**问题**：..path 无法读取文件\n\nfpath = '../eg1' = url\n\n解决path.join(__dirname,fpath)\n\n\n\n\n\n## 6.Node模块化\n\n### 1.模块分类\n\n1. 内置模块\n\n   ---\n\n   由Node.js官方提供的，例如fs,path,http\n\n2. 自定义模块\n\n   ---\n\n   用户创建的每个js文件都是自定义模块\n\n3. 第三方模块\n\n   ---\n\n   由第三方开发的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，试用前需要先下载\n\n4. 1\n\n   \n\n### 2.加载模块\n\n使用强大的require()方法，可以加载需要的内置模块，用户自定义模块，第三方模块使用\n\n- const fs = require('fs')  加载内置的fs模块\n- const custom = require('./custom.js') 加载用户的自定义模块\n- const moment = require('moment') 加载第三方模块（关于第三方模块的下载和使用）\n- \n\n**注意**：使用require()方法加载其他模块时，会执行加载模块中的代码\n\n\n\n### 3.对象和属性\n\n#### 1.module.exports对象\n\n在自定义对象中，可以使用module.exports对象，将模块内的成员共享出去，供外界使用，外界使用require() 导入自定义模块时，得到的就是module.exports所指向的对象。\n\n**使用require()时导入的以**module.export为准\n\n**exports和module.exports**-挂载对象结果一致\n\n**最终共享的结果，以module.exports以准**\n\n\n\n**1.案例1**\n\n```js\n//当exports 和 module.exports 同时存在的时候，module会覆盖之前export挂载的内容\n\nexport.username = \"张三\"\n\nmodule.exports = {\n    name:\"里斯\",\n    age:23\n}\n//最终结果为： Object\n{name:\"里斯\",age:23}\n\n```\n\n**2.案例2**\n\n````js\nmodule.exports.username = \"张三\" //object 1\n\nexports = {  //object 2\n    name:\"里斯\",\n    age:23\n}\n//最终结果为： Object\n{username:\"张三\"}\n\n//开始时候，export和module.export指向object1 \n//exports = {}  让export指向对象2\n````\n\n**3.案例3**\n\n```js\nmodule.exports.name = \"zhang\"\nexport.age = 23\n\n//结果为\n{name:\"zhang\",age: 23}\n```\n\n**案例4**\n\n```js\nexport = {  //object 2\n    name:\"里斯\",\n    age:23\n}\nmodule.exports = exports\nmodule.exports.sex = \"female\"\n\n//结果-具备所有的属性\n```\n\n\n\n\n\n#### 2.common.js规范\n\n1. 每个模块内部，module()变量代表当前模块\n2. module变量是一个对象，他的exports属性（module.exports)是对外的接口，\n3. 加载某个模块，其实是加载改模块的module.exports属性，require()用于加载模块\n\n\n\n#### 3.npm 与 包\n\n--(node Package Manager)--\n\n包： 第三方模块\n\n包的来源： 第三方个人或者团队开发出来的，免费提供所有人使用\n\n注意：Node.js中的包都是免费开源的 ，不需要付费既可以免费下载使用\n\n需要包： 基于内置 模块开发时，效率很低-包是基于内置模块封装出来的\n\n包的下载： npm,inc公司下的npm.js\n\n##### 1.格式化时间\n\n```js\n1.创建格式化时间的函数\n2.创建补零函数\n3.导出格式化时间的函数\n```\n\n```js\nfunction dataForm(dtStr){\n\tconst dt = new Date(daStr)\n    const y = padZero(dt.getFullYear()) //所有的都需要补0\n    const m = dt.getMonth() + 1\n    const d = dt.getDate()\n    const h = dt.getHours()\n    const mins = dt.getMinutes()\n    const s = dt.getSeconds()\n    //return 'YYYY-MM-DD HH:mm:ss'\n    return `${y}-${m}-${d} ${h}:${m}:${s}`\n}\n\nfunction padZero(n){\n    return n>9 ? n : '0' +n\n}\n\nmodule.exports = {\n    dataForm()\n}\n```\n\n\n\n##### 2.使用包\n\n```js\nconst moment = require('moment')\nconst dt = moment().format(\"YYYY-MM-DD HH-mm-ss\")\n\nmoment() //获取当前时间\n//   一个m不补零 - 其他相同\n```\n\n### 4.模块加载机制\n\n**1.优先从缓存加载**\n\n模块在第一次加载后会被缓存\n\nrequire 同时三次 - 后面的不会执行\n\n**2,内置模块的加载机制**\n\n内置模块的优先级最高\n\n### 5.自定义模块的加载机制\n\n1. 没有指定./ -- 把其当作内置模块或者第三方模块\n\n2. 省略了文件名，\n\n   ```js\n   1.安装切确的文件名进行加载 \n   2.补全.js进行加载\n   3.补全.json扩展名进行加载\n   4.补全.node拓展名进行加载\n   5.加载失败提示\n   ```\n\n   ### \n\n\n\n### 6.加载第三方模块\n\n```js\n//如果不是一个内置模块，也没有以../或者./开通，则会在node_modules文件夹中加载第三方模块\n\n//如果没有找到对应的第三方模块，则移动到再上一级父目录中，进行加载，直到文件系统的根目录\n\n\n```\n\n\n\n### 7.目录作为模块\n\n当把目录当作模块标识符，传递给require()进行加载的时候，有三种加载方式。\n\n1. 被加载的目录下查找一个叫做package.json的文件，并寻找main属性，作为require() 加载的入口\n2. 如果入口没有package.json文件，或者入口不存在或无法解析，则node.js会试图加载目录下的index.js文件\n3. 如果以上两步都失败了，则node.js会在终端打印错误信息，报告模块的缺失。Error:cannot find module \"xxx\"\n\n\n\n## 7.express模块\n\n1. 托管静态资源\n2. 使用路由精简项目结构\n3. 能够使用常见的中间键\n4. 能够使用express创建API接口\n5. 能够在express中启用CORS跨域资源共享\n\nexpress: 快速，开放，极简的web开发框架，进一步开发，极大的提示开发效率\n\n- web网站服务器：提供web网页资源的服务器\n- API接口服务器：专门对外提供api接口的服务器\n\n\n\n#### 1.基本使用\n\n- 创建基本web服务器\n\n  ```js\n  //1.导入express\n  const express = require('express')\n  //2.创建web服务器\n  const app = express()\n  //4.监听get和post请求-并响应\n  app.get('/user',(req,res)=>{\n      //调用express提供的res.send()方法，向客户端响应一个json对象\n      res.send({name:\"zs\",age:20,gender:\"男\"})\n  })\n  app.post('/user',(req.res)=>{\n      app.send({name:\"ls\",age:20,gender:\"女\"})\n  })\n  //启动服务器\n  app.listen(80,()=>{\n  console.log(\"express server running at http://127.0.0.1\")\n  })\n  ```\n\n  \n\n- 监听Get请求\n\n  ```js\n  ///通过app.get()方法 ，可以监听客户端的GET请求，具体的语法格式如下：\n  /*\n  *params\n  *1.url地址\n  *2.处理函数-\n  *   1.req请求对象 (包含了与请i去对象相关的属性和方法)\n  *   2.res响应对象（包含了与响应相关的属性和方法\n  *\n  app.get('url',function(req,res){ \n  //处理函数\n  })\n  ```\n\n  \n\n- app.post监听post请求\n\n- send **把内容响应给客户端**\n\n  ```js\n  app.post('/user',(req,res)=>{\n      //向客户端发送文本内容\n      res.send(\"请求成功\")\n  })\n  ```\n\n  \n\n- **报错**express : 无法将“express”项识别为 cmdlet、函数、脚本文件或可运行程序的名称\n\n如上我们使用 node 的 npm 安装了 express 框架后，并不会顺带着把 express 脚手架安装。\n\n此时，如果直接输入 express 会进行报错，即关键字不识别（环境变量中没有express.exe）。\n\n需要输入如下命令，安装“脚手架”。\n\n```js\nnpm install express express-generator -g\n```\n\n#### 2.中间件加载静态资源\n\n要提供静态文件（如图像，CSS文件和JavaScript文件），请使用`express.static`Express中的内置中间件功能。\n\n函数签名是：\n\n```javascript\nexpress.static(root, [options])\n```\n\n复制\n\n`root`参数指定要从中为静态资产提供服务的根目录。有关`options`参数的更多信息，请参阅express.static。\n\n例如，使用以下代码在名为`public`的目录中提供图像，CSS文件和JavaScript文件：\n\n```javascript\napp.use(express.static('public'))\n```\n\n复制\n\n现在，您可以加载`public`目录中的文件：\n\n```javascript\nhttp://localhost:3000/images/kitten.jpg\nhttp://localhost:3000/css/style.css\nhttp://localhost:3000/js/app.js\nhttp://localhost:3000/images/bg.png\nhttp://localhost:3000/hello.html\n```\n\n复制\n\n Express查找相对于静态目录的文件，因此静态目录的名称不是URL的一部分。 \n\n要使用多个静态资产目录，请`express.static`多次调用中间件函数：\n\n```javascript\napp.use(express.static('public'))\napp.use(express.static('files'))\n```\n\n复制\n\nExpress按照您使用`express.static`中间件功能设置静态目录的顺序查找文件。\n\n注：为获得最佳结果，请使用反向代理缓存来提高服务静态资产的性能。\n\n要为`express.static`函数提供的文件创建虚拟路径前缀（路径实际上不存在于文件系统中），请为静态目录指定一个装载路径，如下所示：\n\n```javascript\napp.use('/static', express.static('public'))\n```\n\n复制\n\n现在，您可以从`/static`路径前缀中加载目录`public`中的文件。\n\n```javascript\nhttp://localhost:3000/static/images/kitten.jpg\nhttp://localhost:3000/static/css/style.css\nhttp://localhost:3000/static/js/app.js\nhttp://localhost:3000/static/images/bg.png\nhttp://localhost:3000/static/hello.html\n```\n\n复制\n\n但是，您提供给`express.static`函数的路径是相对于启动`node`过程的目录。如果您从其他目录运行快速应用程序，则使用您想要提供的目录的绝对路径更安全：\n\n```javascript\napp.use('/static', express.static(path.join(__dirname, 'public')))\n```\n\n复制\n\n有关该`serve-static`函数及其选项的更多详细信息，请参阅[serve-static](http://expressjs.com/en/resources/middleware/serve-static.html)。\n\n**注意：**\n\n1. public 目录默认找的是当前运行的目录-即如果你在a目录下运行./src/express/index.js，他最终会在当前目录下寻找public文件夹\n\n\n\n#### 3.路由\n\nExpress支持对应于HTTP方法的下列路由方法：`get`，`post`，`put`，`head`，`delete`，`options`，`trace`，`copy`，`lock`，`mkcol`，`move`，`purge`，`unlock`，`report`，`mkactivity`，`checkout`，`merge`，`m-search`，`notify`，`subscribe`，`unsubscribe`，`patch`和`search`。\n\n路由转换为无效JavaScript变量名称的方法，请使用括号表示法。例如，`app['m-search']('/', function ...`\n\n有一种特殊的路由方法，`app.all()`它不是从任何HTTP方法派生的。此方法用于为所有请求方法的路径提供加载中间件功能。\n\napp.all('/secret', function (req, res, next) {  console.log('Accessing the secret section ...')  next() // pass control to the next handler })\n\n**路由路径**\n\n路由路径与请求方法一起定义了可以进行请求的端点。路径路径可以是字符串，字符串模式或正则表达式。\n\n字符`?`，`+`，`*`，和`()`是他们的正则表达式的对应的子集。字符串路径会逐字解释连字符（`-`）和点（`.`）。\n\n如果您需要在路径字符串中使用字符（`$`），请将其包含在`([])`之内。例如，“ `/data/$book`” 处的请求的路径字符串将是“ `/data/([\\$])book`”。\n\n**以下是一些基于字符串模式的路由路径示例。**\n\n此路由路径将匹配`acd`并`abcd`。\n\n```javascript\napp.get('/ab?cd', function (req, res) {\n  res.send('ab?cd')\n})\n```\n\n复制\n\n这条路由的路径将会匹配`abcd`，`abbcd`，`abbbcd`等等。\n\n```javascript\napp.get('/ab+cd', function (req, res) {\n  res.send('ab+cd')\n})\n```\n\n复制\n\n这条路线的路径匹配`abcd`，`abxcd`，`abRANDOMcd`，`ab123cd`等。\n\n```javascript\napp.get('/ab*cd', function (req, res) {\n  res.send('ab*cd')\n})\n```\n\n复制\n\n此路由路径将匹配`/abe`并`/abcde`。\n\n```javascript\napp.get('/ab(cd)?e', function (req, res) {\n  res.send('ab(cd)?e')\n})\n```\n\n**在Express 4.x中，[正则表达式中](https://github.com/expressjs/express/issues/2495)[的`*`字符不以通常的方式解释](https://github.com/expressjs/express/issues/2495)。作为解决方法，请使用`{0,}`而不是`*`。Express 5可能会解决这个问题。**\n\n##### 1.响应方法\n\n`res`下表中响应对象（）的方法可以向客户端发送响应，并终止请求 - 响应循环。如果这些方法都不是从路由处理程序调用的，则客户端请求将被挂起。\n\n| 方法               | 描述                                                   |\n| :----------------- | :----------------------------------------------------- |\n| res.download()     | 提示要下载的文件。                                     |\n| res.end()          | 结束响应过程。                                         |\n| res.json（）       | 发送JSON响应。                                         |\n| res.jsonp（）      | 用JSONP支持发送JSON响应。                              |\n| res.redirect（）   | 重定向请求。                                           |\n| res.render（）     | 呈现视图模板。                                         |\n| res.send（）       | 发送各种类型的响应。                                   |\n| res.sendFile（）   | 以八位字节流的形式发送文件。                           |\n| res.sendStatus（） | 设置响应状态代码并将其字符串表示形式作为响应主体发送。 |\n\n##### 2.app.route()\n\n通过使用可以为路由路径创建可链接的路由处理程序`app.route()`。由于路径是在单个位置指定的，所以创建模块化路由很有帮助，因为这可以减少冗余和拼写错误。有关路由的更多信息，请参阅：Router（）文档。\n\n以下是使用定义的链接路由处理程序`app.route()`的示例。\n\n```javascript\napp.route('/book')\n  .get(function (req, res) {\n    res.send('Get a random book')\n  })\n  .post(function (req, res) {\n    res.send('Add a book')\n  })\n  .put(function (req, res) {\n    res.send('Update the book')\n  })\n```\n\n##### 3.express.Router\n\n使用`express.Router`类创建模块化，可挂载的路由处理程序。一个`Router`实例是一个完整的中间件和路由系统; 出于这个原因，它通常被称为“迷你应用程序”。\n\n以下示例将路由器创建为模块，在其中加载中间件功能，定义一些路由并将路由器模块安装在主应用程序的路径中。\n\n在app目录中创建一个`birds.js，`\n\n##### *4.可配置的中间件\n\n如果您需要中间件可配置，则导出一个接受选项对象或其他参数的函数，然后根据输入参数返回中间件实现。\n\nFile: `my-middleware.js`\n\n```javascript\nmodule.exports = function(options) {\n  return function(req, res, next) {\n    // Implement the middleware function based on the options object\n    next()\n  }\n}\n```\n\n复制\n\n现在可以使用中间件，如下所示。\n\n```javascript\nvar mw = require('./my-middleware.js')\n\napp.use(mw({ option1: '1', option2: '2' }))\n```\n\n#### 4.使用中间件\n\n- 执行任何代码。\n\n- 对请求和响应对象进行更改。\n\n- 结束请求 - 响应循环。\n\n- 调用堆栈中的下一个中间件功能。next()\n\n如果当前的中间件功能没有结束请求 - 响应周期，则它必须调用`next()`以将控制传递给下一个中间件功能。否则，请求将被挂起。\n\nExpress应用程序可以使用以下类型的中间件：\n\n- Application-level middleware\n\n- 路由器级中间件\n\n- 错误处理中间件\n\n- 内置中间件\n\n- 第三方中间件\n\n\n\n---\n\n下面是一个在装载点加载一系列中间件功能的例子，带有装载路径。它演示了一个中间件子堆栈，用于打印任何类型的HTTP请求到`/user/:id`路径的请求信息。\n\n```javascript\napp.use('/user/:id', function (req, res, next) {\n  console.log('Request URL:', req.originalUrl)\n  next()\n}, function (req, res, next) {\n  console.log('Request Type:', req.method)\n  next()\n})\n```\n\n## 路由器级中间件\n\n路由器级中间件的工作方式与应用级中间件的工作方式相同，只是它绑定到一个实例`express.Router()`。\n\n```javascript\nvar router = express.Router()\n```\n\n复制\n\n使用`router.use()`和`router.METHOD()`函数加载路由器级中间件。\n\n以下示例代码通过使用路由器级中间件来复制上面显示的用于应用程序级中间件的中间件系统：\n\n```javascript\nvar app = express()\nvar router = express.Router()\n\n// a middleware function with no mount path. This code is executed for every request to the router\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\n\n// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path\nrouter.use('/user/:id', function (req, res, next) {\n  console.log('Request URL:', req.originalUrl)\n  next()\n}, function (req, res, next) {\n  console.log('Request Type:', req.method)\n  next()\n})\n\n// a middleware sub-stack that handles GET requests to the /user/:id path\nrouter.get('/user/:id', function (req, res, next) {\n  // if the user ID is 0, skip to the next router\n  if (req.params.id === '0') next('route')\n  // otherwise pass control to the next middleware function in this stack\n  else next()\n}, function (req, res, next) {\n  // render a regular page\n  res.render('regular')\n})\n\n// handler for the /user/:id path, which renders a special page\nrouter.get('/user/:id', function (req, res, next) {\n  console.log(req.params.id)\n  res.render('special')\n})\n\n// mount the router on the app\napp.use('/', router)\n```\n\n***next('router')** ?\n\n跳过路由器的其他中间件功能，请调用`next('router')`以将控制权从路由器实例中退出\n","slug":"node入门","published":1,"updated":"2025-01-07T02:30:25.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0cr8001k572og9xsc9qr","content":"<p>node主要是利用ECMAScript的核心语法封装的js库，你可以用它构建一个简单的服务器，或者读取excel,修改本地文件等</p>\n<h2 id=\"1-fs模块\"><a href=\"#1-fs模块\" class=\"headerlink\" title=\"1.fs模块\"></a>1.fs模块</h2><p><em>fs.readFile()  用来读取指定文件中的内容</em></p>\n<p><em>fs.writeFile()  写入文件</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.存放路径</span></span><br><span class=\"line\"><span class=\"comment\">//2.编码格式</span></span><br><span class=\"line\"><span class=\"comment\">//3.回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./assets/read.txt&#x27;</span>,<span class=\"string\">&#x27;utf-8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,dataStr</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err+<span class=\"string\">&#x27;-失败&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataStr+<span class=\"string\">&#x27;成功读取的数据&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; 结果</span><br><span class=\"line\"><span class=\"literal\">null</span>-失败</span><br><span class=\"line\">读取文件</span><br><span class=\"line\">成功读取的数据</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; 读取失败</span><br><span class=\"line\">err的值为错误对象</span><br><span class=\"line\">dataStr 为 underfinded</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-判断是否读取成功\"><a href=\"#1-判断是否读取成功\" class=\"headerlink\" title=\"1.判断是否读取成功\"></a>1.<strong>判断是否读取成功</strong></h3><p>判断err是否为空</p>\n<h3 id=\"2，向指定文件写入内容\"><a href=\"#2，向指定文件写入内容\" class=\"headerlink\" title=\"2，向指定文件写入内容\"></a>2，向指定文件写入内容</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.文件路径</span></span><br><span class=\"line\"><span class=\"comment\">//2.写入内容</span></span><br><span class=\"line\"><span class=\"comment\">//3.编码格式</span></span><br><span class=\"line\"><span class=\"comment\">//4.回调函数-</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">writeFile</span>(<span class=\"string\">&#x27;./assets/a.txt&#x27;</span>,<span class=\"string\">&#x27;111&#x27;</span>,<span class=\"string\">&#x27;utf-8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入失败&#x27;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;文件写入成功&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// fs.writeFile(&#x27;G:/assets/a.txt&#x27;,&#x27;111&#x27;,&#x27;utf-8&#x27;,function(err,a)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(err,a)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果写入失败-err的值为一个错位对象</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-整理文件\"><a href=\"#3-整理文件\" class=\"headerlink\" title=\"3.整理文件\"></a>3.整理文件</h3><p><strong>问题</strong></p>\n<p><em>1.replace不写正则为单个匹配</em></p>\n<p><em>2.写入时候replace替代的是%n无效果</em></p>\n<p><em>3.\\n 与 ，&#x2F;n</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./assets/read.txt&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;读取失败&quot;</span> + err.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"title function_\">fn</span>(res);</span><br><span class=\"line\">  <span class=\"title function_\">write</span>(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return res.replace(&#x27;-&#x27;,&#x27;:&#x27;).replace(&#x27; &#x27;,&#x27;%n&#x27;)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = res.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newstr = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    newstr = data[i].<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;:&quot;</span>) + <span class=\"string\">&quot; \\n&quot;</span> + newstr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newstr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">write</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">writeFile</span>(<span class=\"string\">&quot;./assets/write.txt&quot;</span>, data, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;写入失败&quot;</span> + err.<span class=\"property\">message</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;写入成功&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"，路径动态拼接的问题\"><a href=\"#，路径动态拼接的问题\" class=\"headerlink\" title=\"，路径动态拼接的问题\"></a>，路径动态拼接的问题</h4><p><em>在使用fs模块操作文件时，如果提供的操作路径是以.&#x2F;或者..&#x2F;开头的相对路径时，很容易出现路径动态拼接错误的问题</em></p>\n<p><em>原因：代码在执行的时候，会以执行node命令时所处的目录，动态拼接出被操作文件的完整路径</em></p>\n<p><strong>即在当前路径下执行代码不会有问题，如果在其他路径下执行就会出现问题</strong></p>\n<hr>\n<p><strong>解决：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用绝对路径去替换相对路径</span></span><br><span class=\"line\">__dirname 代表当前文件所在路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用当前文件路径拼接</span></span><br><span class=\"line\"><span class=\"title function_\">readFile</span>(__dirname+<span class=\"string\">&quot;/assets/read.txt&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"function\">()=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>，11</p>\n<h2 id=\"2-path模块\"><a href=\"#2-path模块\" class=\"headerlink\" title=\"2.path模块\"></a>2.path模块</h2><p><em><strong>path.join()</strong></em>:用来将多个路径片段拼接为一个完整的路径字符串</p>\n<p>***path.basename()***：用来从路径字符串中，将文件名解析出来</p>\n<h3 id=\"1-path-join-…args\"><a href=\"#1-path-join-…args\" class=\"headerlink\" title=\"1.path.join([…args])\"></a>1.<em>path.join([…args])</em></h3><p><em>..&#x2F; 可以抵消路径 抵消上一层路径</em></p>\n<p><strong>eg:</strong></p>\n<p>[‘&#x2F;a&#x2F;b’,’..&#x2F;‘] </p>\n<p><strong>此处可以抵消&#x2F;b</strong></p>\n<p>凡是涉及路径拼接的操作之后都使用**path.join()**来处理</p>\n<h3 id=\"2-path-basename\"><a href=\"#2-path-basename\" class=\"headerlink\" title=\"2.path.basename()\"></a>2.path.basename()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"title function_\">basename</span>(filespath[,ext])</span><br><span class=\"line\"><span class=\"comment\">//1.filespath一个路径的字符串</span></span><br><span class=\"line\"><span class=\"comment\">//2.ext 可选参数 ，表示文件扩展名</span></span><br><span class=\"line\"><span class=\"comment\">//3.返回：&lt;string&gt; 表示路径的最后一部分</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fpath = <span class=\"string\">&#x27;/b/c/index.html&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fullName = path.<span class=\"title function_\">basename</span>(fpath)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fullName)  <span class=\"comment\">//  index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nameWithoutExt = path.<span class=\"title function_\">basename</span>(<span class=\"string\">&#x27;path&#x27;</span>,<span class=\"string\">&#x27;.html&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nameWidthExt) <span class=\"comment\">// -&gt; 输出 index</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-path-extname\"><a href=\"#3-path-extname\" class=\"headerlink\" title=\"3.path.extname()\"></a>3.path.extname()</h3><p>打印拓展名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fext = path.<span class=\"title function_\">extname</span>(fpath)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fext,<span class=\"string\">&#x27;-fext&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-分离css-html-js案例\"><a href=\"#3-分离css-html-js案例\" class=\"headerlink\" title=\"3.分离css,html,js案例\"></a>3.分离css,html,js案例</h2><p>注意点；</p>\n<ul>\n<li><p>重复调用fs.writeFile() 后写入的会覆盖之前写入的</p>\n</li>\n<li><p>fs.writeFile()只能用来创建文件，不能用来创建路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./eg1/eg.html&#x27;</span>,<span class=\"string\">&#x27;utf-8&#x27;</span>,<span class=\"function\">(<span class=\"params\">err,sucmsg</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取失败&#x27;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">handle</span>(sucmsg)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//匹配三个模块的正则</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cssexg = <span class=\"regexp\">/&lt;style&gt;[\\s\\S]*&lt;\\/style&gt;/</span> <span class=\"comment\">///&lt;style&gt;[\\s\\S]*&lt;/style&gt;/g</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> jsexg = <span class=\"regexp\">/&lt;script&gt;[\\s\\S]*&lt;\\/script&gt;/</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> htmlmsg = data.<span class=\"title function_\">match</span>()</span><br><span class=\"line\">    <span class=\"comment\">//定义处理css样式的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//使用正则提取内容</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cssPart = cssexg.<span class=\"title function_\">exec</span>(data) + <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> jsPart = jsexg.<span class=\"title function_\">exec</span>(data) + <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> htmlPart = data.<span class=\"title function_\">replace</span>(cssPart,<span class=\"string\">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot;&gt;&#x27;</span>).<span class=\"title function_\">replace</span>(jsPart,<span class=\"string\">&#x27;&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//去掉首尾的style和script标签</span></span><br><span class=\"line\">    cssPart = cssPart.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;style&gt;&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;/style&gt;&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    jsPart = jsPart.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;script&gt;&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;script&gt;&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//存储在当前的文件中</span></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./index.css&#x27;</span>),cssPart,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;存储css文件失败&quot;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./index.js&#x27;</span>),jsPart,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;存储js文件失败&quot;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./index.html&#x27;</span>),htmlPart,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;存储html文件失败&quot;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//开始写为fs.writeFile(path.join(__dirname,&#x27;./clock/index.js&#x27;),由于clock文件夹不存在导致存储失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"4-http模块\"><a href=\"#4-http模块\" class=\"headerlink\" title=\"4.http模块\"></a>4.http模块</h2><p><strong>1.初步接触</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//web服务器</span></span><br><span class=\"line\"><span class=\"comment\">//1.导入http模块</span></span><br><span class=\"line\"><span class=\"comment\">//2.创建web服务器实例</span></span><br><span class=\"line\"><span class=\"comment\">//3.绑定requise事件</span></span><br><span class=\"line\"><span class=\"comment\">//4.启动服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> http =  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>()</span><br><span class=\"line\"><span class=\"comment\">// 3.绑定requise事件</span></span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Someone visit our web server&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//4.启动服务器</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server listenging 8080&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//有人访问-就会一直响应</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2.返回中文会出现乱码问题</strong>-res</p>\n<p><strong>解决</strong>：res.setHeader(‘Content-Type’,’text&#x2F;html;charset&#x3D;utf-8’)</p>\n<p>中间为分号（非冒号)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//req请求对象</span></span><br><span class=\"line\"><span class=\"comment\">//只要服务器接收到了客户端的请求，就会通过调用server.on()为服务器绑定的request事件处理函数，</span></span><br><span class=\"line\"><span class=\"comment\">//如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>()</span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server is running &#x27;</span>,req.<span class=\"property\">url</span>,req.<span class=\"property\">method</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = req.<span class=\"property\">url</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> method = req.<span class=\"property\">method</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> str = <span class=\"string\">`Your request url is <span class=\"subst\">$&#123;url&#125;</span>,and request method id <span class=\"subst\">$&#123;method&#125;</span>,&#x27;中文&#x27;`</span></span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;serve running at http://localhost:8080/&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.根据不同url响应不同的页面内容</strong></p>\n<p>1.核心实现步骤</p>\n<ul>\n<li>获取请求的url</li>\n<li>设置默认的响应内容为404 Not found</li>\n<li>判断用户的请求是否为&#x2F;或index.html页面</li>\n<li>判断用户请求是否为&#x2F;about.html关于页面</li>\n<li>设置Content-Type响应头，防止中文乱码</li>\n<li>使用res.end()把内容响应给客户端</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>()</span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server is running &#x27;</span>,req.<span class=\"property\">url</span>,req.<span class=\"property\">method</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = req.<span class=\"property\">url</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> method = req.<span class=\"property\">method</span></span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = <span class=\"string\">`&lt;h3&gt;404 not found&lt;/h3&gt; &lt;/br&gt;Your request url is <span class=\"subst\">$&#123;url&#125;</span>,and request method id <span class=\"subst\">$&#123;method&#125;</span>,&#x27;中文&#x27;`</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(url===<span class=\"string\">&#x27;/&#x27;</span>||url==<span class=\"string\">&#x27;/index.html&#x27;</span>)&#123;</span><br><span class=\"line\">        content = <span class=\"string\">`&lt;h3&gt;首页&lt;/h3&gt;`</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(url===<span class=\"string\">&#x27;/about.html&#x27;</span>)&#123;</span><br><span class=\"line\">        content = <span class=\"string\">`&lt;h1&gt;关于页面&lt;/h1&gt;`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(content)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;serve running at http://localhost:8080/&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-http案例\"><a href=\"#5-http案例\" class=\"headerlink\" title=\"5.http案例\"></a>5.http案例</h2><p><strong>将时钟案例的三个文件，根据url地址的不同，返回给客户端</strong></p>\n<p>实现思路</p>\n<p><strong>将文件的实际路径，作为每个资源的url地址</strong></p>\n<p>磁盘文件-由服务端读取-返回给客户端（文件流，数据的形式</p>\n<ol>\n<li>导入需要的模块</li>\n<li>创建基本的web服务器</li>\n<li>将资源的请求url地址映射为文件的存放路径</li>\n<li>读取文件内容并响应给客户端</li>\n<li>优化资源的请求路径</li>\n</ol>\n<p><strong>问题</strong>：..path 无法读取文件</p>\n<p>fpath &#x3D; ‘..&#x2F;eg1’ &#x3D; url</p>\n<p>解决path.join(__dirname,fpath)</p>\n<h2 id=\"6-Node模块化\"><a href=\"#6-Node模块化\" class=\"headerlink\" title=\"6.Node模块化\"></a>6.Node模块化</h2><h3 id=\"1-模块分类\"><a href=\"#1-模块分类\" class=\"headerlink\" title=\"1.模块分类\"></a>1.模块分类</h3><ol>\n<li><p>内置模块</p>\n<hr>\n<p>由Node.js官方提供的，例如fs,path,http</p>\n</li>\n<li><p>自定义模块</p>\n<hr>\n<p>用户创建的每个js文件都是自定义模块</p>\n</li>\n<li><p>第三方模块</p>\n<hr>\n<p>由第三方开发的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，试用前需要先下载</p>\n</li>\n<li><p>1</p>\n</li>\n</ol>\n<h3 id=\"2-加载模块\"><a href=\"#2-加载模块\" class=\"headerlink\" title=\"2.加载模块\"></a>2.加载模块</h3><p>使用强大的require()方法，可以加载需要的内置模块，用户自定义模块，第三方模块使用</p>\n<ul>\n<li>const fs &#x3D; require(‘fs’)  加载内置的fs模块</li>\n<li>const custom &#x3D; require(‘.&#x2F;custom.js’) 加载用户的自定义模块</li>\n<li>const moment &#x3D; require(‘moment’) 加载第三方模块（关于第三方模块的下载和使用）</li>\n<li></li>\n</ul>\n<p><strong>注意</strong>：使用require()方法加载其他模块时，会执行加载模块中的代码</p>\n<h3 id=\"3-对象和属性\"><a href=\"#3-对象和属性\" class=\"headerlink\" title=\"3.对象和属性\"></a>3.对象和属性</h3><h4 id=\"1-module-exports对象\"><a href=\"#1-module-exports对象\" class=\"headerlink\" title=\"1.module.exports对象\"></a>1.module.exports对象</h4><p>在自定义对象中，可以使用module.exports对象，将模块内的成员共享出去，供外界使用，外界使用require() 导入自定义模块时，得到的就是module.exports所指向的对象。</p>\n<p><strong>使用require()时导入的以</strong>module.export为准</p>\n<p><strong>exports和module.exports</strong>-挂载对象结果一致</p>\n<p><strong>最终共享的结果，以module.exports以准</strong></p>\n<p><strong>1.案例1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当exports 和 module.exports 同时存在的时候，module会覆盖之前export挂载的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span>.<span class=\"property\">username</span> = <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;里斯&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终结果为： Object</span></span><br><span class=\"line\">&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;里斯&quot;</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.案例2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">username</span> = <span class=\"string\">&quot;张三&quot;</span> <span class=\"comment\">//object 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span> = &#123;  <span class=\"comment\">//object 2</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;里斯&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终结果为： Object</span></span><br><span class=\"line\">&#123;<span class=\"attr\">username</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始时候，export和module.export指向object1 </span></span><br><span class=\"line\"><span class=\"comment\">//exports = &#123;&#125;  让export指向对象2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.案例3</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;zhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span>.<span class=\"property\">age</span> = <span class=\"number\">23</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果为</span></span><br><span class=\"line\">&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;zhang&quot;</span>,<span class=\"attr\">age</span>: <span class=\"number\">23</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>案例4</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> = &#123;  <span class=\"comment\">//object 2</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;里斯&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"built_in\">exports</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">sex</span> = <span class=\"string\">&quot;female&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果-具备所有的属性</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"2-common-js规范\"><a href=\"#2-common-js规范\" class=\"headerlink\" title=\"2.common.js规范\"></a>2.common.js规范</h4><ol>\n<li>每个模块内部，module()变量代表当前模块</li>\n<li>module变量是一个对象，他的exports属性（module.exports)是对外的接口，</li>\n<li>加载某个模块，其实是加载改模块的module.exports属性，require()用于加载模块</li>\n</ol>\n<h4 id=\"3-npm-与-包\"><a href=\"#3-npm-与-包\" class=\"headerlink\" title=\"3.npm 与 包\"></a>3.npm 与 包</h4><p>–(node Package Manager)–</p>\n<p>包： 第三方模块</p>\n<p>包的来源： 第三方个人或者团队开发出来的，免费提供所有人使用</p>\n<p>注意：Node.js中的包都是免费开源的 ，不需要付费既可以免费下载使用</p>\n<p>需要包： 基于内置 模块开发时，效率很低-包是基于内置模块封装出来的</p>\n<p>包的下载： npm,inc公司下的npm.js</p>\n<h5 id=\"1-格式化时间\"><a href=\"#1-格式化时间\" class=\"headerlink\" title=\"1.格式化时间\"></a>1.格式化时间</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>创建格式化时间的函数</span><br><span class=\"line\"><span class=\"number\">2.</span>创建补零函数</span><br><span class=\"line\"><span class=\"number\">3.</span>导出格式化时间的函数</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dataForm</span>(<span class=\"params\">dtStr</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> dt = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(daStr)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y = <span class=\"title function_\">padZero</span>(dt.<span class=\"title function_\">getFullYear</span>()) <span class=\"comment\">//所有的都需要补0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> m = dt.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = dt.<span class=\"title function_\">getDate</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> h = dt.<span class=\"title function_\">getHours</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mins = dt.<span class=\"title function_\">getMinutes</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = dt.<span class=\"title function_\">getSeconds</span>()</span><br><span class=\"line\">    <span class=\"comment\">//return &#x27;YYYY-MM-DD HH:mm:ss&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;y&#125;</span>-<span class=\"subst\">$&#123;m&#125;</span>-<span class=\"subst\">$&#123;d&#125;</span> <span class=\"subst\">$&#123;h&#125;</span>:<span class=\"subst\">$&#123;m&#125;</span>:<span class=\"subst\">$&#123;s&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padZero</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">9</span> ? n : <span class=\"string\">&#x27;0&#x27;</span> +n</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dataForm</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-使用包\"><a href=\"#2-使用包\" class=\"headerlink\" title=\"2.使用包\"></a>2.使用包</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;moment&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> dt = <span class=\"title function_\">moment</span>().<span class=\"title function_\">format</span>(<span class=\"string\">&quot;YYYY-MM-DD HH-mm-ss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">moment</span>() <span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\"><span class=\"comment\">//   一个m不补零 - 其他相同</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-模块加载机制\"><a href=\"#4-模块加载机制\" class=\"headerlink\" title=\"4.模块加载机制\"></a>4.模块加载机制</h3><p><strong>1.优先从缓存加载</strong></p>\n<p>模块在第一次加载后会被缓存</p>\n<p>require 同时三次 - 后面的不会执行</p>\n<p><strong>2,内置模块的加载机制</strong></p>\n<p>内置模块的优先级最高</p>\n<h3 id=\"5-自定义模块的加载机制\"><a href=\"#5-自定义模块的加载机制\" class=\"headerlink\" title=\"5.自定义模块的加载机制\"></a>5.自定义模块的加载机制</h3><ol>\n<li><p>没有指定.&#x2F; – 把其当作内置模块或者第三方模块</p>\n</li>\n<li><p>省略了文件名，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>安装切确的文件名进行加载 </span><br><span class=\"line\"><span class=\"number\">2.</span>补全.<span class=\"property\">js</span>进行加载</span><br><span class=\"line\"><span class=\"number\">3.</span>补全.<span class=\"property\">json</span>扩展名进行加载</span><br><span class=\"line\"><span class=\"number\">4.</span>补全.<span class=\"property\">node</span>拓展名进行加载</span><br><span class=\"line\"><span class=\"number\">5.</span>加载失败提示</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3></li>\n</ol>\n<h3 id=\"6-加载第三方模块\"><a href=\"#6-加载第三方模块\" class=\"headerlink\" title=\"6.加载第三方模块\"></a>6.加载第三方模块</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果不是一个内置模块，也没有以../或者./开通，则会在node_modules文件夹中加载第三方模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果没有找到对应的第三方模块，则移动到再上一级父目录中，进行加载，直到文件系统的根目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-目录作为模块\"><a href=\"#7-目录作为模块\" class=\"headerlink\" title=\"7.目录作为模块\"></a>7.目录作为模块</h3><p>当把目录当作模块标识符，传递给require()进行加载的时候，有三种加载方式。</p>\n<ol>\n<li>被加载的目录下查找一个叫做package.json的文件，并寻找main属性，作为require() 加载的入口</li>\n<li>如果入口没有package.json文件，或者入口不存在或无法解析，则node.js会试图加载目录下的index.js文件</li>\n<li>如果以上两步都失败了，则node.js会在终端打印错误信息，报告模块的缺失。Error:cannot find module “xxx”</li>\n</ol>\n<h2 id=\"7-express模块\"><a href=\"#7-express模块\" class=\"headerlink\" title=\"7.express模块\"></a>7.express模块</h2><ol>\n<li>托管静态资源</li>\n<li>使用路由精简项目结构</li>\n<li>能够使用常见的中间键</li>\n<li>能够使用express创建API接口</li>\n<li>能够在express中启用CORS跨域资源共享</li>\n</ol>\n<p>express: 快速，开放，极简的web开发框架，进一步开发，极大的提示开发效率</p>\n<ul>\n<li>web网站服务器：提供web网页资源的服务器</li>\n<li>API接口服务器：专门对外提供api接口的服务器</li>\n</ul>\n<h4 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1.基本使用\"></a>1.基本使用</h4><ul>\n<li><p>创建基本web服务器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.导入express</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//2.创建web服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"comment\">//4.监听get和post请求-并响应</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用express提供的res.send()方法，向客户端响应一个json对象</span></span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;zs&quot;</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>,<span class=\"attr\">gender</span>:<span class=\"string\">&quot;男&quot;</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/user&#x27;</span>,<span class=\"function\">(<span class=\"params\">req.res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    app.<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;ls&quot;</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>,<span class=\"attr\">gender</span>:<span class=\"string\">&quot;女&quot;</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//启动服务器</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">80</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;express server running at http://127.0.0.1&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>监听Get请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///通过app.get()方法 ，可以监听客户端的GET请求，具体的语法格式如下：</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*params</span></span><br><span class=\"line\"><span class=\"comment\">*1.url地址</span></span><br><span class=\"line\"><span class=\"comment\">*2.处理函数-</span></span><br><span class=\"line\"><span class=\"comment\">*   1.req请求对象 (包含了与请i去对象相关的属性和方法)</span></span><br><span class=\"line\"><span class=\"comment\">*   2.res响应对象（包含了与响应相关的属性和方法</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">app.get(&#x27;url&#x27;,function(req,res)&#123; </span></span><br><span class=\"line\"><span class=\"comment\">//处理函数</span></span><br><span class=\"line\"><span class=\"comment\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>app.post监听post请求</p>\n</li>\n<li><p>send <strong>把内容响应给客户端</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/user&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//向客户端发送文本内容</span></span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;请求成功&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>报错</strong>express : 无法将“express”项识别为 cmdlet、函数、脚本文件或可运行程序的名称</p>\n</li>\n</ul>\n<p>如上我们使用 node 的 npm 安装了 express 框架后，并不会顺带着把 express 脚手架安装。</p>\n<p>此时，如果直接输入 express 会进行报错，即关键字不识别（环境变量中没有express.exe）。</p>\n<p>需要输入如下命令，安装“脚手架”。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express express-generator -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-中间件加载静态资源\"><a href=\"#2-中间件加载静态资源\" class=\"headerlink\" title=\"2.中间件加载静态资源\"></a>2.中间件加载静态资源</h4><p>要提供静态文件（如图像，CSS文件和JavaScript文件），请使用<code>express.static</code>Express中的内置中间件功能。</p>\n<p>函数签名是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express.<span class=\"title function_\">static</span>(root, [options])</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p><code>root</code>参数指定要从中为静态资产提供服务的根目录。有关<code>options</code>参数的更多信息，请参阅express.static。</p>\n<p>例如，使用以下代码在名为<code>public</code>的目录中提供图像，CSS文件和JavaScript文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>现在，您可以加载<code>public</code>目录中的文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/images/kitten.jpg</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/css/style.css</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/js/app.js</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/images/bg.png</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/hello.html</span></span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p> Express查找相对于静态目录的文件，因此静态目录的名称不是URL的一部分。 </p>\n<p>要使用多个静态资产目录，请<code>express.static</code>多次调用中间件函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>))</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;files&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>Express按照您使用<code>express.static</code>中间件功能设置静态目录的顺序查找文件。</p>\n<p>注：为获得最佳结果，请使用反向代理缓存来提高服务静态资产的性能。</p>\n<p>要为<code>express.static</code>函数提供的文件创建虚拟路径前缀（路径实际上不存在于文件系统中），请为静态目录指定一个装载路径，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/static&#x27;</span>, express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>现在，您可以从<code>/static</code>路径前缀中加载目录<code>public</code>中的文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/images/kitten.jpg</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/css/style.css</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/js/app.js</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/images/bg.png</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/hello.html</span></span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>但是，您提供给<code>express.static</code>函数的路径是相对于启动<code>node</code>过程的目录。如果您从其他目录运行快速应用程序，则使用您想要提供的目录的绝对路径更安全：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/static&#x27;</span>, express.<span class=\"title function_\">static</span>(path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;public&#x27;</span>)))</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>有关该<code>serve-static</code>函数及其选项的更多详细信息，请参阅<a href=\"http://expressjs.com/en/resources/middleware/serve-static.html\">serve-static</a>。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>public 目录默认找的是当前运行的目录-即如果你在a目录下运行.&#x2F;src&#x2F;express&#x2F;index.js，他最终会在当前目录下寻找public文件夹</li>\n</ol>\n<h4 id=\"3-路由\"><a href=\"#3-路由\" class=\"headerlink\" title=\"3.路由\"></a>3.路由</h4><p>Express支持对应于HTTP方法的下列路由方法：<code>get</code>，<code>post</code>，<code>put</code>，<code>head</code>，<code>delete</code>，<code>options</code>，<code>trace</code>，<code>copy</code>，<code>lock</code>，<code>mkcol</code>，<code>move</code>，<code>purge</code>，<code>unlock</code>，<code>report</code>，<code>mkactivity</code>，<code>checkout</code>，<code>merge</code>，<code>m-search</code>，<code>notify</code>，<code>subscribe</code>，<code>unsubscribe</code>，<code>patch</code>和<code>search</code>。</p>\n<p>路由转换为无效JavaScript变量名称的方法，请使用括号表示法。例如，<code>app[&#39;m-search&#39;](&#39;/&#39;, function ...</code></p>\n<p>有一种特殊的路由方法，<code>app.all()</code>它不是从任何HTTP方法派生的。此方法用于为所有请求方法的路径提供加载中间件功能。</p>\n<p>app.all(‘&#x2F;secret’, function (req, res, next) {  console.log(‘Accessing the secret section …’)  next() &#x2F;&#x2F; pass control to the next handler })</p>\n<p><strong>路由路径</strong></p>\n<p>路由路径与请求方法一起定义了可以进行请求的端点。路径路径可以是字符串，字符串模式或正则表达式。</p>\n<p>字符<code>?</code>，<code>+</code>，<code>*</code>，和<code>()</code>是他们的正则表达式的对应的子集。字符串路径会逐字解释连字符（<code>-</code>）和点（<code>.</code>）。</p>\n<p>如果您需要在路径字符串中使用字符（<code>$</code>），请将其包含在<code>([])</code>之内。例如，“ <code>/data/$book</code>” 处的请求的路径字符串将是“ <code>/data/([\\$])book</code>”。</p>\n<p><strong>以下是一些基于字符串模式的路由路径示例。</strong></p>\n<p>此路由路径将匹配<code>acd</code>并<code>abcd</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/ab?cd&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;ab?cd&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>这条路由的路径将会匹配<code>abcd</code>，<code>abbcd</code>，<code>abbbcd</code>等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/ab+cd&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;ab+cd&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>这条路线的路径匹配<code>abcd</code>，<code>abxcd</code>，<code>abRANDOMcd</code>，<code>ab123cd</code>等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/ab*cd&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;ab*cd&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>此路由路径将匹配<code>/abe</code>并<code>/abcde</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/ab(cd)?e&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;ab(cd)?e&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>在Express 4.x中，<a href=\"https://github.com/expressjs/express/issues/2495\">正则表达式中</a><a href=\"https://github.com/expressjs/express/issues/2495\">的<code>*</code>字符不以通常的方式解释</a>。作为解决方法，请使用<code>&#123;0,&#125;</code>而不是<code>*</code>。Express 5可能会解决这个问题。</strong></p>\n<h5 id=\"1-响应方法\"><a href=\"#1-响应方法\" class=\"headerlink\" title=\"1.响应方法\"></a>1.响应方法</h5><p><code>res</code>下表中响应对象（）的方法可以向客户端发送响应，并终止请求 - 响应循环。如果这些方法都不是从路由处理程序调用的，则客户端请求将被挂起。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">res.download()</td>\n<td align=\"left\">提示要下载的文件。</td>\n</tr>\n<tr>\n<td align=\"left\">res.end()</td>\n<td align=\"left\">结束响应过程。</td>\n</tr>\n<tr>\n<td align=\"left\">res.json（）</td>\n<td align=\"left\">发送JSON响应。</td>\n</tr>\n<tr>\n<td align=\"left\">res.jsonp（）</td>\n<td align=\"left\">用JSONP支持发送JSON响应。</td>\n</tr>\n<tr>\n<td align=\"left\">res.redirect（）</td>\n<td align=\"left\">重定向请求。</td>\n</tr>\n<tr>\n<td align=\"left\">res.render（）</td>\n<td align=\"left\">呈现视图模板。</td>\n</tr>\n<tr>\n<td align=\"left\">res.send（）</td>\n<td align=\"left\">发送各种类型的响应。</td>\n</tr>\n<tr>\n<td align=\"left\">res.sendFile（）</td>\n<td align=\"left\">以八位字节流的形式发送文件。</td>\n</tr>\n<tr>\n<td align=\"left\">res.sendStatus（）</td>\n<td align=\"left\">设置响应状态代码并将其字符串表示形式作为响应主体发送。</td>\n</tr>\n</tbody></table>\n<h5 id=\"2-app-route\"><a href=\"#2-app-route\" class=\"headerlink\" title=\"2.app.route()\"></a>2.app.route()</h5><p>通过使用可以为路由路径创建可链接的路由处理程序<code>app.route()</code>。由于路径是在单个位置指定的，所以创建模块化路由很有帮助，因为这可以减少冗余和拼写错误。有关路由的更多信息，请参阅：Router（）文档。</p>\n<p>以下是使用定义的链接路由处理程序<code>app.route()</code>的示例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">route</span>(<span class=\"string\">&#x27;/book&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Get a random book&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">post</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Add a book&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">put</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Update the book&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-express-Router\"><a href=\"#3-express-Router\" class=\"headerlink\" title=\"3.express.Router\"></a>3.express.Router</h5><p>使用<code>express.Router</code>类创建模块化，可挂载的路由处理程序。一个<code>Router</code>实例是一个完整的中间件和路由系统; 出于这个原因，它通常被称为“迷你应用程序”。</p>\n<p>以下示例将路由器创建为模块，在其中加载中间件功能，定义一些路由并将路由器模块安装在主应用程序的路径中。</p>\n<p>在app目录中创建一个<code>birds.js，</code></p>\n<h5 id=\"4-可配置的中间件\"><a href=\"#4-可配置的中间件\" class=\"headerlink\" title=\"*4.可配置的中间件\"></a>*4.可配置的中间件</h5><p>如果您需要中间件可配置，则导出一个接受选项对象或其他参数的函数，然后根据输入参数返回中间件实现。</p>\n<p>File: <code>my-middleware.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Implement the middleware function based on the options object</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>现在可以使用中间件，如下所示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mw = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-middleware.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">mw</span>(&#123; <span class=\"attr\">option1</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"attr\">option2</span>: <span class=\"string\">&#x27;2&#x27;</span> &#125;))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-使用中间件\"><a href=\"#4-使用中间件\" class=\"headerlink\" title=\"4.使用中间件\"></a>4.使用中间件</h4><ul>\n<li><p>执行任何代码。</p>\n</li>\n<li><p>对请求和响应对象进行更改。</p>\n</li>\n<li><p>结束请求 - 响应循环。</p>\n</li>\n<li><p>调用堆栈中的下一个中间件功能。next()</p>\n</li>\n</ul>\n<p>如果当前的中间件功能没有结束请求 - 响应周期，则它必须调用<code>next()</code>以将控制传递给下一个中间件功能。否则，请求将被挂起。</p>\n<p>Express应用程序可以使用以下类型的中间件：</p>\n<ul>\n<li><p>Application-level middleware</p>\n</li>\n<li><p>路由器级中间件</p>\n</li>\n<li><p>错误处理中间件</p>\n</li>\n<li><p>内置中间件</p>\n</li>\n<li><p>第三方中间件</p>\n</li>\n</ul>\n<hr>\n<p>下面是一个在装载点加载一系列中间件功能的例子，带有装载路径。它演示了一个中间件子堆栈，用于打印任何类型的HTTP请求到<code>/user/:id</code>路径的请求信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/user/:id&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request URL:&#x27;</span>, req.<span class=\"property\">originalUrl</span>)</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request Type:&#x27;</span>, req.<span class=\"property\">method</span>)</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由器级中间件\"><a href=\"#路由器级中间件\" class=\"headerlink\" title=\"路由器级中间件\"></a>路由器级中间件</h2><p>路由器级中间件的工作方式与应用级中间件的工作方式相同，只是它绑定到一个实例<code>express.Router()</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = express.<span class=\"title class_\">Router</span>()</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>使用<code>router.use()</code>和<code>router.METHOD()</code>函数加载路由器级中间件。</p>\n<p>以下示例代码通过使用路由器级中间件来复制上面显示的用于应用程序级中间件的中间件系统：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.<span class=\"title class_\">Router</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a middleware function with no mount path. This code is executed for every request to the router</span></span><br><span class=\"line\">router.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Time:&#x27;</span>, <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>())</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path</span></span><br><span class=\"line\">router.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/user/:id&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request URL:&#x27;</span>, req.<span class=\"property\">originalUrl</span>)</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request Type:&#x27;</span>, req.<span class=\"property\">method</span>)</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a middleware sub-stack that handles GET requests to the /user/:id path</span></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user/:id&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// if the user ID is 0, skip to the next router</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (req.<span class=\"property\">params</span>.<span class=\"property\">id</span> === <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;route&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// otherwise pass control to the next middleware function in this stack</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// render a regular page</span></span><br><span class=\"line\">  res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;regular&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// handler for the /user/:id path, which renders a special page</span></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user/:id&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">params</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">  res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;special&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mount the router on the app</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure>\n\n<p>*<strong>next(‘router’)</strong> ?</p>\n<p>跳过路由器的其他中间件功能，请调用<code>next(&#39;router&#39;)</code>以将控制权从路由器实例中退出</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>node主要是利用ECMAScript的核心语法封装的js库，你可以用它构建一个简单的服务器，或者读取excel,修改本地文件等</p>\n<h2 id=\"1-fs模块\"><a href=\"#1-fs模块\" class=\"headerlink\" title=\"1.fs模块\"></a>1.fs模块</h2><p><em>fs.readFile()  用来读取指定文件中的内容</em></p>\n<p><em>fs.writeFile()  写入文件</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.存放路径</span></span><br><span class=\"line\"><span class=\"comment\">//2.编码格式</span></span><br><span class=\"line\"><span class=\"comment\">//3.回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./assets/read.txt&#x27;</span>,<span class=\"string\">&#x27;utf-8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,dataStr</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err+<span class=\"string\">&#x27;-失败&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataStr+<span class=\"string\">&#x27;成功读取的数据&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; 结果</span><br><span class=\"line\"><span class=\"literal\">null</span>-失败</span><br><span class=\"line\">读取文件</span><br><span class=\"line\">成功读取的数据</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; 读取失败</span><br><span class=\"line\">err的值为错误对象</span><br><span class=\"line\">dataStr 为 underfinded</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-判断是否读取成功\"><a href=\"#1-判断是否读取成功\" class=\"headerlink\" title=\"1.判断是否读取成功\"></a>1.<strong>判断是否读取成功</strong></h3><p>判断err是否为空</p>\n<h3 id=\"2，向指定文件写入内容\"><a href=\"#2，向指定文件写入内容\" class=\"headerlink\" title=\"2，向指定文件写入内容\"></a>2，向指定文件写入内容</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.文件路径</span></span><br><span class=\"line\"><span class=\"comment\">//2.写入内容</span></span><br><span class=\"line\"><span class=\"comment\">//3.编码格式</span></span><br><span class=\"line\"><span class=\"comment\">//4.回调函数-</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">writeFile</span>(<span class=\"string\">&#x27;./assets/a.txt&#x27;</span>,<span class=\"string\">&#x27;111&#x27;</span>,<span class=\"string\">&#x27;utf-8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;写入失败&#x27;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;文件写入成功&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// fs.writeFile(&#x27;G:/assets/a.txt&#x27;,&#x27;111&#x27;,&#x27;utf-8&#x27;,function(err,a)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(err,a)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果写入失败-err的值为一个错位对象</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-整理文件\"><a href=\"#3-整理文件\" class=\"headerlink\" title=\"3.整理文件\"></a>3.整理文件</h3><p><strong>问题</strong></p>\n<p><em>1.replace不写正则为单个匹配</em></p>\n<p><em>2.写入时候replace替代的是%n无效果</em></p>\n<p><em>3.\\n 与 ，&#x2F;n</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./assets/read.txt&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;读取失败&quot;</span> + err.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"title function_\">fn</span>(res);</span><br><span class=\"line\">  <span class=\"title function_\">write</span>(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// return res.replace(&#x27;-&#x27;,&#x27;:&#x27;).replace(&#x27; &#x27;,&#x27;%n&#x27;)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = res.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newstr = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    newstr = data[i].<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;:&quot;</span>) + <span class=\"string\">&quot; \\n&quot;</span> + newstr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newstr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">write</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">writeFile</span>(<span class=\"string\">&quot;./assets/write.txt&quot;</span>, data, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;写入失败&quot;</span> + err.<span class=\"property\">message</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;写入成功&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"，路径动态拼接的问题\"><a href=\"#，路径动态拼接的问题\" class=\"headerlink\" title=\"，路径动态拼接的问题\"></a>，路径动态拼接的问题</h4><p><em>在使用fs模块操作文件时，如果提供的操作路径是以.&#x2F;或者..&#x2F;开头的相对路径时，很容易出现路径动态拼接错误的问题</em></p>\n<p><em>原因：代码在执行的时候，会以执行node命令时所处的目录，动态拼接出被操作文件的完整路径</em></p>\n<p><strong>即在当前路径下执行代码不会有问题，如果在其他路径下执行就会出现问题</strong></p>\n<hr>\n<p><strong>解决：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用绝对路径去替换相对路径</span></span><br><span class=\"line\">__dirname 代表当前文件所在路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用当前文件路径拼接</span></span><br><span class=\"line\"><span class=\"title function_\">readFile</span>(__dirname+<span class=\"string\">&quot;/assets/read.txt&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"function\">()=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>，11</p>\n<h2 id=\"2-path模块\"><a href=\"#2-path模块\" class=\"headerlink\" title=\"2.path模块\"></a>2.path模块</h2><p><em><strong>path.join()</strong></em>:用来将多个路径片段拼接为一个完整的路径字符串</p>\n<p>***path.basename()***：用来从路径字符串中，将文件名解析出来</p>\n<h3 id=\"1-path-join-…args\"><a href=\"#1-path-join-…args\" class=\"headerlink\" title=\"1.path.join([…args])\"></a>1.<em>path.join([…args])</em></h3><p><em>..&#x2F; 可以抵消路径 抵消上一层路径</em></p>\n<p><strong>eg:</strong></p>\n<p>[‘&#x2F;a&#x2F;b’,’..&#x2F;‘] </p>\n<p><strong>此处可以抵消&#x2F;b</strong></p>\n<p>凡是涉及路径拼接的操作之后都使用**path.join()**来处理</p>\n<h3 id=\"2-path-basename\"><a href=\"#2-path-basename\" class=\"headerlink\" title=\"2.path.basename()\"></a>2.path.basename()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"title function_\">basename</span>(filespath[,ext])</span><br><span class=\"line\"><span class=\"comment\">//1.filespath一个路径的字符串</span></span><br><span class=\"line\"><span class=\"comment\">//2.ext 可选参数 ，表示文件扩展名</span></span><br><span class=\"line\"><span class=\"comment\">//3.返回：&lt;string&gt; 表示路径的最后一部分</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fpath = <span class=\"string\">&#x27;/b/c/index.html&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fullName = path.<span class=\"title function_\">basename</span>(fpath)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fullName)  <span class=\"comment\">//  index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nameWithoutExt = path.<span class=\"title function_\">basename</span>(<span class=\"string\">&#x27;path&#x27;</span>,<span class=\"string\">&#x27;.html&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nameWidthExt) <span class=\"comment\">// -&gt; 输出 index</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-path-extname\"><a href=\"#3-path-extname\" class=\"headerlink\" title=\"3.path.extname()\"></a>3.path.extname()</h3><p>打印拓展名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fext = path.<span class=\"title function_\">extname</span>(fpath)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fext,<span class=\"string\">&#x27;-fext&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-分离css-html-js案例\"><a href=\"#3-分离css-html-js案例\" class=\"headerlink\" title=\"3.分离css,html,js案例\"></a>3.分离css,html,js案例</h2><p>注意点；</p>\n<ul>\n<li><p>重复调用fs.writeFile() 后写入的会覆盖之前写入的</p>\n</li>\n<li><p>fs.writeFile()只能用来创建文件，不能用来创建路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./eg1/eg.html&#x27;</span>,<span class=\"string\">&#x27;utf-8&#x27;</span>,<span class=\"function\">(<span class=\"params\">err,sucmsg</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;读取失败&#x27;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">handle</span>(sucmsg)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//匹配三个模块的正则</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cssexg = <span class=\"regexp\">/&lt;style&gt;[\\s\\S]*&lt;\\/style&gt;/</span> <span class=\"comment\">///&lt;style&gt;[\\s\\S]*&lt;/style&gt;/g</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> jsexg = <span class=\"regexp\">/&lt;script&gt;[\\s\\S]*&lt;\\/script&gt;/</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> htmlmsg = data.<span class=\"title function_\">match</span>()</span><br><span class=\"line\">    <span class=\"comment\">//定义处理css样式的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//使用正则提取内容</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cssPart = cssexg.<span class=\"title function_\">exec</span>(data) + <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> jsPart = jsexg.<span class=\"title function_\">exec</span>(data) + <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> htmlPart = data.<span class=\"title function_\">replace</span>(cssPart,<span class=\"string\">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot;&gt;&#x27;</span>).<span class=\"title function_\">replace</span>(jsPart,<span class=\"string\">&#x27;&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//去掉首尾的style和script标签</span></span><br><span class=\"line\">    cssPart = cssPart.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;style&gt;&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;/style&gt;&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    jsPart = jsPart.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;script&gt;&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;script&gt;&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//存储在当前的文件中</span></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./index.css&#x27;</span>),cssPart,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;存储css文件失败&quot;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./index.js&#x27;</span>),jsPart,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;存储js文件失败&quot;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;./index.html&#x27;</span>),htmlPart,<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;存储html文件失败&quot;</span>,err.<span class=\"property\">message</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//开始写为fs.writeFile(path.join(__dirname,&#x27;./clock/index.js&#x27;),由于clock文件夹不存在导致存储失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"4-http模块\"><a href=\"#4-http模块\" class=\"headerlink\" title=\"4.http模块\"></a>4.http模块</h2><p><strong>1.初步接触</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//web服务器</span></span><br><span class=\"line\"><span class=\"comment\">//1.导入http模块</span></span><br><span class=\"line\"><span class=\"comment\">//2.创建web服务器实例</span></span><br><span class=\"line\"><span class=\"comment\">//3.绑定requise事件</span></span><br><span class=\"line\"><span class=\"comment\">//4.启动服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> http =  <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>()</span><br><span class=\"line\"><span class=\"comment\">// 3.绑定requise事件</span></span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Someone visit our web server&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//4.启动服务器</span></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server listenging 8080&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//有人访问-就会一直响应</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2.返回中文会出现乱码问题</strong>-res</p>\n<p><strong>解决</strong>：res.setHeader(‘Content-Type’,’text&#x2F;html;charset&#x3D;utf-8’)</p>\n<p>中间为分号（非冒号)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//req请求对象</span></span><br><span class=\"line\"><span class=\"comment\">//只要服务器接收到了客户端的请求，就会通过调用server.on()为服务器绑定的request事件处理函数，</span></span><br><span class=\"line\"><span class=\"comment\">//如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>()</span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server is running &#x27;</span>,req.<span class=\"property\">url</span>,req.<span class=\"property\">method</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = req.<span class=\"property\">url</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> method = req.<span class=\"property\">method</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> str = <span class=\"string\">`Your request url is <span class=\"subst\">$&#123;url&#125;</span>,and request method id <span class=\"subst\">$&#123;method&#125;</span>,&#x27;中文&#x27;`</span></span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(str)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;serve running at http://localhost:8080/&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.根据不同url响应不同的页面内容</strong></p>\n<p>1.核心实现步骤</p>\n<ul>\n<li>获取请求的url</li>\n<li>设置默认的响应内容为404 Not found</li>\n<li>判断用户的请求是否为&#x2F;或index.html页面</li>\n<li>判断用户请求是否为&#x2F;about.html关于页面</li>\n<li>设置Content-Type响应头，防止中文乱码</li>\n<li>使用res.end()把内容响应给客户端</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>()</span><br><span class=\"line\">server.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;request&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server is running &#x27;</span>,req.<span class=\"property\">url</span>,req.<span class=\"property\">method</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = req.<span class=\"property\">url</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> method = req.<span class=\"property\">method</span></span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = <span class=\"string\">`&lt;h3&gt;404 not found&lt;/h3&gt; &lt;/br&gt;Your request url is <span class=\"subst\">$&#123;url&#125;</span>,and request method id <span class=\"subst\">$&#123;method&#125;</span>,&#x27;中文&#x27;`</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(url===<span class=\"string\">&#x27;/&#x27;</span>||url==<span class=\"string\">&#x27;/index.html&#x27;</span>)&#123;</span><br><span class=\"line\">        content = <span class=\"string\">`&lt;h3&gt;首页&lt;/h3&gt;`</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(url===<span class=\"string\">&#x27;/about.html&#x27;</span>)&#123;</span><br><span class=\"line\">        content = <span class=\"string\">`&lt;h1&gt;关于页面&lt;/h1&gt;`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(content)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;serve running at http://localhost:8080/&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-http案例\"><a href=\"#5-http案例\" class=\"headerlink\" title=\"5.http案例\"></a>5.http案例</h2><p><strong>将时钟案例的三个文件，根据url地址的不同，返回给客户端</strong></p>\n<p>实现思路</p>\n<p><strong>将文件的实际路径，作为每个资源的url地址</strong></p>\n<p>磁盘文件-由服务端读取-返回给客户端（文件流，数据的形式</p>\n<ol>\n<li>导入需要的模块</li>\n<li>创建基本的web服务器</li>\n<li>将资源的请求url地址映射为文件的存放路径</li>\n<li>读取文件内容并响应给客户端</li>\n<li>优化资源的请求路径</li>\n</ol>\n<p><strong>问题</strong>：..path 无法读取文件</p>\n<p>fpath &#x3D; ‘..&#x2F;eg1’ &#x3D; url</p>\n<p>解决path.join(__dirname,fpath)</p>\n<h2 id=\"6-Node模块化\"><a href=\"#6-Node模块化\" class=\"headerlink\" title=\"6.Node模块化\"></a>6.Node模块化</h2><h3 id=\"1-模块分类\"><a href=\"#1-模块分类\" class=\"headerlink\" title=\"1.模块分类\"></a>1.模块分类</h3><ol>\n<li><p>内置模块</p>\n<hr>\n<p>由Node.js官方提供的，例如fs,path,http</p>\n</li>\n<li><p>自定义模块</p>\n<hr>\n<p>用户创建的每个js文件都是自定义模块</p>\n</li>\n<li><p>第三方模块</p>\n<hr>\n<p>由第三方开发的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，试用前需要先下载</p>\n</li>\n<li><p>1</p>\n</li>\n</ol>\n<h3 id=\"2-加载模块\"><a href=\"#2-加载模块\" class=\"headerlink\" title=\"2.加载模块\"></a>2.加载模块</h3><p>使用强大的require()方法，可以加载需要的内置模块，用户自定义模块，第三方模块使用</p>\n<ul>\n<li>const fs &#x3D; require(‘fs’)  加载内置的fs模块</li>\n<li>const custom &#x3D; require(‘.&#x2F;custom.js’) 加载用户的自定义模块</li>\n<li>const moment &#x3D; require(‘moment’) 加载第三方模块（关于第三方模块的下载和使用）</li>\n<li></li>\n</ul>\n<p><strong>注意</strong>：使用require()方法加载其他模块时，会执行加载模块中的代码</p>\n<h3 id=\"3-对象和属性\"><a href=\"#3-对象和属性\" class=\"headerlink\" title=\"3.对象和属性\"></a>3.对象和属性</h3><h4 id=\"1-module-exports对象\"><a href=\"#1-module-exports对象\" class=\"headerlink\" title=\"1.module.exports对象\"></a>1.module.exports对象</h4><p>在自定义对象中，可以使用module.exports对象，将模块内的成员共享出去，供外界使用，外界使用require() 导入自定义模块时，得到的就是module.exports所指向的对象。</p>\n<p><strong>使用require()时导入的以</strong>module.export为准</p>\n<p><strong>exports和module.exports</strong>-挂载对象结果一致</p>\n<p><strong>最终共享的结果，以module.exports以准</strong></p>\n<p><strong>1.案例1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当exports 和 module.exports 同时存在的时候，module会覆盖之前export挂载的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span>.<span class=\"property\">username</span> = <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;里斯&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终结果为： Object</span></span><br><span class=\"line\">&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;里斯&quot;</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.案例2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">username</span> = <span class=\"string\">&quot;张三&quot;</span> <span class=\"comment\">//object 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span> = &#123;  <span class=\"comment\">//object 2</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;里斯&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终结果为： Object</span></span><br><span class=\"line\">&#123;<span class=\"attr\">username</span>:<span class=\"string\">&quot;张三&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始时候，export和module.export指向object1 </span></span><br><span class=\"line\"><span class=\"comment\">//exports = &#123;&#125;  让export指向对象2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3.案例3</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;zhang&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span>.<span class=\"property\">age</span> = <span class=\"number\">23</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果为</span></span><br><span class=\"line\">&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;zhang&quot;</span>,<span class=\"attr\">age</span>: <span class=\"number\">23</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>案例4</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> = &#123;  <span class=\"comment\">//object 2</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;里斯&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">23</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"built_in\">exports</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">sex</span> = <span class=\"string\">&quot;female&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果-具备所有的属性</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"2-common-js规范\"><a href=\"#2-common-js规范\" class=\"headerlink\" title=\"2.common.js规范\"></a>2.common.js规范</h4><ol>\n<li>每个模块内部，module()变量代表当前模块</li>\n<li>module变量是一个对象，他的exports属性（module.exports)是对外的接口，</li>\n<li>加载某个模块，其实是加载改模块的module.exports属性，require()用于加载模块</li>\n</ol>\n<h4 id=\"3-npm-与-包\"><a href=\"#3-npm-与-包\" class=\"headerlink\" title=\"3.npm 与 包\"></a>3.npm 与 包</h4><p>–(node Package Manager)–</p>\n<p>包： 第三方模块</p>\n<p>包的来源： 第三方个人或者团队开发出来的，免费提供所有人使用</p>\n<p>注意：Node.js中的包都是免费开源的 ，不需要付费既可以免费下载使用</p>\n<p>需要包： 基于内置 模块开发时，效率很低-包是基于内置模块封装出来的</p>\n<p>包的下载： npm,inc公司下的npm.js</p>\n<h5 id=\"1-格式化时间\"><a href=\"#1-格式化时间\" class=\"headerlink\" title=\"1.格式化时间\"></a>1.格式化时间</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>创建格式化时间的函数</span><br><span class=\"line\"><span class=\"number\">2.</span>创建补零函数</span><br><span class=\"line\"><span class=\"number\">3.</span>导出格式化时间的函数</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dataForm</span>(<span class=\"params\">dtStr</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> dt = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(daStr)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y = <span class=\"title function_\">padZero</span>(dt.<span class=\"title function_\">getFullYear</span>()) <span class=\"comment\">//所有的都需要补0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> m = dt.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = dt.<span class=\"title function_\">getDate</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> h = dt.<span class=\"title function_\">getHours</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mins = dt.<span class=\"title function_\">getMinutes</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = dt.<span class=\"title function_\">getSeconds</span>()</span><br><span class=\"line\">    <span class=\"comment\">//return &#x27;YYYY-MM-DD HH:mm:ss&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;y&#125;</span>-<span class=\"subst\">$&#123;m&#125;</span>-<span class=\"subst\">$&#123;d&#125;</span> <span class=\"subst\">$&#123;h&#125;</span>:<span class=\"subst\">$&#123;m&#125;</span>:<span class=\"subst\">$&#123;s&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padZero</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n&gt;<span class=\"number\">9</span> ? n : <span class=\"string\">&#x27;0&#x27;</span> +n</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dataForm</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-使用包\"><a href=\"#2-使用包\" class=\"headerlink\" title=\"2.使用包\"></a>2.使用包</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;moment&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> dt = <span class=\"title function_\">moment</span>().<span class=\"title function_\">format</span>(<span class=\"string\">&quot;YYYY-MM-DD HH-mm-ss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">moment</span>() <span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\"><span class=\"comment\">//   一个m不补零 - 其他相同</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-模块加载机制\"><a href=\"#4-模块加载机制\" class=\"headerlink\" title=\"4.模块加载机制\"></a>4.模块加载机制</h3><p><strong>1.优先从缓存加载</strong></p>\n<p>模块在第一次加载后会被缓存</p>\n<p>require 同时三次 - 后面的不会执行</p>\n<p><strong>2,内置模块的加载机制</strong></p>\n<p>内置模块的优先级最高</p>\n<h3 id=\"5-自定义模块的加载机制\"><a href=\"#5-自定义模块的加载机制\" class=\"headerlink\" title=\"5.自定义模块的加载机制\"></a>5.自定义模块的加载机制</h3><ol>\n<li><p>没有指定.&#x2F; – 把其当作内置模块或者第三方模块</p>\n</li>\n<li><p>省略了文件名，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>安装切确的文件名进行加载 </span><br><span class=\"line\"><span class=\"number\">2.</span>补全.<span class=\"property\">js</span>进行加载</span><br><span class=\"line\"><span class=\"number\">3.</span>补全.<span class=\"property\">json</span>扩展名进行加载</span><br><span class=\"line\"><span class=\"number\">4.</span>补全.<span class=\"property\">node</span>拓展名进行加载</span><br><span class=\"line\"><span class=\"number\">5.</span>加载失败提示</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3></li>\n</ol>\n<h3 id=\"6-加载第三方模块\"><a href=\"#6-加载第三方模块\" class=\"headerlink\" title=\"6.加载第三方模块\"></a>6.加载第三方模块</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果不是一个内置模块，也没有以../或者./开通，则会在node_modules文件夹中加载第三方模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果没有找到对应的第三方模块，则移动到再上一级父目录中，进行加载，直到文件系统的根目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-目录作为模块\"><a href=\"#7-目录作为模块\" class=\"headerlink\" title=\"7.目录作为模块\"></a>7.目录作为模块</h3><p>当把目录当作模块标识符，传递给require()进行加载的时候，有三种加载方式。</p>\n<ol>\n<li>被加载的目录下查找一个叫做package.json的文件，并寻找main属性，作为require() 加载的入口</li>\n<li>如果入口没有package.json文件，或者入口不存在或无法解析，则node.js会试图加载目录下的index.js文件</li>\n<li>如果以上两步都失败了，则node.js会在终端打印错误信息，报告模块的缺失。Error:cannot find module “xxx”</li>\n</ol>\n<h2 id=\"7-express模块\"><a href=\"#7-express模块\" class=\"headerlink\" title=\"7.express模块\"></a>7.express模块</h2><ol>\n<li>托管静态资源</li>\n<li>使用路由精简项目结构</li>\n<li>能够使用常见的中间键</li>\n<li>能够使用express创建API接口</li>\n<li>能够在express中启用CORS跨域资源共享</li>\n</ol>\n<p>express: 快速，开放，极简的web开发框架，进一步开发，极大的提示开发效率</p>\n<ul>\n<li>web网站服务器：提供web网页资源的服务器</li>\n<li>API接口服务器：专门对外提供api接口的服务器</li>\n</ul>\n<h4 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1.基本使用\"></a>1.基本使用</h4><ul>\n<li><p>创建基本web服务器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.导入express</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//2.创建web服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"comment\">//4.监听get和post请求-并响应</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用express提供的res.send()方法，向客户端响应一个json对象</span></span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;zs&quot;</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>,<span class=\"attr\">gender</span>:<span class=\"string\">&quot;男&quot;</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/user&#x27;</span>,<span class=\"function\">(<span class=\"params\">req.res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    app.<span class=\"title function_\">send</span>(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;ls&quot;</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>,<span class=\"attr\">gender</span>:<span class=\"string\">&quot;女&quot;</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//启动服务器</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">80</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;express server running at http://127.0.0.1&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>监听Get请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///通过app.get()方法 ，可以监听客户端的GET请求，具体的语法格式如下：</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*params</span></span><br><span class=\"line\"><span class=\"comment\">*1.url地址</span></span><br><span class=\"line\"><span class=\"comment\">*2.处理函数-</span></span><br><span class=\"line\"><span class=\"comment\">*   1.req请求对象 (包含了与请i去对象相关的属性和方法)</span></span><br><span class=\"line\"><span class=\"comment\">*   2.res响应对象（包含了与响应相关的属性和方法</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">app.get(&#x27;url&#x27;,function(req,res)&#123; </span></span><br><span class=\"line\"><span class=\"comment\">//处理函数</span></span><br><span class=\"line\"><span class=\"comment\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>app.post监听post请求</p>\n</li>\n<li><p>send <strong>把内容响应给客户端</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/user&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//向客户端发送文本内容</span></span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;请求成功&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>报错</strong>express : 无法将“express”项识别为 cmdlet、函数、脚本文件或可运行程序的名称</p>\n</li>\n</ul>\n<p>如上我们使用 node 的 npm 安装了 express 框架后，并不会顺带着把 express 脚手架安装。</p>\n<p>此时，如果直接输入 express 会进行报错，即关键字不识别（环境变量中没有express.exe）。</p>\n<p>需要输入如下命令，安装“脚手架”。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express express-generator -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-中间件加载静态资源\"><a href=\"#2-中间件加载静态资源\" class=\"headerlink\" title=\"2.中间件加载静态资源\"></a>2.中间件加载静态资源</h4><p>要提供静态文件（如图像，CSS文件和JavaScript文件），请使用<code>express.static</code>Express中的内置中间件功能。</p>\n<p>函数签名是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express.<span class=\"title function_\">static</span>(root, [options])</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p><code>root</code>参数指定要从中为静态资产提供服务的根目录。有关<code>options</code>参数的更多信息，请参阅express.static。</p>\n<p>例如，使用以下代码在名为<code>public</code>的目录中提供图像，CSS文件和JavaScript文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>现在，您可以加载<code>public</code>目录中的文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/images/kitten.jpg</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/css/style.css</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/js/app.js</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/images/bg.png</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/hello.html</span></span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p> Express查找相对于静态目录的文件，因此静态目录的名称不是URL的一部分。 </p>\n<p>要使用多个静态资产目录，请<code>express.static</code>多次调用中间件函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>))</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;files&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>Express按照您使用<code>express.static</code>中间件功能设置静态目录的顺序查找文件。</p>\n<p>注：为获得最佳结果，请使用反向代理缓存来提高服务静态资产的性能。</p>\n<p>要为<code>express.static</code>函数提供的文件创建虚拟路径前缀（路径实际上不存在于文件系统中），请为静态目录指定一个装载路径，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/static&#x27;</span>, express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>现在，您可以从<code>/static</code>路径前缀中加载目录<code>public</code>中的文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/images/kitten.jpg</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/css/style.css</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/js/app.js</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/images/bg.png</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//localhost:3000/static/hello.html</span></span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>但是，您提供给<code>express.static</code>函数的路径是相对于启动<code>node</code>过程的目录。如果您从其他目录运行快速应用程序，则使用您想要提供的目录的绝对路径更安全：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/static&#x27;</span>, express.<span class=\"title function_\">static</span>(path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;public&#x27;</span>)))</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>有关该<code>serve-static</code>函数及其选项的更多详细信息，请参阅<a href=\"http://expressjs.com/en/resources/middleware/serve-static.html\">serve-static</a>。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>public 目录默认找的是当前运行的目录-即如果你在a目录下运行.&#x2F;src&#x2F;express&#x2F;index.js，他最终会在当前目录下寻找public文件夹</li>\n</ol>\n<h4 id=\"3-路由\"><a href=\"#3-路由\" class=\"headerlink\" title=\"3.路由\"></a>3.路由</h4><p>Express支持对应于HTTP方法的下列路由方法：<code>get</code>，<code>post</code>，<code>put</code>，<code>head</code>，<code>delete</code>，<code>options</code>，<code>trace</code>，<code>copy</code>，<code>lock</code>，<code>mkcol</code>，<code>move</code>，<code>purge</code>，<code>unlock</code>，<code>report</code>，<code>mkactivity</code>，<code>checkout</code>，<code>merge</code>，<code>m-search</code>，<code>notify</code>，<code>subscribe</code>，<code>unsubscribe</code>，<code>patch</code>和<code>search</code>。</p>\n<p>路由转换为无效JavaScript变量名称的方法，请使用括号表示法。例如，<code>app[&#39;m-search&#39;](&#39;/&#39;, function ...</code></p>\n<p>有一种特殊的路由方法，<code>app.all()</code>它不是从任何HTTP方法派生的。此方法用于为所有请求方法的路径提供加载中间件功能。</p>\n<p>app.all(‘&#x2F;secret’, function (req, res, next) {  console.log(‘Accessing the secret section …’)  next() &#x2F;&#x2F; pass control to the next handler })</p>\n<p><strong>路由路径</strong></p>\n<p>路由路径与请求方法一起定义了可以进行请求的端点。路径路径可以是字符串，字符串模式或正则表达式。</p>\n<p>字符<code>?</code>，<code>+</code>，<code>*</code>，和<code>()</code>是他们的正则表达式的对应的子集。字符串路径会逐字解释连字符（<code>-</code>）和点（<code>.</code>）。</p>\n<p>如果您需要在路径字符串中使用字符（<code>$</code>），请将其包含在<code>([])</code>之内。例如，“ <code>/data/$book</code>” 处的请求的路径字符串将是“ <code>/data/([\\$])book</code>”。</p>\n<p><strong>以下是一些基于字符串模式的路由路径示例。</strong></p>\n<p>此路由路径将匹配<code>acd</code>并<code>abcd</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/ab?cd&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;ab?cd&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>这条路由的路径将会匹配<code>abcd</code>，<code>abbcd</code>，<code>abbbcd</code>等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/ab+cd&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;ab+cd&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>这条路线的路径匹配<code>abcd</code>，<code>abxcd</code>，<code>abRANDOMcd</code>，<code>ab123cd</code>等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/ab*cd&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;ab*cd&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>此路由路径将匹配<code>/abe</code>并<code>/abcde</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/ab(cd)?e&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;ab(cd)?e&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>在Express 4.x中，<a href=\"https://github.com/expressjs/express/issues/2495\">正则表达式中</a><a href=\"https://github.com/expressjs/express/issues/2495\">的<code>*</code>字符不以通常的方式解释</a>。作为解决方法，请使用<code>&#123;0,&#125;</code>而不是<code>*</code>。Express 5可能会解决这个问题。</strong></p>\n<h5 id=\"1-响应方法\"><a href=\"#1-响应方法\" class=\"headerlink\" title=\"1.响应方法\"></a>1.响应方法</h5><p><code>res</code>下表中响应对象（）的方法可以向客户端发送响应，并终止请求 - 响应循环。如果这些方法都不是从路由处理程序调用的，则客户端请求将被挂起。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">res.download()</td>\n<td align=\"left\">提示要下载的文件。</td>\n</tr>\n<tr>\n<td align=\"left\">res.end()</td>\n<td align=\"left\">结束响应过程。</td>\n</tr>\n<tr>\n<td align=\"left\">res.json（）</td>\n<td align=\"left\">发送JSON响应。</td>\n</tr>\n<tr>\n<td align=\"left\">res.jsonp（）</td>\n<td align=\"left\">用JSONP支持发送JSON响应。</td>\n</tr>\n<tr>\n<td align=\"left\">res.redirect（）</td>\n<td align=\"left\">重定向请求。</td>\n</tr>\n<tr>\n<td align=\"left\">res.render（）</td>\n<td align=\"left\">呈现视图模板。</td>\n</tr>\n<tr>\n<td align=\"left\">res.send（）</td>\n<td align=\"left\">发送各种类型的响应。</td>\n</tr>\n<tr>\n<td align=\"left\">res.sendFile（）</td>\n<td align=\"left\">以八位字节流的形式发送文件。</td>\n</tr>\n<tr>\n<td align=\"left\">res.sendStatus（）</td>\n<td align=\"left\">设置响应状态代码并将其字符串表示形式作为响应主体发送。</td>\n</tr>\n</tbody></table>\n<h5 id=\"2-app-route\"><a href=\"#2-app-route\" class=\"headerlink\" title=\"2.app.route()\"></a>2.app.route()</h5><p>通过使用可以为路由路径创建可链接的路由处理程序<code>app.route()</code>。由于路径是在单个位置指定的，所以创建模块化路由很有帮助，因为这可以减少冗余和拼写错误。有关路由的更多信息，请参阅：Router（）文档。</p>\n<p>以下是使用定义的链接路由处理程序<code>app.route()</code>的示例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">route</span>(<span class=\"string\">&#x27;/book&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">get</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Get a random book&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">post</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Add a book&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">put</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Update the book&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-express-Router\"><a href=\"#3-express-Router\" class=\"headerlink\" title=\"3.express.Router\"></a>3.express.Router</h5><p>使用<code>express.Router</code>类创建模块化，可挂载的路由处理程序。一个<code>Router</code>实例是一个完整的中间件和路由系统; 出于这个原因，它通常被称为“迷你应用程序”。</p>\n<p>以下示例将路由器创建为模块，在其中加载中间件功能，定义一些路由并将路由器模块安装在主应用程序的路径中。</p>\n<p>在app目录中创建一个<code>birds.js，</code></p>\n<h5 id=\"4-可配置的中间件\"><a href=\"#4-可配置的中间件\" class=\"headerlink\" title=\"*4.可配置的中间件\"></a>*4.可配置的中间件</h5><p>如果您需要中间件可配置，则导出一个接受选项对象或其他参数的函数，然后根据输入参数返回中间件实现。</p>\n<p>File: <code>my-middleware.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Implement the middleware function based on the options object</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>现在可以使用中间件，如下所示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mw = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-middleware.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">mw</span>(&#123; <span class=\"attr\">option1</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"attr\">option2</span>: <span class=\"string\">&#x27;2&#x27;</span> &#125;))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-使用中间件\"><a href=\"#4-使用中间件\" class=\"headerlink\" title=\"4.使用中间件\"></a>4.使用中间件</h4><ul>\n<li><p>执行任何代码。</p>\n</li>\n<li><p>对请求和响应对象进行更改。</p>\n</li>\n<li><p>结束请求 - 响应循环。</p>\n</li>\n<li><p>调用堆栈中的下一个中间件功能。next()</p>\n</li>\n</ul>\n<p>如果当前的中间件功能没有结束请求 - 响应周期，则它必须调用<code>next()</code>以将控制传递给下一个中间件功能。否则，请求将被挂起。</p>\n<p>Express应用程序可以使用以下类型的中间件：</p>\n<ul>\n<li><p>Application-level middleware</p>\n</li>\n<li><p>路由器级中间件</p>\n</li>\n<li><p>错误处理中间件</p>\n</li>\n<li><p>内置中间件</p>\n</li>\n<li><p>第三方中间件</p>\n</li>\n</ul>\n<hr>\n<p>下面是一个在装载点加载一系列中间件功能的例子，带有装载路径。它演示了一个中间件子堆栈，用于打印任何类型的HTTP请求到<code>/user/:id</code>路径的请求信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/user/:id&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request URL:&#x27;</span>, req.<span class=\"property\">originalUrl</span>)</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request Type:&#x27;</span>, req.<span class=\"property\">method</span>)</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由器级中间件\"><a href=\"#路由器级中间件\" class=\"headerlink\" title=\"路由器级中间件\"></a>路由器级中间件</h2><p>路由器级中间件的工作方式与应用级中间件的工作方式相同，只是它绑定到一个实例<code>express.Router()</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = express.<span class=\"title class_\">Router</span>()</span><br></pre></td></tr></table></figure>\n\n<p>复制</p>\n<p>使用<code>router.use()</code>和<code>router.METHOD()</code>函数加载路由器级中间件。</p>\n<p>以下示例代码通过使用路由器级中间件来复制上面显示的用于应用程序级中间件的中间件系统：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.<span class=\"title class_\">Router</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a middleware function with no mount path. This code is executed for every request to the router</span></span><br><span class=\"line\">router.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Time:&#x27;</span>, <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>())</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path</span></span><br><span class=\"line\">router.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/user/:id&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request URL:&#x27;</span>, req.<span class=\"property\">originalUrl</span>)</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Request Type:&#x27;</span>, req.<span class=\"property\">method</span>)</span><br><span class=\"line\">  <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a middleware sub-stack that handles GET requests to the /user/:id path</span></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user/:id&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// if the user ID is 0, skip to the next router</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (req.<span class=\"property\">params</span>.<span class=\"property\">id</span> === <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;route&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// otherwise pass control to the next middleware function in this stack</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// render a regular page</span></span><br><span class=\"line\">  res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;regular&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// handler for the /user/:id path, which renders a special page</span></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/user/:id&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">params</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">  res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;special&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mount the router on the app</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure>\n\n<p>*<strong>next(‘router’)</strong> ?</p>\n<p>跳过路由器的其他中间件功能，请调用<code>next(&#39;router&#39;)</code>以将控制权从路由器实例中退出</p>\n"},{"title":"vue3 初体验","author":"codefish","date":"2022-02-15T06:13:36.000Z","top_img":"/img/12.jpg","cover":"/img/12.jpg","_content":"vue3的更新是颠覆式的，最大的改变就是组合式api,以及shake tree优化代码运行速度，新的响应式原理，封装更多内置方法。\n\n## vue 3.0\n\n---\n\n- Vue -cli\n- Vue -router\n- VueX\n\n\n\nVue3 不需要根节点(在模板template)\n\n## vue setup \n\n//新的optioon 所有的api都在次使用，只在初始化执行一次\n//组合APi中第一个要使用的函数\n\nVue3 支持 vue2 大多数语法\n\n```js\ndata(){\n    return {\n\tcount++;\n    }\n}\n\nmethods:{\n\tnumPut(){\n        this.count++\n    }\n}\n```\n\n## 1）setup 是组合 api 的入口函数\n\nVue3 的写法\n\n```js\nsetup(){\n    let count = 0\n    function updateCount(){\n\t\tcount++\n    }\n}\n//此时的数据不是响应的数据\n```\n\n引入ref解决\n\n```js\nimport { ref } from 'Vue'\n```\n\n## 2）ref  定义一个响应式的数据\n\n```js\n//count未ref类型\nconst  count = ref(0)\nfunction(){\n\tcount.value++;\n}\n\n//返回一个ref对象\n//对象中如果要对value操作，需要进行xxx.value\n//模板中，直接使用xxx\n\n//创建一个包含响应式数据的引用（refrence)对象\n//js 中操作 aa.value\n//模板中直接操作 aa\n//---一般用来定义一个基本类型的响应式数据\n\n\n```\n\n## 3）reactive\n\n```JS\n//\n\nsetup(){\n    //对象\n    //此时user对象的类型是Proxy\n    const user = recative({\n\tname:\"lihua\",\n        age:19,\n    })\n}\n\n<h2>名字：{{user.name}}</h2>\n\n//方法两种写法\nfunction changename(){\n}\n\nconst updateUser = ()=>{\n    user.name = 'wang' + user.name\n    return {\n\tuser,\n    }\n}\n\n\nconst obj = {\n\tname:'hello',\n    age:10\n}\nobj.name = obj.name + 'obj'\n//此方式修改对象的值不能响应，只能采用代理对象的方式来更新数据\n\n```\n\nreactive \n\n```js\n//作用：定义多个数据的响应式\nconst proxy = reactive(obj)\n //接收一个普通对象然后返回该普通对象的响应式代理器对象\n//响应式转换是深层的，会影响内部所有嵌套的属性\n//内部基于Es6 的Proxy实现，通过代理对象操作源对象内部数据都是响应式的\n\n//***在vue2.0 中，数组内部数据的变化不会引起响应\n\n//把对象变为响应式的数据\n//返回的是一个Proxy的代理对象，被代理者就是obj中的传入的对象\nconst user = reactive({\n    name:'张三',\n    age:20,\n})\n```\n\n```js\n//对比两种情况下，数据的更新\n//对象obj 和 对象user 的变换情况 \nconst obj = {\n    name;'小周',\n    age:'20'\n}\nconst user = reactive(obj)\n\nobj.gender = '男'\n//不更新\n\nuser.gender = '男'\n//这种方式界面更新渲染，并且也添加到了obj对象中去\n\ndelete user.age  //界面更新渲染，属性被删除\ndelete obj.age //界面不渲染，属性被删除\n引起ts类型报错 加上 const obj:any = {}..\n\n```\n\n补充：\n\n需要注意的是，`reactive`中传递的参数必须是`json`对象或者数组，如果传递了其他对象（比如`new Date()`），在默认情况下修改对象，界面不会自动更新，如果也需要具有响应式，可以通过重新赋值的方式实现\n\n```js\n//msg 的数据是存在变化的，但界面并未发生变化，同时我们发现在控制台里，msg 并未被识别成 proxy。\n<template>\n<div>\n  <p>{{msg}}</p>\n  <button @click=\"c\">button</button>\n</div>\n</template>\n\n<script>\nimport { reactive } from 'vue'\nexport default {\n  name: 'App',\n  setup() {\n    let msg = reactive(new Date())\n    function c() {\n      console.log(msg);\n      msg.setDate(msg.getDate() + 1);\n      console.log(msg);\n    }\n    return {\n      msg,\n      c\n    };\n  }\n}\n</script>\n\n\n//显然，对于这种数据类型，我们需要做特殊处理。\n//这个特殊处理就是重新赋值（，而不是直接修改原来的值）。\n```\n\n\n\n基本数据传递给reactive，reactive并不会将它包装成porxy对象，并且当数据变化时，界面也不会变化\n\n\n\n## 4）比较Vue2与Vue3的响应式\n\nvue2 \n\n- 核心\n\n  对象：通过defineProperty对对象的已有属性值的读取和修改进行劫持（监视/拦截）\n\n  数组:通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持\n\nvue 3.0\n\n通过proxy代理，reflect（反射对象），不是函数对象，不能构造 \n\n```js\n//将目标对象变成代理对象\n//参数1：user-->target目标对象\n//参数2：handler -->处理器对象，用来监视数据，及数据的操作\n//目标对象\nconst user = {\n    name:\"佐助\",\n    age:20,\n    wife:{\n\tname:'xiaoyin'\n    }\n}\nconst proxyUser = new Proxy(user,{\n    get(target,prop){},\n    set(){},\n    delectProperty(){}\n})\n//通过代理对象获取目标对象中的某个属性值\n//reflect反射对象\n```\n\n![image-20220215193447751](E:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0/mdimages/image-20220215193447751.png)\n\n通过代理对象修改目标对象的值\n\n通过代理对象向目标对象中添加一个新的属性\n\n![image-20220215193649429](E:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0/mdimages/image-20220215193649429.png)\n\nvue3的深度响应可以深度响应\n\n## 5）setup 细节\n\n```js\n//父子组件通信\n//父组件\n\n//子组件中\nprops:['msg']\n\nmsg:{\n\tname:\"aq\",\n    sex:'male'\n}\n```\n\nsetup一般都是返回一个对象，对象中的属性和方法都可以在html模板中直接使用\n\n```js\nsetup是在beforeCreate生命周期之前就执行了，而且就执行一次\n//beforeCreate 此时组件还没创建，组件实例对象this根本不能用\n\n```\n\nsetup运行的时机\n\nsetup执行的时机\n\n- 在beforeCreate之前执行（一次），此时组件对象还没有创建,不能使用data和methods\n- this是underfinded,不能通过this来访问data/computed/methods/props\n- 其实所有的composition API 相关回调函数中也都不可以\n\nsetup的返回值\n\n- ​\t一般都返回一个对象，为模板提供数据，也就是模板中可以直接使用次对象中的所有属性方法\n- 返回对象中的属性会与data函数返回对象的属性合并并成为组件对象的属性\n- 返回对象中的方法会与methods中的方法合并并成功组件对象的方法\n- 如果有重名，setup优先\n- 注意\n- 一般不要混合使用，methods和data都可以写在setup\n- setup不能是async函数，因为返回值不再是一个对象，而是一个promise，模板看不到对象中的属性数据\n- 数据初始化的生命周期回调\n\nsetup()的参数 \n\n两种写法\n\n1.setup(props,contect)\n\n2.setup(props,attrs,slots,emit)\n\n- props 参数，是一个对象，里面有父级组件向子级组件传递的数据\n\n- contect参数(是一个对象)\n\n- ```js\n  1.attrs\t\n  \t//获取当前组件标签的属性，但是该数据是在props中，没有接收的所有的属性的对象\n  2.emit\n  \t//分发事件\n  @xxx = 'xxx'\n  function xxx(txt){\n  \tmsg.value += txt;\n  }\n  <button @click='emitXXX'>分发事件</button>\n  function emitXXX(){\n      context.emit('xxx','+')\n  }\n  3.expose\n  4.slots\n  \t//插槽\n  ```\n\n\n\n## 6）ref和reactive细节(响应式API)\n\n- ref也可以传递对象吗\n  1. 如果ref里面传递的是对象/数组，那么是经过了reactivity处理，形成了Proxy类型的对象，\n  2. ref内部：通过给value属性添加getter/setter来实现对数据的劫持\n  3. reactivity内部：通过使用Proxy来实现对对象内部所有的数据的劫持,并通过Reflect操作对象内部数据\n  4. ref的数据操作，在js中要.value,在模板中不需要，(内部解析模块会自动添加.value)\n\n\n\n**递归监听和非递归监听**\n\n`ref`和`reactive`都属于递归监听，也就是数据的每一层都是响应式的，如果数据量比较大，非常消耗性能，非递归监听只会监听数据的第一层。\n\n***  数组也使用**reactive**\n\n\n\n##  7）计算属性与监视\n\n1. ​\t计算属性\n\n   ```js\n   \n   import { ref } from \"@vue/reactivity\";\n   import { computed } from '@vue/runtime-core';\n   export default {\n     name: \"detailforref\",\n     setup() {\n       const m1 =ref(\"东方\");\n      const m2 = ref('不败')\n      const all = computed(()=>{\n          return m1.value + m2.value\n      })\n      const updataname = () =>{\n          m1.value = '西方'\n          m2.value = '求败'\n      }\n       return {\n         m1,\n         m2,\n         all,\n         updataname,\n       }\n   \n     },\n   };\n   ```\n\n   - 计算属性中如果只传入一个回调函数，表示的是get\n   - 计算属性返回的是一个ref类型的对象\n\n2. 监视属性\n\n   ```js\n   import { ref } from \"@vue/reactivity\";\n   import { watch } from '@vue/runtime-core';\n   export default {\n     name: \"detailforref\",\n     setup() {\n       const m1 =ref(\"东方\");\n      const m2 = ref('不败')\n      const user = [m1,m2]\n      const all = ref('')\n   //    const all = computed(()=>{\n   //        return m1.value + '_' + m2.value\n   //    })\n      watch(user,(val)=>{\n          return all.value = val[0]+'__'+val[1]\n      })\n      const updataname = () =>{\n          m1.value = '西方'\n          m2.value = '求败'\n      }\n       return {\n         m1,\n         m2,\n         all,\n         updataname,\n         user\n       }\n   \n     },\n   };\n   ```\n\n- 不会默认调用，需要手动配置默认调用\n\n```js\nimmediate:true\n// 当前watch默认执行一次\ndeep:true\n//深度监视\nwatch(user,(val)=>{\n       return all.value = val[0]+'__'+val[1]\n   },{immediate:true,deep:true})\n```\n\n- ​\t\twatchEffect()\n\n```js\n//监视，不需要配置immediate，本身默认就会进行监视，(默认执行一次)\nwatchEffect(()=>{\n\tfullName3.value = user.firstName + '-' +user.laastName\n})\n```\n\n- watch可以监视多个数据\n\n```js\nwatch([user.firstName,user.lastName,Fullnsmes3],()=>{\n\n})\n//Fullnames 是响应式数据\n//非响应式数据时，需要进行改动\n\nwatch([()=>user.firstName,()=>user.lastName],=>{\n      \n      })\n```\n\n\n\n## 8）生命周期对比\n\n```js\nbeforeCreate()\ncreated()\nbeforemount\nmounted\nbeforeUpdate\nupdated\nbeforedestory\ndestory\n\n*** deforeUnmount\n*** unmounted\n\nvue2所有的周期都可以在Vue3中使用\n但Vue3中是组合Api\n\nbeforeCreated -> 使用 setup()\ncreated -> 使用setup()\nbeforeMount -> onBeforeMount\nmounted -> onMounted\nbeforeUpdate -> onBeforeUpdate\nupdated -> onUpdated\nbeforeDestory -> onBeforeUnmount\ndestoryed -> onUnmounted\nerrorCaptured -> onErrorCaptured\n\n新增调试周期函数\nonRenderTracked\nonReaderTriggered\n两个钩子函数都接受一个DebuggerEvent,与watchEffect 参数选项中的onTrack和onTrigger类似\n```\n\n3.0里面的生命周期钩子比2.0生命周期快\n\n\n\n## 9）自定义hook函数\n\n类似于mixin\n\n//公共接口是否可以混入组件或者临时存储\n\n```js\nimport {ref} from \"@vue/reactivity\";\nimport { onBeforeUnmount, onMounted} from 'vue'\nexport default function(){\n//   name: \"detailforref\",\n \n    const x = ref(-1);\n    const y = ref(-1);\n    const clickHandler = (event) =>{\n      x.value = event.pageX\n      console.log(event.pageX)\n      y.value = event.pageY\n    }\n    //页面加载完毕，再进行点击操作\n     onMounted(()=>{\n       window.addEventListener('click',clickHandler)\n    // console.log(\"page reload success\");\n  })\n  onBeforeUnmount(()=>{\n    window.removeEventListener('click',clickHandler)\n  })\n    return {\n      x,\n      y,\n    }\n  \n \n}\n```\n\n```js\nimport {defineComponent} from 'vue'\nimport hook from './hook'\nexport default defineComponent({\n  name:'detailforhook',\n  setup(){\n    const {x,y} =hook()\n    return {\n      x,y\n    }\n  }\n\n})\n```\n\n\n\n\n\n\n\nhttps://juejin.cn/post/6977929393511514148\n\n---\n\n#### 1. ref和shallowRef\n\n- `ref`定义的数据每一层都是响应式数据\n- `shallowRef`定义的数据，只有第一层是响应式的，即只有在更改`.value`的时候才能实现响应式\n\n#### 2.toRaw\n\n**toRaw的出现是解决什么问题呢？**\n\n有些时候我们不希望数据进行响应式实时更新，可以通过`toRaw`获取`ref`或`reactive`引用的原始数据，通过修改原始数据，不会造成界面的更新，只有通过修改`ref`和`reactive`包装后的数据时才会发生界面响应式变化。\n\n```js\nlet obj1 = {...};\n//state和obj1是引用关系，state的本质是一个Proxy对象，其中引用了obj1\nlet state = reactive(obj1);\n//通过toRaw方法获取到原始数据，其实是获取到obj1的内存地址，obj2和obj1是完全相等的\nlet obj2 = toRaw(state)\nconsole.log(obj1 === obj2);//true\n\n```\n\n#### 3.markRow\n\n> **与toRaw不同，markRaw包装后的数据永远不会被追踪！**\n>\n> 暂时没发现有什么用处(手动狗头)\n\n```typescript\nlet obj1 = {name: \"lijing\", age: 18}\nlet obj2 = markRaw(obj1);\n//此时reactive包装的数据虽然是响应式对象，但是不会被跟踪，也不会产生效应式效果\nlet state1 = reactive(obj2)\n\nconsole.log(obj1 === obj2);//true\n```\n\n#### toRef和toRefs\n\n##### 1)ref\n\n```js\n使用ref对一个对象的某个简单数据类型属性进行响应式改造后，通过修改响应式数据不会影响到原始数据，如上图中，通过state1修改值后，obj1中的a属性值没有发生变化。这里有个注意点：修改的这个属性必须是简单数据类型，一个具体的值，不能是引用，如果该属性也是一个对象，则会影响，因为对象--->引用！\n\n```\n\n##### 2）ref的另一个作用\n\n```js\n<button ref='inoutref'></input>\n//获取input框的焦点\nconst inputRef = ref(null)\nonMounted(()=>{\n      if(inputRef.value){\n        console.log(inputRef)\n        inputRef.value.focus()\n      }\n    })\n```\n\n#### 2. toRef\n\n为源响应式对象上的某个属性创建一个ref对象，二者内部操作的是同一个数据值，**更新时二者的是同一个数据值，更新时二者是同步的**\n\n- 区别ref：拷贝了一份新的数值单独操作，更新时互不影响，toRef两个数据之间有关联\n- 应用：当要将某个prop的ref传递给复合函数时，toRef很有用\n  - 原本时传递普通数据，若使用toRef则传递的是ref对象\n\n如果使用toRef来转换，则修改响应式数据会影响到原始数据，数据发生改变，但是界面不会自动更新\n\n转换后的是一个`ObjectRefImpl`类型\n\n#### 3. toRefs\n\n将一个响应式对象转换为普通对象，该普通对象 的每一个property都是一个ref\n\n```js\nconst state1 =toRefs(state)\n//让state里面的每一个属性都变成ref类型\n```\n\n\n\n遍历对象中的所有属性，将其变为响应式数据，这是因为`toRef`只能传一个`key`，`toRefs`所达到的效果与`toRef`一样\n\n## 10）shallowReactive 和 shallowRef\n\n\n\n##### 1.reactive 为深度响应式\n\n##### 2.shallowReactive 浅响应式\n\n\n\n##### 3.ref为深度响应式\n\n##### 4.shallowRef为浅响应式\n\n\n\n#### shallowRef 只进行value的响应式，不进行对象的reactive处理\n\n```js\n//什么时候用浅响应式\n1.一般情况下使用ref和reactive即可\n2.如果有一个对象数据，结构比较深，但变化只是比较外\t层属性变换====> shalllowReactive\n3.如果一个对象数据，后面会产生新的对象来替换 ===> shallowRef\n```\n\n\n\n## 11)readonly和shallowReadonly\n\n深度可读和浅度可读\n\n\n\n## 12）toRow 和 markRow\n\n##### toRow ->将代理对象变为普通对象\n\n##### markRow ->标记的对象数据从此以后不能再成为代理对象\n\n\n\n\n\n## 13）customRef 自定义ref\n\n​\t\t\t可以用于自定义一个ref,可以显式的控制依赖追踪和触发响应，接受一个工厂函数，两个参数分别是用于追踪track 与用于触发响应的trigger，并返回一个带有get 和 set 属性的对象，\n\n- 使用自定义ref实现带防抖功能的v-model\n\n\n\ntrack trigger 延申知识\n\n\n\n## 14）inject和provide\n\n依赖注入，实现跨层级，祖孙之间数据传递\n\n```js\nprovide('color',color)\n/***\n第一个数据为标识，\n第二个参数为数据本身\n*/\nconst color = inject('color')\n//接收数据\n//直接从祖组件传递到孙子组件\n```\n\n## 15） 判断数据\n\n- isRef:检查一个值是否为一个ref对象\n- isReactive:检查一个对象是否有reactive创建的响应式数据\n- isReadonly:检查一个对象是否由Readonly创建的只读代理\n- isProxy:检查一个对象是否由reactive或者Readonly创建的代理\n\n## 16）新组件\n\n1. Fragment（片段）\n   - 在vue2中必须有一个根标签\n   - 不需要根标签，减少标签层级，减小内存占用\n2. Teleport（瞬移）\n\n```js\n<Teleport to=''><Teleport>\n```\n\n将该标签内的。。。\n\n待补充\n\n### Suspence(不确定的)\n\n运行在渲染异步组件时渲染一些后背内容，可以让我们创建一个平滑的用户体验\n\nvue2动态引用组件\n\n```js\nconst component =()=>import './...'\n//在vue3 中这种写法不行\n```\n\nvue3 动态引入组件\n\n```js\nimport {defineAsyncComponent} from 'vue'\nconst component =defineAsyncComponent(()=>import './...')\n```\n\n### Suspence使用\n\n```js\n<Suspence>\n    \t<template #default>\n    \t<--异步组件-->\n    \t</template>\n\n\t \t<template v-slot:fallback>\n    \t<--准备的内容-->\n    \t</template>\n    </Suspence>\n\n// #default 是简写 # = 'v-slot'\n// v-slot:fallback 固定写法\n\n```\n\n\n\n\n\nVue2 给原型挂载方法\n\nvue3 给原型挂载方法\n\n\n\n## Vue3 面试\n\n抱歉:研究没有那么深\n\n2020.9正式版->2022.2.7默认版本->Vue 3 支持vue2大多数特性 - > 新一代构建工具，按需编译，热加载更快 ->  不需要根节点 ，减少内存占用 ->  组合式api ，代替了Vue2,option api,复用性更好，更好的支持Ts -> 深度监视，之前需要set监视数组内部数据变换，现在直接就可以深度监视 -> suspence 更加注重用户体验 ->hook函数 -> 跨级组件通信 ，依赖注入 -> ref实现防抖 -> 可以使用2的生命周期函数，vue3的周期函数更快 -> 响应式数据原理Proxy -> 重写虚拟dom,速度更快 ->新组件瞬移，片段(不需要根节点)\n","source":"_posts/vue 3.0.md","raw":"---\n\ntitle: vue3 初体验\ntags: [ref,reactive,reandonly,vite,Suspence,provide,Teleport]\nauthor: codefish\ndate: 2022-2-15 14:13:36\ncategories: vue\ntop_img: /img/12.jpg\ncover: /img/12.jpg\n\n---\nvue3的更新是颠覆式的，最大的改变就是组合式api,以及shake tree优化代码运行速度，新的响应式原理，封装更多内置方法。\n\n## vue 3.0\n\n---\n\n- Vue -cli\n- Vue -router\n- VueX\n\n\n\nVue3 不需要根节点(在模板template)\n\n## vue setup \n\n//新的optioon 所有的api都在次使用，只在初始化执行一次\n//组合APi中第一个要使用的函数\n\nVue3 支持 vue2 大多数语法\n\n```js\ndata(){\n    return {\n\tcount++;\n    }\n}\n\nmethods:{\n\tnumPut(){\n        this.count++\n    }\n}\n```\n\n## 1）setup 是组合 api 的入口函数\n\nVue3 的写法\n\n```js\nsetup(){\n    let count = 0\n    function updateCount(){\n\t\tcount++\n    }\n}\n//此时的数据不是响应的数据\n```\n\n引入ref解决\n\n```js\nimport { ref } from 'Vue'\n```\n\n## 2）ref  定义一个响应式的数据\n\n```js\n//count未ref类型\nconst  count = ref(0)\nfunction(){\n\tcount.value++;\n}\n\n//返回一个ref对象\n//对象中如果要对value操作，需要进行xxx.value\n//模板中，直接使用xxx\n\n//创建一个包含响应式数据的引用（refrence)对象\n//js 中操作 aa.value\n//模板中直接操作 aa\n//---一般用来定义一个基本类型的响应式数据\n\n\n```\n\n## 3）reactive\n\n```JS\n//\n\nsetup(){\n    //对象\n    //此时user对象的类型是Proxy\n    const user = recative({\n\tname:\"lihua\",\n        age:19,\n    })\n}\n\n<h2>名字：{{user.name}}</h2>\n\n//方法两种写法\nfunction changename(){\n}\n\nconst updateUser = ()=>{\n    user.name = 'wang' + user.name\n    return {\n\tuser,\n    }\n}\n\n\nconst obj = {\n\tname:'hello',\n    age:10\n}\nobj.name = obj.name + 'obj'\n//此方式修改对象的值不能响应，只能采用代理对象的方式来更新数据\n\n```\n\nreactive \n\n```js\n//作用：定义多个数据的响应式\nconst proxy = reactive(obj)\n //接收一个普通对象然后返回该普通对象的响应式代理器对象\n//响应式转换是深层的，会影响内部所有嵌套的属性\n//内部基于Es6 的Proxy实现，通过代理对象操作源对象内部数据都是响应式的\n\n//***在vue2.0 中，数组内部数据的变化不会引起响应\n\n//把对象变为响应式的数据\n//返回的是一个Proxy的代理对象，被代理者就是obj中的传入的对象\nconst user = reactive({\n    name:'张三',\n    age:20,\n})\n```\n\n```js\n//对比两种情况下，数据的更新\n//对象obj 和 对象user 的变换情况 \nconst obj = {\n    name;'小周',\n    age:'20'\n}\nconst user = reactive(obj)\n\nobj.gender = '男'\n//不更新\n\nuser.gender = '男'\n//这种方式界面更新渲染，并且也添加到了obj对象中去\n\ndelete user.age  //界面更新渲染，属性被删除\ndelete obj.age //界面不渲染，属性被删除\n引起ts类型报错 加上 const obj:any = {}..\n\n```\n\n补充：\n\n需要注意的是，`reactive`中传递的参数必须是`json`对象或者数组，如果传递了其他对象（比如`new Date()`），在默认情况下修改对象，界面不会自动更新，如果也需要具有响应式，可以通过重新赋值的方式实现\n\n```js\n//msg 的数据是存在变化的，但界面并未发生变化，同时我们发现在控制台里，msg 并未被识别成 proxy。\n<template>\n<div>\n  <p>{{msg}}</p>\n  <button @click=\"c\">button</button>\n</div>\n</template>\n\n<script>\nimport { reactive } from 'vue'\nexport default {\n  name: 'App',\n  setup() {\n    let msg = reactive(new Date())\n    function c() {\n      console.log(msg);\n      msg.setDate(msg.getDate() + 1);\n      console.log(msg);\n    }\n    return {\n      msg,\n      c\n    };\n  }\n}\n</script>\n\n\n//显然，对于这种数据类型，我们需要做特殊处理。\n//这个特殊处理就是重新赋值（，而不是直接修改原来的值）。\n```\n\n\n\n基本数据传递给reactive，reactive并不会将它包装成porxy对象，并且当数据变化时，界面也不会变化\n\n\n\n## 4）比较Vue2与Vue3的响应式\n\nvue2 \n\n- 核心\n\n  对象：通过defineProperty对对象的已有属性值的读取和修改进行劫持（监视/拦截）\n\n  数组:通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持\n\nvue 3.0\n\n通过proxy代理，reflect（反射对象），不是函数对象，不能构造 \n\n```js\n//将目标对象变成代理对象\n//参数1：user-->target目标对象\n//参数2：handler -->处理器对象，用来监视数据，及数据的操作\n//目标对象\nconst user = {\n    name:\"佐助\",\n    age:20,\n    wife:{\n\tname:'xiaoyin'\n    }\n}\nconst proxyUser = new Proxy(user,{\n    get(target,prop){},\n    set(){},\n    delectProperty(){}\n})\n//通过代理对象获取目标对象中的某个属性值\n//reflect反射对象\n```\n\n![image-20220215193447751](E:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0/mdimages/image-20220215193447751.png)\n\n通过代理对象修改目标对象的值\n\n通过代理对象向目标对象中添加一个新的属性\n\n![image-20220215193649429](E:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0/mdimages/image-20220215193649429.png)\n\nvue3的深度响应可以深度响应\n\n## 5）setup 细节\n\n```js\n//父子组件通信\n//父组件\n\n//子组件中\nprops:['msg']\n\nmsg:{\n\tname:\"aq\",\n    sex:'male'\n}\n```\n\nsetup一般都是返回一个对象，对象中的属性和方法都可以在html模板中直接使用\n\n```js\nsetup是在beforeCreate生命周期之前就执行了，而且就执行一次\n//beforeCreate 此时组件还没创建，组件实例对象this根本不能用\n\n```\n\nsetup运行的时机\n\nsetup执行的时机\n\n- 在beforeCreate之前执行（一次），此时组件对象还没有创建,不能使用data和methods\n- this是underfinded,不能通过this来访问data/computed/methods/props\n- 其实所有的composition API 相关回调函数中也都不可以\n\nsetup的返回值\n\n- ​\t一般都返回一个对象，为模板提供数据，也就是模板中可以直接使用次对象中的所有属性方法\n- 返回对象中的属性会与data函数返回对象的属性合并并成为组件对象的属性\n- 返回对象中的方法会与methods中的方法合并并成功组件对象的方法\n- 如果有重名，setup优先\n- 注意\n- 一般不要混合使用，methods和data都可以写在setup\n- setup不能是async函数，因为返回值不再是一个对象，而是一个promise，模板看不到对象中的属性数据\n- 数据初始化的生命周期回调\n\nsetup()的参数 \n\n两种写法\n\n1.setup(props,contect)\n\n2.setup(props,attrs,slots,emit)\n\n- props 参数，是一个对象，里面有父级组件向子级组件传递的数据\n\n- contect参数(是一个对象)\n\n- ```js\n  1.attrs\t\n  \t//获取当前组件标签的属性，但是该数据是在props中，没有接收的所有的属性的对象\n  2.emit\n  \t//分发事件\n  @xxx = 'xxx'\n  function xxx(txt){\n  \tmsg.value += txt;\n  }\n  <button @click='emitXXX'>分发事件</button>\n  function emitXXX(){\n      context.emit('xxx','+')\n  }\n  3.expose\n  4.slots\n  \t//插槽\n  ```\n\n\n\n## 6）ref和reactive细节(响应式API)\n\n- ref也可以传递对象吗\n  1. 如果ref里面传递的是对象/数组，那么是经过了reactivity处理，形成了Proxy类型的对象，\n  2. ref内部：通过给value属性添加getter/setter来实现对数据的劫持\n  3. reactivity内部：通过使用Proxy来实现对对象内部所有的数据的劫持,并通过Reflect操作对象内部数据\n  4. ref的数据操作，在js中要.value,在模板中不需要，(内部解析模块会自动添加.value)\n\n\n\n**递归监听和非递归监听**\n\n`ref`和`reactive`都属于递归监听，也就是数据的每一层都是响应式的，如果数据量比较大，非常消耗性能，非递归监听只会监听数据的第一层。\n\n***  数组也使用**reactive**\n\n\n\n##  7）计算属性与监视\n\n1. ​\t计算属性\n\n   ```js\n   \n   import { ref } from \"@vue/reactivity\";\n   import { computed } from '@vue/runtime-core';\n   export default {\n     name: \"detailforref\",\n     setup() {\n       const m1 =ref(\"东方\");\n      const m2 = ref('不败')\n      const all = computed(()=>{\n          return m1.value + m2.value\n      })\n      const updataname = () =>{\n          m1.value = '西方'\n          m2.value = '求败'\n      }\n       return {\n         m1,\n         m2,\n         all,\n         updataname,\n       }\n   \n     },\n   };\n   ```\n\n   - 计算属性中如果只传入一个回调函数，表示的是get\n   - 计算属性返回的是一个ref类型的对象\n\n2. 监视属性\n\n   ```js\n   import { ref } from \"@vue/reactivity\";\n   import { watch } from '@vue/runtime-core';\n   export default {\n     name: \"detailforref\",\n     setup() {\n       const m1 =ref(\"东方\");\n      const m2 = ref('不败')\n      const user = [m1,m2]\n      const all = ref('')\n   //    const all = computed(()=>{\n   //        return m1.value + '_' + m2.value\n   //    })\n      watch(user,(val)=>{\n          return all.value = val[0]+'__'+val[1]\n      })\n      const updataname = () =>{\n          m1.value = '西方'\n          m2.value = '求败'\n      }\n       return {\n         m1,\n         m2,\n         all,\n         updataname,\n         user\n       }\n   \n     },\n   };\n   ```\n\n- 不会默认调用，需要手动配置默认调用\n\n```js\nimmediate:true\n// 当前watch默认执行一次\ndeep:true\n//深度监视\nwatch(user,(val)=>{\n       return all.value = val[0]+'__'+val[1]\n   },{immediate:true,deep:true})\n```\n\n- ​\t\twatchEffect()\n\n```js\n//监视，不需要配置immediate，本身默认就会进行监视，(默认执行一次)\nwatchEffect(()=>{\n\tfullName3.value = user.firstName + '-' +user.laastName\n})\n```\n\n- watch可以监视多个数据\n\n```js\nwatch([user.firstName,user.lastName,Fullnsmes3],()=>{\n\n})\n//Fullnames 是响应式数据\n//非响应式数据时，需要进行改动\n\nwatch([()=>user.firstName,()=>user.lastName],=>{\n      \n      })\n```\n\n\n\n## 8）生命周期对比\n\n```js\nbeforeCreate()\ncreated()\nbeforemount\nmounted\nbeforeUpdate\nupdated\nbeforedestory\ndestory\n\n*** deforeUnmount\n*** unmounted\n\nvue2所有的周期都可以在Vue3中使用\n但Vue3中是组合Api\n\nbeforeCreated -> 使用 setup()\ncreated -> 使用setup()\nbeforeMount -> onBeforeMount\nmounted -> onMounted\nbeforeUpdate -> onBeforeUpdate\nupdated -> onUpdated\nbeforeDestory -> onBeforeUnmount\ndestoryed -> onUnmounted\nerrorCaptured -> onErrorCaptured\n\n新增调试周期函数\nonRenderTracked\nonReaderTriggered\n两个钩子函数都接受一个DebuggerEvent,与watchEffect 参数选项中的onTrack和onTrigger类似\n```\n\n3.0里面的生命周期钩子比2.0生命周期快\n\n\n\n## 9）自定义hook函数\n\n类似于mixin\n\n//公共接口是否可以混入组件或者临时存储\n\n```js\nimport {ref} from \"@vue/reactivity\";\nimport { onBeforeUnmount, onMounted} from 'vue'\nexport default function(){\n//   name: \"detailforref\",\n \n    const x = ref(-1);\n    const y = ref(-1);\n    const clickHandler = (event) =>{\n      x.value = event.pageX\n      console.log(event.pageX)\n      y.value = event.pageY\n    }\n    //页面加载完毕，再进行点击操作\n     onMounted(()=>{\n       window.addEventListener('click',clickHandler)\n    // console.log(\"page reload success\");\n  })\n  onBeforeUnmount(()=>{\n    window.removeEventListener('click',clickHandler)\n  })\n    return {\n      x,\n      y,\n    }\n  \n \n}\n```\n\n```js\nimport {defineComponent} from 'vue'\nimport hook from './hook'\nexport default defineComponent({\n  name:'detailforhook',\n  setup(){\n    const {x,y} =hook()\n    return {\n      x,y\n    }\n  }\n\n})\n```\n\n\n\n\n\n\n\nhttps://juejin.cn/post/6977929393511514148\n\n---\n\n#### 1. ref和shallowRef\n\n- `ref`定义的数据每一层都是响应式数据\n- `shallowRef`定义的数据，只有第一层是响应式的，即只有在更改`.value`的时候才能实现响应式\n\n#### 2.toRaw\n\n**toRaw的出现是解决什么问题呢？**\n\n有些时候我们不希望数据进行响应式实时更新，可以通过`toRaw`获取`ref`或`reactive`引用的原始数据，通过修改原始数据，不会造成界面的更新，只有通过修改`ref`和`reactive`包装后的数据时才会发生界面响应式变化。\n\n```js\nlet obj1 = {...};\n//state和obj1是引用关系，state的本质是一个Proxy对象，其中引用了obj1\nlet state = reactive(obj1);\n//通过toRaw方法获取到原始数据，其实是获取到obj1的内存地址，obj2和obj1是完全相等的\nlet obj2 = toRaw(state)\nconsole.log(obj1 === obj2);//true\n\n```\n\n#### 3.markRow\n\n> **与toRaw不同，markRaw包装后的数据永远不会被追踪！**\n>\n> 暂时没发现有什么用处(手动狗头)\n\n```typescript\nlet obj1 = {name: \"lijing\", age: 18}\nlet obj2 = markRaw(obj1);\n//此时reactive包装的数据虽然是响应式对象，但是不会被跟踪，也不会产生效应式效果\nlet state1 = reactive(obj2)\n\nconsole.log(obj1 === obj2);//true\n```\n\n#### toRef和toRefs\n\n##### 1)ref\n\n```js\n使用ref对一个对象的某个简单数据类型属性进行响应式改造后，通过修改响应式数据不会影响到原始数据，如上图中，通过state1修改值后，obj1中的a属性值没有发生变化。这里有个注意点：修改的这个属性必须是简单数据类型，一个具体的值，不能是引用，如果该属性也是一个对象，则会影响，因为对象--->引用！\n\n```\n\n##### 2）ref的另一个作用\n\n```js\n<button ref='inoutref'></input>\n//获取input框的焦点\nconst inputRef = ref(null)\nonMounted(()=>{\n      if(inputRef.value){\n        console.log(inputRef)\n        inputRef.value.focus()\n      }\n    })\n```\n\n#### 2. toRef\n\n为源响应式对象上的某个属性创建一个ref对象，二者内部操作的是同一个数据值，**更新时二者的是同一个数据值，更新时二者是同步的**\n\n- 区别ref：拷贝了一份新的数值单独操作，更新时互不影响，toRef两个数据之间有关联\n- 应用：当要将某个prop的ref传递给复合函数时，toRef很有用\n  - 原本时传递普通数据，若使用toRef则传递的是ref对象\n\n如果使用toRef来转换，则修改响应式数据会影响到原始数据，数据发生改变，但是界面不会自动更新\n\n转换后的是一个`ObjectRefImpl`类型\n\n#### 3. toRefs\n\n将一个响应式对象转换为普通对象，该普通对象 的每一个property都是一个ref\n\n```js\nconst state1 =toRefs(state)\n//让state里面的每一个属性都变成ref类型\n```\n\n\n\n遍历对象中的所有属性，将其变为响应式数据，这是因为`toRef`只能传一个`key`，`toRefs`所达到的效果与`toRef`一样\n\n## 10）shallowReactive 和 shallowRef\n\n\n\n##### 1.reactive 为深度响应式\n\n##### 2.shallowReactive 浅响应式\n\n\n\n##### 3.ref为深度响应式\n\n##### 4.shallowRef为浅响应式\n\n\n\n#### shallowRef 只进行value的响应式，不进行对象的reactive处理\n\n```js\n//什么时候用浅响应式\n1.一般情况下使用ref和reactive即可\n2.如果有一个对象数据，结构比较深，但变化只是比较外\t层属性变换====> shalllowReactive\n3.如果一个对象数据，后面会产生新的对象来替换 ===> shallowRef\n```\n\n\n\n## 11)readonly和shallowReadonly\n\n深度可读和浅度可读\n\n\n\n## 12）toRow 和 markRow\n\n##### toRow ->将代理对象变为普通对象\n\n##### markRow ->标记的对象数据从此以后不能再成为代理对象\n\n\n\n\n\n## 13）customRef 自定义ref\n\n​\t\t\t可以用于自定义一个ref,可以显式的控制依赖追踪和触发响应，接受一个工厂函数，两个参数分别是用于追踪track 与用于触发响应的trigger，并返回一个带有get 和 set 属性的对象，\n\n- 使用自定义ref实现带防抖功能的v-model\n\n\n\ntrack trigger 延申知识\n\n\n\n## 14）inject和provide\n\n依赖注入，实现跨层级，祖孙之间数据传递\n\n```js\nprovide('color',color)\n/***\n第一个数据为标识，\n第二个参数为数据本身\n*/\nconst color = inject('color')\n//接收数据\n//直接从祖组件传递到孙子组件\n```\n\n## 15） 判断数据\n\n- isRef:检查一个值是否为一个ref对象\n- isReactive:检查一个对象是否有reactive创建的响应式数据\n- isReadonly:检查一个对象是否由Readonly创建的只读代理\n- isProxy:检查一个对象是否由reactive或者Readonly创建的代理\n\n## 16）新组件\n\n1. Fragment（片段）\n   - 在vue2中必须有一个根标签\n   - 不需要根标签，减少标签层级，减小内存占用\n2. Teleport（瞬移）\n\n```js\n<Teleport to=''><Teleport>\n```\n\n将该标签内的。。。\n\n待补充\n\n### Suspence(不确定的)\n\n运行在渲染异步组件时渲染一些后背内容，可以让我们创建一个平滑的用户体验\n\nvue2动态引用组件\n\n```js\nconst component =()=>import './...'\n//在vue3 中这种写法不行\n```\n\nvue3 动态引入组件\n\n```js\nimport {defineAsyncComponent} from 'vue'\nconst component =defineAsyncComponent(()=>import './...')\n```\n\n### Suspence使用\n\n```js\n<Suspence>\n    \t<template #default>\n    \t<--异步组件-->\n    \t</template>\n\n\t \t<template v-slot:fallback>\n    \t<--准备的内容-->\n    \t</template>\n    </Suspence>\n\n// #default 是简写 # = 'v-slot'\n// v-slot:fallback 固定写法\n\n```\n\n\n\n\n\nVue2 给原型挂载方法\n\nvue3 给原型挂载方法\n\n\n\n## Vue3 面试\n\n抱歉:研究没有那么深\n\n2020.9正式版->2022.2.7默认版本->Vue 3 支持vue2大多数特性 - > 新一代构建工具，按需编译，热加载更快 ->  不需要根节点 ，减少内存占用 ->  组合式api ，代替了Vue2,option api,复用性更好，更好的支持Ts -> 深度监视，之前需要set监视数组内部数据变换，现在直接就可以深度监视 -> suspence 更加注重用户体验 ->hook函数 -> 跨级组件通信 ，依赖注入 -> ref实现防抖 -> 可以使用2的生命周期函数，vue3的周期函数更快 -> 响应式数据原理Proxy -> 重写虚拟dom,速度更快 ->新组件瞬移，片段(不需要根节点)\n","slug":"vue 3.0","published":1,"updated":"2025-01-07T02:30:25.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0cra001l572oe3gl24gp","content":"<p>vue3的更新是颠覆式的，最大的改变就是组合式api,以及shake tree优化代码运行速度，新的响应式原理，封装更多内置方法。</p>\n<h2 id=\"vue-3-0\"><a href=\"#vue-3-0\" class=\"headerlink\" title=\"vue 3.0\"></a>vue 3.0</h2><hr>\n<ul>\n<li>Vue -cli</li>\n<li>Vue -router</li>\n<li>VueX</li>\n</ul>\n<p>Vue3 不需要根节点(在模板template)</p>\n<h2 id=\"vue-setup\"><a href=\"#vue-setup\" class=\"headerlink\" title=\"vue setup\"></a>vue setup</h2><p>&#x2F;&#x2F;新的optioon 所有的api都在次使用，只在初始化执行一次<br>&#x2F;&#x2F;组合APi中第一个要使用的函数</p>\n<p>Vue3 支持 vue2 大多数语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">numPut</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1）setup-是组合-api-的入口函数\"><a href=\"#1）setup-是组合-api-的入口函数\" class=\"headerlink\" title=\"1）setup 是组合 api 的入口函数\"></a>1）setup 是组合 api 的入口函数</h2><p>Vue3 的写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">updateCount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\tcount++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此时的数据不是响应的数据</span></span><br></pre></td></tr></table></figure>\n\n<p>引入ref解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;Vue&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2）ref-定义一个响应式的数据\"><a href=\"#2）ref-定义一个响应式的数据\" class=\"headerlink\" title=\"2）ref  定义一个响应式的数据\"></a>2）ref  定义一个响应式的数据</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//count未ref类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\tcount.<span class=\"property\">value</span>++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回一个ref对象</span></span><br><span class=\"line\"><span class=\"comment\">//对象中如果要对value操作，需要进行xxx.value</span></span><br><span class=\"line\"><span class=\"comment\">//模板中，直接使用xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个包含响应式数据的引用（refrence)对象</span></span><br><span class=\"line\"><span class=\"comment\">//js 中操作 aa.value</span></span><br><span class=\"line\"><span class=\"comment\">//模板中直接操作 aa</span></span><br><span class=\"line\"><span class=\"comment\">//---一般用来定义一个基本类型的响应式数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3）reactive\"><a href=\"#3）reactive\" class=\"headerlink\" title=\"3）reactive\"></a>3）reactive</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对象</span></span><br><span class=\"line\">    <span class=\"comment\">//此时user对象的类型是Proxy</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = <span class=\"title function_\">recative</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&quot;lihua&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>:<span class=\"number\">19</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;名字：&#123;&#123;user.<span class=\"property\">name</span>&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法两种写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changename</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">updateUser</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    user.<span class=\"property\">name</span> = <span class=\"string\">&#x27;wang&#x27;</span> + user.<span class=\"property\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\tuser,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"property\">name</span> = obj.<span class=\"property\">name</span> + <span class=\"string\">&#x27;obj&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//此方式修改对象的值不能响应，只能采用代理对象的方式来更新数据</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>reactive </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//作用：定义多个数据的响应式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"title function_\">reactive</span>(obj)</span><br><span class=\"line\"> <span class=\"comment\">//接收一个普通对象然后返回该普通对象的响应式代理器对象</span></span><br><span class=\"line\"><span class=\"comment\">//响应式转换是深层的，会影响内部所有嵌套的属性</span></span><br><span class=\"line\"><span class=\"comment\">//内部基于Es6 的Proxy实现，通过代理对象操作源对象内部数据都是响应式的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//***在vue2.0 中，数组内部数据的变化不会引起响应</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把对象变为响应式的数据</span></span><br><span class=\"line\"><span class=\"comment\">//返回的是一个Proxy的代理对象，被代理者就是obj中的传入的对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对比两种情况下，数据的更新</span></span><br><span class=\"line\"><span class=\"comment\">//对象obj 和 对象user 的变换情况 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    name;<span class=\"string\">&#x27;小周&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"string\">&#x27;20&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"title function_\">reactive</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//不更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">user.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//这种方式界面更新渲染，并且也添加到了obj对象中去</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> user.<span class=\"property\">age</span>  <span class=\"comment\">//界面更新渲染，属性被删除</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">age</span> <span class=\"comment\">//界面不渲染，属性被删除</span></span><br><span class=\"line\">引起ts类型报错 加上 <span class=\"keyword\">const</span> <span class=\"attr\">obj</span>:any = &#123;&#125;..</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>补充：</p>\n<p>需要注意的是，<code>reactive</code>中传递的参数必须是<code>json</code>对象或者数组，如果传递了其他对象（比如<code>new Date()</code>），在默认情况下修改对象，界面不会自动更新，如果也需要具有响应式，可以通过重新赋值的方式实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//msg 的数据是存在变化的，但界面并未发生变化，同时我们发现在控制台里，msg 并未被识别成 proxy。</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">let</span> msg = <span class=\"title function_\">reactive</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      msg.<span class=\"title function_\">setDate</span>(msg.<span class=\"title function_\">getDate</span>() + <span class=\"number\">1</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      msg,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      c</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显然，对于这种数据类型，我们需要做特殊处理。</span></span><br><span class=\"line\"><span class=\"comment\">//这个特殊处理就是重新赋值（，而不是直接修改原来的值）。</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>基本数据传递给reactive，reactive并不会将它包装成porxy对象，并且当数据变化时，界面也不会变化</p>\n<h2 id=\"4）比较Vue2与Vue3的响应式\"><a href=\"#4）比较Vue2与Vue3的响应式\" class=\"headerlink\" title=\"4）比较Vue2与Vue3的响应式\"></a>4）比较Vue2与Vue3的响应式</h2><p>vue2 </p>\n<ul>\n<li><p>核心</p>\n<p>对象：通过defineProperty对对象的已有属性值的读取和修改进行劫持（监视&#x2F;拦截）</p>\n<p>数组:通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持</p>\n</li>\n</ul>\n<p>vue 3.0</p>\n<p>通过proxy代理，reflect（反射对象），不是函数对象，不能构造 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将目标对象变成代理对象</span></span><br><span class=\"line\"><span class=\"comment\">//参数1：user--&gt;target目标对象</span></span><br><span class=\"line\"><span class=\"comment\">//参数2：handler --&gt;处理器对象，用来监视数据，及数据的操作</span></span><br><span class=\"line\"><span class=\"comment\">//目标对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;佐助&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">wife</span>:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoyin&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyUser = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(user,&#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">target,prop</span>)&#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\"></span>)&#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">delectProperty</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//通过代理对象获取目标对象中的某个属性值</span></span><br><span class=\"line\"><span class=\"comment\">//reflect反射对象</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0/mdimages/image-20220215193447751.png\" alt=\"image-20220215193447751\"></p>\n<p>通过代理对象修改目标对象的值</p>\n<p>通过代理对象向目标对象中添加一个新的属性</p>\n<p><img src=\"E:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0/mdimages/image-20220215193649429.png\" alt=\"image-20220215193649429\"></p>\n<p>vue3的深度响应可以深度响应</p>\n<h2 id=\"5）setup-细节\"><a href=\"#5）setup-细节\" class=\"headerlink\" title=\"5）setup 细节\"></a>5）setup 细节</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父子组件通信</span></span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子组件中</span></span><br><span class=\"line\"><span class=\"attr\">props</span>:[<span class=\"string\">&#x27;msg&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">msg</span>:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&quot;aq&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>setup一般都是返回一个对象，对象中的属性和方法都可以在html模板中直接使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup是在beforeCreate生命周期之前就执行了，而且就执行一次</span><br><span class=\"line\"><span class=\"comment\">//beforeCreate 此时组件还没创建，组件实例对象this根本不能用</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>setup运行的时机</p>\n<p>setup执行的时机</p>\n<ul>\n<li>在beforeCreate之前执行（一次），此时组件对象还没有创建,不能使用data和methods</li>\n<li>this是underfinded,不能通过this来访问data&#x2F;computed&#x2F;methods&#x2F;props</li>\n<li>其实所有的composition API 相关回调函数中也都不可以</li>\n</ul>\n<p>setup的返回值</p>\n<ul>\n<li>​    一般都返回一个对象，为模板提供数据，也就是模板中可以直接使用次对象中的所有属性方法</li>\n<li>返回对象中的属性会与data函数返回对象的属性合并并成为组件对象的属性</li>\n<li>返回对象中的方法会与methods中的方法合并并成功组件对象的方法</li>\n<li>如果有重名，setup优先</li>\n<li>注意</li>\n<li>一般不要混合使用，methods和data都可以写在setup</li>\n<li>setup不能是async函数，因为返回值不再是一个对象，而是一个promise，模板看不到对象中的属性数据</li>\n<li>数据初始化的生命周期回调</li>\n</ul>\n<p>setup()的参数 </p>\n<p>两种写法</p>\n<p>1.setup(props,contect)</p>\n<p>2.setup(props,attrs,slots,emit)</p>\n<ul>\n<li><p>props 参数，是一个对象，里面有父级组件向子级组件传递的数据</p>\n</li>\n<li><p>contect参数(是一个对象)</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>1.attrs<br>&#x2F;&#x2F;获取当前组件标签的属性，但是该数据是在props中，没有接收的所有的属性的对象<br>2.emit<br>&#x2F;&#x2F;分发事件<br>@xxx &#x3D; ‘xxx’<br>function xxx(txt){<br>msg.value +&#x3D; txt;<br>}<br>&lt;button @click&#x3D;’emitXXX’&gt;分发事件</button><br>function emitXXX(){<br>context.emit(‘xxx’,’+’)<br>}<br>3.expose<br>4.slots<br>&#x2F;&#x2F;插槽</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 6）ref和reactive细节(响应式API)</span><br><span class=\"line\"></span><br><span class=\"line\">- ref也可以传递对象吗</span><br><span class=\"line\">  1. 如果ref里面传递的是对象/数组，那么是经过了reactivity处理，形成了Proxy类型的对象，</span><br><span class=\"line\">  2. ref内部：通过给value属性添加getter/setter来实现对数据的劫持</span><br><span class=\"line\">  3. reactivity内部：通过使用Proxy来实现对对象内部所有的数据的劫持,并通过Reflect操作对象内部数据</span><br><span class=\"line\">  4. ref的数据操作，在js中要.value,在模板中不需要，(内部解析模块会自动添加.value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">**递归监听和非递归监听**</span><br><span class=\"line\"></span><br><span class=\"line\">`ref`和`reactive`都属于递归监听，也就是数据的每一层都是响应式的，如果数据量比较大，非常消耗性能，非递归监听只会监听数据的第一层。</span><br><span class=\"line\"></span><br><span class=\"line\">***  数组也使用**reactive**</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##  7）计算属性与监视</span><br><span class=\"line\"></span><br><span class=\"line\">1. ​\t计算属性</span><br><span class=\"line\"></span><br><span class=\"line\">   ```js</span><br><span class=\"line\">   </span><br><span class=\"line\">   import &#123; ref &#125; from &quot;@vue/reactivity&quot;;</span><br><span class=\"line\">   import &#123; computed &#125; from &#x27;@vue/runtime-core&#x27;;</span><br><span class=\"line\">   export default &#123;</span><br><span class=\"line\">     name: &quot;detailforref&quot;,</span><br><span class=\"line\">     setup() &#123;</span><br><span class=\"line\">       const m1 =ref(&quot;东方&quot;);</span><br><span class=\"line\">      const m2 = ref(&#x27;不败&#x27;)</span><br><span class=\"line\">      const all = computed(()=&gt;&#123;</span><br><span class=\"line\">          return m1.value + m2.value</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      const updataname = () =&gt;&#123;</span><br><span class=\"line\">          m1.value = &#x27;西方&#x27;</span><br><span class=\"line\">          m2.value = &#x27;求败&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       return &#123;</span><br><span class=\"line\">         m1,</span><br><span class=\"line\">         m2,</span><br><span class=\"line\">         all,</span><br><span class=\"line\">         updataname,</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>计算属性中如果只传入一个回调函数，表示的是get</li>\n<li>计算属性返回的是一个ref类型的对象</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>监视属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/reactivity&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/runtime-core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;detailforref&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> m1 =<span class=\"title function_\">ref</span>(<span class=\"string\">&quot;东方&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">const</span> m2 = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;不败&#x27;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">const</span> user = [m1,m2]</span><br><span class=\"line\">   <span class=\"keyword\">const</span> all = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//    const all = computed(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return m1.value + &#x27;_&#x27; + m2.value</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;)</span></span><br><span class=\"line\">   <span class=\"title function_\">watch</span>(user,<span class=\"function\">(<span class=\"params\">val</span>)=&gt;</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> all.<span class=\"property\">value</span> = val[<span class=\"number\">0</span>]+<span class=\"string\">&#x27;__&#x27;</span>+val[<span class=\"number\">1</span>]</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"title function_\">updataname</span> = (<span class=\"params\"></span>) =&gt;&#123;</span><br><span class=\"line\">       m1.<span class=\"property\">value</span> = <span class=\"string\">&#x27;西方&#x27;</span></span><br><span class=\"line\">       m2.<span class=\"property\">value</span> = <span class=\"string\">&#x27;求败&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      m1,</span><br><span class=\"line\">      m2,</span><br><span class=\"line\">      all,</span><br><span class=\"line\">      updataname,</span><br><span class=\"line\">      user</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>不会默认调用，需要手动配置默认调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">immediate</span>:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 当前watch默认执行一次</span></span><br><span class=\"line\"><span class=\"attr\">deep</span>:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//深度监视</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(user,<span class=\"function\">(<span class=\"params\">val</span>)=&gt;</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> all.<span class=\"property\">value</span> = val[<span class=\"number\">0</span>]+<span class=\"string\">&#x27;__&#x27;</span>+val[<span class=\"number\">1</span>]</span><br><span class=\"line\">   &#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>​        watchEffect()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//监视，不需要配置immediate，本身默认就会进行监视，(默认执行一次)</span></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\tfullName3.<span class=\"property\">value</span> = user.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;-&#x27;</span> +user.<span class=\"property\">laastName</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>watch可以监视多个数据</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>([user.<span class=\"property\">firstName</span>,user.<span class=\"property\">lastName</span>,<span class=\"title class_\">Fullnsmes3</span>],<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//Fullnames 是响应式数据</span></span><br><span class=\"line\"><span class=\"comment\">//非响应式数据时，需要进行改动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>([<span class=\"function\">()=&gt;</span>user.<span class=\"property\">firstName</span>,<span class=\"function\">()=&gt;</span>user.<span class=\"property\">lastName</span>],=&gt;&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8）生命周期对比\"><a href=\"#8）生命周期对比\" class=\"headerlink\" title=\"8）生命周期对比\"></a>8）生命周期对比</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">beforeCreate</span>()</span><br><span class=\"line\"><span class=\"title function_\">created</span>()</span><br><span class=\"line\">beforemount</span><br><span class=\"line\">mounted</span><br><span class=\"line\">beforeUpdate</span><br><span class=\"line\">updated</span><br><span class=\"line\">beforedestory</span><br><span class=\"line\">destory</span><br><span class=\"line\"></span><br><span class=\"line\">*** deforeUnmount</span><br><span class=\"line\">*** unmounted</span><br><span class=\"line\"></span><br><span class=\"line\">vue2所有的周期都可以在<span class=\"title class_\">Vue3</span>中使用</span><br><span class=\"line\">但<span class=\"title class_\">Vue3</span>中是组合<span class=\"title class_\">Api</span></span><br><span class=\"line\"></span><br><span class=\"line\">beforeCreated -&gt; 使用 <span class=\"title function_\">setup</span>()</span><br><span class=\"line\">created -&gt; 使用<span class=\"title function_\">setup</span>()</span><br><span class=\"line\">beforeMount -&gt; onBeforeMount</span><br><span class=\"line\">mounted -&gt; onMounted</span><br><span class=\"line\">beforeUpdate -&gt; onBeforeUpdate</span><br><span class=\"line\">updated -&gt; onUpdated</span><br><span class=\"line\">beforeDestory -&gt; onBeforeUnmount</span><br><span class=\"line\">destoryed -&gt; onUnmounted</span><br><span class=\"line\">errorCaptured -&gt; onErrorCaptured</span><br><span class=\"line\"></span><br><span class=\"line\">新增调试周期函数</span><br><span class=\"line\">onRenderTracked</span><br><span class=\"line\">onReaderTriggered</span><br><span class=\"line\">两个钩子函数都接受一个<span class=\"title class_\">DebuggerEvent</span>,与watchEffect 参数选项中的onTrack和onTrigger类似</span><br></pre></td></tr></table></figure>\n\n<p>3.0里面的生命周期钩子比2.0生命周期快</p>\n<h2 id=\"9）自定义hook函数\"><a href=\"#9）自定义hook函数\" class=\"headerlink\" title=\"9）自定义hook函数\"></a>9）自定义hook函数</h2><p>类似于mixin</p>\n<p>&#x2F;&#x2F;公共接口是否可以混入组件或者临时存储</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;ref&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/reactivity&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onBeforeUnmount, onMounted&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;detailforref&quot;,</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">const</span> x = <span class=\"title function_\">ref</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y = <span class=\"title function_\">ref</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\">event</span>) =&gt;&#123;</span><br><span class=\"line\">      x.<span class=\"property\">value</span> = event.<span class=\"property\">pageX</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">pageX</span>)</span><br><span class=\"line\">      y.<span class=\"property\">value</span> = event.<span class=\"property\">pageY</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//页面加载完毕，再进行点击操作</span></span><br><span class=\"line\">     <span class=\"title function_\">onMounted</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,clickHandler)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&quot;page reload success&quot;);</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">onBeforeUnmount</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,clickHandler)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      x,</span><br><span class=\"line\">      y,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hook <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hook&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;detailforhook&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;x,y&#125; =<span class=\"title function_\">hook</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      x,y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><a href=\"https://juejin.cn/post/6977929393511514148\">https://juejin.cn/post/6977929393511514148</a></p>\n<hr>\n<h4 id=\"1-ref和shallowRef\"><a href=\"#1-ref和shallowRef\" class=\"headerlink\" title=\"1. ref和shallowRef\"></a>1. ref和shallowRef</h4><ul>\n<li><code>ref</code>定义的数据每一层都是响应式数据</li>\n<li><code>shallowRef</code>定义的数据，只有第一层是响应式的，即只有在更改<code>.value</code>的时候才能实现响应式</li>\n</ul>\n<h4 id=\"2-toRaw\"><a href=\"#2-toRaw\" class=\"headerlink\" title=\"2.toRaw\"></a>2.toRaw</h4><p><strong>toRaw的出现是解决什么问题呢？</strong></p>\n<p>有些时候我们不希望数据进行响应式实时更新，可以通过<code>toRaw</code>获取<code>ref</code>或<code>reactive</code>引用的原始数据，通过修改原始数据，不会造成界面的更新，只有通过修改<code>ref</code>和<code>reactive</code>包装后的数据时才会发生界面响应式变化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;...&#125;;</span><br><span class=\"line\"><span class=\"comment\">//state和obj1是引用关系，state的本质是一个Proxy对象，其中引用了obj1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> state = <span class=\"title function_\">reactive</span>(obj1);</span><br><span class=\"line\"><span class=\"comment\">//通过toRaw方法获取到原始数据，其实是获取到obj1的内存地址，obj2和obj1是完全相等的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">toRaw</span>(state)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1 === obj2);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-markRow\"><a href=\"#3-markRow\" class=\"headerlink\" title=\"3.markRow\"></a>3.markRow</h4><blockquote>\n<p><strong>与toRaw不同，markRaw包装后的数据永远不会被追踪！</strong></p>\n<p>暂时没发现有什么用处(手动狗头)</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;lijing&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">markRaw</span>(obj1);</span><br><span class=\"line\"><span class=\"comment\">//此时reactive包装的数据虽然是响应式对象，但是不会被跟踪，也不会产生效应式效果</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> state1 = <span class=\"title function_\">reactive</span>(obj2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1 === obj2);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"toRef和toRefs\"><a href=\"#toRef和toRefs\" class=\"headerlink\" title=\"toRef和toRefs\"></a>toRef和toRefs</h4><h5 id=\"1-ref\"><a href=\"#1-ref\" class=\"headerlink\" title=\"1)ref\"></a>1)ref</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用ref对一个对象的某个简单数据类型属性进行响应式改造后，通过修改响应式数据不会影响到原始数据，如上图中，通过state1修改值后，obj1中的a属性值没有发生变化。这里有个注意点：修改的这个属性必须是简单数据类型，一个具体的值，不能是引用，如果该属性也是一个对象，则会影响，因为对象---&gt;引用！</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2）ref的另一个作用\"><a href=\"#2）ref的另一个作用\" class=\"headerlink\" title=\"2）ref的另一个作用\"></a>2）ref的另一个作用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button ref=<span class=\"string\">&#x27;inoutref&#x27;</span>&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"comment\">//获取input框的焦点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(inputRef.<span class=\"property\">value</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(inputRef)</span><br><span class=\"line\">        inputRef.<span class=\"property\">value</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-toRef\"><a href=\"#2-toRef\" class=\"headerlink\" title=\"2. toRef\"></a>2. toRef</h4><p>为源响应式对象上的某个属性创建一个ref对象，二者内部操作的是同一个数据值，<strong>更新时二者的是同一个数据值，更新时二者是同步的</strong></p>\n<ul>\n<li>区别ref：拷贝了一份新的数值单独操作，更新时互不影响，toRef两个数据之间有关联</li>\n<li>应用：当要将某个prop的ref传递给复合函数时，toRef很有用<ul>\n<li>原本时传递普通数据，若使用toRef则传递的是ref对象</li>\n</ul>\n</li>\n</ul>\n<p>如果使用toRef来转换，则修改响应式数据会影响到原始数据，数据发生改变，但是界面不会自动更新</p>\n<p>转换后的是一个<code>ObjectRefImpl</code>类型</p>\n<h4 id=\"3-toRefs\"><a href=\"#3-toRefs\" class=\"headerlink\" title=\"3. toRefs\"></a>3. toRefs</h4><p>将一个响应式对象转换为普通对象，该普通对象 的每一个property都是一个ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state1 =<span class=\"title function_\">toRefs</span>(state)</span><br><span class=\"line\"><span class=\"comment\">//让state里面的每一个属性都变成ref类型</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>遍历对象中的所有属性，将其变为响应式数据，这是因为<code>toRef</code>只能传一个<code>key</code>，<code>toRefs</code>所达到的效果与<code>toRef</code>一样</p>\n<h2 id=\"10）shallowReactive-和-shallowRef\"><a href=\"#10）shallowReactive-和-shallowRef\" class=\"headerlink\" title=\"10）shallowReactive 和 shallowRef\"></a>10）shallowReactive 和 shallowRef</h2><h5 id=\"1-reactive-为深度响应式\"><a href=\"#1-reactive-为深度响应式\" class=\"headerlink\" title=\"1.reactive 为深度响应式\"></a>1.reactive 为深度响应式</h5><h5 id=\"2-shallowReactive-浅响应式\"><a href=\"#2-shallowReactive-浅响应式\" class=\"headerlink\" title=\"2.shallowReactive 浅响应式\"></a>2.shallowReactive 浅响应式</h5><h5 id=\"3-ref为深度响应式\"><a href=\"#3-ref为深度响应式\" class=\"headerlink\" title=\"3.ref为深度响应式\"></a>3.ref为深度响应式</h5><h5 id=\"4-shallowRef为浅响应式\"><a href=\"#4-shallowRef为浅响应式\" class=\"headerlink\" title=\"4.shallowRef为浅响应式\"></a>4.shallowRef为浅响应式</h5><h4 id=\"shallowRef-只进行value的响应式，不进行对象的reactive处理\"><a href=\"#shallowRef-只进行value的响应式，不进行对象的reactive处理\" class=\"headerlink\" title=\"shallowRef 只进行value的响应式，不进行对象的reactive处理\"></a>shallowRef 只进行value的响应式，不进行对象的reactive处理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//什么时候用浅响应式</span></span><br><span class=\"line\"><span class=\"number\">1.</span>一般情况下使用ref和reactive即可</span><br><span class=\"line\"><span class=\"number\">2.</span>如果有一个对象数据，结构比较深，但变化只是比较外\t层属性变换====&gt; shalllowReactive</span><br><span class=\"line\"><span class=\"number\">3.</span>如果一个对象数据，后面会产生新的对象来替换 ===&gt; shallowRef</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"11-readonly和shallowReadonly\"><a href=\"#11-readonly和shallowReadonly\" class=\"headerlink\" title=\"11)readonly和shallowReadonly\"></a>11)readonly和shallowReadonly</h2><p>深度可读和浅度可读</p>\n<h2 id=\"12）toRow-和-markRow\"><a href=\"#12）toRow-和-markRow\" class=\"headerlink\" title=\"12）toRow 和 markRow\"></a>12）toRow 和 markRow</h2><h5 id=\"toRow-gt-将代理对象变为普通对象\"><a href=\"#toRow-gt-将代理对象变为普通对象\" class=\"headerlink\" title=\"toRow -&gt;将代理对象变为普通对象\"></a>toRow -&gt;将代理对象变为普通对象</h5><h5 id=\"markRow-gt-标记的对象数据从此以后不能再成为代理对象\"><a href=\"#markRow-gt-标记的对象数据从此以后不能再成为代理对象\" class=\"headerlink\" title=\"markRow -&gt;标记的对象数据从此以后不能再成为代理对象\"></a>markRow -&gt;标记的对象数据从此以后不能再成为代理对象</h5><h2 id=\"13）customRef-自定义ref\"><a href=\"#13）customRef-自定义ref\" class=\"headerlink\" title=\"13）customRef 自定义ref\"></a>13）customRef 自定义ref</h2><p>​            可以用于自定义一个ref,可以显式的控制依赖追踪和触发响应，接受一个工厂函数，两个参数分别是用于追踪track 与用于触发响应的trigger，并返回一个带有get 和 set 属性的对象，</p>\n<ul>\n<li>使用自定义ref实现带防抖功能的v-model</li>\n</ul>\n<p>track trigger 延申知识</p>\n<h2 id=\"14）inject和provide\"><a href=\"#14）inject和provide\" class=\"headerlink\" title=\"14）inject和provide\"></a>14）inject和provide</h2><p>依赖注入，实现跨层级，祖孙之间数据传递</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">provide</span>(<span class=\"string\">&#x27;color&#x27;</span>,color)</span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">第一个数据为标识，</span></span><br><span class=\"line\"><span class=\"comment\">第二个参数为数据本身</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = <span class=\"title function_\">inject</span>(<span class=\"string\">&#x27;color&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//接收数据</span></span><br><span class=\"line\"><span class=\"comment\">//直接从祖组件传递到孙子组件</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15）-判断数据\"><a href=\"#15）-判断数据\" class=\"headerlink\" title=\"15） 判断数据\"></a>15） 判断数据</h2><ul>\n<li>isRef:检查一个值是否为一个ref对象</li>\n<li>isReactive:检查一个对象是否有reactive创建的响应式数据</li>\n<li>isReadonly:检查一个对象是否由Readonly创建的只读代理</li>\n<li>isProxy:检查一个对象是否由reactive或者Readonly创建的代理</li>\n</ul>\n<h2 id=\"16）新组件\"><a href=\"#16）新组件\" class=\"headerlink\" title=\"16）新组件\"></a>16）新组件</h2><ol>\n<li>Fragment（片段）<ul>\n<li>在vue2中必须有一个根标签</li>\n<li>不需要根标签，减少标签层级，减小内存占用</li>\n</ul>\n</li>\n<li>Teleport（瞬移）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Teleport</span> to=<span class=\"string\">&#x27;&#x27;</span>&gt;&lt;<span class=\"title class_\">Teleport</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将该标签内的。。。</p>\n<p>待补充</p>\n<h3 id=\"Suspence-不确定的\"><a href=\"#Suspence-不确定的\" class=\"headerlink\" title=\"Suspence(不确定的)\"></a>Suspence(不确定的)</h3><p>运行在渲染异步组件时渲染一些后背内容，可以让我们创建一个平滑的用户体验</p>\n<p>vue2动态引用组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">component</span> =(<span class=\"params\"></span>)=&gt;<span class=\"keyword\">import</span> <span class=\"string\">&#x27;./...&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//在vue3 中这种写法不行</span></span><br></pre></td></tr></table></figure>\n\n<p>vue3 动态引入组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component =<span class=\"title function_\">defineAsyncComponent</span>(<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./...&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Suspence使用\"><a href=\"#Suspence使用\" class=\"headerlink\" title=\"Suspence使用\"></a>Suspence使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Suspence</span>&gt;</span><br><span class=\"line\">    \t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    \t&lt;--异步组件--&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    \t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">\t \t<span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:fallback</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    \t&lt;--准备的内容--&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    \t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Suspence</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">// #default 是简写 # = &#x27;v-slot&#x27;</span></span><br><span class=\"line\"><span class=\"language-xml\">// v-slot:fallback 固定写法</span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>Vue2 给原型挂载方法</p>\n<p>vue3 给原型挂载方法</p>\n<h2 id=\"Vue3-面试\"><a href=\"#Vue3-面试\" class=\"headerlink\" title=\"Vue3 面试\"></a>Vue3 面试</h2><p>抱歉:研究没有那么深</p>\n<p>2020.9正式版-&gt;2022.2.7默认版本-&gt;Vue 3 支持vue2大多数特性 - &gt; 新一代构建工具，按需编译，热加载更快 -&gt;  不需要根节点 ，减少内存占用 -&gt;  组合式api ，代替了Vue2,option api,复用性更好，更好的支持Ts -&gt; 深度监视，之前需要set监视数组内部数据变换，现在直接就可以深度监视 -&gt; suspence 更加注重用户体验 -&gt;hook函数 -&gt; 跨级组件通信 ，依赖注入 -&gt; ref实现防抖 -&gt; 可以使用2的生命周期函数，vue3的周期函数更快 -&gt; 响应式数据原理Proxy -&gt; 重写虚拟dom,速度更快 -&gt;新组件瞬移，片段(不需要根节点)</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>vue3的更新是颠覆式的，最大的改变就是组合式api,以及shake tree优化代码运行速度，新的响应式原理，封装更多内置方法。</p>\n<h2 id=\"vue-3-0\"><a href=\"#vue-3-0\" class=\"headerlink\" title=\"vue 3.0\"></a>vue 3.0</h2><hr>\n<ul>\n<li>Vue -cli</li>\n<li>Vue -router</li>\n<li>VueX</li>\n</ul>\n<p>Vue3 不需要根节点(在模板template)</p>\n<h2 id=\"vue-setup\"><a href=\"#vue-setup\" class=\"headerlink\" title=\"vue setup\"></a>vue setup</h2><p>&#x2F;&#x2F;新的optioon 所有的api都在次使用，只在初始化执行一次<br>&#x2F;&#x2F;组合APi中第一个要使用的函数</p>\n<p>Vue3 支持 vue2 大多数语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">numPut</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1）setup-是组合-api-的入口函数\"><a href=\"#1）setup-是组合-api-的入口函数\" class=\"headerlink\" title=\"1）setup 是组合 api 的入口函数\"></a>1）setup 是组合 api 的入口函数</h2><p>Vue3 的写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">updateCount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\tcount++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此时的数据不是响应的数据</span></span><br></pre></td></tr></table></figure>\n\n<p>引入ref解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;Vue&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2）ref-定义一个响应式的数据\"><a href=\"#2）ref-定义一个响应式的数据\" class=\"headerlink\" title=\"2）ref  定义一个响应式的数据\"></a>2）ref  定义一个响应式的数据</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//count未ref类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\tcount.<span class=\"property\">value</span>++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回一个ref对象</span></span><br><span class=\"line\"><span class=\"comment\">//对象中如果要对value操作，需要进行xxx.value</span></span><br><span class=\"line\"><span class=\"comment\">//模板中，直接使用xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个包含响应式数据的引用（refrence)对象</span></span><br><span class=\"line\"><span class=\"comment\">//js 中操作 aa.value</span></span><br><span class=\"line\"><span class=\"comment\">//模板中直接操作 aa</span></span><br><span class=\"line\"><span class=\"comment\">//---一般用来定义一个基本类型的响应式数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3）reactive\"><a href=\"#3）reactive\" class=\"headerlink\" title=\"3）reactive\"></a>3）reactive</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对象</span></span><br><span class=\"line\">    <span class=\"comment\">//此时user对象的类型是Proxy</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = <span class=\"title function_\">recative</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&quot;lihua&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>:<span class=\"number\">19</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;名字：&#123;&#123;user.<span class=\"property\">name</span>&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法两种写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changename</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">updateUser</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    user.<span class=\"property\">name</span> = <span class=\"string\">&#x27;wang&#x27;</span> + user.<span class=\"property\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\tuser,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"property\">name</span> = obj.<span class=\"property\">name</span> + <span class=\"string\">&#x27;obj&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//此方式修改对象的值不能响应，只能采用代理对象的方式来更新数据</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>reactive </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//作用：定义多个数据的响应式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"title function_\">reactive</span>(obj)</span><br><span class=\"line\"> <span class=\"comment\">//接收一个普通对象然后返回该普通对象的响应式代理器对象</span></span><br><span class=\"line\"><span class=\"comment\">//响应式转换是深层的，会影响内部所有嵌套的属性</span></span><br><span class=\"line\"><span class=\"comment\">//内部基于Es6 的Proxy实现，通过代理对象操作源对象内部数据都是响应式的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//***在vue2.0 中，数组内部数据的变化不会引起响应</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把对象变为响应式的数据</span></span><br><span class=\"line\"><span class=\"comment\">//返回的是一个Proxy的代理对象，被代理者就是obj中的传入的对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对比两种情况下，数据的更新</span></span><br><span class=\"line\"><span class=\"comment\">//对象obj 和 对象user 的变换情况 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    name;<span class=\"string\">&#x27;小周&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"string\">&#x27;20&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"title function_\">reactive</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//不更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">user.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//这种方式界面更新渲染，并且也添加到了obj对象中去</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> user.<span class=\"property\">age</span>  <span class=\"comment\">//界面更新渲染，属性被删除</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">age</span> <span class=\"comment\">//界面不渲染，属性被删除</span></span><br><span class=\"line\">引起ts类型报错 加上 <span class=\"keyword\">const</span> <span class=\"attr\">obj</span>:any = &#123;&#125;..</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>补充：</p>\n<p>需要注意的是，<code>reactive</code>中传递的参数必须是<code>json</code>对象或者数组，如果传递了其他对象（比如<code>new Date()</code>），在默认情况下修改对象，界面不会自动更新，如果也需要具有响应式，可以通过重新赋值的方式实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//msg 的数据是存在变化的，但界面并未发生变化，同时我们发现在控制台里，msg 并未被识别成 proxy。</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123; reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">let</span> msg = <span class=\"title function_\">reactive</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      msg.<span class=\"title function_\">setDate</span>(msg.<span class=\"title function_\">getDate</span>() + <span class=\"number\">1</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      msg,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      c</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显然，对于这种数据类型，我们需要做特殊处理。</span></span><br><span class=\"line\"><span class=\"comment\">//这个特殊处理就是重新赋值（，而不是直接修改原来的值）。</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>基本数据传递给reactive，reactive并不会将它包装成porxy对象，并且当数据变化时，界面也不会变化</p>\n<h2 id=\"4）比较Vue2与Vue3的响应式\"><a href=\"#4）比较Vue2与Vue3的响应式\" class=\"headerlink\" title=\"4）比较Vue2与Vue3的响应式\"></a>4）比较Vue2与Vue3的响应式</h2><p>vue2 </p>\n<ul>\n<li><p>核心</p>\n<p>对象：通过defineProperty对对象的已有属性值的读取和修改进行劫持（监视&#x2F;拦截）</p>\n<p>数组:通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持</p>\n</li>\n</ul>\n<p>vue 3.0</p>\n<p>通过proxy代理，reflect（反射对象），不是函数对象，不能构造 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将目标对象变成代理对象</span></span><br><span class=\"line\"><span class=\"comment\">//参数1：user--&gt;target目标对象</span></span><br><span class=\"line\"><span class=\"comment\">//参数2：handler --&gt;处理器对象，用来监视数据，及数据的操作</span></span><br><span class=\"line\"><span class=\"comment\">//目标对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;佐助&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">wife</span>:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoyin&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyUser = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(user,&#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\">target,prop</span>)&#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\"></span>)&#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">delectProperty</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//通过代理对象获取目标对象中的某个属性值</span></span><br><span class=\"line\"><span class=\"comment\">//reflect反射对象</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"E:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0/mdimages/image-20220215193447751.png\" alt=\"image-20220215193447751\"></p>\n<p>通过代理对象修改目标对象的值</p>\n<p>通过代理对象向目标对象中添加一个新的属性</p>\n<p><img src=\"E:/%E6%A1%8C%E9%9D%A2/%E5%AD%A6%E4%B9%A0/mdimages/image-20220215193649429.png\" alt=\"image-20220215193649429\"></p>\n<p>vue3的深度响应可以深度响应</p>\n<h2 id=\"5）setup-细节\"><a href=\"#5）setup-细节\" class=\"headerlink\" title=\"5）setup 细节\"></a>5）setup 细节</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父子组件通信</span></span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子组件中</span></span><br><span class=\"line\"><span class=\"attr\">props</span>:[<span class=\"string\">&#x27;msg&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">msg</span>:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&quot;aq&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>setup一般都是返回一个对象，对象中的属性和方法都可以在html模板中直接使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup是在beforeCreate生命周期之前就执行了，而且就执行一次</span><br><span class=\"line\"><span class=\"comment\">//beforeCreate 此时组件还没创建，组件实例对象this根本不能用</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>setup运行的时机</p>\n<p>setup执行的时机</p>\n<ul>\n<li>在beforeCreate之前执行（一次），此时组件对象还没有创建,不能使用data和methods</li>\n<li>this是underfinded,不能通过this来访问data&#x2F;computed&#x2F;methods&#x2F;props</li>\n<li>其实所有的composition API 相关回调函数中也都不可以</li>\n</ul>\n<p>setup的返回值</p>\n<ul>\n<li>​    一般都返回一个对象，为模板提供数据，也就是模板中可以直接使用次对象中的所有属性方法</li>\n<li>返回对象中的属性会与data函数返回对象的属性合并并成为组件对象的属性</li>\n<li>返回对象中的方法会与methods中的方法合并并成功组件对象的方法</li>\n<li>如果有重名，setup优先</li>\n<li>注意</li>\n<li>一般不要混合使用，methods和data都可以写在setup</li>\n<li>setup不能是async函数，因为返回值不再是一个对象，而是一个promise，模板看不到对象中的属性数据</li>\n<li>数据初始化的生命周期回调</li>\n</ul>\n<p>setup()的参数 </p>\n<p>两种写法</p>\n<p>1.setup(props,contect)</p>\n<p>2.setup(props,attrs,slots,emit)</p>\n<ul>\n<li><p>props 参数，是一个对象，里面有父级组件向子级组件传递的数据</p>\n</li>\n<li><p>contect参数(是一个对象)</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>1.attrs<br>&#x2F;&#x2F;获取当前组件标签的属性，但是该数据是在props中，没有接收的所有的属性的对象<br>2.emit<br>&#x2F;&#x2F;分发事件<br>@xxx &#x3D; ‘xxx’<br>function xxx(txt){<br>msg.value +&#x3D; txt;<br>}<br>&lt;button @click&#x3D;’emitXXX’&gt;分发事件</button><br>function emitXXX(){<br>context.emit(‘xxx’,’+’)<br>}<br>3.expose<br>4.slots<br>&#x2F;&#x2F;插槽</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 6）ref和reactive细节(响应式API)</span><br><span class=\"line\"></span><br><span class=\"line\">- ref也可以传递对象吗</span><br><span class=\"line\">  1. 如果ref里面传递的是对象/数组，那么是经过了reactivity处理，形成了Proxy类型的对象，</span><br><span class=\"line\">  2. ref内部：通过给value属性添加getter/setter来实现对数据的劫持</span><br><span class=\"line\">  3. reactivity内部：通过使用Proxy来实现对对象内部所有的数据的劫持,并通过Reflect操作对象内部数据</span><br><span class=\"line\">  4. ref的数据操作，在js中要.value,在模板中不需要，(内部解析模块会自动添加.value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">**递归监听和非递归监听**</span><br><span class=\"line\"></span><br><span class=\"line\">`ref`和`reactive`都属于递归监听，也就是数据的每一层都是响应式的，如果数据量比较大，非常消耗性能，非递归监听只会监听数据的第一层。</span><br><span class=\"line\"></span><br><span class=\"line\">***  数组也使用**reactive**</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##  7）计算属性与监视</span><br><span class=\"line\"></span><br><span class=\"line\">1. ​\t计算属性</span><br><span class=\"line\"></span><br><span class=\"line\">   ```js</span><br><span class=\"line\">   </span><br><span class=\"line\">   import &#123; ref &#125; from &quot;@vue/reactivity&quot;;</span><br><span class=\"line\">   import &#123; computed &#125; from &#x27;@vue/runtime-core&#x27;;</span><br><span class=\"line\">   export default &#123;</span><br><span class=\"line\">     name: &quot;detailforref&quot;,</span><br><span class=\"line\">     setup() &#123;</span><br><span class=\"line\">       const m1 =ref(&quot;东方&quot;);</span><br><span class=\"line\">      const m2 = ref(&#x27;不败&#x27;)</span><br><span class=\"line\">      const all = computed(()=&gt;&#123;</span><br><span class=\"line\">          return m1.value + m2.value</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      const updataname = () =&gt;&#123;</span><br><span class=\"line\">          m1.value = &#x27;西方&#x27;</span><br><span class=\"line\">          m2.value = &#x27;求败&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       return &#123;</span><br><span class=\"line\">         m1,</span><br><span class=\"line\">         m2,</span><br><span class=\"line\">         all,</span><br><span class=\"line\">         updataname,</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>计算属性中如果只传入一个回调函数，表示的是get</li>\n<li>计算属性返回的是一个ref类型的对象</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>监视属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/reactivity&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/runtime-core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;detailforref&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> m1 =<span class=\"title function_\">ref</span>(<span class=\"string\">&quot;东方&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">const</span> m2 = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;不败&#x27;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">const</span> user = [m1,m2]</span><br><span class=\"line\">   <span class=\"keyword\">const</span> all = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//    const all = computed(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return m1.value + &#x27;_&#x27; + m2.value</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;)</span></span><br><span class=\"line\">   <span class=\"title function_\">watch</span>(user,<span class=\"function\">(<span class=\"params\">val</span>)=&gt;</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> all.<span class=\"property\">value</span> = val[<span class=\"number\">0</span>]+<span class=\"string\">&#x27;__&#x27;</span>+val[<span class=\"number\">1</span>]</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"title function_\">updataname</span> = (<span class=\"params\"></span>) =&gt;&#123;</span><br><span class=\"line\">       m1.<span class=\"property\">value</span> = <span class=\"string\">&#x27;西方&#x27;</span></span><br><span class=\"line\">       m2.<span class=\"property\">value</span> = <span class=\"string\">&#x27;求败&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      m1,</span><br><span class=\"line\">      m2,</span><br><span class=\"line\">      all,</span><br><span class=\"line\">      updataname,</span><br><span class=\"line\">      user</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>不会默认调用，需要手动配置默认调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">immediate</span>:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 当前watch默认执行一次</span></span><br><span class=\"line\"><span class=\"attr\">deep</span>:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//深度监视</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(user,<span class=\"function\">(<span class=\"params\">val</span>)=&gt;</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> all.<span class=\"property\">value</span> = val[<span class=\"number\">0</span>]+<span class=\"string\">&#x27;__&#x27;</span>+val[<span class=\"number\">1</span>]</span><br><span class=\"line\">   &#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>​        watchEffect()</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//监视，不需要配置immediate，本身默认就会进行监视，(默认执行一次)</span></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\tfullName3.<span class=\"property\">value</span> = user.<span class=\"property\">firstName</span> + <span class=\"string\">&#x27;-&#x27;</span> +user.<span class=\"property\">laastName</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>watch可以监视多个数据</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>([user.<span class=\"property\">firstName</span>,user.<span class=\"property\">lastName</span>,<span class=\"title class_\">Fullnsmes3</span>],<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//Fullnames 是响应式数据</span></span><br><span class=\"line\"><span class=\"comment\">//非响应式数据时，需要进行改动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>([<span class=\"function\">()=&gt;</span>user.<span class=\"property\">firstName</span>,<span class=\"function\">()=&gt;</span>user.<span class=\"property\">lastName</span>],=&gt;&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8）生命周期对比\"><a href=\"#8）生命周期对比\" class=\"headerlink\" title=\"8）生命周期对比\"></a>8）生命周期对比</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">beforeCreate</span>()</span><br><span class=\"line\"><span class=\"title function_\">created</span>()</span><br><span class=\"line\">beforemount</span><br><span class=\"line\">mounted</span><br><span class=\"line\">beforeUpdate</span><br><span class=\"line\">updated</span><br><span class=\"line\">beforedestory</span><br><span class=\"line\">destory</span><br><span class=\"line\"></span><br><span class=\"line\">*** deforeUnmount</span><br><span class=\"line\">*** unmounted</span><br><span class=\"line\"></span><br><span class=\"line\">vue2所有的周期都可以在<span class=\"title class_\">Vue3</span>中使用</span><br><span class=\"line\">但<span class=\"title class_\">Vue3</span>中是组合<span class=\"title class_\">Api</span></span><br><span class=\"line\"></span><br><span class=\"line\">beforeCreated -&gt; 使用 <span class=\"title function_\">setup</span>()</span><br><span class=\"line\">created -&gt; 使用<span class=\"title function_\">setup</span>()</span><br><span class=\"line\">beforeMount -&gt; onBeforeMount</span><br><span class=\"line\">mounted -&gt; onMounted</span><br><span class=\"line\">beforeUpdate -&gt; onBeforeUpdate</span><br><span class=\"line\">updated -&gt; onUpdated</span><br><span class=\"line\">beforeDestory -&gt; onBeforeUnmount</span><br><span class=\"line\">destoryed -&gt; onUnmounted</span><br><span class=\"line\">errorCaptured -&gt; onErrorCaptured</span><br><span class=\"line\"></span><br><span class=\"line\">新增调试周期函数</span><br><span class=\"line\">onRenderTracked</span><br><span class=\"line\">onReaderTriggered</span><br><span class=\"line\">两个钩子函数都接受一个<span class=\"title class_\">DebuggerEvent</span>,与watchEffect 参数选项中的onTrack和onTrigger类似</span><br></pre></td></tr></table></figure>\n\n<p>3.0里面的生命周期钩子比2.0生命周期快</p>\n<h2 id=\"9）自定义hook函数\"><a href=\"#9）自定义hook函数\" class=\"headerlink\" title=\"9）自定义hook函数\"></a>9）自定义hook函数</h2><p>类似于mixin</p>\n<p>&#x2F;&#x2F;公共接口是否可以混入组件或者临时存储</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;ref&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/reactivity&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onBeforeUnmount, onMounted&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;detailforref&quot;,</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">const</span> x = <span class=\"title function_\">ref</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y = <span class=\"title function_\">ref</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\">event</span>) =&gt;&#123;</span><br><span class=\"line\">      x.<span class=\"property\">value</span> = event.<span class=\"property\">pageX</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">pageX</span>)</span><br><span class=\"line\">      y.<span class=\"property\">value</span> = event.<span class=\"property\">pageY</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//页面加载完毕，再进行点击操作</span></span><br><span class=\"line\">     <span class=\"title function_\">onMounted</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,clickHandler)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&quot;page reload success&quot;);</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"title function_\">onBeforeUnmount</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,clickHandler)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      x,</span><br><span class=\"line\">      y,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hook <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hook&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;detailforhook&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;x,y&#125; =<span class=\"title function_\">hook</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      x,y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><a href=\"https://juejin.cn/post/6977929393511514148\">https://juejin.cn/post/6977929393511514148</a></p>\n<hr>\n<h4 id=\"1-ref和shallowRef\"><a href=\"#1-ref和shallowRef\" class=\"headerlink\" title=\"1. ref和shallowRef\"></a>1. ref和shallowRef</h4><ul>\n<li><code>ref</code>定义的数据每一层都是响应式数据</li>\n<li><code>shallowRef</code>定义的数据，只有第一层是响应式的，即只有在更改<code>.value</code>的时候才能实现响应式</li>\n</ul>\n<h4 id=\"2-toRaw\"><a href=\"#2-toRaw\" class=\"headerlink\" title=\"2.toRaw\"></a>2.toRaw</h4><p><strong>toRaw的出现是解决什么问题呢？</strong></p>\n<p>有些时候我们不希望数据进行响应式实时更新，可以通过<code>toRaw</code>获取<code>ref</code>或<code>reactive</code>引用的原始数据，通过修改原始数据，不会造成界面的更新，只有通过修改<code>ref</code>和<code>reactive</code>包装后的数据时才会发生界面响应式变化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;...&#125;;</span><br><span class=\"line\"><span class=\"comment\">//state和obj1是引用关系，state的本质是一个Proxy对象，其中引用了obj1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> state = <span class=\"title function_\">reactive</span>(obj1);</span><br><span class=\"line\"><span class=\"comment\">//通过toRaw方法获取到原始数据，其实是获取到obj1的内存地址，obj2和obj1是完全相等的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">toRaw</span>(state)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1 === obj2);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-markRow\"><a href=\"#3-markRow\" class=\"headerlink\" title=\"3.markRow\"></a>3.markRow</h4><blockquote>\n<p><strong>与toRaw不同，markRaw包装后的数据永远不会被追踪！</strong></p>\n<p>暂时没发现有什么用处(手动狗头)</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;lijing&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title function_\">markRaw</span>(obj1);</span><br><span class=\"line\"><span class=\"comment\">//此时reactive包装的数据虽然是响应式对象，但是不会被跟踪，也不会产生效应式效果</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> state1 = <span class=\"title function_\">reactive</span>(obj2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1 === obj2);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"toRef和toRefs\"><a href=\"#toRef和toRefs\" class=\"headerlink\" title=\"toRef和toRefs\"></a>toRef和toRefs</h4><h5 id=\"1-ref\"><a href=\"#1-ref\" class=\"headerlink\" title=\"1)ref\"></a>1)ref</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用ref对一个对象的某个简单数据类型属性进行响应式改造后，通过修改响应式数据不会影响到原始数据，如上图中，通过state1修改值后，obj1中的a属性值没有发生变化。这里有个注意点：修改的这个属性必须是简单数据类型，一个具体的值，不能是引用，如果该属性也是一个对象，则会影响，因为对象---&gt;引用！</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2）ref的另一个作用\"><a href=\"#2）ref的另一个作用\" class=\"headerlink\" title=\"2）ref的另一个作用\"></a>2）ref的另一个作用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button ref=<span class=\"string\">&#x27;inoutref&#x27;</span>&gt;&lt;/input&gt;</span><br><span class=\"line\"><span class=\"comment\">//获取input框的焦点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(inputRef.<span class=\"property\">value</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(inputRef)</span><br><span class=\"line\">        inputRef.<span class=\"property\">value</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-toRef\"><a href=\"#2-toRef\" class=\"headerlink\" title=\"2. toRef\"></a>2. toRef</h4><p>为源响应式对象上的某个属性创建一个ref对象，二者内部操作的是同一个数据值，<strong>更新时二者的是同一个数据值，更新时二者是同步的</strong></p>\n<ul>\n<li>区别ref：拷贝了一份新的数值单独操作，更新时互不影响，toRef两个数据之间有关联</li>\n<li>应用：当要将某个prop的ref传递给复合函数时，toRef很有用<ul>\n<li>原本时传递普通数据，若使用toRef则传递的是ref对象</li>\n</ul>\n</li>\n</ul>\n<p>如果使用toRef来转换，则修改响应式数据会影响到原始数据，数据发生改变，但是界面不会自动更新</p>\n<p>转换后的是一个<code>ObjectRefImpl</code>类型</p>\n<h4 id=\"3-toRefs\"><a href=\"#3-toRefs\" class=\"headerlink\" title=\"3. toRefs\"></a>3. toRefs</h4><p>将一个响应式对象转换为普通对象，该普通对象 的每一个property都是一个ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state1 =<span class=\"title function_\">toRefs</span>(state)</span><br><span class=\"line\"><span class=\"comment\">//让state里面的每一个属性都变成ref类型</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>遍历对象中的所有属性，将其变为响应式数据，这是因为<code>toRef</code>只能传一个<code>key</code>，<code>toRefs</code>所达到的效果与<code>toRef</code>一样</p>\n<h2 id=\"10）shallowReactive-和-shallowRef\"><a href=\"#10）shallowReactive-和-shallowRef\" class=\"headerlink\" title=\"10）shallowReactive 和 shallowRef\"></a>10）shallowReactive 和 shallowRef</h2><h5 id=\"1-reactive-为深度响应式\"><a href=\"#1-reactive-为深度响应式\" class=\"headerlink\" title=\"1.reactive 为深度响应式\"></a>1.reactive 为深度响应式</h5><h5 id=\"2-shallowReactive-浅响应式\"><a href=\"#2-shallowReactive-浅响应式\" class=\"headerlink\" title=\"2.shallowReactive 浅响应式\"></a>2.shallowReactive 浅响应式</h5><h5 id=\"3-ref为深度响应式\"><a href=\"#3-ref为深度响应式\" class=\"headerlink\" title=\"3.ref为深度响应式\"></a>3.ref为深度响应式</h5><h5 id=\"4-shallowRef为浅响应式\"><a href=\"#4-shallowRef为浅响应式\" class=\"headerlink\" title=\"4.shallowRef为浅响应式\"></a>4.shallowRef为浅响应式</h5><h4 id=\"shallowRef-只进行value的响应式，不进行对象的reactive处理\"><a href=\"#shallowRef-只进行value的响应式，不进行对象的reactive处理\" class=\"headerlink\" title=\"shallowRef 只进行value的响应式，不进行对象的reactive处理\"></a>shallowRef 只进行value的响应式，不进行对象的reactive处理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//什么时候用浅响应式</span></span><br><span class=\"line\"><span class=\"number\">1.</span>一般情况下使用ref和reactive即可</span><br><span class=\"line\"><span class=\"number\">2.</span>如果有一个对象数据，结构比较深，但变化只是比较外\t层属性变换====&gt; shalllowReactive</span><br><span class=\"line\"><span class=\"number\">3.</span>如果一个对象数据，后面会产生新的对象来替换 ===&gt; shallowRef</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"11-readonly和shallowReadonly\"><a href=\"#11-readonly和shallowReadonly\" class=\"headerlink\" title=\"11)readonly和shallowReadonly\"></a>11)readonly和shallowReadonly</h2><p>深度可读和浅度可读</p>\n<h2 id=\"12）toRow-和-markRow\"><a href=\"#12）toRow-和-markRow\" class=\"headerlink\" title=\"12）toRow 和 markRow\"></a>12）toRow 和 markRow</h2><h5 id=\"toRow-gt-将代理对象变为普通对象\"><a href=\"#toRow-gt-将代理对象变为普通对象\" class=\"headerlink\" title=\"toRow -&gt;将代理对象变为普通对象\"></a>toRow -&gt;将代理对象变为普通对象</h5><h5 id=\"markRow-gt-标记的对象数据从此以后不能再成为代理对象\"><a href=\"#markRow-gt-标记的对象数据从此以后不能再成为代理对象\" class=\"headerlink\" title=\"markRow -&gt;标记的对象数据从此以后不能再成为代理对象\"></a>markRow -&gt;标记的对象数据从此以后不能再成为代理对象</h5><h2 id=\"13）customRef-自定义ref\"><a href=\"#13）customRef-自定义ref\" class=\"headerlink\" title=\"13）customRef 自定义ref\"></a>13）customRef 自定义ref</h2><p>​            可以用于自定义一个ref,可以显式的控制依赖追踪和触发响应，接受一个工厂函数，两个参数分别是用于追踪track 与用于触发响应的trigger，并返回一个带有get 和 set 属性的对象，</p>\n<ul>\n<li>使用自定义ref实现带防抖功能的v-model</li>\n</ul>\n<p>track trigger 延申知识</p>\n<h2 id=\"14）inject和provide\"><a href=\"#14）inject和provide\" class=\"headerlink\" title=\"14）inject和provide\"></a>14）inject和provide</h2><p>依赖注入，实现跨层级，祖孙之间数据传递</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">provide</span>(<span class=\"string\">&#x27;color&#x27;</span>,color)</span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">第一个数据为标识，</span></span><br><span class=\"line\"><span class=\"comment\">第二个参数为数据本身</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = <span class=\"title function_\">inject</span>(<span class=\"string\">&#x27;color&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//接收数据</span></span><br><span class=\"line\"><span class=\"comment\">//直接从祖组件传递到孙子组件</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15）-判断数据\"><a href=\"#15）-判断数据\" class=\"headerlink\" title=\"15） 判断数据\"></a>15） 判断数据</h2><ul>\n<li>isRef:检查一个值是否为一个ref对象</li>\n<li>isReactive:检查一个对象是否有reactive创建的响应式数据</li>\n<li>isReadonly:检查一个对象是否由Readonly创建的只读代理</li>\n<li>isProxy:检查一个对象是否由reactive或者Readonly创建的代理</li>\n</ul>\n<h2 id=\"16）新组件\"><a href=\"#16）新组件\" class=\"headerlink\" title=\"16）新组件\"></a>16）新组件</h2><ol>\n<li>Fragment（片段）<ul>\n<li>在vue2中必须有一个根标签</li>\n<li>不需要根标签，减少标签层级，减小内存占用</li>\n</ul>\n</li>\n<li>Teleport（瞬移）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Teleport</span> to=<span class=\"string\">&#x27;&#x27;</span>&gt;&lt;<span class=\"title class_\">Teleport</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将该标签内的。。。</p>\n<p>待补充</p>\n<h3 id=\"Suspence-不确定的\"><a href=\"#Suspence-不确定的\" class=\"headerlink\" title=\"Suspence(不确定的)\"></a>Suspence(不确定的)</h3><p>运行在渲染异步组件时渲染一些后背内容，可以让我们创建一个平滑的用户体验</p>\n<p>vue2动态引用组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">component</span> =(<span class=\"params\"></span>)=&gt;<span class=\"keyword\">import</span> <span class=\"string\">&#x27;./...&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//在vue3 中这种写法不行</span></span><br></pre></td></tr></table></figure>\n\n<p>vue3 动态引入组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component =<span class=\"title function_\">defineAsyncComponent</span>(<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./...&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Suspence使用\"><a href=\"#Suspence使用\" class=\"headerlink\" title=\"Suspence使用\"></a>Suspence使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Suspence</span>&gt;</span><br><span class=\"line\">    \t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    \t&lt;--异步组件--&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    \t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">\t \t<span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:fallback</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    \t&lt;--准备的内容--&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    \t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Suspence</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">// #default 是简写 # = &#x27;v-slot&#x27;</span></span><br><span class=\"line\"><span class=\"language-xml\">// v-slot:fallback 固定写法</span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>Vue2 给原型挂载方法</p>\n<p>vue3 给原型挂载方法</p>\n<h2 id=\"Vue3-面试\"><a href=\"#Vue3-面试\" class=\"headerlink\" title=\"Vue3 面试\"></a>Vue3 面试</h2><p>抱歉:研究没有那么深</p>\n<p>2020.9正式版-&gt;2022.2.7默认版本-&gt;Vue 3 支持vue2大多数特性 - &gt; 新一代构建工具，按需编译，热加载更快 -&gt;  不需要根节点 ，减少内存占用 -&gt;  组合式api ，代替了Vue2,option api,复用性更好，更好的支持Ts -&gt; 深度监视，之前需要set监视数组内部数据变换，现在直接就可以深度监视 -&gt; suspence 更加注重用户体验 -&gt;hook函数 -&gt; 跨级组件通信 ，依赖注入 -&gt; ref实现防抖 -&gt; 可以使用2的生命周期函数，vue3的周期函数更快 -&gt; 响应式数据原理Proxy -&gt; 重写虚拟dom,速度更快 -&gt;新组件瞬移，片段(不需要根节点)</p>\n"},{"title":"webpack从零到一搭建vue项目","date":"2022-04-18T11:27:06.000Z","top_img":"/img/9.jpg","cover":"/img/9.jpg","_content":"\nwebpack是当下应用最大的构建工具，从0到1构建项目，是一个值得学习课题。不管是vue项目还是其他项目都离不开构建工具（可能是其他构建工具）。\n\n#### webpack打包工具\n\n##### 1.安装webpack\n\n##### webpack webpack-cli -D(4x,5X)\n\n- ​\t安装低版本，指定  \n\n  - webpack@4.43.0 webpack-cli@3.3.12 -D\n\n  - ```js\n    @3 安装3版本的最新版本\n    ```\n\n- node-modules  -> bin -> 软链接目录（-D）\n\n  - ```js\n    //锁死安装路径\n    npx webpack -V  //npx 找项目下的软连接目录，有的话直接启动，如果没有则安装webpack到本地，并启动他\n    webpack -V //全局环境\n    ```\n\n- 定义名称\n\n  - ```js\n    script{\n        \n    }\n    \n    \n    ```\n\n- webpack 0配置启动\n\n- 配置webpack文件\n\n  - ```js\n    //根目录下新建 webpack.conifg.js\n    mudule export ={\n    \t//打包入口 默认       ./src/index.js \n        entry:'./sec.index.js'\n        //打包出口，文件路径   \n        //打包模式\n        outPut:{\n        //为打包资源文件存在位置，必须为绝对路径\n    \tpath:\n        filename:\n        //产出的资源文件名\n    \t}\n    //默认生产模式，默认启动js压缩优化\n    \tmode:'production'，\n        \n    //不开启模式匹配，不压缩\t\n    mode:none\n        \n    }\n    \n    //const {resolve,join}  = require('path')\n    const path = require('path');\n    产出子文件的存放位置 \n    path:path.resolve(_dirnamr,'./dist')\n    \n    mode:producton\n    mode:development 开发模式。不会压缩代码，会暴露更多信息，方便调整。\n    mode:none\n    //模式警告\n    ```\n\n  - ```js\n    --config 告诉启动哪一个配置权限\n    ```\n\n    - webpack 支持import，不支持css，只支持js\n\n      ```js \n      引入css，出错。 \n      less pug vue jpe jpeg svg\n      ```\n\n  - ```js\n    module :{\n        rules:[\n            {\n                test:/|.css/,\n                use:'',\n            }\n            {\n            \ttest:/\\.less$/,\n            \tuse:['style-loader','css-loader','less-loader']\n            }\n            ...\n        ]\n    }\n    ```\n\n    ##### loader 模编译器\n\n    css-loader  css 挂载，\n\n    ```js\n    默认装...5\n    降级 @..\n    ```\n\n    \n\n  - 打包的css怎么用\n\n  - css-loader 支持模块。style-loader触发效果\n\n  - ```js\n    style-loader:  //操作dom动态创建\n    npm install style-loader@zm \n    当多个load作用于一个模块的时候，有执行顺序。从后往前\n    ```\n\n  - .less  采用less模块\n\n- plugin插件\n\n  - mini-css-extract\n\n  - ```js\n    //引入插件\n    const minicss from \n    \n    [name].[ext] 占位符\n    /\\.(png|jpg|jpe?g|webp)$/ \n    ? 有或没有\n        \n    \n    ```\n\n以前写的工作室官网项目，本来能运行起来的，隔了很久之后，中间还重做了一次系统，今天重新运行竟然运行不起来了。\n\n报错：\n\nMatrix-official@1.0.0 dev: `webpack-dev-server --inline --progress --config\n\n```js\n从网上找了一个解决方案：\n\n卸载webpack-dev-server\nnpm uninstall webpack-dev-server\n重新安装webpack-dev-server\nnpm install webpack-dev-server@2.9.7\n```\n\n\n\nloader 模板转译 编译器\n\n\n\nwebpack 打包工具\n\n1.安装\n\n​\tnpm i webpack@4.43.0 webpack-cli@3.3.12 -D \n\n​\t-D    <=>   --save -dev\n\n​\tps：webpack webpack-cli loader 非常重视版本兼容，版本不符合会导致打包失败\n\n2.两种打包方式\n\n1. 在package.json的script中写\n\n   - ```js\n     \"dev\" : \"webpack\",\n      //npm run dev 启动打包工具\n     ```\n\n2. 直接npx webpack\n\n3.默认打包\n\n​\t\t直接运行打包命令\n\n​\t\t默认会在根目录新建一个dist文件夹，把其他文件打包到里面的main.js文件里。默认能正确打包，js和json文件\n\n4.打包less,css,sass,sass,png等等文件\n\n​\t需要安装loader工具，\n\n```js\neg:\nnpm i less-loader -D\nnpm i css-loader -D\nnpm i mini-css-extract-plugin -D\nnpm i sass-loader -D\n\n插件1//mini-css-extract-plugin 可以生成一个css文件，将css样式预编译并且存在一个指定的位置。\nconst minicss = require(\"mini-css-extract-plugin\");\n plugins: [\n        new minicss({\n          filename: \"./my/b.css\",\n        }),\n      ],\n\n     //loader 模板转译 编译器\n```\n\n#### 插件1\n\nmini-css-extract-plugin 可以生成一个css文件，将css样式预编译并且存在一个指定的位置。\n\nloader使用\n\n```js\nmodule.exports = {\n    entry:'./src/index.js',\n\n    output:{\n        path:resolve(__dirname,\"./my\"),\n        filename:'my.js',\n    },\n\n    mode:'development',\n\n    module:{\n        rules:[\n            {\n                test:/\\.css$/,\n                use:[\"style-loader\",\"css-loader\"],\n            },\n            {\n                test:/\\.less$/,\n                use:[minicss.loader,\"css-loader\",\"less-loader\"],\n            },\n            {\n                test:/\\.(png|jpg|webp|gif|jpeg)$/,\n                use:{\n                    loader:'file-loader',\n\n                    options:{\n                        name:\"[name].[ext]\",\n                        outputPath:\"./my/images\",\n                        publicPath:'../images'\n                    },\n                },\n            },\n        ]\n    },\n    \n    // e? 表示e有或者没有\n   // name:\"[name].[ext]\",   占位符\n  //publicPath:'../images'   解决css中引入图片的路径问题\n //outputPath:\"./my/images\",   打包文件存放地址\n    \n    \n //打包入口 ./src/index.js 支持相对，也支持绝对路径\n  entry: \"./src/index.js\",\n  //出口\n  output: {\n    //   产出的资源文件的存放位置 ./dist 必须是绝对路径\n    path: resolve(__dirname, \"./build\"),\n    //  产出的资源文件名 main.js\n    filename: \"index.js\",\n  },\n  //模式 production 生产模式 会默认开启JS压缩优化\n  //模式 development 开发模式 不会压缩代码，还会有注释，会暴露更多的信息，方便调试\n  // none 不开启模式，也不会启动各种优化插件\n  mode: \"development\",\n    \n    //多个入口\n     entry:{\n        index:'./src/index.js',\n        es6:\"./src/es6.js\",\n    },\n        \n\n    output:{\n        path:resolve(__dirname,\"./my\"),\n        filename:'[name].js',\n    },\n\n```\n\n##### 插件2\n\n打包后的文件，自动生成一个html文件。并且可以设置模板\n\n##### Webpack 如何将打包后的文件，自动生成一个html文件\n\n...html-webpack-plugin\n\n...安装4-x版本\n\n...1.npm 安装插件\n\n...引入插件\n\n...实例化对象\n\n\n\n- 创建html模板\n\n  - ```js\n    template:\"./src/index/.html\"\n    //模板克隆目录\n    filename:\"index.html\"\n    ```\n\n##### 保持文件夹清空（打包之前\n\n##### 插件三.保持文件夹初始化。\n\n- clean-webpack-plugin\n\n- 引用\n\n  - ```js\n    const {} from {''}...\n    ```\n\n\n\n##### 解决js的兼容问题\n\n语法（箭头函数）和特性（promise）\n\n多入口应用\n\n```js\nentry:{\n\tindex:\"./\",\n    ecma:\"./\",\n}\n    \n output:{\n     占位符\n }\n```\n\n\n\n##### 处理js 的打包，Babel-loader\n\n安装依赖\n\nbabel-loader @babel/core -D\n\n兼容性：知道目标浏览器集合\n\n有一套工具链：主要将es6\n\n##### ps:只能转语法,新特性只能profill\n\n- 将其在js文件最上方引入\n\nbabel 预设 -> 做语法转换的part\n\n- env 原生\n- react react转换\n- ts转换\n- flow转换\n\n```js\n@babel/preset -env\n```\n\n写babel-loader配置\n\n```js\noption:{\n    presets:[\"@babel/preset-env\"],\n    //存在默认浏览器降级版本\n}\n```\n\n###### 设置目标浏览器集合\n\npackage.json 中\n\n```js\n\"browerslist\":[\n\t//几个常用集合\n    \"last 2 versions\",\n    \">1%\"\n]\n//1.所有浏览器最近两个版本\n//2.兼容所有浏览器市场份额大于1%（全球）\n//last 1 version 兼容当前最新版本\n\n```\n\n\n\n查看符合的版本(终端)\n\n```js\nnpx browerslist \"last 2 versions\"\n\nnpx browerlist \"last 2 versions\",\">1%\"\n```\n\n\n\n##### profill \n\n一个js库，内有es6新增所有的特性\n\n在顶部安装polyfill\n\n**生产依赖** 默认为生产模式安装\n\nnpm i @babel/polyfill\n\n在js文件的第一行引入profill\n\n```JS\nimport \"@babel/polyfill\"\n```\n\n按需导入 ->\t\n\n\n\n##### webpack-dev-server\n\n1.推荐3x版本\n\n2.定义脚本\n\n````js\n\"serve\":\"webpack-dev-server\"\n\n//拦截打包的文件，在硬件的内存中\n````\n\n3.配置在webpack.config.js\n\n```js\ndevServer:{\n\n​\tport:8081,//端口\n\n​\topen:true,//打开一个新标签页\n\n}\n```\n\n\n\n##### 定位bug位置\n\n```js\ndevtool:\"none\"\n//开发模式下默认开启 devtool:'source-map',\n\t多出一个.map文件，是一个影射地图\n//关闭后指向打包后的js\n```\n\n\n\n### Vue\n\n1.安装vue-loader vue-template-compiler\n\n​\t\t\t实例化： vue-loader-plugin\n\n2.webpack....\n\n3.vue-style-loader\n\n vue 生产依赖\n\n\n\n​\t\t\t","source":"_posts/webpack.md","raw":"---\ntitle: webpack从零到一搭建vue项目\ndate: 2022-04-18 19:27:06\ntags: [webpack5,vue]\ncategories: webpack\ntop_img: /img/9.jpg\ncover: /img/9.jpg\n---\n\nwebpack是当下应用最大的构建工具，从0到1构建项目，是一个值得学习课题。不管是vue项目还是其他项目都离不开构建工具（可能是其他构建工具）。\n\n#### webpack打包工具\n\n##### 1.安装webpack\n\n##### webpack webpack-cli -D(4x,5X)\n\n- ​\t安装低版本，指定  \n\n  - webpack@4.43.0 webpack-cli@3.3.12 -D\n\n  - ```js\n    @3 安装3版本的最新版本\n    ```\n\n- node-modules  -> bin -> 软链接目录（-D）\n\n  - ```js\n    //锁死安装路径\n    npx webpack -V  //npx 找项目下的软连接目录，有的话直接启动，如果没有则安装webpack到本地，并启动他\n    webpack -V //全局环境\n    ```\n\n- 定义名称\n\n  - ```js\n    script{\n        \n    }\n    \n    \n    ```\n\n- webpack 0配置启动\n\n- 配置webpack文件\n\n  - ```js\n    //根目录下新建 webpack.conifg.js\n    mudule export ={\n    \t//打包入口 默认       ./src/index.js \n        entry:'./sec.index.js'\n        //打包出口，文件路径   \n        //打包模式\n        outPut:{\n        //为打包资源文件存在位置，必须为绝对路径\n    \tpath:\n        filename:\n        //产出的资源文件名\n    \t}\n    //默认生产模式，默认启动js压缩优化\n    \tmode:'production'，\n        \n    //不开启模式匹配，不压缩\t\n    mode:none\n        \n    }\n    \n    //const {resolve,join}  = require('path')\n    const path = require('path');\n    产出子文件的存放位置 \n    path:path.resolve(_dirnamr,'./dist')\n    \n    mode:producton\n    mode:development 开发模式。不会压缩代码，会暴露更多信息，方便调整。\n    mode:none\n    //模式警告\n    ```\n\n  - ```js\n    --config 告诉启动哪一个配置权限\n    ```\n\n    - webpack 支持import，不支持css，只支持js\n\n      ```js \n      引入css，出错。 \n      less pug vue jpe jpeg svg\n      ```\n\n  - ```js\n    module :{\n        rules:[\n            {\n                test:/|.css/,\n                use:'',\n            }\n            {\n            \ttest:/\\.less$/,\n            \tuse:['style-loader','css-loader','less-loader']\n            }\n            ...\n        ]\n    }\n    ```\n\n    ##### loader 模编译器\n\n    css-loader  css 挂载，\n\n    ```js\n    默认装...5\n    降级 @..\n    ```\n\n    \n\n  - 打包的css怎么用\n\n  - css-loader 支持模块。style-loader触发效果\n\n  - ```js\n    style-loader:  //操作dom动态创建\n    npm install style-loader@zm \n    当多个load作用于一个模块的时候，有执行顺序。从后往前\n    ```\n\n  - .less  采用less模块\n\n- plugin插件\n\n  - mini-css-extract\n\n  - ```js\n    //引入插件\n    const minicss from \n    \n    [name].[ext] 占位符\n    /\\.(png|jpg|jpe?g|webp)$/ \n    ? 有或没有\n        \n    \n    ```\n\n以前写的工作室官网项目，本来能运行起来的，隔了很久之后，中间还重做了一次系统，今天重新运行竟然运行不起来了。\n\n报错：\n\nMatrix-official@1.0.0 dev: `webpack-dev-server --inline --progress --config\n\n```js\n从网上找了一个解决方案：\n\n卸载webpack-dev-server\nnpm uninstall webpack-dev-server\n重新安装webpack-dev-server\nnpm install webpack-dev-server@2.9.7\n```\n\n\n\nloader 模板转译 编译器\n\n\n\nwebpack 打包工具\n\n1.安装\n\n​\tnpm i webpack@4.43.0 webpack-cli@3.3.12 -D \n\n​\t-D    <=>   --save -dev\n\n​\tps：webpack webpack-cli loader 非常重视版本兼容，版本不符合会导致打包失败\n\n2.两种打包方式\n\n1. 在package.json的script中写\n\n   - ```js\n     \"dev\" : \"webpack\",\n      //npm run dev 启动打包工具\n     ```\n\n2. 直接npx webpack\n\n3.默认打包\n\n​\t\t直接运行打包命令\n\n​\t\t默认会在根目录新建一个dist文件夹，把其他文件打包到里面的main.js文件里。默认能正确打包，js和json文件\n\n4.打包less,css,sass,sass,png等等文件\n\n​\t需要安装loader工具，\n\n```js\neg:\nnpm i less-loader -D\nnpm i css-loader -D\nnpm i mini-css-extract-plugin -D\nnpm i sass-loader -D\n\n插件1//mini-css-extract-plugin 可以生成一个css文件，将css样式预编译并且存在一个指定的位置。\nconst minicss = require(\"mini-css-extract-plugin\");\n plugins: [\n        new minicss({\n          filename: \"./my/b.css\",\n        }),\n      ],\n\n     //loader 模板转译 编译器\n```\n\n#### 插件1\n\nmini-css-extract-plugin 可以生成一个css文件，将css样式预编译并且存在一个指定的位置。\n\nloader使用\n\n```js\nmodule.exports = {\n    entry:'./src/index.js',\n\n    output:{\n        path:resolve(__dirname,\"./my\"),\n        filename:'my.js',\n    },\n\n    mode:'development',\n\n    module:{\n        rules:[\n            {\n                test:/\\.css$/,\n                use:[\"style-loader\",\"css-loader\"],\n            },\n            {\n                test:/\\.less$/,\n                use:[minicss.loader,\"css-loader\",\"less-loader\"],\n            },\n            {\n                test:/\\.(png|jpg|webp|gif|jpeg)$/,\n                use:{\n                    loader:'file-loader',\n\n                    options:{\n                        name:\"[name].[ext]\",\n                        outputPath:\"./my/images\",\n                        publicPath:'../images'\n                    },\n                },\n            },\n        ]\n    },\n    \n    // e? 表示e有或者没有\n   // name:\"[name].[ext]\",   占位符\n  //publicPath:'../images'   解决css中引入图片的路径问题\n //outputPath:\"./my/images\",   打包文件存放地址\n    \n    \n //打包入口 ./src/index.js 支持相对，也支持绝对路径\n  entry: \"./src/index.js\",\n  //出口\n  output: {\n    //   产出的资源文件的存放位置 ./dist 必须是绝对路径\n    path: resolve(__dirname, \"./build\"),\n    //  产出的资源文件名 main.js\n    filename: \"index.js\",\n  },\n  //模式 production 生产模式 会默认开启JS压缩优化\n  //模式 development 开发模式 不会压缩代码，还会有注释，会暴露更多的信息，方便调试\n  // none 不开启模式，也不会启动各种优化插件\n  mode: \"development\",\n    \n    //多个入口\n     entry:{\n        index:'./src/index.js',\n        es6:\"./src/es6.js\",\n    },\n        \n\n    output:{\n        path:resolve(__dirname,\"./my\"),\n        filename:'[name].js',\n    },\n\n```\n\n##### 插件2\n\n打包后的文件，自动生成一个html文件。并且可以设置模板\n\n##### Webpack 如何将打包后的文件，自动生成一个html文件\n\n...html-webpack-plugin\n\n...安装4-x版本\n\n...1.npm 安装插件\n\n...引入插件\n\n...实例化对象\n\n\n\n- 创建html模板\n\n  - ```js\n    template:\"./src/index/.html\"\n    //模板克隆目录\n    filename:\"index.html\"\n    ```\n\n##### 保持文件夹清空（打包之前\n\n##### 插件三.保持文件夹初始化。\n\n- clean-webpack-plugin\n\n- 引用\n\n  - ```js\n    const {} from {''}...\n    ```\n\n\n\n##### 解决js的兼容问题\n\n语法（箭头函数）和特性（promise）\n\n多入口应用\n\n```js\nentry:{\n\tindex:\"./\",\n    ecma:\"./\",\n}\n    \n output:{\n     占位符\n }\n```\n\n\n\n##### 处理js 的打包，Babel-loader\n\n安装依赖\n\nbabel-loader @babel/core -D\n\n兼容性：知道目标浏览器集合\n\n有一套工具链：主要将es6\n\n##### ps:只能转语法,新特性只能profill\n\n- 将其在js文件最上方引入\n\nbabel 预设 -> 做语法转换的part\n\n- env 原生\n- react react转换\n- ts转换\n- flow转换\n\n```js\n@babel/preset -env\n```\n\n写babel-loader配置\n\n```js\noption:{\n    presets:[\"@babel/preset-env\"],\n    //存在默认浏览器降级版本\n}\n```\n\n###### 设置目标浏览器集合\n\npackage.json 中\n\n```js\n\"browerslist\":[\n\t//几个常用集合\n    \"last 2 versions\",\n    \">1%\"\n]\n//1.所有浏览器最近两个版本\n//2.兼容所有浏览器市场份额大于1%（全球）\n//last 1 version 兼容当前最新版本\n\n```\n\n\n\n查看符合的版本(终端)\n\n```js\nnpx browerslist \"last 2 versions\"\n\nnpx browerlist \"last 2 versions\",\">1%\"\n```\n\n\n\n##### profill \n\n一个js库，内有es6新增所有的特性\n\n在顶部安装polyfill\n\n**生产依赖** 默认为生产模式安装\n\nnpm i @babel/polyfill\n\n在js文件的第一行引入profill\n\n```JS\nimport \"@babel/polyfill\"\n```\n\n按需导入 ->\t\n\n\n\n##### webpack-dev-server\n\n1.推荐3x版本\n\n2.定义脚本\n\n````js\n\"serve\":\"webpack-dev-server\"\n\n//拦截打包的文件，在硬件的内存中\n````\n\n3.配置在webpack.config.js\n\n```js\ndevServer:{\n\n​\tport:8081,//端口\n\n​\topen:true,//打开一个新标签页\n\n}\n```\n\n\n\n##### 定位bug位置\n\n```js\ndevtool:\"none\"\n//开发模式下默认开启 devtool:'source-map',\n\t多出一个.map文件，是一个影射地图\n//关闭后指向打包后的js\n```\n\n\n\n### Vue\n\n1.安装vue-loader vue-template-compiler\n\n​\t\t\t实例化： vue-loader-plugin\n\n2.webpack....\n\n3.vue-style-loader\n\n vue 生产依赖\n\n\n\n​\t\t\t","slug":"webpack","published":1,"updated":"2025-01-07T02:30:25.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0crb001m572ob50nbp8c","content":"<p>webpack是当下应用最大的构建工具，从0到1构建项目，是一个值得学习课题。不管是vue项目还是其他项目都离不开构建工具（可能是其他构建工具）。</p>\n<h4 id=\"webpack打包工具\"><a href=\"#webpack打包工具\" class=\"headerlink\" title=\"webpack打包工具\"></a>webpack打包工具</h4><h5 id=\"1-安装webpack\"><a href=\"#1-安装webpack\" class=\"headerlink\" title=\"1.安装webpack\"></a>1.安装webpack</h5><h5 id=\"webpack-webpack-cli-D-4x-5X\"><a href=\"#webpack-webpack-cli-D-4x-5X\" class=\"headerlink\" title=\"webpack webpack-cli -D(4x,5X)\"></a>webpack webpack-cli -D(4x,5X)</h5><ul>\n<li><p>​    安装低版本，指定  </p>\n<ul>\n<li><p><a href=\"mailto:&#119;&#x65;&#x62;&#x70;&#97;&#99;&#x6b;&#64;&#x34;&#46;&#x34;&#51;&#46;&#48;\">&#119;&#x65;&#x62;&#x70;&#97;&#99;&#x6b;&#64;&#x34;&#46;&#x34;&#51;&#46;&#48;</a> <a href=\"mailto:&#119;&#101;&#x62;&#112;&#97;&#99;&#x6b;&#x2d;&#99;&#x6c;&#105;&#64;&#51;&#x2e;&#51;&#46;&#x31;&#50;\">&#119;&#101;&#x62;&#112;&#97;&#99;&#x6b;&#x2d;&#99;&#x6c;&#105;&#64;&#51;&#x2e;&#51;&#46;&#x31;&#50;</a> -D</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>@3 安装3版本的最新版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- node-modules  -&gt; bin -&gt; 软链接目录（-D）</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    //锁死安装路径</span><br><span class=\"line\">    npx webpack -V  //npx 找项目下的软连接目录，有的话直接启动，如果没有则安装webpack到本地，并启动他</span><br><span class=\"line\">    webpack -V //全局环境</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>定义名称</p>\n<ul>\n<li><pre><code class=\"js\">script&#123;\n    \n&#125;\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- webpack 0配置启动</span><br><span class=\"line\"></span><br><span class=\"line\">- 配置webpack文件</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    //根目录下新建 webpack.conifg.js</span><br><span class=\"line\">    mudule export =&#123;</span><br><span class=\"line\">    \t//打包入口 默认       ./src/index.js </span><br><span class=\"line\">        entry:&#x27;./sec.index.js&#x27;</span><br><span class=\"line\">        //打包出口，文件路径   </span><br><span class=\"line\">        //打包模式</span><br><span class=\"line\">        outPut:&#123;</span><br><span class=\"line\">        //为打包资源文件存在位置，必须为绝对路径</span><br><span class=\"line\">    \tpath:</span><br><span class=\"line\">        filename:</span><br><span class=\"line\">        //产出的资源文件名</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    //默认生产模式，默认启动js压缩优化</span><br><span class=\"line\">    \tmode:&#x27;production&#x27;，</span><br><span class=\"line\">        </span><br><span class=\"line\">    //不开启模式匹配，不压缩\t</span><br><span class=\"line\">    mode:none</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //const &#123;resolve,join&#125;  = require(&#x27;path&#x27;)</span><br><span class=\"line\">    const path = require(&#x27;path&#x27;);</span><br><span class=\"line\">    产出子文件的存放位置 </span><br><span class=\"line\">    path:path.resolve(_dirnamr,&#x27;./dist&#x27;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    mode:producton</span><br><span class=\"line\">    mode:development 开发模式。不会压缩代码，会暴露更多信息，方便调整。</span><br><span class=\"line\">    mode:none</span><br><span class=\"line\">    //模式警告</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><pre><code class=\"js\">--config 告诉启动哪一个配置权限\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- webpack 支持import，不支持css，只支持js</span><br><span class=\"line\"></span><br><span class=\"line\">  ```js </span><br><span class=\"line\">  引入css，出错。 </span><br><span class=\"line\">  less pug vue jpe jpeg svg</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><pre><code class=\"js\">module :&#123;\n    rules:[\n        &#123;\n            test:/|.css/,\n            use:&#39;&#39;,\n        &#125;\n        &#123;\n            test:/\\.less$/,\n            use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]\n        &#125;\n        ...\n    ]\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### loader 模编译器</span><br><span class=\"line\"></span><br><span class=\"line\">css-loader  css 挂载，</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">默认装...5</span><br><span class=\"line\">降级 @..</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n<li><p>打包的css怎么用</p>\n</li>\n<li><p>css-loader 支持模块。style-loader触发效果</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>style-loader:  &#x2F;&#x2F;操作dom动态创建<br>npm install style-loader@zm<br>当多个load作用于一个模块的时候，有执行顺序。从后往前</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - .less  采用less模块</span><br><span class=\"line\"></span><br><span class=\"line\">- plugin插件</span><br><span class=\"line\"></span><br><span class=\"line\">  - mini-css-extract</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    //引入插件</span><br><span class=\"line\">    const minicss from </span><br><span class=\"line\">    </span><br><span class=\"line\">    [name].[ext] 占位符</span><br><span class=\"line\">    /\\.(png|jpg|jpe?g|webp)$/ </span><br><span class=\"line\">    ? 有或没有</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>以前写的工作室官网项目，本来能运行起来的，隔了很久之后，中间还重做了一次系统，今天重新运行竟然运行不起来了。</p>\n<p>报错：</p>\n<p><a href=\"mailto:&#77;&#x61;&#x74;&#114;&#x69;&#120;&#45;&#111;&#x66;&#x66;&#105;&#x63;&#105;&#97;&#x6c;&#x40;&#x31;&#x2e;&#x30;&#x2e;&#x30;\">&#77;&#x61;&#x74;&#114;&#x69;&#120;&#45;&#111;&#x66;&#x66;&#105;&#x63;&#105;&#97;&#x6c;&#x40;&#x31;&#x2e;&#x30;&#x2e;&#x30;</a> dev: &#96;webpack-dev-server –inline –progress –config</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从网上找了一个解决方案：</span><br><span class=\"line\"></span><br><span class=\"line\">卸载webpack-dev-server</span><br><span class=\"line\">npm uninstall webpack-dev-server</span><br><span class=\"line\">重新安装webpack-dev-server</span><br><span class=\"line\">npm install webpack-dev-server@<span class=\"number\">2.9</span><span class=\"number\">.7</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>loader 模板转译 编译器</p>\n<p>webpack 打包工具</p>\n<p>1.安装</p>\n<p>​    npm i <a href=\"mailto:&#x77;&#101;&#x62;&#x70;&#x61;&#x63;&#107;&#64;&#52;&#46;&#x34;&#x33;&#x2e;&#48;\">&#x77;&#101;&#x62;&#x70;&#x61;&#x63;&#107;&#64;&#52;&#46;&#x34;&#x33;&#x2e;&#48;</a> <a href=\"mailto:&#119;&#101;&#x62;&#112;&#x61;&#x63;&#x6b;&#x2d;&#99;&#108;&#105;&#64;&#x33;&#x2e;&#x33;&#46;&#x31;&#50;\">&#119;&#101;&#x62;&#112;&#x61;&#x63;&#x6b;&#x2d;&#99;&#108;&#105;&#64;&#x33;&#x2e;&#x33;&#46;&#x31;&#50;</a> -D </p>\n<p>​    -D    &lt;&#x3D;&gt;   –save -dev</p>\n<p>​    ps：webpack webpack-cli loader 非常重视版本兼容，版本不符合会导致打包失败</p>\n<p>2.两种打包方式</p>\n<ol>\n<li><p>在package.json的script中写</p>\n<ul>\n<li>&#96;&#96;&#96;js<br>“dev” : “webpack”,<br> &#x2F;&#x2F;npm run dev 启动打包工具<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. 直接npx webpack</span><br><span class=\"line\"></span><br><span class=\"line\">3.默认打包</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t直接运行打包命令</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t默认会在根目录新建一个dist文件夹，把其他文件打包到里面的main.js文件里。默认能正确打包，js和json文件</span><br><span class=\"line\"></span><br><span class=\"line\">4.打包less,css,sass,sass,png等等文件</span><br><span class=\"line\"></span><br><span class=\"line\">​\t需要安装loader工具，</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">eg:</span><br><span class=\"line\">npm i less-loader -D</span><br><span class=\"line\">npm i css-loader -D</span><br><span class=\"line\">npm i mini-css-extract-plugin -D</span><br><span class=\"line\">npm i sass-loader -D</span><br><span class=\"line\"></span><br><span class=\"line\">插件1//mini-css-extract-plugin 可以生成一个css文件，将css样式预编译并且存在一个指定的位置。</span><br><span class=\"line\">const minicss = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class=\"line\"> plugins: [</span><br><span class=\"line\">        new minicss(&#123;</span><br><span class=\"line\">          filename: &quot;./my/b.css&quot;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      ],</span><br><span class=\"line\"></span><br><span class=\"line\">     //loader 模板转译 编译器</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"插件1\"><a href=\"#插件1\" class=\"headerlink\" title=\"插件1\"></a>插件1</h4><p>mini-css-extract-plugin 可以生成一个css文件，将css样式预编译并且存在一个指定的位置。</p>\n<p>loader使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./my&quot;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;my.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:[<span class=\"string\">&quot;style-loader&quot;</span>,<span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:[minicss.<span class=\"property\">loader</span>,<span class=\"string\">&quot;css-loader&quot;</span>,<span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|webp|gif|jpeg)$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>:<span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"attr\">options</span>:&#123;</span><br><span class=\"line\">                        <span class=\"attr\">name</span>:<span class=\"string\">&quot;[name].[ext]&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">outputPath</span>:<span class=\"string\">&quot;./my/images&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">publicPath</span>:<span class=\"string\">&#x27;../images&#x27;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// e? 表示e有或者没有</span></span><br><span class=\"line\">   <span class=\"comment\">// name:&quot;[name].[ext]&quot;,   占位符</span></span><br><span class=\"line\">  <span class=\"comment\">//publicPath:&#x27;../images&#x27;   解决css中引入图片的路径问题</span></span><br><span class=\"line\"> <span class=\"comment\">//outputPath:&quot;./my/images&quot;,   打包文件存放地址</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//打包入口 ./src/index.js 支持相对，也支持绝对路径</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//出口</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//   产出的资源文件的存放位置 ./dist 必须是绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;./build&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">//  产出的资源文件名 main.js</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;index.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//模式 production 生产模式 会默认开启JS压缩优化</span></span><br><span class=\"line\">  <span class=\"comment\">//模式 development 开发模式 不会压缩代码，还会有注释，会暴露更多的信息，方便调试</span></span><br><span class=\"line\">  <span class=\"comment\">// none 不开启模式，也不会启动各种优化插件</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//多个入口</span></span><br><span class=\"line\">     <span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>:<span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">es6</span>:<span class=\"string\">&quot;./src/es6.js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./my&quot;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"插件2\"><a href=\"#插件2\" class=\"headerlink\" title=\"插件2\"></a>插件2</h5><p>打包后的文件，自动生成一个html文件。并且可以设置模板</p>\n<h5 id=\"Webpack-如何将打包后的文件，自动生成一个html文件\"><a href=\"#Webpack-如何将打包后的文件，自动生成一个html文件\" class=\"headerlink\" title=\"Webpack 如何将打包后的文件，自动生成一个html文件\"></a>Webpack 如何将打包后的文件，自动生成一个html文件</h5><p>…html-webpack-plugin</p>\n<p>…安装4-x版本</p>\n<p>…1.npm 安装插件</p>\n<p>…引入插件</p>\n<p>…实例化对象</p>\n<ul>\n<li><p>创建html模板</p>\n<ul>\n<li>&#96;&#96;&#96;js<br>template:”.&#x2F;src&#x2F;index&#x2F;.html”<br>&#x2F;&#x2F;模板克隆目录<br>filename:”index.html”<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 保持文件夹清空（打包之前</span><br><span class=\"line\"></span><br><span class=\"line\">##### 插件三.保持文件夹初始化。</span><br><span class=\"line\"></span><br><span class=\"line\">- clean-webpack-plugin</span><br><span class=\"line\"></span><br><span class=\"line\">- 引用</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    const &#123;&#125; from &#123;&#x27;&#x27;&#125;...</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"解决js的兼容问题\"><a href=\"#解决js的兼容问题\" class=\"headerlink\" title=\"解决js的兼容问题\"></a>解决js的兼容问题</h5><p>语法（箭头函数）和特性（promise）</p>\n<p>多入口应用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">index</span>:<span class=\"string\">&quot;./&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ecma</span>:<span class=\"string\">&quot;./&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">     占位符</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"处理js-的打包，Babel-loader\"><a href=\"#处理js-的打包，Babel-loader\" class=\"headerlink\" title=\"处理js 的打包，Babel-loader\"></a>处理js 的打包，Babel-loader</h5><p>安装依赖</p>\n<p>babel-loader @babel&#x2F;core -D</p>\n<p>兼容性：知道目标浏览器集合</p>\n<p>有一套工具链：主要将es6</p>\n<h5 id=\"ps-只能转语法-新特性只能profill\"><a href=\"#ps-只能转语法-新特性只能profill\" class=\"headerlink\" title=\"ps:只能转语法,新特性只能profill\"></a>ps:只能转语法,新特性只能profill</h5><ul>\n<li>将其在js文件最上方引入</li>\n</ul>\n<p>babel 预设 -&gt; 做语法转换的part</p>\n<ul>\n<li>env 原生</li>\n<li>react react转换</li>\n<li>ts转换</li>\n<li>flow转换</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@babel/preset -env</span><br></pre></td></tr></table></figure>\n\n<p>写babel-loader配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">option</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">presets</span>:[<span class=\"string\">&quot;@babel/preset-env&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">//存在默认浏览器降级版本</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"设置目标浏览器集合\"><a href=\"#设置目标浏览器集合\" class=\"headerlink\" title=\"设置目标浏览器集合\"></a>设置目标浏览器集合</h6><p>package.json 中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;browerslist&quot;</span>:[</span><br><span class=\"line\">\t<span class=\"comment\">//几个常用集合</span></span><br><span class=\"line\">    <span class=\"string\">&quot;last 2 versions&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;&gt;1%&quot;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">//1.所有浏览器最近两个版本</span></span><br><span class=\"line\"><span class=\"comment\">//2.兼容所有浏览器市场份额大于1%（全球）</span></span><br><span class=\"line\"><span class=\"comment\">//last 1 version 兼容当前最新版本</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看符合的版本(终端)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx browerslist <span class=\"string\">&quot;last 2 versions&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">npx browerlist <span class=\"string\">&quot;last 2 versions&quot;</span>,<span class=\"string\">&quot;&gt;1%&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"profill\"><a href=\"#profill\" class=\"headerlink\" title=\"profill\"></a>profill</h5><p>一个js库，内有es6新增所有的特性</p>\n<p>在顶部安装polyfill</p>\n<p><strong>生产依赖</strong> 默认为生产模式安装</p>\n<p>npm i @babel&#x2F;polyfill</p>\n<p>在js文件的第一行引入profill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;@babel/polyfill&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>按需导入 -&gt;    </p>\n<h5 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h5><p>1.推荐3x版本</p>\n<p>2.定义脚本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;serve&quot;</span>:<span class=\"string\">&quot;webpack-dev-server&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拦截打包的文件，在硬件的内存中</span></span><br></pre></td></tr></table></figure>\n\n<p>3.配置在webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t<span class=\"attr\">port</span>:<span class=\"number\">8081</span>,<span class=\"comment\">//端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">​\t<span class=\"attr\">open</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//打开一个新标签页</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"定位bug位置\"><a href=\"#定位bug位置\" class=\"headerlink\" title=\"定位bug位置\"></a>定位bug位置</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devtool</span>:<span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//开发模式下默认开启 devtool:&#x27;source-map&#x27;,</span></span><br><span class=\"line\">\t多出一个.<span class=\"property\">map</span>文件，是一个影射地图</span><br><span class=\"line\"><span class=\"comment\">//关闭后指向打包后的js</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>1.安装vue-loader vue-template-compiler</p>\n<p>​            实例化： vue-loader-plugin</p>\n<p>2.webpack….</p>\n<p>3.vue-style-loader</p>\n<p> vue 生产依赖</p>\n<p>​            </p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>webpack是当下应用最大的构建工具，从0到1构建项目，是一个值得学习课题。不管是vue项目还是其他项目都离不开构建工具（可能是其他构建工具）。</p>\n<h4 id=\"webpack打包工具\"><a href=\"#webpack打包工具\" class=\"headerlink\" title=\"webpack打包工具\"></a>webpack打包工具</h4><h5 id=\"1-安装webpack\"><a href=\"#1-安装webpack\" class=\"headerlink\" title=\"1.安装webpack\"></a>1.安装webpack</h5><h5 id=\"webpack-webpack-cli-D-4x-5X\"><a href=\"#webpack-webpack-cli-D-4x-5X\" class=\"headerlink\" title=\"webpack webpack-cli -D(4x,5X)\"></a>webpack webpack-cli -D(4x,5X)</h5><ul>\n<li><p>​    安装低版本，指定  </p>\n<ul>\n<li><p><a href=\"mailto:&#119;&#x65;&#x62;&#x70;&#97;&#99;&#x6b;&#64;&#x34;&#46;&#x34;&#51;&#46;&#48;\">&#119;&#x65;&#x62;&#x70;&#97;&#99;&#x6b;&#64;&#x34;&#46;&#x34;&#51;&#46;&#48;</a> <a href=\"mailto:&#119;&#101;&#x62;&#112;&#97;&#99;&#x6b;&#x2d;&#99;&#x6c;&#105;&#64;&#51;&#x2e;&#51;&#46;&#x31;&#50;\">&#119;&#101;&#x62;&#112;&#97;&#99;&#x6b;&#x2d;&#99;&#x6c;&#105;&#64;&#51;&#x2e;&#51;&#46;&#x31;&#50;</a> -D</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>@3 安装3版本的最新版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- node-modules  -&gt; bin -&gt; 软链接目录（-D）</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    //锁死安装路径</span><br><span class=\"line\">    npx webpack -V  //npx 找项目下的软连接目录，有的话直接启动，如果没有则安装webpack到本地，并启动他</span><br><span class=\"line\">    webpack -V //全局环境</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>定义名称</p>\n<ul>\n<li><pre><code class=\"js\">script&#123;\n    \n&#125;\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- webpack 0配置启动</span><br><span class=\"line\"></span><br><span class=\"line\">- 配置webpack文件</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    //根目录下新建 webpack.conifg.js</span><br><span class=\"line\">    mudule export =&#123;</span><br><span class=\"line\">    \t//打包入口 默认       ./src/index.js </span><br><span class=\"line\">        entry:&#x27;./sec.index.js&#x27;</span><br><span class=\"line\">        //打包出口，文件路径   </span><br><span class=\"line\">        //打包模式</span><br><span class=\"line\">        outPut:&#123;</span><br><span class=\"line\">        //为打包资源文件存在位置，必须为绝对路径</span><br><span class=\"line\">    \tpath:</span><br><span class=\"line\">        filename:</span><br><span class=\"line\">        //产出的资源文件名</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    //默认生产模式，默认启动js压缩优化</span><br><span class=\"line\">    \tmode:&#x27;production&#x27;，</span><br><span class=\"line\">        </span><br><span class=\"line\">    //不开启模式匹配，不压缩\t</span><br><span class=\"line\">    mode:none</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //const &#123;resolve,join&#125;  = require(&#x27;path&#x27;)</span><br><span class=\"line\">    const path = require(&#x27;path&#x27;);</span><br><span class=\"line\">    产出子文件的存放位置 </span><br><span class=\"line\">    path:path.resolve(_dirnamr,&#x27;./dist&#x27;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    mode:producton</span><br><span class=\"line\">    mode:development 开发模式。不会压缩代码，会暴露更多信息，方便调整。</span><br><span class=\"line\">    mode:none</span><br><span class=\"line\">    //模式警告</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><pre><code class=\"js\">--config 告诉启动哪一个配置权限\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- webpack 支持import，不支持css，只支持js</span><br><span class=\"line\"></span><br><span class=\"line\">  ```js </span><br><span class=\"line\">  引入css，出错。 </span><br><span class=\"line\">  less pug vue jpe jpeg svg</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><pre><code class=\"js\">module :&#123;\n    rules:[\n        &#123;\n            test:/|.css/,\n            use:&#39;&#39;,\n        &#125;\n        &#123;\n            test:/\\.less$/,\n            use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]\n        &#125;\n        ...\n    ]\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### loader 模编译器</span><br><span class=\"line\"></span><br><span class=\"line\">css-loader  css 挂载，</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">默认装...5</span><br><span class=\"line\">降级 @..</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n<li><p>打包的css怎么用</p>\n</li>\n<li><p>css-loader 支持模块。style-loader触发效果</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br>style-loader:  &#x2F;&#x2F;操作dom动态创建<br>npm install style-loader@zm<br>当多个load作用于一个模块的时候，有执行顺序。从后往前</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - .less  采用less模块</span><br><span class=\"line\"></span><br><span class=\"line\">- plugin插件</span><br><span class=\"line\"></span><br><span class=\"line\">  - mini-css-extract</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    //引入插件</span><br><span class=\"line\">    const minicss from </span><br><span class=\"line\">    </span><br><span class=\"line\">    [name].[ext] 占位符</span><br><span class=\"line\">    /\\.(png|jpg|jpe?g|webp)$/ </span><br><span class=\"line\">    ? 有或没有</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>以前写的工作室官网项目，本来能运行起来的，隔了很久之后，中间还重做了一次系统，今天重新运行竟然运行不起来了。</p>\n<p>报错：</p>\n<p><a href=\"mailto:&#77;&#x61;&#x74;&#114;&#x69;&#120;&#45;&#111;&#x66;&#x66;&#105;&#x63;&#105;&#97;&#x6c;&#x40;&#x31;&#x2e;&#x30;&#x2e;&#x30;\">&#77;&#x61;&#x74;&#114;&#x69;&#120;&#45;&#111;&#x66;&#x66;&#105;&#x63;&#105;&#97;&#x6c;&#x40;&#x31;&#x2e;&#x30;&#x2e;&#x30;</a> dev: &#96;webpack-dev-server –inline –progress –config</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从网上找了一个解决方案：</span><br><span class=\"line\"></span><br><span class=\"line\">卸载webpack-dev-server</span><br><span class=\"line\">npm uninstall webpack-dev-server</span><br><span class=\"line\">重新安装webpack-dev-server</span><br><span class=\"line\">npm install webpack-dev-server@<span class=\"number\">2.9</span><span class=\"number\">.7</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>loader 模板转译 编译器</p>\n<p>webpack 打包工具</p>\n<p>1.安装</p>\n<p>​    npm i <a href=\"mailto:&#x77;&#101;&#x62;&#x70;&#x61;&#x63;&#107;&#64;&#52;&#46;&#x34;&#x33;&#x2e;&#48;\">&#x77;&#101;&#x62;&#x70;&#x61;&#x63;&#107;&#64;&#52;&#46;&#x34;&#x33;&#x2e;&#48;</a> <a href=\"mailto:&#119;&#101;&#x62;&#112;&#x61;&#x63;&#x6b;&#x2d;&#99;&#108;&#105;&#64;&#x33;&#x2e;&#x33;&#46;&#x31;&#50;\">&#119;&#101;&#x62;&#112;&#x61;&#x63;&#x6b;&#x2d;&#99;&#108;&#105;&#64;&#x33;&#x2e;&#x33;&#46;&#x31;&#50;</a> -D </p>\n<p>​    -D    &lt;&#x3D;&gt;   –save -dev</p>\n<p>​    ps：webpack webpack-cli loader 非常重视版本兼容，版本不符合会导致打包失败</p>\n<p>2.两种打包方式</p>\n<ol>\n<li><p>在package.json的script中写</p>\n<ul>\n<li>&#96;&#96;&#96;js<br>“dev” : “webpack”,<br> &#x2F;&#x2F;npm run dev 启动打包工具<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. 直接npx webpack</span><br><span class=\"line\"></span><br><span class=\"line\">3.默认打包</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t直接运行打包命令</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t默认会在根目录新建一个dist文件夹，把其他文件打包到里面的main.js文件里。默认能正确打包，js和json文件</span><br><span class=\"line\"></span><br><span class=\"line\">4.打包less,css,sass,sass,png等等文件</span><br><span class=\"line\"></span><br><span class=\"line\">​\t需要安装loader工具，</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">eg:</span><br><span class=\"line\">npm i less-loader -D</span><br><span class=\"line\">npm i css-loader -D</span><br><span class=\"line\">npm i mini-css-extract-plugin -D</span><br><span class=\"line\">npm i sass-loader -D</span><br><span class=\"line\"></span><br><span class=\"line\">插件1//mini-css-extract-plugin 可以生成一个css文件，将css样式预编译并且存在一个指定的位置。</span><br><span class=\"line\">const minicss = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class=\"line\"> plugins: [</span><br><span class=\"line\">        new minicss(&#123;</span><br><span class=\"line\">          filename: &quot;./my/b.css&quot;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      ],</span><br><span class=\"line\"></span><br><span class=\"line\">     //loader 模板转译 编译器</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"插件1\"><a href=\"#插件1\" class=\"headerlink\" title=\"插件1\"></a>插件1</h4><p>mini-css-extract-plugin 可以生成一个css文件，将css样式预编译并且存在一个指定的位置。</p>\n<p>loader使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./my&quot;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;my.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:[<span class=\"string\">&quot;style-loader&quot;</span>,<span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:[minicss.<span class=\"property\">loader</span>,<span class=\"string\">&quot;css-loader&quot;</span>,<span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg|webp|gif|jpeg)$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>:<span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"attr\">options</span>:&#123;</span><br><span class=\"line\">                        <span class=\"attr\">name</span>:<span class=\"string\">&quot;[name].[ext]&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">outputPath</span>:<span class=\"string\">&quot;./my/images&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">publicPath</span>:<span class=\"string\">&#x27;../images&#x27;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// e? 表示e有或者没有</span></span><br><span class=\"line\">   <span class=\"comment\">// name:&quot;[name].[ext]&quot;,   占位符</span></span><br><span class=\"line\">  <span class=\"comment\">//publicPath:&#x27;../images&#x27;   解决css中引入图片的路径问题</span></span><br><span class=\"line\"> <span class=\"comment\">//outputPath:&quot;./my/images&quot;,   打包文件存放地址</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//打包入口 ./src/index.js 支持相对，也支持绝对路径</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//出口</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//   产出的资源文件的存放位置 ./dist 必须是绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;./build&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">//  产出的资源文件名 main.js</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;index.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//模式 production 生产模式 会默认开启JS压缩优化</span></span><br><span class=\"line\">  <span class=\"comment\">//模式 development 开发模式 不会压缩代码，还会有注释，会暴露更多的信息，方便调试</span></span><br><span class=\"line\">  <span class=\"comment\">// none 不开启模式，也不会启动各种优化插件</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//多个入口</span></span><br><span class=\"line\">     <span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">index</span>:<span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">es6</span>:<span class=\"string\">&quot;./src/es6.js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&quot;./my&quot;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"插件2\"><a href=\"#插件2\" class=\"headerlink\" title=\"插件2\"></a>插件2</h5><p>打包后的文件，自动生成一个html文件。并且可以设置模板</p>\n<h5 id=\"Webpack-如何将打包后的文件，自动生成一个html文件\"><a href=\"#Webpack-如何将打包后的文件，自动生成一个html文件\" class=\"headerlink\" title=\"Webpack 如何将打包后的文件，自动生成一个html文件\"></a>Webpack 如何将打包后的文件，自动生成一个html文件</h5><p>…html-webpack-plugin</p>\n<p>…安装4-x版本</p>\n<p>…1.npm 安装插件</p>\n<p>…引入插件</p>\n<p>…实例化对象</p>\n<ul>\n<li><p>创建html模板</p>\n<ul>\n<li>&#96;&#96;&#96;js<br>template:”.&#x2F;src&#x2F;index&#x2F;.html”<br>&#x2F;&#x2F;模板克隆目录<br>filename:”index.html”<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### 保持文件夹清空（打包之前</span><br><span class=\"line\"></span><br><span class=\"line\">##### 插件三.保持文件夹初始化。</span><br><span class=\"line\"></span><br><span class=\"line\">- clean-webpack-plugin</span><br><span class=\"line\"></span><br><span class=\"line\">- 引用</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```js</span><br><span class=\"line\">    const &#123;&#125; from &#123;&#x27;&#x27;&#125;...</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"解决js的兼容问题\"><a href=\"#解决js的兼容问题\" class=\"headerlink\" title=\"解决js的兼容问题\"></a>解决js的兼容问题</h5><p>语法（箭头函数）和特性（promise）</p>\n<p>多入口应用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">index</span>:<span class=\"string\">&quot;./&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ecma</span>:<span class=\"string\">&quot;./&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">     占位符</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"处理js-的打包，Babel-loader\"><a href=\"#处理js-的打包，Babel-loader\" class=\"headerlink\" title=\"处理js 的打包，Babel-loader\"></a>处理js 的打包，Babel-loader</h5><p>安装依赖</p>\n<p>babel-loader @babel&#x2F;core -D</p>\n<p>兼容性：知道目标浏览器集合</p>\n<p>有一套工具链：主要将es6</p>\n<h5 id=\"ps-只能转语法-新特性只能profill\"><a href=\"#ps-只能转语法-新特性只能profill\" class=\"headerlink\" title=\"ps:只能转语法,新特性只能profill\"></a>ps:只能转语法,新特性只能profill</h5><ul>\n<li>将其在js文件最上方引入</li>\n</ul>\n<p>babel 预设 -&gt; 做语法转换的part</p>\n<ul>\n<li>env 原生</li>\n<li>react react转换</li>\n<li>ts转换</li>\n<li>flow转换</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@babel/preset -env</span><br></pre></td></tr></table></figure>\n\n<p>写babel-loader配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">option</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">presets</span>:[<span class=\"string\">&quot;@babel/preset-env&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">//存在默认浏览器降级版本</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"设置目标浏览器集合\"><a href=\"#设置目标浏览器集合\" class=\"headerlink\" title=\"设置目标浏览器集合\"></a>设置目标浏览器集合</h6><p>package.json 中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;browerslist&quot;</span>:[</span><br><span class=\"line\">\t<span class=\"comment\">//几个常用集合</span></span><br><span class=\"line\">    <span class=\"string\">&quot;last 2 versions&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;&gt;1%&quot;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">//1.所有浏览器最近两个版本</span></span><br><span class=\"line\"><span class=\"comment\">//2.兼容所有浏览器市场份额大于1%（全球）</span></span><br><span class=\"line\"><span class=\"comment\">//last 1 version 兼容当前最新版本</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看符合的版本(终端)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx browerslist <span class=\"string\">&quot;last 2 versions&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">npx browerlist <span class=\"string\">&quot;last 2 versions&quot;</span>,<span class=\"string\">&quot;&gt;1%&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"profill\"><a href=\"#profill\" class=\"headerlink\" title=\"profill\"></a>profill</h5><p>一个js库，内有es6新增所有的特性</p>\n<p>在顶部安装polyfill</p>\n<p><strong>生产依赖</strong> 默认为生产模式安装</p>\n<p>npm i @babel&#x2F;polyfill</p>\n<p>在js文件的第一行引入profill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;@babel/polyfill&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>按需导入 -&gt;    </p>\n<h5 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h5><p>1.推荐3x版本</p>\n<p>2.定义脚本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;serve&quot;</span>:<span class=\"string\">&quot;webpack-dev-server&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拦截打包的文件，在硬件的内存中</span></span><br></pre></td></tr></table></figure>\n\n<p>3.配置在webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t<span class=\"attr\">port</span>:<span class=\"number\">8081</span>,<span class=\"comment\">//端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">​\t<span class=\"attr\">open</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//打开一个新标签页</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"定位bug位置\"><a href=\"#定位bug位置\" class=\"headerlink\" title=\"定位bug位置\"></a>定位bug位置</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devtool</span>:<span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//开发模式下默认开启 devtool:&#x27;source-map&#x27;,</span></span><br><span class=\"line\">\t多出一个.<span class=\"property\">map</span>文件，是一个影射地图</span><br><span class=\"line\"><span class=\"comment\">//关闭后指向打包后的js</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>1.安装vue-loader vue-template-compiler</p>\n<p>​            实例化： vue-loader-plugin</p>\n<p>2.webpack….</p>\n<p>3.vue-style-loader</p>\n<p> vue 生产依赖</p>\n<p>​            </p>\n"},{"title":"微信小程序开发","date":"2022-04-24T14:07:07.000Z","author":"codefish","top_img":"/img/9.jpg","cover":"/img/9.jpg","_content":"\n第一次对于微信小程序的学习，主要是一些基础语法\n\n# 微信小程序开发\n\n## 1）项目的基本构成\n\n### 1) 文件作用\n\n1. **pages存放所有小程序的页面**\n2. utils用来存放工具性质的模块（例如：格式化时间的自定义模板\n3. **app.js 小程序项目的入口文件**\n4. **app.json 小程序项目的全局配置**\n5. app.wxss 全局样式文件\n6. project.config.json项目的配置文件\n7. sitemap.json 配置小程序及页面是否被微信索引\n\n### 2）小程序页面的组成部分\n\n- index.js 数据，时间处理函数\n- index.json\n- index.wxss\n- index.wxml   模板结构\n\n### 3）.json配置文件的作用\n\n- 更目录的app.json文件 -> 全局配置文件\n- 根目录中的project.config.json\n- 根目录中的sitemap.json\n- 每个页面文件夹的.json \n\n- app.json 全局配置文件\n\n```js\npages:[] \n记录当前小程序所有页面的路径\nwindow:全局定义小程序所有页面的背景色，文字颜色等\nstyle:全局定义小程序所使用的样式版本\nsitemapLocation:用来指明sitemap.json的位置\n\n默认只包含四项内容\n```\n\n### 4）project.config.json文件\n\n是项目配置文件，用来对小程序开发工具的个性化配置\n\n- setting保存了编译相关的配置\n- projectname保存的是项目名称\n- appid中保存的是小程序的账号ID\n\n### 5) sitemap.json文件\n\n微信现已开发小程序内搜索，效果类似于网页的SEO.sitemap.json文件用来配置小程序页面是否运行微信索引\n\n当开发者允许索引时，微信会以爬虫的形式，为小程序的页面内容建立索引，当关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中\n\ndisallow 不允许索引\n\nallow 允许索引\n\n注意：清除黄色警告 ....当前页面...被索引\n\n在project.config.json 中配置\n\n```js\ncheckSiteMap:false\n```\n\n### 6)页面的.json 文件\n\n调整首页，即将当前路径改在最前\n\n- wxml (weixin markup language)是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作用类似于网页设计的html\n- **html 和 wxml 的区别**\n  1. 标签名称不同\n     - html (div,span,img,a)\n     - wxml (view ,text,image,navigator)\n  2. 属性节点不同\n     - <a href = \"#\"></a>>超链接\n     - <navigator url='/pages/home/home'></navigator>\n  3. 提供了类似Vue的模板语法\n     - 数据绑定\n     - 列表渲染\n     - 条件渲染\n  4. 1\n- **wxss 小程序样式语言**\n  1. 新增rpx属性单位\n     1. css里面需要进行像素单位换算，如rem\n     2. wxss在底层支持新的尺寸单位，自动进行样式计算\n  2. 提供全局样式和局部样式\n     1. 全局wxss\n     2. 区别wxss\n  3. wxss仅仅支持部分css选择器\n     1. class ,id\n     2. element\n     3. 并集选择器\n     4. ::after 和 ::before 等伪类选择器\n  4. 1\n- 小程序里面的js文件\n  1. app.js\n     1. 整个小程序的入口文件，调用APP()函数来启动整个小程序\n  2. 页面的.js文件\n     1. 页面的入口文件，通过调用Page()函数来创建并运行页面\n  3. 普通的.js文件\n     1. 公共的函数或者属性供使用\n\n## 7）小程序开发宿主环境\n\n**手机微信是小程序的宿主环境**\n\n......基于微信进行安装......\n\n小程序借助，微信扫码支付，GPS\n\n- 宿主环境提供的内容\n  1. 通信模型\n  2. 运行机制\n  3. 组件\n  4. API\n\n\n\n## 8）通信模型\n\n- 主体包括渲染层和逻辑层\n  1. WXML模板和WXSS样式工作在**渲染层**\n  2. js脚本工作在**逻辑层**\n  3. 。\n- 通信\n  1. 渲染层和逻辑层之间的通信\n     1. 为微信客户端进行转发\n  2. 逻辑层和第三方服务器的通信\n     1. 为微信客户端进行转发\n\n## 9）小程序运行机制\n\n- 小程序启动的过程\n\n  1. 下载包到本地\n  2. 解析全局配置 app.json\n  3. 执行app.js入口文件，APP()\n  4. 渲染小程序首页\n  5. 小程序启动完成\n\n- 页面的 启动\n\n  1. 加载解析页面的.json配置文件，\n  2. 加载页面的.wxml模板和.wxss样式\n  3. 执行页面的.js文件，执行Page()创建页面实例\n  4. 页面渲染完成\n\n  \n\n## 10).小程序组件的分类\n\n- 小程序的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方吧小程序的组件分为九类\n  1. 视图容器 *\n  2. 基础内容 *\n  3. 表单组件 *\n  4. 导航组件 *\n  5. 媒体组件\n  6. map地图组件\n  7. canvas画布组件\n  8. 开放能力\n  9. 无障碍访问\n  10. \n\n## 11)常见的视图容器类组件\n\n1. view\n\n   普通视图区域，类似于div,是块级元素，常用来实现页面的布局效果\n\n2. scroll-view\n\n   可滚动的视图区域\n\n   常用来实现滚动列表效果\n\n3. swiper和swiper-item\n\n   轮播图容器和轮播图内容组件\n\n   \n\n1. view组件的基本使用\n\n   ```wxml\n   <view class='container'>\n   \t<view>A<view>\n   \t<view>B<view>\n   \t<view>C<view>\n   <view>\n   ```\n\n   ````wxss\n   .container{\n   \tdisplay:flex;\n   \tjustify-content:space-arround\n   }\n   .container view:nth-child(1){\n   \tbackground-color:lightblue;\n   }\n   ````\n\n2. srcoll-view 使用\n\n   ```wxml\n   <scroll-view class=\"scroll\" scroll-y>\n   \t<view>A</view>\n   \t<view><navigator url='../index/index'>B</navigator></view>\n   \t<view>C</view>\n   </scroll-view>\n   ```\n\n   ```wxss\n   .scroll{\n       background-color: lightblue;\n       /* width: 100px; */\n       height: 100px;\n   }\n   .scroll view{\n       height: 100px;\n       width: 100px;\n       background-color: rgb(167, 64, 64);\n   }\n   ```\n\n   3.swiper 和 swiper-item的使用\n\n   1. autoplay\n   2.  1\n\n   \n\n   4.button\n\n   1. ​\tsize\n   2. plain 镂空\n   3. type primary warn\n   4. open-type 跳转或者获取手机号\n   5. 1\n\n   \n\n   5.image\n\n   1. 默认存在大小\n\n   2. ```js\n      <image src=\"/images/a.png\"></image>\n      //  /表示根目录\n      ```\n\n   3. 属性\n\n      1. mode属性-指定裁剪和缩放\n         1. 默认值：scaleToFill,不抱持丛横比，填满容器\n         2. aspectFit:保持比例，完整显示，但是两边留白\n         3. aspectFill:保持短边样式，即水平完整，垂直方向被裁剪\n         4. widthFix:宽度不变，高度自适应，即宽度与原本容器的宽度一致\n         5. heightFix:高度不变，宽度自适应,即高度与原本容器的宽度一致\n      2. 2\n\n\n\n## 12）小程序API\n\n​\t\t由宿主环境提供\n\n### api\n\n1. 事件监听类API\n   - 特点：以on开头，用来监听某些事件的触发\n   - 举例：wx.onWindowResize(function callback)监听窗口尺寸的大小变换的事件\n   - wx相当于window\n2. 同步API\n   - 以Aync 结尾的API\n   - 同步API的执行结果都可以通过函数返回值直接获取，如果执行出错则会抛出异常\n   - 举例：wx.setStorageSync('key','value')向本地存储中写入内容\n3. 异步API\n   - 特点：类似于jQuery中的$.ajax(options)函数，需要通过success,fail,complete接收调用的结果\n   - 举例：wx.request(options)发起网络数据请求，通过successs回调函数接收数据\n4. 1\n\n\n\n## 13) 协同工作和发布\n\n### 1）了解权限管理需求\n\n对不同角色，不同岗位的员工的权限进行边界的划分，使其有效的进行协同工作\n\n### 2）了解项目成员的组织结构\n\n#### 项目管理者\n\n统筹整个项目的进展和风险\n\n1. 产品组\n   - 提需求\n2. 设计组\n   - 出设计方案\n3. 开发组\n   - 代码开发\n4. 测试组\n   - 项目测试\n5. \n\n ### 3）开发流程\n\n- 产品组--提出需求\n  - 设计组--设计\n    - 开发组--开发\n      - 产品组和设计组--体验\n        - 测试组--测试\n          - 管理者--发布\n\n\n\n### 4）成员管理的两个方面\n\n#### 管理员\n\n- 添加删除体验成员\n\n- 管理所有成员，包括：\n  1. 运营者\n  2. 开发者\n  3. 数据分析者\n  4. 以上三者添加删除体验成员\n\n#### 不同成员对应的权限\n\n开发者权限：\n\n1. 开发者权限\n   - 对代码进行代码开发\n2. 体验者权限\n   - 使用体验版小程序\n3. 登录，小程序后台\n   - 管理后台\n4. 开发设置权限\n   - 管理设置\n5. 腾讯云管理的权限\n   - 云开发权限\n\n#### 添加项目成员和体验成员\n\n##### 查看小程序运营数据的两种方式\n\n- 在小程序后台查看\t\n  - 登录后台 -统计-tab\n- 使用小程序数据助手查看\n  - 手机维修 -小程序数据助手 -查看\n- 1\n\n\n\n\n\n\n\n.\n\n#### 版本管理\n\n开发编写的为 ：开发版本\n\n体验版本：体验测试\n\n审核版本：只能有一部分代码处审核\n\n线上版本：。。\n\n\n\n小程序开发上线的整体步骤\n\n\n\n## 14）模板与配置\n\n### 1）模板语法\n\n#### 1）数据绑定\n\n- 定义数据\n\n  - Mustache语法\n\n  ```js\n  data: {\n          info:'勇往直前'\n      },\n  ```\n\n  ```wxml\n  <text>{{info}}</text>\n  ```\n\n  - Mustache应用场景\n    - 绑定内容\n    - 绑定属性\n    - 运算（三元，算术等）\n  - 绑定属性\n\n  ```js\n  data:{\n      imgsrc:'...'\n  }\n  ```\n\n  ```wxml\n  <image url=\"{{imgurl}}\">\n  ```\n\n  - 三元运算\n\n  ```wxml\n  <text>{{num>5?1:0}}</text>\n  ```\n\n  \n\n  - 算术运算\n\n  ```js\n   num:Math.random()*10,\n          num1:Math.random().toFixed()*10\n  \n  //使用\n  <text>{{num*num1}}</text>\n  ```\n\n#### 2）事件绑定\n\n#### 1.常见事件\n\n1. tap 手触摸离开后的\n   - bindtap\n   - bind:tap\n2. input 文本框的输入事件\n   - bindinput\n   - bind:input\n3. 状态改变时触发 eg:checkbox\n   - bindchange\n   - bind:change\n\n\n\n##### 2.事件对象的属性列表\n\n- type：事件leix\n- timeStamp:  interger 数值类型 ，打开到触发的毫秒数\n- **target** 对象 ，触发事件的组件的一些属性的集合\n- cureentTarget object 当前组件的一些属性值集合\n- **detail**  object 额外的信息\n- touches  数组   触摸时间，当前停留在触目点信息的数组，多手指\n- changedTouches  array  触摸事件，当前变化的触摸点信息的按钮\n\n\n\n**target 和 currentTarget 的区别**\n\ntarget是触发该事件的源头组件，currentTarget则是当前事件绑定的组件\n\neg:事件冒泡，子元素触发父组件的事件，此时target为子元素，currentTarget则是父级\n\n###### bindtap事件\n\n```js\n putnum(){\n        this.setData({\n            count:this.data.count+1\n        })\n    },\n```\n\n```wxml\n<button bindtap='putnum'>{{count}}</button>\n```\n\n- 注意：不能直接（）传递参数，可以直接拿到event，在事件中\n\n事件传参\n\ndata-*  传递参数\n\n```wxml\n<button bindtap='putnum'>{{count}}</button data-info=\"{{2}}\">\n//info为参数的名字\n//2为参数的值    \n```\n\n- {{2}} 表示数2\n- ”2“ 表示字符串2\n\n拿到参数\n\n```js\nthis.setData({\n            count:this.data.count+1,\n            msg:e.target.dataset.msg\n        })\n//直接赋值无效\nthis.data.msg = e.target.dataset.msg;\n        \n```\n\n###### bindinput事件\n\ninput 不显示光标 -> 长按\n\ne.datail.value 拿到input的值\n\n```wxml\n<input type=\"text\" value=\"{{msg}}\" bindinput='handleFirst'></input>\n```\n\n```js\n   handleFirst(e){\n        console.log(e.detail.value)\n        this.setData({\n            count:this.data.count+1,\n            msg:e.detail.value\n        })\n    },\n```\n\n\n\n#### 2.条件渲染\n\n###### wx:if 和wx:elif和wx:else\n\nwx：else不写条件\n\n```wxml\n<view wx:if=\"{{isshow}}\">女</view>\n<view wx:else=\"{{!isshow}}\">男</view>\n\n//   \n<view wx:elif=\"{{!isshow}}\">男</view>\n```\n\n```js\n//条件渲染\n    changesex(){\n        console.log(this.data.isshow)\n        this.setData({\n            isshow:!this.data.isshow\n        })\n    },\n```\n\n######  block一次性控制多个组件的展示与隐藏\n\n只是一个包裹性的容器，不会再页面中做任何渲染\n\n```wxml\n<block wx:if=\"{{rtue}}\">\n\t<view>view1</view>\n\t<view>view1</view>\n\t<view>view1</view>\n</block>\n```\n\n###### hideen属性\n\n````wxml\n<view hidden='{{isshow}}'>\n````\n\n###### v-show 和 v-if 的对比\n\n1. 运行方式不同\n   - if 动态创建和移除元素，控制元素的展示和隐藏\n   - hidden以切换样式的方式，控制元素的显示和隐藏（display:none/block）\n   - 频繁切换使用使用hidden更好\n   - 条件复杂时，使用wx:if\n2. w\n\n\n\n##### 3.列表渲染\n\nwx:for\n\n```wxml\n<view wx:for=\"{{list}}\">\n{{index}}--{{item}}\n</view>\n```\n\n```js\n list:['a','b','c'],\n```\n\n###### 自定义索引和元素变量名\n\n1. wx:for-index=\"\"\n2. wx:for-item=\"\"\n\n###### 建议绑定key\n\n```wxml\n<view wx:for=\"{{list}}\" wx:for-index=\"id\" wx:key=\"id\">\n{{id}}--{{item}}\n</view>\n\neg:\nlist:[{id:'1',name:'11'}]\n```\n\n不需要Mustache语法\n\n可以直接让index为key\n\n```wxml\n<view wx:for=\"{{list}}\" wx:key=\"index\">\n{{index}}--{{item}}\n</view>\n```\n\n##### 4.样式导入\n\n@import '....'\n\n\n\n##### 5.全局样式和局部样式\n\n局部样式只作用当前页面\n\n- 当样式冲突时，满足就近原则\n- 当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局样式\n\n#### 2)全局配置\n\n- pages\n  1. 记录小程序所有页面的存放路径\n  2. \n- window\n  1. window全局小程序窗口的外观\n- tabBar\n  1. 小程序底部的tabBar效果\n- style\n  1. 是否启用新版的组件样式\n\n##### 1.window\n\n- 导航栏\n  - navigationBar-window配置\n- 背景区域\n  - background-window配置\n- 主体区域\n\n##### 2.window配置\n\n![image-20220221073347448](%E5%AD%A6%E4%B9%A0/mdimages/image-20220221073347448.png)\n\n\n\n- 下拉刷新不能自动合上，需要手动合上。\n\n- 颜色只能为十六进制\n- 下拉刷新loading的样式，三个小圆点。只有dark和light\n- 上拉触底，距离底部多少时可以请求新的数据，一般不需要修改\n\n\n\n##### tabBar配置\n\n- 底部tabBar\n- 顶部tabBar\n\n注意点：\n\n1. 最少两个，最多五个\n2. 设置顶部时不会显示图标，只有文字\n\n\n\n###### tabBar节点的配置项\n\n![image-20220221075510461](%E5%AD%A6%E4%B9%A0/mdimages/image-20220221075510461.png)\n\n\n\n###### tabBar节点中list的配置项\n\n![image-20220221075519741](%E5%AD%A6%E4%B9%A0/mdimages/image-20220221075519741.png)\n\n- 单独放在 images-tabs-..\n\n- 图标名称包好-active的是选中之后的图标\n\n#### 3）页面配置\n\n- 与全局配置文件的关系\n  - 可以实现每个页面不同的效果\n  - 页面配置不用写window，直接写配置\n- 配置项同app.json\n- 建议下拉刷新放在具体的页面\n\n## 15）数据请求\n\n- 只能请求https类型的接口\n- 必须将接口的域名添加到信任列表\n  - 详情-项目配置-合法域名\n- 配置合法域名-登录后台-开发-开发设置-服务器域名-修改request合法域名\n- 注意事项\n  1. 域名只支持https协议\n  2. 域名不能使用ip地址或localhost\n  3. 域名必须经过ICP备案\n  4. 服务器域名一个月内最多可以申请修改五次\n\n### 1）.发送get请求\n\n```js\n //触摸事件\n    tagFirst: function(e){\n       this.sendget()\n        console.log(e)\n        wx.request({\n            url: 'https://www.escook.cn/api/get',\n            methods:\"GET\",\n            data: {\n              name: \"zs\",\n              age: 20,\n            },\n            success:(res)=>{\n              console.log(res)\n            }\n          })\n    },\n    sendget(){\n        wx.request({\n          url: 'https://devapi.qweather.com/v7/weather/now?',\n          methods:\"GET\",\n          data: {\n            location: \"119.41,30.58\",\n            key: \"03ab5adfffc84f7dbd95c66c53ed6223\",\n          },\n          success:(res)=>{\n            console.log(res)\n          }\n        })\n        \n    },\n        \n        //如果都写在sendget里报错，第二个不在合法域名列表\n```\n\n- 同样get只能用data传参\n- 页面加载需要的数据放在onload里\n\n### 2）.跳过合法域名校验\n\n- http接口的协议\n- 1\n\n#### 方法 \n\n详情-本地设置-不校验合法域名...\n\n--仅仅能在开发调试阶段使用\n\n### 3）跨越和ajax\n\n- 不存在跨域\n\n##### ajax\n\n- 不叫ajax请求，叫网络数据请求\n\n\n\n## 16）视图逻辑\n\n### 1.导航跳转\n\n\n\n1. 声明式导航\n   1. <navigator>\n2. 编程式导航\n   1. 调用小程序的导航api\n\n#### 1.导航页面\n\n###### navigator\n\n- url表示跳转的页面地址\n  - 路径必须以/开头\n- open-type 表示跳转的方式，switchTab--跳转tabBar页面，未写的话无法跳转\n\n```wxml\n<navigator url='/pages/index/index' open-type=\"switchTab\">111\n</navigator>\n```\n\n但是跳转到logs就没效果,即switchTab只能跳tabBaar页面\n\n- 其他页面，open-type:navigate,可以省略不写\n\n###### 后退导航\n\n- open-type:navigateBack\n- delta 表示后退的层级,为数字，默认为1\n\n```wxml\n<navigator open-type='navigateBack' delta=\"1\"></navigator>\n```\n\n###### 指令\n\n1.跳转到普通页面\n\n```js\n wx.navigateTo({\n\n​      url: '../logs/logs'\n\t//success 成功的回调\n    //fail 失败的回调\n   //complete 借口调用结束的回调,成败都会执行\n​     })\n```\n\n2.跳转到tabBar页面\n\n```js\nwx.switchBar({\nurl:'...'\n})\n```\n\n3.后退\n\n```js\nwx.navigateBack({\n    url:\"\",\n    delta:1\n    //默认为1，delta\n    //其他属性同上\n})\n```\n\n#### 2.导航传参\n\n###### 1.声明式导航传参\n\n<navigator url='url?a=1&b=2'></navigator>\n\n###### 2.编程式导航传参\n\n在url参数后面传递参数\n\n```js\nwx.navigateTo({\n    url:\"?a=a&b=2\",\n    delta:1\n    //默认为1，delta\n    //其他属性同上\n})\n```\n\n###### 3.在onload中接收导航参数\n\n- 可以直接在onload中直接拿到\n\n```js\nonload:function(options){\n    console.log(options)\n    //一般这个参数都会转移到data里面\n    //query:{}\n    this.setDate({\n\t\tquery:options,\n\t})\n}\n```\n\n### 2.页面事件\n\n#### 1.下拉刷新事件\n\n定义：下拉滑动操作，重新加载页面数据\n\n使用：\n\n1. ​\t全局开启\n   1. enablePullDownRefresh:true\n   2. 不推荐\n2. 局部开启下拉刷新\n   1. 在页面的json文件中配置\n   2. enablePullDownRefresh:true\n3. 配置样式\n   1. backgroundColor:\"\"  下拉刷新的样式\n   2. backgroundTextStyle:\"dark'   -loadding的样式\n4. 监听下拉刷新事件\n   1. 在内置的onPullDownRefresh\n   2. 刷新时触发的函数\n5. 上拉触底事件\n   1. 通过上拉滑动加载更多的数据--分类上用的较多\n   2. onReachButton() 函数\n   3. 可以调节触底距离，\n      - 可以配置距离\n      - onReachBottomDistance:50px;\n      - 默认为50px\n\n#### 2.\n\n## 17)自定义编译模式\n\n- 优化开发过程\n- 使代码的变化造成的效果以最方便的方式展示在我们面前\n- 普通编译-添加编译模式-\n\n\n\n## 18）生命周期\n\n创建-运行-销毁的整个阶段\n\n### 1.应用生命周期（函数）-小程序\n\n#### 在app.js声明\n\n- onLauch-小程序初始化执行，全局只触发一次\n- onShow-小程序启动，或从后台进入前台触发\n- onHide-小程序从前台进入后台触发\n\n#### 前台和后台\n\n前台：小程序正在运行,home键\n\n后台：调试旁边-切后台\n\n\n\n### 2.页面生命周期(函数)-页面\n\n#### 页面的.js文件\n\n- **onLoad**   \n\n  - options,\n  - 可以在此处获取数据\n  - 只会调用一次\n  - 加载数据，转存参数\n\n- onShow\n\n  - 展示的时候触发\n\n- **onReady**\n\n  - 监听页面初次调用完成，只调用一次\n  - 可以修改，eg:wx.setNavigationBarTitle\n\n- onHide\n\n  - 监听页面隐藏\n\n- onUnload\n\n  - 页面卸载\n\n  注意：onLoad,onReady\n\n  \n\n1\n\n## 19）wxs脚本\n\n定义：小程序独有的脚本语言，结合wxml,可以构建页面的结构\n\n应用场景：wxml里面无法调用页面.js中定义的函数，但是wxml可以调用wxs中定义的函数，典型场景就是过滤器\n\n不改变数据本身，只是在展示时根据需求自定义样式\n\n### 1.wxs与js的区别\n\n- 有自己的数据类型\n  - number,string,boolean,object,function,array,date,regexp\n- 不支持es6\n  - 不支持let,const,结构赋值，对象简写，展开运算符，箭头函数，\n  - 支持var，普通函数写法\n- 支持CommonJs规范\n  - module\n  - require()函数\n  - module.exports对象\n\n### 2.wxs写法\n\n1. 内嵌wxs脚本\n\n   - 必须指定module属性，表示名称\n\n   ```wxml\n   <view>{{m1.toUppper(username)}}</view>\n   \n   <wxs module='m1'>\n   module.exports.toUpperCase(str){\n   \treturn str.toUpperCase()\n   }\n   </wxs>\n   ```\n\n   \n\n2. 外联.wxs-类似于js\n\n   - module 脚本名称\n   - src 路径，必须为相对路径\n\n3. \n\n4. 1\n\n\n\n## 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/微信小程序开发.md","raw":"---\n\ntitle: 微信小程序开发\ntags: [微信小程序,wx]\ndate: 2022-04-24 22:07:07\nauthor: codefish\n# top_img: /img/9.jpg\ncategories: wx\ntop_img: /img/9.jpg\ncover: /img/9.jpg\n---\n\n第一次对于微信小程序的学习，主要是一些基础语法\n\n# 微信小程序开发\n\n## 1）项目的基本构成\n\n### 1) 文件作用\n\n1. **pages存放所有小程序的页面**\n2. utils用来存放工具性质的模块（例如：格式化时间的自定义模板\n3. **app.js 小程序项目的入口文件**\n4. **app.json 小程序项目的全局配置**\n5. app.wxss 全局样式文件\n6. project.config.json项目的配置文件\n7. sitemap.json 配置小程序及页面是否被微信索引\n\n### 2）小程序页面的组成部分\n\n- index.js 数据，时间处理函数\n- index.json\n- index.wxss\n- index.wxml   模板结构\n\n### 3）.json配置文件的作用\n\n- 更目录的app.json文件 -> 全局配置文件\n- 根目录中的project.config.json\n- 根目录中的sitemap.json\n- 每个页面文件夹的.json \n\n- app.json 全局配置文件\n\n```js\npages:[] \n记录当前小程序所有页面的路径\nwindow:全局定义小程序所有页面的背景色，文字颜色等\nstyle:全局定义小程序所使用的样式版本\nsitemapLocation:用来指明sitemap.json的位置\n\n默认只包含四项内容\n```\n\n### 4）project.config.json文件\n\n是项目配置文件，用来对小程序开发工具的个性化配置\n\n- setting保存了编译相关的配置\n- projectname保存的是项目名称\n- appid中保存的是小程序的账号ID\n\n### 5) sitemap.json文件\n\n微信现已开发小程序内搜索，效果类似于网页的SEO.sitemap.json文件用来配置小程序页面是否运行微信索引\n\n当开发者允许索引时，微信会以爬虫的形式，为小程序的页面内容建立索引，当关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中\n\ndisallow 不允许索引\n\nallow 允许索引\n\n注意：清除黄色警告 ....当前页面...被索引\n\n在project.config.json 中配置\n\n```js\ncheckSiteMap:false\n```\n\n### 6)页面的.json 文件\n\n调整首页，即将当前路径改在最前\n\n- wxml (weixin markup language)是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作用类似于网页设计的html\n- **html 和 wxml 的区别**\n  1. 标签名称不同\n     - html (div,span,img,a)\n     - wxml (view ,text,image,navigator)\n  2. 属性节点不同\n     - <a href = \"#\"></a>>超链接\n     - <navigator url='/pages/home/home'></navigator>\n  3. 提供了类似Vue的模板语法\n     - 数据绑定\n     - 列表渲染\n     - 条件渲染\n  4. 1\n- **wxss 小程序样式语言**\n  1. 新增rpx属性单位\n     1. css里面需要进行像素单位换算，如rem\n     2. wxss在底层支持新的尺寸单位，自动进行样式计算\n  2. 提供全局样式和局部样式\n     1. 全局wxss\n     2. 区别wxss\n  3. wxss仅仅支持部分css选择器\n     1. class ,id\n     2. element\n     3. 并集选择器\n     4. ::after 和 ::before 等伪类选择器\n  4. 1\n- 小程序里面的js文件\n  1. app.js\n     1. 整个小程序的入口文件，调用APP()函数来启动整个小程序\n  2. 页面的.js文件\n     1. 页面的入口文件，通过调用Page()函数来创建并运行页面\n  3. 普通的.js文件\n     1. 公共的函数或者属性供使用\n\n## 7）小程序开发宿主环境\n\n**手机微信是小程序的宿主环境**\n\n......基于微信进行安装......\n\n小程序借助，微信扫码支付，GPS\n\n- 宿主环境提供的内容\n  1. 通信模型\n  2. 运行机制\n  3. 组件\n  4. API\n\n\n\n## 8）通信模型\n\n- 主体包括渲染层和逻辑层\n  1. WXML模板和WXSS样式工作在**渲染层**\n  2. js脚本工作在**逻辑层**\n  3. 。\n- 通信\n  1. 渲染层和逻辑层之间的通信\n     1. 为微信客户端进行转发\n  2. 逻辑层和第三方服务器的通信\n     1. 为微信客户端进行转发\n\n## 9）小程序运行机制\n\n- 小程序启动的过程\n\n  1. 下载包到本地\n  2. 解析全局配置 app.json\n  3. 执行app.js入口文件，APP()\n  4. 渲染小程序首页\n  5. 小程序启动完成\n\n- 页面的 启动\n\n  1. 加载解析页面的.json配置文件，\n  2. 加载页面的.wxml模板和.wxss样式\n  3. 执行页面的.js文件，执行Page()创建页面实例\n  4. 页面渲染完成\n\n  \n\n## 10).小程序组件的分类\n\n- 小程序的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方吧小程序的组件分为九类\n  1. 视图容器 *\n  2. 基础内容 *\n  3. 表单组件 *\n  4. 导航组件 *\n  5. 媒体组件\n  6. map地图组件\n  7. canvas画布组件\n  8. 开放能力\n  9. 无障碍访问\n  10. \n\n## 11)常见的视图容器类组件\n\n1. view\n\n   普通视图区域，类似于div,是块级元素，常用来实现页面的布局效果\n\n2. scroll-view\n\n   可滚动的视图区域\n\n   常用来实现滚动列表效果\n\n3. swiper和swiper-item\n\n   轮播图容器和轮播图内容组件\n\n   \n\n1. view组件的基本使用\n\n   ```wxml\n   <view class='container'>\n   \t<view>A<view>\n   \t<view>B<view>\n   \t<view>C<view>\n   <view>\n   ```\n\n   ````wxss\n   .container{\n   \tdisplay:flex;\n   \tjustify-content:space-arround\n   }\n   .container view:nth-child(1){\n   \tbackground-color:lightblue;\n   }\n   ````\n\n2. srcoll-view 使用\n\n   ```wxml\n   <scroll-view class=\"scroll\" scroll-y>\n   \t<view>A</view>\n   \t<view><navigator url='../index/index'>B</navigator></view>\n   \t<view>C</view>\n   </scroll-view>\n   ```\n\n   ```wxss\n   .scroll{\n       background-color: lightblue;\n       /* width: 100px; */\n       height: 100px;\n   }\n   .scroll view{\n       height: 100px;\n       width: 100px;\n       background-color: rgb(167, 64, 64);\n   }\n   ```\n\n   3.swiper 和 swiper-item的使用\n\n   1. autoplay\n   2.  1\n\n   \n\n   4.button\n\n   1. ​\tsize\n   2. plain 镂空\n   3. type primary warn\n   4. open-type 跳转或者获取手机号\n   5. 1\n\n   \n\n   5.image\n\n   1. 默认存在大小\n\n   2. ```js\n      <image src=\"/images/a.png\"></image>\n      //  /表示根目录\n      ```\n\n   3. 属性\n\n      1. mode属性-指定裁剪和缩放\n         1. 默认值：scaleToFill,不抱持丛横比，填满容器\n         2. aspectFit:保持比例，完整显示，但是两边留白\n         3. aspectFill:保持短边样式，即水平完整，垂直方向被裁剪\n         4. widthFix:宽度不变，高度自适应，即宽度与原本容器的宽度一致\n         5. heightFix:高度不变，宽度自适应,即高度与原本容器的宽度一致\n      2. 2\n\n\n\n## 12）小程序API\n\n​\t\t由宿主环境提供\n\n### api\n\n1. 事件监听类API\n   - 特点：以on开头，用来监听某些事件的触发\n   - 举例：wx.onWindowResize(function callback)监听窗口尺寸的大小变换的事件\n   - wx相当于window\n2. 同步API\n   - 以Aync 结尾的API\n   - 同步API的执行结果都可以通过函数返回值直接获取，如果执行出错则会抛出异常\n   - 举例：wx.setStorageSync('key','value')向本地存储中写入内容\n3. 异步API\n   - 特点：类似于jQuery中的$.ajax(options)函数，需要通过success,fail,complete接收调用的结果\n   - 举例：wx.request(options)发起网络数据请求，通过successs回调函数接收数据\n4. 1\n\n\n\n## 13) 协同工作和发布\n\n### 1）了解权限管理需求\n\n对不同角色，不同岗位的员工的权限进行边界的划分，使其有效的进行协同工作\n\n### 2）了解项目成员的组织结构\n\n#### 项目管理者\n\n统筹整个项目的进展和风险\n\n1. 产品组\n   - 提需求\n2. 设计组\n   - 出设计方案\n3. 开发组\n   - 代码开发\n4. 测试组\n   - 项目测试\n5. \n\n ### 3）开发流程\n\n- 产品组--提出需求\n  - 设计组--设计\n    - 开发组--开发\n      - 产品组和设计组--体验\n        - 测试组--测试\n          - 管理者--发布\n\n\n\n### 4）成员管理的两个方面\n\n#### 管理员\n\n- 添加删除体验成员\n\n- 管理所有成员，包括：\n  1. 运营者\n  2. 开发者\n  3. 数据分析者\n  4. 以上三者添加删除体验成员\n\n#### 不同成员对应的权限\n\n开发者权限：\n\n1. 开发者权限\n   - 对代码进行代码开发\n2. 体验者权限\n   - 使用体验版小程序\n3. 登录，小程序后台\n   - 管理后台\n4. 开发设置权限\n   - 管理设置\n5. 腾讯云管理的权限\n   - 云开发权限\n\n#### 添加项目成员和体验成员\n\n##### 查看小程序运营数据的两种方式\n\n- 在小程序后台查看\t\n  - 登录后台 -统计-tab\n- 使用小程序数据助手查看\n  - 手机维修 -小程序数据助手 -查看\n- 1\n\n\n\n\n\n\n\n.\n\n#### 版本管理\n\n开发编写的为 ：开发版本\n\n体验版本：体验测试\n\n审核版本：只能有一部分代码处审核\n\n线上版本：。。\n\n\n\n小程序开发上线的整体步骤\n\n\n\n## 14）模板与配置\n\n### 1）模板语法\n\n#### 1）数据绑定\n\n- 定义数据\n\n  - Mustache语法\n\n  ```js\n  data: {\n          info:'勇往直前'\n      },\n  ```\n\n  ```wxml\n  <text>{{info}}</text>\n  ```\n\n  - Mustache应用场景\n    - 绑定内容\n    - 绑定属性\n    - 运算（三元，算术等）\n  - 绑定属性\n\n  ```js\n  data:{\n      imgsrc:'...'\n  }\n  ```\n\n  ```wxml\n  <image url=\"{{imgurl}}\">\n  ```\n\n  - 三元运算\n\n  ```wxml\n  <text>{{num>5?1:0}}</text>\n  ```\n\n  \n\n  - 算术运算\n\n  ```js\n   num:Math.random()*10,\n          num1:Math.random().toFixed()*10\n  \n  //使用\n  <text>{{num*num1}}</text>\n  ```\n\n#### 2）事件绑定\n\n#### 1.常见事件\n\n1. tap 手触摸离开后的\n   - bindtap\n   - bind:tap\n2. input 文本框的输入事件\n   - bindinput\n   - bind:input\n3. 状态改变时触发 eg:checkbox\n   - bindchange\n   - bind:change\n\n\n\n##### 2.事件对象的属性列表\n\n- type：事件leix\n- timeStamp:  interger 数值类型 ，打开到触发的毫秒数\n- **target** 对象 ，触发事件的组件的一些属性的集合\n- cureentTarget object 当前组件的一些属性值集合\n- **detail**  object 额外的信息\n- touches  数组   触摸时间，当前停留在触目点信息的数组，多手指\n- changedTouches  array  触摸事件，当前变化的触摸点信息的按钮\n\n\n\n**target 和 currentTarget 的区别**\n\ntarget是触发该事件的源头组件，currentTarget则是当前事件绑定的组件\n\neg:事件冒泡，子元素触发父组件的事件，此时target为子元素，currentTarget则是父级\n\n###### bindtap事件\n\n```js\n putnum(){\n        this.setData({\n            count:this.data.count+1\n        })\n    },\n```\n\n```wxml\n<button bindtap='putnum'>{{count}}</button>\n```\n\n- 注意：不能直接（）传递参数，可以直接拿到event，在事件中\n\n事件传参\n\ndata-*  传递参数\n\n```wxml\n<button bindtap='putnum'>{{count}}</button data-info=\"{{2}}\">\n//info为参数的名字\n//2为参数的值    \n```\n\n- {{2}} 表示数2\n- ”2“ 表示字符串2\n\n拿到参数\n\n```js\nthis.setData({\n            count:this.data.count+1,\n            msg:e.target.dataset.msg\n        })\n//直接赋值无效\nthis.data.msg = e.target.dataset.msg;\n        \n```\n\n###### bindinput事件\n\ninput 不显示光标 -> 长按\n\ne.datail.value 拿到input的值\n\n```wxml\n<input type=\"text\" value=\"{{msg}}\" bindinput='handleFirst'></input>\n```\n\n```js\n   handleFirst(e){\n        console.log(e.detail.value)\n        this.setData({\n            count:this.data.count+1,\n            msg:e.detail.value\n        })\n    },\n```\n\n\n\n#### 2.条件渲染\n\n###### wx:if 和wx:elif和wx:else\n\nwx：else不写条件\n\n```wxml\n<view wx:if=\"{{isshow}}\">女</view>\n<view wx:else=\"{{!isshow}}\">男</view>\n\n//   \n<view wx:elif=\"{{!isshow}}\">男</view>\n```\n\n```js\n//条件渲染\n    changesex(){\n        console.log(this.data.isshow)\n        this.setData({\n            isshow:!this.data.isshow\n        })\n    },\n```\n\n######  block一次性控制多个组件的展示与隐藏\n\n只是一个包裹性的容器，不会再页面中做任何渲染\n\n```wxml\n<block wx:if=\"{{rtue}}\">\n\t<view>view1</view>\n\t<view>view1</view>\n\t<view>view1</view>\n</block>\n```\n\n###### hideen属性\n\n````wxml\n<view hidden='{{isshow}}'>\n````\n\n###### v-show 和 v-if 的对比\n\n1. 运行方式不同\n   - if 动态创建和移除元素，控制元素的展示和隐藏\n   - hidden以切换样式的方式，控制元素的显示和隐藏（display:none/block）\n   - 频繁切换使用使用hidden更好\n   - 条件复杂时，使用wx:if\n2. w\n\n\n\n##### 3.列表渲染\n\nwx:for\n\n```wxml\n<view wx:for=\"{{list}}\">\n{{index}}--{{item}}\n</view>\n```\n\n```js\n list:['a','b','c'],\n```\n\n###### 自定义索引和元素变量名\n\n1. wx:for-index=\"\"\n2. wx:for-item=\"\"\n\n###### 建议绑定key\n\n```wxml\n<view wx:for=\"{{list}}\" wx:for-index=\"id\" wx:key=\"id\">\n{{id}}--{{item}}\n</view>\n\neg:\nlist:[{id:'1',name:'11'}]\n```\n\n不需要Mustache语法\n\n可以直接让index为key\n\n```wxml\n<view wx:for=\"{{list}}\" wx:key=\"index\">\n{{index}}--{{item}}\n</view>\n```\n\n##### 4.样式导入\n\n@import '....'\n\n\n\n##### 5.全局样式和局部样式\n\n局部样式只作用当前页面\n\n- 当样式冲突时，满足就近原则\n- 当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局样式\n\n#### 2)全局配置\n\n- pages\n  1. 记录小程序所有页面的存放路径\n  2. \n- window\n  1. window全局小程序窗口的外观\n- tabBar\n  1. 小程序底部的tabBar效果\n- style\n  1. 是否启用新版的组件样式\n\n##### 1.window\n\n- 导航栏\n  - navigationBar-window配置\n- 背景区域\n  - background-window配置\n- 主体区域\n\n##### 2.window配置\n\n![image-20220221073347448](%E5%AD%A6%E4%B9%A0/mdimages/image-20220221073347448.png)\n\n\n\n- 下拉刷新不能自动合上，需要手动合上。\n\n- 颜色只能为十六进制\n- 下拉刷新loading的样式，三个小圆点。只有dark和light\n- 上拉触底，距离底部多少时可以请求新的数据，一般不需要修改\n\n\n\n##### tabBar配置\n\n- 底部tabBar\n- 顶部tabBar\n\n注意点：\n\n1. 最少两个，最多五个\n2. 设置顶部时不会显示图标，只有文字\n\n\n\n###### tabBar节点的配置项\n\n![image-20220221075510461](%E5%AD%A6%E4%B9%A0/mdimages/image-20220221075510461.png)\n\n\n\n###### tabBar节点中list的配置项\n\n![image-20220221075519741](%E5%AD%A6%E4%B9%A0/mdimages/image-20220221075519741.png)\n\n- 单独放在 images-tabs-..\n\n- 图标名称包好-active的是选中之后的图标\n\n#### 3）页面配置\n\n- 与全局配置文件的关系\n  - 可以实现每个页面不同的效果\n  - 页面配置不用写window，直接写配置\n- 配置项同app.json\n- 建议下拉刷新放在具体的页面\n\n## 15）数据请求\n\n- 只能请求https类型的接口\n- 必须将接口的域名添加到信任列表\n  - 详情-项目配置-合法域名\n- 配置合法域名-登录后台-开发-开发设置-服务器域名-修改request合法域名\n- 注意事项\n  1. 域名只支持https协议\n  2. 域名不能使用ip地址或localhost\n  3. 域名必须经过ICP备案\n  4. 服务器域名一个月内最多可以申请修改五次\n\n### 1）.发送get请求\n\n```js\n //触摸事件\n    tagFirst: function(e){\n       this.sendget()\n        console.log(e)\n        wx.request({\n            url: 'https://www.escook.cn/api/get',\n            methods:\"GET\",\n            data: {\n              name: \"zs\",\n              age: 20,\n            },\n            success:(res)=>{\n              console.log(res)\n            }\n          })\n    },\n    sendget(){\n        wx.request({\n          url: 'https://devapi.qweather.com/v7/weather/now?',\n          methods:\"GET\",\n          data: {\n            location: \"119.41,30.58\",\n            key: \"03ab5adfffc84f7dbd95c66c53ed6223\",\n          },\n          success:(res)=>{\n            console.log(res)\n          }\n        })\n        \n    },\n        \n        //如果都写在sendget里报错，第二个不在合法域名列表\n```\n\n- 同样get只能用data传参\n- 页面加载需要的数据放在onload里\n\n### 2）.跳过合法域名校验\n\n- http接口的协议\n- 1\n\n#### 方法 \n\n详情-本地设置-不校验合法域名...\n\n--仅仅能在开发调试阶段使用\n\n### 3）跨越和ajax\n\n- 不存在跨域\n\n##### ajax\n\n- 不叫ajax请求，叫网络数据请求\n\n\n\n## 16）视图逻辑\n\n### 1.导航跳转\n\n\n\n1. 声明式导航\n   1. <navigator>\n2. 编程式导航\n   1. 调用小程序的导航api\n\n#### 1.导航页面\n\n###### navigator\n\n- url表示跳转的页面地址\n  - 路径必须以/开头\n- open-type 表示跳转的方式，switchTab--跳转tabBar页面，未写的话无法跳转\n\n```wxml\n<navigator url='/pages/index/index' open-type=\"switchTab\">111\n</navigator>\n```\n\n但是跳转到logs就没效果,即switchTab只能跳tabBaar页面\n\n- 其他页面，open-type:navigate,可以省略不写\n\n###### 后退导航\n\n- open-type:navigateBack\n- delta 表示后退的层级,为数字，默认为1\n\n```wxml\n<navigator open-type='navigateBack' delta=\"1\"></navigator>\n```\n\n###### 指令\n\n1.跳转到普通页面\n\n```js\n wx.navigateTo({\n\n​      url: '../logs/logs'\n\t//success 成功的回调\n    //fail 失败的回调\n   //complete 借口调用结束的回调,成败都会执行\n​     })\n```\n\n2.跳转到tabBar页面\n\n```js\nwx.switchBar({\nurl:'...'\n})\n```\n\n3.后退\n\n```js\nwx.navigateBack({\n    url:\"\",\n    delta:1\n    //默认为1，delta\n    //其他属性同上\n})\n```\n\n#### 2.导航传参\n\n###### 1.声明式导航传参\n\n<navigator url='url?a=1&b=2'></navigator>\n\n###### 2.编程式导航传参\n\n在url参数后面传递参数\n\n```js\nwx.navigateTo({\n    url:\"?a=a&b=2\",\n    delta:1\n    //默认为1，delta\n    //其他属性同上\n})\n```\n\n###### 3.在onload中接收导航参数\n\n- 可以直接在onload中直接拿到\n\n```js\nonload:function(options){\n    console.log(options)\n    //一般这个参数都会转移到data里面\n    //query:{}\n    this.setDate({\n\t\tquery:options,\n\t})\n}\n```\n\n### 2.页面事件\n\n#### 1.下拉刷新事件\n\n定义：下拉滑动操作，重新加载页面数据\n\n使用：\n\n1. ​\t全局开启\n   1. enablePullDownRefresh:true\n   2. 不推荐\n2. 局部开启下拉刷新\n   1. 在页面的json文件中配置\n   2. enablePullDownRefresh:true\n3. 配置样式\n   1. backgroundColor:\"\"  下拉刷新的样式\n   2. backgroundTextStyle:\"dark'   -loadding的样式\n4. 监听下拉刷新事件\n   1. 在内置的onPullDownRefresh\n   2. 刷新时触发的函数\n5. 上拉触底事件\n   1. 通过上拉滑动加载更多的数据--分类上用的较多\n   2. onReachButton() 函数\n   3. 可以调节触底距离，\n      - 可以配置距离\n      - onReachBottomDistance:50px;\n      - 默认为50px\n\n#### 2.\n\n## 17)自定义编译模式\n\n- 优化开发过程\n- 使代码的变化造成的效果以最方便的方式展示在我们面前\n- 普通编译-添加编译模式-\n\n\n\n## 18）生命周期\n\n创建-运行-销毁的整个阶段\n\n### 1.应用生命周期（函数）-小程序\n\n#### 在app.js声明\n\n- onLauch-小程序初始化执行，全局只触发一次\n- onShow-小程序启动，或从后台进入前台触发\n- onHide-小程序从前台进入后台触发\n\n#### 前台和后台\n\n前台：小程序正在运行,home键\n\n后台：调试旁边-切后台\n\n\n\n### 2.页面生命周期(函数)-页面\n\n#### 页面的.js文件\n\n- **onLoad**   \n\n  - options,\n  - 可以在此处获取数据\n  - 只会调用一次\n  - 加载数据，转存参数\n\n- onShow\n\n  - 展示的时候触发\n\n- **onReady**\n\n  - 监听页面初次调用完成，只调用一次\n  - 可以修改，eg:wx.setNavigationBarTitle\n\n- onHide\n\n  - 监听页面隐藏\n\n- onUnload\n\n  - 页面卸载\n\n  注意：onLoad,onReady\n\n  \n\n1\n\n## 19）wxs脚本\n\n定义：小程序独有的脚本语言，结合wxml,可以构建页面的结构\n\n应用场景：wxml里面无法调用页面.js中定义的函数，但是wxml可以调用wxs中定义的函数，典型场景就是过滤器\n\n不改变数据本身，只是在展示时根据需求自定义样式\n\n### 1.wxs与js的区别\n\n- 有自己的数据类型\n  - number,string,boolean,object,function,array,date,regexp\n- 不支持es6\n  - 不支持let,const,结构赋值，对象简写，展开运算符，箭头函数，\n  - 支持var，普通函数写法\n- 支持CommonJs规范\n  - module\n  - require()函数\n  - module.exports对象\n\n### 2.wxs写法\n\n1. 内嵌wxs脚本\n\n   - 必须指定module属性，表示名称\n\n   ```wxml\n   <view>{{m1.toUppper(username)}}</view>\n   \n   <wxs module='m1'>\n   module.exports.toUpperCase(str){\n   \treturn str.toUpperCase()\n   }\n   </wxs>\n   ```\n\n   \n\n2. 外联.wxs-类似于js\n\n   - module 脚本名称\n   - src 路径，必须为相对路径\n\n3. \n\n4. 1\n\n\n\n## 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"微信小程序开发","published":1,"updated":"2025-01-07T02:30:25.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0crc001p572o9p746v9j","content":"<p>第一次对于微信小程序的学习，主要是一些基础语法</p>\n<h1 id=\"微信小程序开发\"><a href=\"#微信小程序开发\" class=\"headerlink\" title=\"微信小程序开发\"></a>微信小程序开发</h1><h2 id=\"1）项目的基本构成\"><a href=\"#1）项目的基本构成\" class=\"headerlink\" title=\"1）项目的基本构成\"></a>1）项目的基本构成</h2><h3 id=\"1-文件作用\"><a href=\"#1-文件作用\" class=\"headerlink\" title=\"1) 文件作用\"></a>1) 文件作用</h3><ol>\n<li><strong>pages存放所有小程序的页面</strong></li>\n<li>utils用来存放工具性质的模块（例如：格式化时间的自定义模板</li>\n<li><strong>app.js 小程序项目的入口文件</strong></li>\n<li><strong>app.json 小程序项目的全局配置</strong></li>\n<li>app.wxss 全局样式文件</li>\n<li>project.config.json项目的配置文件</li>\n<li>sitemap.json 配置小程序及页面是否被微信索引</li>\n</ol>\n<h3 id=\"2）小程序页面的组成部分\"><a href=\"#2）小程序页面的组成部分\" class=\"headerlink\" title=\"2）小程序页面的组成部分\"></a>2）小程序页面的组成部分</h3><ul>\n<li>index.js 数据，时间处理函数</li>\n<li>index.json</li>\n<li>index.wxss</li>\n<li>index.wxml   模板结构</li>\n</ul>\n<h3 id=\"3）-json配置文件的作用\"><a href=\"#3）-json配置文件的作用\" class=\"headerlink\" title=\"3）.json配置文件的作用\"></a>3）.json配置文件的作用</h3><ul>\n<li><p>更目录的app.json文件 -&gt; 全局配置文件</p>\n</li>\n<li><p>根目录中的project.config.json</p>\n</li>\n<li><p>根目录中的sitemap.json</p>\n</li>\n<li><p>每个页面文件夹的.json </p>\n</li>\n<li><p>app.json 全局配置文件</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pages</span>:[] </span><br><span class=\"line\">记录当前小程序所有页面的路径</span><br><span class=\"line\"><span class=\"attr\">window</span>:全局定义小程序所有页面的背景色，文字颜色等</span><br><span class=\"line\"><span class=\"attr\">style</span>:全局定义小程序所使用的样式版本</span><br><span class=\"line\"><span class=\"attr\">sitemapLocation</span>:用来指明sitemap.<span class=\"property\">json</span>的位置</span><br><span class=\"line\"></span><br><span class=\"line\">默认只包含四项内容</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4）project-config-json文件\"><a href=\"#4）project-config-json文件\" class=\"headerlink\" title=\"4）project.config.json文件\"></a>4）project.config.json文件</h3><p>是项目配置文件，用来对小程序开发工具的个性化配置</p>\n<ul>\n<li>setting保存了编译相关的配置</li>\n<li>projectname保存的是项目名称</li>\n<li>appid中保存的是小程序的账号ID</li>\n</ul>\n<h3 id=\"5-sitemap-json文件\"><a href=\"#5-sitemap-json文件\" class=\"headerlink\" title=\"5) sitemap.json文件\"></a>5) sitemap.json文件</h3><p>微信现已开发小程序内搜索，效果类似于网页的SEO.sitemap.json文件用来配置小程序页面是否运行微信索引</p>\n<p>当开发者允许索引时，微信会以爬虫的形式，为小程序的页面内容建立索引，当关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中</p>\n<p>disallow 不允许索引</p>\n<p>allow 允许索引</p>\n<p>注意：清除黄色警告 ….当前页面…被索引</p>\n<p>在project.config.json 中配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">checkSiteMap</span>:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-页面的-json-文件\"><a href=\"#6-页面的-json-文件\" class=\"headerlink\" title=\"6)页面的.json 文件\"></a>6)页面的.json 文件</h3><p>调整首页，即将当前路径改在最前</p>\n<ul>\n<li>wxml (weixin markup language)是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作用类似于网页设计的html</li>\n<li><strong>html 和 wxml 的区别</strong><ol>\n<li>标签名称不同<ul>\n<li>html (div,span,img,a)</li>\n<li>wxml (view ,text,image,navigator)</li>\n</ul>\n</li>\n<li>属性节点不同<ul>\n<li><a href = \"#\"></a>&gt;超链接</li>\n<li><navigator url='/pages/home/home'></navigator></li>\n</ul>\n</li>\n<li>提供了类似Vue的模板语法<ul>\n<li>数据绑定</li>\n<li>列表渲染</li>\n<li>条件渲染</li>\n</ul>\n</li>\n<li>1</li>\n</ol>\n</li>\n<li><strong>wxss 小程序样式语言</strong><ol>\n<li>新增rpx属性单位<ol>\n<li>css里面需要进行像素单位换算，如rem</li>\n<li>wxss在底层支持新的尺寸单位，自动进行样式计算</li>\n</ol>\n</li>\n<li>提供全局样式和局部样式<ol>\n<li>全局wxss</li>\n<li>区别wxss</li>\n</ol>\n</li>\n<li>wxss仅仅支持部分css选择器<ol>\n<li>class ,id</li>\n<li>element</li>\n<li>并集选择器</li>\n<li>::after 和 ::before 等伪类选择器</li>\n</ol>\n</li>\n<li>1</li>\n</ol>\n</li>\n<li>小程序里面的js文件<ol>\n<li>app.js<ol>\n<li>整个小程序的入口文件，调用APP()函数来启动整个小程序</li>\n</ol>\n</li>\n<li>页面的.js文件<ol>\n<li>页面的入口文件，通过调用Page()函数来创建并运行页面</li>\n</ol>\n</li>\n<li>普通的.js文件<ol>\n<li>公共的函数或者属性供使用</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"7）小程序开发宿主环境\"><a href=\"#7）小程序开发宿主环境\" class=\"headerlink\" title=\"7）小程序开发宿主环境\"></a>7）小程序开发宿主环境</h2><p><strong>手机微信是小程序的宿主环境</strong></p>\n<p>……基于微信进行安装……</p>\n<p>小程序借助，微信扫码支付，GPS</p>\n<ul>\n<li>宿主环境提供的内容<ol>\n<li>通信模型</li>\n<li>运行机制</li>\n<li>组件</li>\n<li>API</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"8）通信模型\"><a href=\"#8）通信模型\" class=\"headerlink\" title=\"8）通信模型\"></a>8）通信模型</h2><ul>\n<li>主体包括渲染层和逻辑层<ol>\n<li>WXML模板和WXSS样式工作在<strong>渲染层</strong></li>\n<li>js脚本工作在<strong>逻辑层</strong></li>\n<li>。</li>\n</ol>\n</li>\n<li>通信<ol>\n<li>渲染层和逻辑层之间的通信<ol>\n<li>为微信客户端进行转发</li>\n</ol>\n</li>\n<li>逻辑层和第三方服务器的通信<ol>\n<li>为微信客户端进行转发</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"9）小程序运行机制\"><a href=\"#9）小程序运行机制\" class=\"headerlink\" title=\"9）小程序运行机制\"></a>9）小程序运行机制</h2><ul>\n<li><p>小程序启动的过程</p>\n<ol>\n<li>下载包到本地</li>\n<li>解析全局配置 app.json</li>\n<li>执行app.js入口文件，APP()</li>\n<li>渲染小程序首页</li>\n<li>小程序启动完成</li>\n</ol>\n</li>\n<li><p>页面的 启动</p>\n<ol>\n<li>加载解析页面的.json配置文件，</li>\n<li>加载页面的.wxml模板和.wxss样式</li>\n<li>执行页面的.js文件，执行Page()创建页面实例</li>\n<li>页面渲染完成</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"10-小程序组件的分类\"><a href=\"#10-小程序组件的分类\" class=\"headerlink\" title=\"10).小程序组件的分类\"></a>10).小程序组件的分类</h2><ul>\n<li>小程序的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方吧小程序的组件分为九类<ol>\n<li>视图容器 *</li>\n<li>基础内容 *</li>\n<li>表单组件 *</li>\n<li>导航组件 *</li>\n<li>媒体组件</li>\n<li>map地图组件</li>\n<li>canvas画布组件</li>\n<li>开放能力</li>\n<li>无障碍访问</li>\n<li></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"11-常见的视图容器类组件\"><a href=\"#11-常见的视图容器类组件\" class=\"headerlink\" title=\"11)常见的视图容器类组件\"></a>11)常见的视图容器类组件</h2><ol>\n<li><p>view</p>\n<p>普通视图区域，类似于div,是块级元素，常用来实现页面的布局效果</p>\n</li>\n<li><p>scroll-view</p>\n<p>可滚动的视图区域</p>\n<p>常用来实现滚动列表效果</p>\n</li>\n<li><p>swiper和swiper-item</p>\n<p>轮播图容器和轮播图内容组件</p>\n</li>\n<li><p>view组件的基本使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view class=&#x27;container&#x27;&gt;</span><br><span class=\"line\">\t&lt;view&gt;A&lt;view&gt;</span><br><span class=\"line\">\t&lt;view&gt;B&lt;view&gt;</span><br><span class=\"line\">\t&lt;view&gt;C&lt;view&gt;</span><br><span class=\"line\">&lt;view&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">\tdisplay:flex;</span><br><span class=\"line\">\tjustify-content:space-arround</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container view:nth-child(1)&#123;</span><br><span class=\"line\">\tbackground-color:lightblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>srcoll-view 使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scroll-view class=&quot;scroll&quot; scroll-y&gt;</span><br><span class=\"line\">\t&lt;view&gt;A&lt;/view&gt;</span><br><span class=\"line\">\t&lt;view&gt;&lt;navigator url=&#x27;../index/index&#x27;&gt;B&lt;/navigator&gt;&lt;/view&gt;</span><br><span class=\"line\">\t&lt;view&gt;C&lt;/view&gt;</span><br><span class=\"line\">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.scroll&#123;</span><br><span class=\"line\">    background-color: lightblue;</span><br><span class=\"line\">    /* width: 100px; */</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.scroll view&#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: rgb(167, 64, 64);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.swiper 和 swiper-item的使用</p>\n<ol>\n<li>autoplay</li>\n<li>1</li>\n</ol>\n<p>4.button</p>\n<ol>\n<li>​    size</li>\n<li>plain 镂空</li>\n<li>type primary warn</li>\n<li>open-type 跳转或者获取手机号</li>\n<li>1</li>\n</ol>\n<p>5.image</p>\n<ol>\n<li><p>默认存在大小</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br><image src=\"/images/a.png\"></image><br>&#x2F;&#x2F;  &#x2F;表示根目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   3. 属性</span><br><span class=\"line\"></span><br><span class=\"line\">      1. mode属性-指定裁剪和缩放</span><br><span class=\"line\">         1. 默认值：scaleToFill,不抱持丛横比，填满容器</span><br><span class=\"line\">         2. aspectFit:保持比例，完整显示，但是两边留白</span><br><span class=\"line\">         3. aspectFill:保持短边样式，即水平完整，垂直方向被裁剪</span><br><span class=\"line\">         4. widthFix:宽度不变，高度自适应，即宽度与原本容器的宽度一致</span><br><span class=\"line\">         5. heightFix:高度不变，宽度自适应,即高度与原本容器的宽度一致</span><br><span class=\"line\">      2. 2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 12）小程序API</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t由宿主环境提供</span><br><span class=\"line\"></span><br><span class=\"line\">### api</span><br><span class=\"line\"></span><br><span class=\"line\">1. 事件监听类API</span><br><span class=\"line\">   - 特点：以on开头，用来监听某些事件的触发</span><br><span class=\"line\">   - 举例：wx.onWindowResize(function callback)监听窗口尺寸的大小变换的事件</span><br><span class=\"line\">   - wx相当于window</span><br><span class=\"line\">2. 同步API</span><br><span class=\"line\">   - 以Aync 结尾的API</span><br><span class=\"line\">   - 同步API的执行结果都可以通过函数返回值直接获取，如果执行出错则会抛出异常</span><br><span class=\"line\">   - 举例：wx.setStorageSync(&#x27;key&#x27;,&#x27;value&#x27;)向本地存储中写入内容</span><br><span class=\"line\">3. 异步API</span><br><span class=\"line\">   - 特点：类似于jQuery中的$.ajax(options)函数，需要通过success,fail,complete接收调用的结果</span><br><span class=\"line\">   - 举例：wx.request(options)发起网络数据请求，通过successs回调函数接收数据</span><br><span class=\"line\">4. 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 13) 协同工作和发布</span><br><span class=\"line\"></span><br><span class=\"line\">### 1）了解权限管理需求</span><br><span class=\"line\"></span><br><span class=\"line\">对不同角色，不同岗位的员工的权限进行边界的划分，使其有效的进行协同工作</span><br><span class=\"line\"></span><br><span class=\"line\">### 2）了解项目成员的组织结构</span><br><span class=\"line\"></span><br><span class=\"line\">#### 项目管理者</span><br><span class=\"line\"></span><br><span class=\"line\">统筹整个项目的进展和风险</span><br><span class=\"line\"></span><br><span class=\"line\">1. 产品组</span><br><span class=\"line\">   - 提需求</span><br><span class=\"line\">2. 设计组</span><br><span class=\"line\">   - 出设计方案</span><br><span class=\"line\">3. 开发组</span><br><span class=\"line\">   - 代码开发</span><br><span class=\"line\">4. 测试组</span><br><span class=\"line\">   - 项目测试</span><br><span class=\"line\">5. </span><br><span class=\"line\"></span><br><span class=\"line\"> ### 3）开发流程</span><br><span class=\"line\"></span><br><span class=\"line\">- 产品组--提出需求</span><br><span class=\"line\">  - 设计组--设计</span><br><span class=\"line\">    - 开发组--开发</span><br><span class=\"line\">      - 产品组和设计组--体验</span><br><span class=\"line\">        - 测试组--测试</span><br><span class=\"line\">          - 管理者--发布</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 4）成员管理的两个方面</span><br><span class=\"line\"></span><br><span class=\"line\">#### 管理员</span><br><span class=\"line\"></span><br><span class=\"line\">- 添加删除体验成员</span><br><span class=\"line\"></span><br><span class=\"line\">- 管理所有成员，包括：</span><br><span class=\"line\">  1. 运营者</span><br><span class=\"line\">  2. 开发者</span><br><span class=\"line\">  3. 数据分析者</span><br><span class=\"line\">  4. 以上三者添加删除体验成员</span><br><span class=\"line\"></span><br><span class=\"line\">#### 不同成员对应的权限</span><br><span class=\"line\"></span><br><span class=\"line\">开发者权限：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 开发者权限</span><br><span class=\"line\">   - 对代码进行代码开发</span><br><span class=\"line\">2. 体验者权限</span><br><span class=\"line\">   - 使用体验版小程序</span><br><span class=\"line\">3. 登录，小程序后台</span><br><span class=\"line\">   - 管理后台</span><br><span class=\"line\">4. 开发设置权限</span><br><span class=\"line\">   - 管理设置</span><br><span class=\"line\">5. 腾讯云管理的权限</span><br><span class=\"line\">   - 云开发权限</span><br><span class=\"line\"></span><br><span class=\"line\">#### 添加项目成员和体验成员</span><br><span class=\"line\"></span><br><span class=\"line\">##### 查看小程序运营数据的两种方式</span><br><span class=\"line\"></span><br><span class=\"line\">- 在小程序后台查看\t</span><br><span class=\"line\">  - 登录后台 -统计-tab</span><br><span class=\"line\">- 使用小程序数据助手查看</span><br><span class=\"line\">  - 手机维修 -小程序数据助手 -查看</span><br><span class=\"line\">- 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\">#### 版本管理</span><br><span class=\"line\"></span><br><span class=\"line\">开发编写的为 ：开发版本</span><br><span class=\"line\"></span><br><span class=\"line\">体验版本：体验测试</span><br><span class=\"line\"></span><br><span class=\"line\">审核版本：只能有一部分代码处审核</span><br><span class=\"line\"></span><br><span class=\"line\">线上版本：。。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">小程序开发上线的整体步骤</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 14）模板与配置</span><br><span class=\"line\"></span><br><span class=\"line\">### 1）模板语法</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1）数据绑定</span><br><span class=\"line\"></span><br><span class=\"line\">- 定义数据</span><br><span class=\"line\"></span><br><span class=\"line\">  - Mustache语法</span><br><span class=\"line\"></span><br><span class=\"line\">  ```js</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">          info:&#x27;勇往直前&#x27;</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;text&gt;&#123;&#123;info&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Mustache应用场景<ul>\n<li>绑定内容</li>\n<li>绑定属性</li>\n<li>运算（三元，算术等）</li>\n</ul>\n</li>\n<li>绑定属性</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">imgsrc</span>:<span class=\"string\">&#x27;...&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;image url=&quot;&#123;&#123;imgurl&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>三元运算</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;text&gt;&#123;&#123;num&gt;5?1:0&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>算术运算</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">num</span>:<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">num1</span>:<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"title function_\">toFixed</span>()*<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">&lt;text&gt;&#123;&#123;num*num1&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）事件绑定\"><a href=\"#2）事件绑定\" class=\"headerlink\" title=\"2）事件绑定\"></a>2）事件绑定</h4><h4 id=\"1-常见事件\"><a href=\"#1-常见事件\" class=\"headerlink\" title=\"1.常见事件\"></a>1.常见事件</h4><ol>\n<li>tap 手触摸离开后的<ul>\n<li>bindtap</li>\n<li>bind:tap</li>\n</ul>\n</li>\n<li>input 文本框的输入事件<ul>\n<li>bindinput</li>\n<li>bind:input</li>\n</ul>\n</li>\n<li>状态改变时触发 eg:checkbox<ul>\n<li>bindchange</li>\n<li>bind:change</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"2-事件对象的属性列表\"><a href=\"#2-事件对象的属性列表\" class=\"headerlink\" title=\"2.事件对象的属性列表\"></a>2.事件对象的属性列表</h5><ul>\n<li>type：事件leix</li>\n<li>timeStamp:  interger 数值类型 ，打开到触发的毫秒数</li>\n<li><strong>target</strong> 对象 ，触发事件的组件的一些属性的集合</li>\n<li>cureentTarget object 当前组件的一些属性值集合</li>\n<li><strong>detail</strong>  object 额外的信息</li>\n<li>touches  数组   触摸时间，当前停留在触目点信息的数组，多手指</li>\n<li>changedTouches  array  触摸事件，当前变化的触摸点信息的按钮</li>\n</ul>\n<p><strong>target 和 currentTarget 的区别</strong></p>\n<p>target是触发该事件的源头组件，currentTarget则是当前事件绑定的组件</p>\n<p>eg:事件冒泡，子元素触发父组件的事件，此时target为子元素，currentTarget则是父级</p>\n<h6 id=\"bindtap事件\"><a href=\"#bindtap事件\" class=\"headerlink\" title=\"bindtap事件\"></a>bindtap事件</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">putnum</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">           <span class=\"attr\">count</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">count</span>+<span class=\"number\">1</span></span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap=&#x27;putnum&#x27;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：不能直接（）传递参数，可以直接拿到event，在事件中</li>\n</ul>\n<p>事件传参</p>\n<p>data-*  传递参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap=&#x27;putnum&#x27;&gt;&#123;&#123;count&#125;&#125;&lt;/button data-info=&quot;&#123;&#123;2&#125;&#125;&quot;&gt;</span><br><span class=\"line\">//info为参数的名字</span><br><span class=\"line\">//2为参数的值    </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2 表示数2</li>\n<li>”2“ 表示字符串2</li>\n</ul>\n<p>拿到参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">count</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">count</span>+<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">msg</span>:e.<span class=\"property\">target</span>.<span class=\"property\">dataset</span>.<span class=\"property\">msg</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"comment\">//直接赋值无效</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">msg</span> = e.<span class=\"property\">target</span>.<span class=\"property\">dataset</span>.<span class=\"property\">msg</span>;</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"bindinput事件\"><a href=\"#bindinput事件\" class=\"headerlink\" title=\"bindinput事件\"></a>bindinput事件</h6><p>input 不显示光标 -&gt; 长按</p>\n<p>e.datail.value 拿到input的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;&#123;msg&#125;&#125;&quot; bindinput=&#x27;handleFirst&#x27;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleFirst</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">detail</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">         <span class=\"attr\">count</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">count</span>+<span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"attr\">msg</span>:e.<span class=\"property\">detail</span>.<span class=\"property\">value</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-条件渲染\"><a href=\"#2-条件渲染\" class=\"headerlink\" title=\"2.条件渲染\"></a>2.条件渲染</h4><h6 id=\"wx-if-和wx-elif和wx-else\"><a href=\"#wx-if-和wx-elif和wx-else\" class=\"headerlink\" title=\"wx:if 和wx:elif和wx:else\"></a>wx:if 和wx:elif和wx:else</h6><p>wx：else不写条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:if=&quot;&#123;&#123;isshow&#125;&#125;&quot;&gt;女&lt;/view&gt;</span><br><span class=\"line\">&lt;view wx:else=&quot;&#123;&#123;!isshow&#125;&#125;&quot;&gt;男&lt;/view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//   </span><br><span class=\"line\">&lt;view wx:elif=&quot;&#123;&#123;!isshow&#125;&#125;&quot;&gt;男&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//条件渲染</span></span><br><span class=\"line\">    <span class=\"title function_\">changesex</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">isshow</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">isshow</span>:!<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">isshow</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"block一次性控制多个组件的展示与隐藏\"><a href=\"#block一次性控制多个组件的展示与隐藏\" class=\"headerlink\" title=\"block一次性控制多个组件的展示与隐藏\"></a>block一次性控制多个组件的展示与隐藏</h6><p>只是一个包裹性的容器，不会再页面中做任何渲染</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;block wx:if=&quot;&#123;&#123;rtue&#125;&#125;&quot;&gt;</span><br><span class=\"line\">\t&lt;view&gt;view1&lt;/view&gt;</span><br><span class=\"line\">\t&lt;view&gt;view1&lt;/view&gt;</span><br><span class=\"line\">\t&lt;view&gt;view1&lt;/view&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"hideen属性\"><a href=\"#hideen属性\" class=\"headerlink\" title=\"hideen属性\"></a>hideen属性</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view hidden=&#x27;&#123;&#123;isshow&#125;&#125;&#x27;&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"v-show-和-v-if-的对比\"><a href=\"#v-show-和-v-if-的对比\" class=\"headerlink\" title=\"v-show 和 v-if 的对比\"></a>v-show 和 v-if 的对比</h6><ol>\n<li>运行方式不同<ul>\n<li>if 动态创建和移除元素，控制元素的展示和隐藏</li>\n<li>hidden以切换样式的方式，控制元素的显示和隐藏（display:none&#x2F;block）</li>\n<li>频繁切换使用使用hidden更好</li>\n<li>条件复杂时，使用wx:if</li>\n</ul>\n</li>\n<li>w</li>\n</ol>\n<h5 id=\"3-列表渲染\"><a href=\"#3-列表渲染\" class=\"headerlink\" title=\"3.列表渲染\"></a>3.列表渲染</h5><p>wx:for</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot;&gt;</span><br><span class=\"line\">&#123;&#123;index&#125;&#125;--&#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">list</span>:[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>],</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"自定义索引和元素变量名\"><a href=\"#自定义索引和元素变量名\" class=\"headerlink\" title=\"自定义索引和元素变量名\"></a>自定义索引和元素变量名</h6><ol>\n<li>wx:for-index&#x3D;””</li>\n<li>wx:for-item&#x3D;””</li>\n</ol>\n<h6 id=\"建议绑定key\"><a href=\"#建议绑定key\" class=\"headerlink\" title=\"建议绑定key\"></a>建议绑定key</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:for-index=&quot;id&quot; wx:key=&quot;id&quot;&gt;</span><br><span class=\"line\">&#123;&#123;id&#125;&#125;--&#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">list:[&#123;id:&#x27;1&#x27;,name:&#x27;11&#x27;&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>不需要Mustache语法</p>\n<p>可以直接让index为key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class=\"line\">&#123;&#123;index&#125;&#125;--&#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-样式导入\"><a href=\"#4-样式导入\" class=\"headerlink\" title=\"4.样式导入\"></a>4.样式导入</h5><p>@import ‘….’</p>\n<h5 id=\"5-全局样式和局部样式\"><a href=\"#5-全局样式和局部样式\" class=\"headerlink\" title=\"5.全局样式和局部样式\"></a>5.全局样式和局部样式</h5><p>局部样式只作用当前页面</p>\n<ul>\n<li>当样式冲突时，满足就近原则</li>\n<li>当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局样式</li>\n</ul>\n<h4 id=\"2-全局配置\"><a href=\"#2-全局配置\" class=\"headerlink\" title=\"2)全局配置\"></a>2)全局配置</h4><ul>\n<li>pages<ol>\n<li>记录小程序所有页面的存放路径</li>\n<li></li>\n</ol>\n</li>\n<li>window<ol>\n<li>window全局小程序窗口的外观</li>\n</ol>\n</li>\n<li>tabBar<ol>\n<li>小程序底部的tabBar效果</li>\n</ol>\n</li>\n<li>style<ol>\n<li>是否启用新版的组件样式</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"1-window\"><a href=\"#1-window\" class=\"headerlink\" title=\"1.window\"></a>1.window</h5><ul>\n<li>导航栏<ul>\n<li>navigationBar-window配置</li>\n</ul>\n</li>\n<li>背景区域<ul>\n<li>background-window配置</li>\n</ul>\n</li>\n<li>主体区域</li>\n</ul>\n<h5 id=\"2-window配置\"><a href=\"#2-window配置\" class=\"headerlink\" title=\"2.window配置\"></a>2.window配置</h5><p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20220221073347448.png\" alt=\"image-20220221073347448\"></p>\n<ul>\n<li><p>下拉刷新不能自动合上，需要手动合上。</p>\n</li>\n<li><p>颜色只能为十六进制</p>\n</li>\n<li><p>下拉刷新loading的样式，三个小圆点。只有dark和light</p>\n</li>\n<li><p>上拉触底，距离底部多少时可以请求新的数据，一般不需要修改</p>\n</li>\n</ul>\n<h5 id=\"tabBar配置\"><a href=\"#tabBar配置\" class=\"headerlink\" title=\"tabBar配置\"></a>tabBar配置</h5><ul>\n<li>底部tabBar</li>\n<li>顶部tabBar</li>\n</ul>\n<p>注意点：</p>\n<ol>\n<li>最少两个，最多五个</li>\n<li>设置顶部时不会显示图标，只有文字</li>\n</ol>\n<h6 id=\"tabBar节点的配置项\"><a href=\"#tabBar节点的配置项\" class=\"headerlink\" title=\"tabBar节点的配置项\"></a>tabBar节点的配置项</h6><p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20220221075510461.png\" alt=\"image-20220221075510461\"></p>\n<h6 id=\"tabBar节点中list的配置项\"><a href=\"#tabBar节点中list的配置项\" class=\"headerlink\" title=\"tabBar节点中list的配置项\"></a>tabBar节点中list的配置项</h6><p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20220221075519741.png\" alt=\"image-20220221075519741\"></p>\n<ul>\n<li><p>单独放在 images-tabs-..</p>\n</li>\n<li><p>图标名称包好-active的是选中之后的图标</p>\n</li>\n</ul>\n<h4 id=\"3）页面配置\"><a href=\"#3）页面配置\" class=\"headerlink\" title=\"3）页面配置\"></a>3）页面配置</h4><ul>\n<li>与全局配置文件的关系<ul>\n<li>可以实现每个页面不同的效果</li>\n<li>页面配置不用写window，直接写配置</li>\n</ul>\n</li>\n<li>配置项同app.json</li>\n<li>建议下拉刷新放在具体的页面</li>\n</ul>\n<h2 id=\"15）数据请求\"><a href=\"#15）数据请求\" class=\"headerlink\" title=\"15）数据请求\"></a>15）数据请求</h2><ul>\n<li>只能请求https类型的接口</li>\n<li>必须将接口的域名添加到信任列表<ul>\n<li>详情-项目配置-合法域名</li>\n</ul>\n</li>\n<li>配置合法域名-登录后台-开发-开发设置-服务器域名-修改request合法域名</li>\n<li>注意事项<ol>\n<li>域名只支持https协议</li>\n<li>域名不能使用ip地址或localhost</li>\n<li>域名必须经过ICP备案</li>\n<li>服务器域名一个月内最多可以申请修改五次</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1）-发送get请求\"><a href=\"#1）-发送get请求\" class=\"headerlink\" title=\"1）.发送get请求\"></a>1）.发送get请求</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//触摸事件</span></span><br><span class=\"line\">   <span class=\"attr\">tagFirst</span>: <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">sendget</span>()</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">       wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">           <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://www.escook.cn/api/get&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">methods</span>:<span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">             <span class=\"attr\">name</span>: <span class=\"string\">&quot;zs&quot;</span>,</span><br><span class=\"line\">             <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"attr\">success</span>:<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">             <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"title function_\">sendget</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">         <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://devapi.qweather.com/v7/weather/now?&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">methods</span>:<span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">           <span class=\"attr\">location</span>: <span class=\"string\">&quot;119.41,30.58&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">key</span>: <span class=\"string\">&quot;03ab5adfffc84f7dbd95c66c53ed6223&quot;</span>,</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         <span class=\"attr\">success</span>:<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">           <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//如果都写在sendget里报错，第二个不在合法域名列表</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同样get只能用data传参</li>\n<li>页面加载需要的数据放在onload里</li>\n</ul>\n<h3 id=\"2）-跳过合法域名校验\"><a href=\"#2）-跳过合法域名校验\" class=\"headerlink\" title=\"2）.跳过合法域名校验\"></a>2）.跳过合法域名校验</h3><ul>\n<li>http接口的协议</li>\n<li>1</li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>详情-本地设置-不校验合法域名…</p>\n<p>–仅仅能在开发调试阶段使用</p>\n<h3 id=\"3）跨越和ajax\"><a href=\"#3）跨越和ajax\" class=\"headerlink\" title=\"3）跨越和ajax\"></a>3）跨越和ajax</h3><ul>\n<li>不存在跨域</li>\n</ul>\n<h5 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h5><ul>\n<li>不叫ajax请求，叫网络数据请求</li>\n</ul>\n<h2 id=\"16）视图逻辑\"><a href=\"#16）视图逻辑\" class=\"headerlink\" title=\"16）视图逻辑\"></a>16）视图逻辑</h2><h3 id=\"1-导航跳转\"><a href=\"#1-导航跳转\" class=\"headerlink\" title=\"1.导航跳转\"></a>1.导航跳转</h3><ol>\n<li>声明式导航<ol>\n<li><navigator></li>\n</ol>\n</li>\n<li>编程式导航<ol>\n<li>调用小程序的导航api</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"1-导航页面\"><a href=\"#1-导航页面\" class=\"headerlink\" title=\"1.导航页面\"></a>1.导航页面</h4><h6 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h6><ul>\n<li>url表示跳转的页面地址<ul>\n<li>路径必须以&#x2F;开头</li>\n</ul>\n</li>\n<li>open-type 表示跳转的方式，switchTab–跳转tabBar页面，未写的话无法跳转</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;navigator url=&#x27;/pages/index/index&#x27; open-type=&quot;switchTab&quot;&gt;111</span><br><span class=\"line\">&lt;/navigator&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是跳转到logs就没效果,即switchTab只能跳tabBaar页面</p>\n<ul>\n<li>其他页面，open-type:navigate,可以省略不写</li>\n</ul>\n<h6 id=\"后退导航\"><a href=\"#后退导航\" class=\"headerlink\" title=\"后退导航\"></a>后退导航</h6><ul>\n<li>open-type:navigateBack</li>\n<li>delta 表示后退的层级,为数字，默认为1</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;navigator open-type=&#x27;navigateBack&#x27; delta=&quot;1&quot;&gt;&lt;/navigator&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h6><p>1.跳转到普通页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​      <span class=\"attr\">url</span>: <span class=\"string\">&#x27;../logs/logs&#x27;</span></span><br><span class=\"line\">\t<span class=\"comment\">//success 成功的回调</span></span><br><span class=\"line\">    <span class=\"comment\">//fail 失败的回调</span></span><br><span class=\"line\">   <span class=\"comment\">//complete 借口调用结束的回调,成败都会执行</span></span><br><span class=\"line\">​     &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>2.跳转到tabBar页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">switchBar</span>(&#123;</span><br><span class=\"line\"><span class=\"attr\">url</span>:<span class=\"string\">&#x27;...&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>3.后退</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateBack</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">delta</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">//默认为1，delta</span></span><br><span class=\"line\">    <span class=\"comment\">//其他属性同上</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-导航传参\"><a href=\"#2-导航传参\" class=\"headerlink\" title=\"2.导航传参\"></a>2.导航传参</h4><h6 id=\"1-声明式导航传参\"><a href=\"#1-声明式导航传参\" class=\"headerlink\" title=\"1.声明式导航传参\"></a>1.声明式导航传参</h6><p><navigator url='url?a=1&b=2'></navigator></p>\n<h6 id=\"2-编程式导航传参\"><a href=\"#2-编程式导航传参\" class=\"headerlink\" title=\"2.编程式导航传参\"></a>2.编程式导航传参</h6><p>在url参数后面传递参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;?a=a&amp;b=2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">delta</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">//默认为1，delta</span></span><br><span class=\"line\">    <span class=\"comment\">//其他属性同上</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-在onload中接收导航参数\"><a href=\"#3-在onload中接收导航参数\" class=\"headerlink\" title=\"3.在onload中接收导航参数\"></a>3.在onload中接收导航参数</h6><ul>\n<li>可以直接在onload中直接拿到</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">onload</span>:<span class=\"keyword\">function</span>(<span class=\"params\">options</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(options)</span><br><span class=\"line\">    <span class=\"comment\">//一般这个参数都会转移到data里面</span></span><br><span class=\"line\">    <span class=\"comment\">//query:&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setDate</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">query</span>:options,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-页面事件\"><a href=\"#2-页面事件\" class=\"headerlink\" title=\"2.页面事件\"></a>2.页面事件</h3><h4 id=\"1-下拉刷新事件\"><a href=\"#1-下拉刷新事件\" class=\"headerlink\" title=\"1.下拉刷新事件\"></a>1.下拉刷新事件</h4><p>定义：下拉滑动操作，重新加载页面数据</p>\n<p>使用：</p>\n<ol>\n<li>​    全局开启<ol>\n<li>enablePullDownRefresh:true</li>\n<li>不推荐</li>\n</ol>\n</li>\n<li>局部开启下拉刷新<ol>\n<li>在页面的json文件中配置</li>\n<li>enablePullDownRefresh:true</li>\n</ol>\n</li>\n<li>配置样式<ol>\n<li>backgroundColor:””  下拉刷新的样式</li>\n<li>backgroundTextStyle:”dark’   -loadding的样式</li>\n</ol>\n</li>\n<li>监听下拉刷新事件<ol>\n<li>在内置的onPullDownRefresh</li>\n<li>刷新时触发的函数</li>\n</ol>\n</li>\n<li>上拉触底事件<ol>\n<li>通过上拉滑动加载更多的数据–分类上用的较多</li>\n<li>onReachButton() 函数</li>\n<li>可以调节触底距离，<ul>\n<li>可以配置距离</li>\n<li>onReachBottomDistance:50px;</li>\n<li>默认为50px</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><h2 id=\"17-自定义编译模式\"><a href=\"#17-自定义编译模式\" class=\"headerlink\" title=\"17)自定义编译模式\"></a>17)自定义编译模式</h2><ul>\n<li>优化开发过程</li>\n<li>使代码的变化造成的效果以最方便的方式展示在我们面前</li>\n<li>普通编译-添加编译模式-</li>\n</ul>\n<h2 id=\"18）生命周期\"><a href=\"#18）生命周期\" class=\"headerlink\" title=\"18）生命周期\"></a>18）生命周期</h2><p>创建-运行-销毁的整个阶段</p>\n<h3 id=\"1-应用生命周期（函数）-小程序\"><a href=\"#1-应用生命周期（函数）-小程序\" class=\"headerlink\" title=\"1.应用生命周期（函数）-小程序\"></a>1.应用生命周期（函数）-小程序</h3><h4 id=\"在app-js声明\"><a href=\"#在app-js声明\" class=\"headerlink\" title=\"在app.js声明\"></a>在app.js声明</h4><ul>\n<li>onLauch-小程序初始化执行，全局只触发一次</li>\n<li>onShow-小程序启动，或从后台进入前台触发</li>\n<li>onHide-小程序从前台进入后台触发</li>\n</ul>\n<h4 id=\"前台和后台\"><a href=\"#前台和后台\" class=\"headerlink\" title=\"前台和后台\"></a>前台和后台</h4><p>前台：小程序正在运行,home键</p>\n<p>后台：调试旁边-切后台</p>\n<h3 id=\"2-页面生命周期-函数-页面\"><a href=\"#2-页面生命周期-函数-页面\" class=\"headerlink\" title=\"2.页面生命周期(函数)-页面\"></a>2.页面生命周期(函数)-页面</h3><h4 id=\"页面的-js文件\"><a href=\"#页面的-js文件\" class=\"headerlink\" title=\"页面的.js文件\"></a>页面的.js文件</h4><ul>\n<li><p><strong>onLoad</strong>   </p>\n<ul>\n<li>options,</li>\n<li>可以在此处获取数据</li>\n<li>只会调用一次</li>\n<li>加载数据，转存参数</li>\n</ul>\n</li>\n<li><p>onShow</p>\n<ul>\n<li>展示的时候触发</li>\n</ul>\n</li>\n<li><p><strong>onReady</strong></p>\n<ul>\n<li>监听页面初次调用完成，只调用一次</li>\n<li>可以修改，eg:wx.setNavigationBarTitle</li>\n</ul>\n</li>\n<li><p>onHide</p>\n<ul>\n<li>监听页面隐藏</li>\n</ul>\n</li>\n<li><p>onUnload</p>\n<ul>\n<li>页面卸载</li>\n</ul>\n<p>注意：onLoad,onReady</p>\n</li>\n</ul>\n<p>1</p>\n<h2 id=\"19）wxs脚本\"><a href=\"#19）wxs脚本\" class=\"headerlink\" title=\"19）wxs脚本\"></a>19）wxs脚本</h2><p>定义：小程序独有的脚本语言，结合wxml,可以构建页面的结构</p>\n<p>应用场景：wxml里面无法调用页面.js中定义的函数，但是wxml可以调用wxs中定义的函数，典型场景就是过滤器</p>\n<p>不改变数据本身，只是在展示时根据需求自定义样式</p>\n<h3 id=\"1-wxs与js的区别\"><a href=\"#1-wxs与js的区别\" class=\"headerlink\" title=\"1.wxs与js的区别\"></a>1.wxs与js的区别</h3><ul>\n<li>有自己的数据类型<ul>\n<li>number,string,boolean,object,function,array,date,regexp</li>\n</ul>\n</li>\n<li>不支持es6<ul>\n<li>不支持let,const,结构赋值，对象简写，展开运算符，箭头函数，</li>\n<li>支持var，普通函数写法</li>\n</ul>\n</li>\n<li>支持CommonJs规范<ul>\n<li>module</li>\n<li>require()函数</li>\n<li>module.exports对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-wxs写法\"><a href=\"#2-wxs写法\" class=\"headerlink\" title=\"2.wxs写法\"></a>2.wxs写法</h3><ol>\n<li><p>内嵌wxs脚本</p>\n<ul>\n<li>必须指定module属性，表示名称</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view&gt;&#123;&#123;m1.toUppper(username)&#125;&#125;&lt;/view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;wxs module=&#x27;m1&#x27;&gt;</span><br><span class=\"line\">module.exports.toUpperCase(str)&#123;</span><br><span class=\"line\">\treturn str.toUpperCase()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/wxs&gt;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>外联.wxs-类似于js</p>\n<ul>\n<li>module 脚本名称</li>\n<li>src 路径，必须为相对路径</li>\n</ul>\n</li>\n<li></li>\n<li><p>1</p>\n</li>\n</ol>\n<h2 id=\"20\"><a href=\"#20\" class=\"headerlink\" title=\"20)\"></a>20)</h2>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>第一次对于微信小程序的学习，主要是一些基础语法</p>\n<h1 id=\"微信小程序开发\"><a href=\"#微信小程序开发\" class=\"headerlink\" title=\"微信小程序开发\"></a>微信小程序开发</h1><h2 id=\"1）项目的基本构成\"><a href=\"#1）项目的基本构成\" class=\"headerlink\" title=\"1）项目的基本构成\"></a>1）项目的基本构成</h2><h3 id=\"1-文件作用\"><a href=\"#1-文件作用\" class=\"headerlink\" title=\"1) 文件作用\"></a>1) 文件作用</h3><ol>\n<li><strong>pages存放所有小程序的页面</strong></li>\n<li>utils用来存放工具性质的模块（例如：格式化时间的自定义模板</li>\n<li><strong>app.js 小程序项目的入口文件</strong></li>\n<li><strong>app.json 小程序项目的全局配置</strong></li>\n<li>app.wxss 全局样式文件</li>\n<li>project.config.json项目的配置文件</li>\n<li>sitemap.json 配置小程序及页面是否被微信索引</li>\n</ol>\n<h3 id=\"2）小程序页面的组成部分\"><a href=\"#2）小程序页面的组成部分\" class=\"headerlink\" title=\"2）小程序页面的组成部分\"></a>2）小程序页面的组成部分</h3><ul>\n<li>index.js 数据，时间处理函数</li>\n<li>index.json</li>\n<li>index.wxss</li>\n<li>index.wxml   模板结构</li>\n</ul>\n<h3 id=\"3）-json配置文件的作用\"><a href=\"#3）-json配置文件的作用\" class=\"headerlink\" title=\"3）.json配置文件的作用\"></a>3）.json配置文件的作用</h3><ul>\n<li><p>更目录的app.json文件 -&gt; 全局配置文件</p>\n</li>\n<li><p>根目录中的project.config.json</p>\n</li>\n<li><p>根目录中的sitemap.json</p>\n</li>\n<li><p>每个页面文件夹的.json </p>\n</li>\n<li><p>app.json 全局配置文件</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pages</span>:[] </span><br><span class=\"line\">记录当前小程序所有页面的路径</span><br><span class=\"line\"><span class=\"attr\">window</span>:全局定义小程序所有页面的背景色，文字颜色等</span><br><span class=\"line\"><span class=\"attr\">style</span>:全局定义小程序所使用的样式版本</span><br><span class=\"line\"><span class=\"attr\">sitemapLocation</span>:用来指明sitemap.<span class=\"property\">json</span>的位置</span><br><span class=\"line\"></span><br><span class=\"line\">默认只包含四项内容</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4）project-config-json文件\"><a href=\"#4）project-config-json文件\" class=\"headerlink\" title=\"4）project.config.json文件\"></a>4）project.config.json文件</h3><p>是项目配置文件，用来对小程序开发工具的个性化配置</p>\n<ul>\n<li>setting保存了编译相关的配置</li>\n<li>projectname保存的是项目名称</li>\n<li>appid中保存的是小程序的账号ID</li>\n</ul>\n<h3 id=\"5-sitemap-json文件\"><a href=\"#5-sitemap-json文件\" class=\"headerlink\" title=\"5) sitemap.json文件\"></a>5) sitemap.json文件</h3><p>微信现已开发小程序内搜索，效果类似于网页的SEO.sitemap.json文件用来配置小程序页面是否运行微信索引</p>\n<p>当开发者允许索引时，微信会以爬虫的形式，为小程序的页面内容建立索引，当关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中</p>\n<p>disallow 不允许索引</p>\n<p>allow 允许索引</p>\n<p>注意：清除黄色警告 ….当前页面…被索引</p>\n<p>在project.config.json 中配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">checkSiteMap</span>:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-页面的-json-文件\"><a href=\"#6-页面的-json-文件\" class=\"headerlink\" title=\"6)页面的.json 文件\"></a>6)页面的.json 文件</h3><p>调整首页，即将当前路径改在最前</p>\n<ul>\n<li>wxml (weixin markup language)是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作用类似于网页设计的html</li>\n<li><strong>html 和 wxml 的区别</strong><ol>\n<li>标签名称不同<ul>\n<li>html (div,span,img,a)</li>\n<li>wxml (view ,text,image,navigator)</li>\n</ul>\n</li>\n<li>属性节点不同<ul>\n<li><a href = \"#\"></a>&gt;超链接</li>\n<li><navigator url='/pages/home/home'></navigator></li>\n</ul>\n</li>\n<li>提供了类似Vue的模板语法<ul>\n<li>数据绑定</li>\n<li>列表渲染</li>\n<li>条件渲染</li>\n</ul>\n</li>\n<li>1</li>\n</ol>\n</li>\n<li><strong>wxss 小程序样式语言</strong><ol>\n<li>新增rpx属性单位<ol>\n<li>css里面需要进行像素单位换算，如rem</li>\n<li>wxss在底层支持新的尺寸单位，自动进行样式计算</li>\n</ol>\n</li>\n<li>提供全局样式和局部样式<ol>\n<li>全局wxss</li>\n<li>区别wxss</li>\n</ol>\n</li>\n<li>wxss仅仅支持部分css选择器<ol>\n<li>class ,id</li>\n<li>element</li>\n<li>并集选择器</li>\n<li>::after 和 ::before 等伪类选择器</li>\n</ol>\n</li>\n<li>1</li>\n</ol>\n</li>\n<li>小程序里面的js文件<ol>\n<li>app.js<ol>\n<li>整个小程序的入口文件，调用APP()函数来启动整个小程序</li>\n</ol>\n</li>\n<li>页面的.js文件<ol>\n<li>页面的入口文件，通过调用Page()函数来创建并运行页面</li>\n</ol>\n</li>\n<li>普通的.js文件<ol>\n<li>公共的函数或者属性供使用</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"7）小程序开发宿主环境\"><a href=\"#7）小程序开发宿主环境\" class=\"headerlink\" title=\"7）小程序开发宿主环境\"></a>7）小程序开发宿主环境</h2><p><strong>手机微信是小程序的宿主环境</strong></p>\n<p>……基于微信进行安装……</p>\n<p>小程序借助，微信扫码支付，GPS</p>\n<ul>\n<li>宿主环境提供的内容<ol>\n<li>通信模型</li>\n<li>运行机制</li>\n<li>组件</li>\n<li>API</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"8）通信模型\"><a href=\"#8）通信模型\" class=\"headerlink\" title=\"8）通信模型\"></a>8）通信模型</h2><ul>\n<li>主体包括渲染层和逻辑层<ol>\n<li>WXML模板和WXSS样式工作在<strong>渲染层</strong></li>\n<li>js脚本工作在<strong>逻辑层</strong></li>\n<li>。</li>\n</ol>\n</li>\n<li>通信<ol>\n<li>渲染层和逻辑层之间的通信<ol>\n<li>为微信客户端进行转发</li>\n</ol>\n</li>\n<li>逻辑层和第三方服务器的通信<ol>\n<li>为微信客户端进行转发</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"9）小程序运行机制\"><a href=\"#9）小程序运行机制\" class=\"headerlink\" title=\"9）小程序运行机制\"></a>9）小程序运行机制</h2><ul>\n<li><p>小程序启动的过程</p>\n<ol>\n<li>下载包到本地</li>\n<li>解析全局配置 app.json</li>\n<li>执行app.js入口文件，APP()</li>\n<li>渲染小程序首页</li>\n<li>小程序启动完成</li>\n</ol>\n</li>\n<li><p>页面的 启动</p>\n<ol>\n<li>加载解析页面的.json配置文件，</li>\n<li>加载页面的.wxml模板和.wxss样式</li>\n<li>执行页面的.js文件，执行Page()创建页面实例</li>\n<li>页面渲染完成</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"10-小程序组件的分类\"><a href=\"#10-小程序组件的分类\" class=\"headerlink\" title=\"10).小程序组件的分类\"></a>10).小程序组件的分类</h2><ul>\n<li>小程序的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方吧小程序的组件分为九类<ol>\n<li>视图容器 *</li>\n<li>基础内容 *</li>\n<li>表单组件 *</li>\n<li>导航组件 *</li>\n<li>媒体组件</li>\n<li>map地图组件</li>\n<li>canvas画布组件</li>\n<li>开放能力</li>\n<li>无障碍访问</li>\n<li></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"11-常见的视图容器类组件\"><a href=\"#11-常见的视图容器类组件\" class=\"headerlink\" title=\"11)常见的视图容器类组件\"></a>11)常见的视图容器类组件</h2><ol>\n<li><p>view</p>\n<p>普通视图区域，类似于div,是块级元素，常用来实现页面的布局效果</p>\n</li>\n<li><p>scroll-view</p>\n<p>可滚动的视图区域</p>\n<p>常用来实现滚动列表效果</p>\n</li>\n<li><p>swiper和swiper-item</p>\n<p>轮播图容器和轮播图内容组件</p>\n</li>\n<li><p>view组件的基本使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view class=&#x27;container&#x27;&gt;</span><br><span class=\"line\">\t&lt;view&gt;A&lt;view&gt;</span><br><span class=\"line\">\t&lt;view&gt;B&lt;view&gt;</span><br><span class=\"line\">\t&lt;view&gt;C&lt;view&gt;</span><br><span class=\"line\">&lt;view&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container&#123;</span><br><span class=\"line\">\tdisplay:flex;</span><br><span class=\"line\">\tjustify-content:space-arround</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container view:nth-child(1)&#123;</span><br><span class=\"line\">\tbackground-color:lightblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>srcoll-view 使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scroll-view class=&quot;scroll&quot; scroll-y&gt;</span><br><span class=\"line\">\t&lt;view&gt;A&lt;/view&gt;</span><br><span class=\"line\">\t&lt;view&gt;&lt;navigator url=&#x27;../index/index&#x27;&gt;B&lt;/navigator&gt;&lt;/view&gt;</span><br><span class=\"line\">\t&lt;view&gt;C&lt;/view&gt;</span><br><span class=\"line\">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.scroll&#123;</span><br><span class=\"line\">    background-color: lightblue;</span><br><span class=\"line\">    /* width: 100px; */</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.scroll view&#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    background-color: rgb(167, 64, 64);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.swiper 和 swiper-item的使用</p>\n<ol>\n<li>autoplay</li>\n<li>1</li>\n</ol>\n<p>4.button</p>\n<ol>\n<li>​    size</li>\n<li>plain 镂空</li>\n<li>type primary warn</li>\n<li>open-type 跳转或者获取手机号</li>\n<li>1</li>\n</ol>\n<p>5.image</p>\n<ol>\n<li><p>默认存在大小</p>\n</li>\n<li><p>&#96;&#96;&#96;js<br><image src=\"/images/a.png\"></image><br>&#x2F;&#x2F;  &#x2F;表示根目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   3. 属性</span><br><span class=\"line\"></span><br><span class=\"line\">      1. mode属性-指定裁剪和缩放</span><br><span class=\"line\">         1. 默认值：scaleToFill,不抱持丛横比，填满容器</span><br><span class=\"line\">         2. aspectFit:保持比例，完整显示，但是两边留白</span><br><span class=\"line\">         3. aspectFill:保持短边样式，即水平完整，垂直方向被裁剪</span><br><span class=\"line\">         4. widthFix:宽度不变，高度自适应，即宽度与原本容器的宽度一致</span><br><span class=\"line\">         5. heightFix:高度不变，宽度自适应,即高度与原本容器的宽度一致</span><br><span class=\"line\">      2. 2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 12）小程序API</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t由宿主环境提供</span><br><span class=\"line\"></span><br><span class=\"line\">### api</span><br><span class=\"line\"></span><br><span class=\"line\">1. 事件监听类API</span><br><span class=\"line\">   - 特点：以on开头，用来监听某些事件的触发</span><br><span class=\"line\">   - 举例：wx.onWindowResize(function callback)监听窗口尺寸的大小变换的事件</span><br><span class=\"line\">   - wx相当于window</span><br><span class=\"line\">2. 同步API</span><br><span class=\"line\">   - 以Aync 结尾的API</span><br><span class=\"line\">   - 同步API的执行结果都可以通过函数返回值直接获取，如果执行出错则会抛出异常</span><br><span class=\"line\">   - 举例：wx.setStorageSync(&#x27;key&#x27;,&#x27;value&#x27;)向本地存储中写入内容</span><br><span class=\"line\">3. 异步API</span><br><span class=\"line\">   - 特点：类似于jQuery中的$.ajax(options)函数，需要通过success,fail,complete接收调用的结果</span><br><span class=\"line\">   - 举例：wx.request(options)发起网络数据请求，通过successs回调函数接收数据</span><br><span class=\"line\">4. 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 13) 协同工作和发布</span><br><span class=\"line\"></span><br><span class=\"line\">### 1）了解权限管理需求</span><br><span class=\"line\"></span><br><span class=\"line\">对不同角色，不同岗位的员工的权限进行边界的划分，使其有效的进行协同工作</span><br><span class=\"line\"></span><br><span class=\"line\">### 2）了解项目成员的组织结构</span><br><span class=\"line\"></span><br><span class=\"line\">#### 项目管理者</span><br><span class=\"line\"></span><br><span class=\"line\">统筹整个项目的进展和风险</span><br><span class=\"line\"></span><br><span class=\"line\">1. 产品组</span><br><span class=\"line\">   - 提需求</span><br><span class=\"line\">2. 设计组</span><br><span class=\"line\">   - 出设计方案</span><br><span class=\"line\">3. 开发组</span><br><span class=\"line\">   - 代码开发</span><br><span class=\"line\">4. 测试组</span><br><span class=\"line\">   - 项目测试</span><br><span class=\"line\">5. </span><br><span class=\"line\"></span><br><span class=\"line\"> ### 3）开发流程</span><br><span class=\"line\"></span><br><span class=\"line\">- 产品组--提出需求</span><br><span class=\"line\">  - 设计组--设计</span><br><span class=\"line\">    - 开发组--开发</span><br><span class=\"line\">      - 产品组和设计组--体验</span><br><span class=\"line\">        - 测试组--测试</span><br><span class=\"line\">          - 管理者--发布</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 4）成员管理的两个方面</span><br><span class=\"line\"></span><br><span class=\"line\">#### 管理员</span><br><span class=\"line\"></span><br><span class=\"line\">- 添加删除体验成员</span><br><span class=\"line\"></span><br><span class=\"line\">- 管理所有成员，包括：</span><br><span class=\"line\">  1. 运营者</span><br><span class=\"line\">  2. 开发者</span><br><span class=\"line\">  3. 数据分析者</span><br><span class=\"line\">  4. 以上三者添加删除体验成员</span><br><span class=\"line\"></span><br><span class=\"line\">#### 不同成员对应的权限</span><br><span class=\"line\"></span><br><span class=\"line\">开发者权限：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 开发者权限</span><br><span class=\"line\">   - 对代码进行代码开发</span><br><span class=\"line\">2. 体验者权限</span><br><span class=\"line\">   - 使用体验版小程序</span><br><span class=\"line\">3. 登录，小程序后台</span><br><span class=\"line\">   - 管理后台</span><br><span class=\"line\">4. 开发设置权限</span><br><span class=\"line\">   - 管理设置</span><br><span class=\"line\">5. 腾讯云管理的权限</span><br><span class=\"line\">   - 云开发权限</span><br><span class=\"line\"></span><br><span class=\"line\">#### 添加项目成员和体验成员</span><br><span class=\"line\"></span><br><span class=\"line\">##### 查看小程序运营数据的两种方式</span><br><span class=\"line\"></span><br><span class=\"line\">- 在小程序后台查看\t</span><br><span class=\"line\">  - 登录后台 -统计-tab</span><br><span class=\"line\">- 使用小程序数据助手查看</span><br><span class=\"line\">  - 手机维修 -小程序数据助手 -查看</span><br><span class=\"line\">- 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\">#### 版本管理</span><br><span class=\"line\"></span><br><span class=\"line\">开发编写的为 ：开发版本</span><br><span class=\"line\"></span><br><span class=\"line\">体验版本：体验测试</span><br><span class=\"line\"></span><br><span class=\"line\">审核版本：只能有一部分代码处审核</span><br><span class=\"line\"></span><br><span class=\"line\">线上版本：。。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">小程序开发上线的整体步骤</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 14）模板与配置</span><br><span class=\"line\"></span><br><span class=\"line\">### 1）模板语法</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1）数据绑定</span><br><span class=\"line\"></span><br><span class=\"line\">- 定义数据</span><br><span class=\"line\"></span><br><span class=\"line\">  - Mustache语法</span><br><span class=\"line\"></span><br><span class=\"line\">  ```js</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">          info:&#x27;勇往直前&#x27;</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;text&gt;&#123;&#123;info&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Mustache应用场景<ul>\n<li>绑定内容</li>\n<li>绑定属性</li>\n<li>运算（三元，算术等）</li>\n</ul>\n</li>\n<li>绑定属性</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">imgsrc</span>:<span class=\"string\">&#x27;...&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;image url=&quot;&#123;&#123;imgurl&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>三元运算</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;text&gt;&#123;&#123;num&gt;5?1:0&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>算术运算</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">num</span>:<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">num1</span>:<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"title function_\">toFixed</span>()*<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">&lt;text&gt;&#123;&#123;num*num1&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）事件绑定\"><a href=\"#2）事件绑定\" class=\"headerlink\" title=\"2）事件绑定\"></a>2）事件绑定</h4><h4 id=\"1-常见事件\"><a href=\"#1-常见事件\" class=\"headerlink\" title=\"1.常见事件\"></a>1.常见事件</h4><ol>\n<li>tap 手触摸离开后的<ul>\n<li>bindtap</li>\n<li>bind:tap</li>\n</ul>\n</li>\n<li>input 文本框的输入事件<ul>\n<li>bindinput</li>\n<li>bind:input</li>\n</ul>\n</li>\n<li>状态改变时触发 eg:checkbox<ul>\n<li>bindchange</li>\n<li>bind:change</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"2-事件对象的属性列表\"><a href=\"#2-事件对象的属性列表\" class=\"headerlink\" title=\"2.事件对象的属性列表\"></a>2.事件对象的属性列表</h5><ul>\n<li>type：事件leix</li>\n<li>timeStamp:  interger 数值类型 ，打开到触发的毫秒数</li>\n<li><strong>target</strong> 对象 ，触发事件的组件的一些属性的集合</li>\n<li>cureentTarget object 当前组件的一些属性值集合</li>\n<li><strong>detail</strong>  object 额外的信息</li>\n<li>touches  数组   触摸时间，当前停留在触目点信息的数组，多手指</li>\n<li>changedTouches  array  触摸事件，当前变化的触摸点信息的按钮</li>\n</ul>\n<p><strong>target 和 currentTarget 的区别</strong></p>\n<p>target是触发该事件的源头组件，currentTarget则是当前事件绑定的组件</p>\n<p>eg:事件冒泡，子元素触发父组件的事件，此时target为子元素，currentTarget则是父级</p>\n<h6 id=\"bindtap事件\"><a href=\"#bindtap事件\" class=\"headerlink\" title=\"bindtap事件\"></a>bindtap事件</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">putnum</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">           <span class=\"attr\">count</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">count</span>+<span class=\"number\">1</span></span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap=&#x27;putnum&#x27;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：不能直接（）传递参数，可以直接拿到event，在事件中</li>\n</ul>\n<p>事件传参</p>\n<p>data-*  传递参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap=&#x27;putnum&#x27;&gt;&#123;&#123;count&#125;&#125;&lt;/button data-info=&quot;&#123;&#123;2&#125;&#125;&quot;&gt;</span><br><span class=\"line\">//info为参数的名字</span><br><span class=\"line\">//2为参数的值    </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2 表示数2</li>\n<li>”2“ 表示字符串2</li>\n</ul>\n<p>拿到参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">count</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">count</span>+<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">msg</span>:e.<span class=\"property\">target</span>.<span class=\"property\">dataset</span>.<span class=\"property\">msg</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"comment\">//直接赋值无效</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">msg</span> = e.<span class=\"property\">target</span>.<span class=\"property\">dataset</span>.<span class=\"property\">msg</span>;</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"bindinput事件\"><a href=\"#bindinput事件\" class=\"headerlink\" title=\"bindinput事件\"></a>bindinput事件</h6><p>input 不显示光标 -&gt; 长按</p>\n<p>e.datail.value 拿到input的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&#123;&#123;msg&#125;&#125;&quot; bindinput=&#x27;handleFirst&#x27;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleFirst</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">detail</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">         <span class=\"attr\">count</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">count</span>+<span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"attr\">msg</span>:e.<span class=\"property\">detail</span>.<span class=\"property\">value</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-条件渲染\"><a href=\"#2-条件渲染\" class=\"headerlink\" title=\"2.条件渲染\"></a>2.条件渲染</h4><h6 id=\"wx-if-和wx-elif和wx-else\"><a href=\"#wx-if-和wx-elif和wx-else\" class=\"headerlink\" title=\"wx:if 和wx:elif和wx:else\"></a>wx:if 和wx:elif和wx:else</h6><p>wx：else不写条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:if=&quot;&#123;&#123;isshow&#125;&#125;&quot;&gt;女&lt;/view&gt;</span><br><span class=\"line\">&lt;view wx:else=&quot;&#123;&#123;!isshow&#125;&#125;&quot;&gt;男&lt;/view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//   </span><br><span class=\"line\">&lt;view wx:elif=&quot;&#123;&#123;!isshow&#125;&#125;&quot;&gt;男&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//条件渲染</span></span><br><span class=\"line\">    <span class=\"title function_\">changesex</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">isshow</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">isshow</span>:!<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">isshow</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"block一次性控制多个组件的展示与隐藏\"><a href=\"#block一次性控制多个组件的展示与隐藏\" class=\"headerlink\" title=\"block一次性控制多个组件的展示与隐藏\"></a>block一次性控制多个组件的展示与隐藏</h6><p>只是一个包裹性的容器，不会再页面中做任何渲染</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;block wx:if=&quot;&#123;&#123;rtue&#125;&#125;&quot;&gt;</span><br><span class=\"line\">\t&lt;view&gt;view1&lt;/view&gt;</span><br><span class=\"line\">\t&lt;view&gt;view1&lt;/view&gt;</span><br><span class=\"line\">\t&lt;view&gt;view1&lt;/view&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"hideen属性\"><a href=\"#hideen属性\" class=\"headerlink\" title=\"hideen属性\"></a>hideen属性</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view hidden=&#x27;&#123;&#123;isshow&#125;&#125;&#x27;&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"v-show-和-v-if-的对比\"><a href=\"#v-show-和-v-if-的对比\" class=\"headerlink\" title=\"v-show 和 v-if 的对比\"></a>v-show 和 v-if 的对比</h6><ol>\n<li>运行方式不同<ul>\n<li>if 动态创建和移除元素，控制元素的展示和隐藏</li>\n<li>hidden以切换样式的方式，控制元素的显示和隐藏（display:none&#x2F;block）</li>\n<li>频繁切换使用使用hidden更好</li>\n<li>条件复杂时，使用wx:if</li>\n</ul>\n</li>\n<li>w</li>\n</ol>\n<h5 id=\"3-列表渲染\"><a href=\"#3-列表渲染\" class=\"headerlink\" title=\"3.列表渲染\"></a>3.列表渲染</h5><p>wx:for</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot;&gt;</span><br><span class=\"line\">&#123;&#123;index&#125;&#125;--&#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">list</span>:[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>],</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"自定义索引和元素变量名\"><a href=\"#自定义索引和元素变量名\" class=\"headerlink\" title=\"自定义索引和元素变量名\"></a>自定义索引和元素变量名</h6><ol>\n<li>wx:for-index&#x3D;””</li>\n<li>wx:for-item&#x3D;””</li>\n</ol>\n<h6 id=\"建议绑定key\"><a href=\"#建议绑定key\" class=\"headerlink\" title=\"建议绑定key\"></a>建议绑定key</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:for-index=&quot;id&quot; wx:key=&quot;id&quot;&gt;</span><br><span class=\"line\">&#123;&#123;id&#125;&#125;--&#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">list:[&#123;id:&#x27;1&#x27;,name:&#x27;11&#x27;&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>不需要Mustache语法</p>\n<p>可以直接让index为key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class=\"line\">&#123;&#123;index&#125;&#125;--&#123;&#123;item&#125;&#125;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-样式导入\"><a href=\"#4-样式导入\" class=\"headerlink\" title=\"4.样式导入\"></a>4.样式导入</h5><p>@import ‘….’</p>\n<h5 id=\"5-全局样式和局部样式\"><a href=\"#5-全局样式和局部样式\" class=\"headerlink\" title=\"5.全局样式和局部样式\"></a>5.全局样式和局部样式</h5><p>局部样式只作用当前页面</p>\n<ul>\n<li>当样式冲突时，满足就近原则</li>\n<li>当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局样式</li>\n</ul>\n<h4 id=\"2-全局配置\"><a href=\"#2-全局配置\" class=\"headerlink\" title=\"2)全局配置\"></a>2)全局配置</h4><ul>\n<li>pages<ol>\n<li>记录小程序所有页面的存放路径</li>\n<li></li>\n</ol>\n</li>\n<li>window<ol>\n<li>window全局小程序窗口的外观</li>\n</ol>\n</li>\n<li>tabBar<ol>\n<li>小程序底部的tabBar效果</li>\n</ol>\n</li>\n<li>style<ol>\n<li>是否启用新版的组件样式</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"1-window\"><a href=\"#1-window\" class=\"headerlink\" title=\"1.window\"></a>1.window</h5><ul>\n<li>导航栏<ul>\n<li>navigationBar-window配置</li>\n</ul>\n</li>\n<li>背景区域<ul>\n<li>background-window配置</li>\n</ul>\n</li>\n<li>主体区域</li>\n</ul>\n<h5 id=\"2-window配置\"><a href=\"#2-window配置\" class=\"headerlink\" title=\"2.window配置\"></a>2.window配置</h5><p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20220221073347448.png\" alt=\"image-20220221073347448\"></p>\n<ul>\n<li><p>下拉刷新不能自动合上，需要手动合上。</p>\n</li>\n<li><p>颜色只能为十六进制</p>\n</li>\n<li><p>下拉刷新loading的样式，三个小圆点。只有dark和light</p>\n</li>\n<li><p>上拉触底，距离底部多少时可以请求新的数据，一般不需要修改</p>\n</li>\n</ul>\n<h5 id=\"tabBar配置\"><a href=\"#tabBar配置\" class=\"headerlink\" title=\"tabBar配置\"></a>tabBar配置</h5><ul>\n<li>底部tabBar</li>\n<li>顶部tabBar</li>\n</ul>\n<p>注意点：</p>\n<ol>\n<li>最少两个，最多五个</li>\n<li>设置顶部时不会显示图标，只有文字</li>\n</ol>\n<h6 id=\"tabBar节点的配置项\"><a href=\"#tabBar节点的配置项\" class=\"headerlink\" title=\"tabBar节点的配置项\"></a>tabBar节点的配置项</h6><p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20220221075510461.png\" alt=\"image-20220221075510461\"></p>\n<h6 id=\"tabBar节点中list的配置项\"><a href=\"#tabBar节点中list的配置项\" class=\"headerlink\" title=\"tabBar节点中list的配置项\"></a>tabBar节点中list的配置项</h6><p><img src=\"/codefish/%E5%AD%A6%E4%B9%A0/mdimages/image-20220221075519741.png\" alt=\"image-20220221075519741\"></p>\n<ul>\n<li><p>单独放在 images-tabs-..</p>\n</li>\n<li><p>图标名称包好-active的是选中之后的图标</p>\n</li>\n</ul>\n<h4 id=\"3）页面配置\"><a href=\"#3）页面配置\" class=\"headerlink\" title=\"3）页面配置\"></a>3）页面配置</h4><ul>\n<li>与全局配置文件的关系<ul>\n<li>可以实现每个页面不同的效果</li>\n<li>页面配置不用写window，直接写配置</li>\n</ul>\n</li>\n<li>配置项同app.json</li>\n<li>建议下拉刷新放在具体的页面</li>\n</ul>\n<h2 id=\"15）数据请求\"><a href=\"#15）数据请求\" class=\"headerlink\" title=\"15）数据请求\"></a>15）数据请求</h2><ul>\n<li>只能请求https类型的接口</li>\n<li>必须将接口的域名添加到信任列表<ul>\n<li>详情-项目配置-合法域名</li>\n</ul>\n</li>\n<li>配置合法域名-登录后台-开发-开发设置-服务器域名-修改request合法域名</li>\n<li>注意事项<ol>\n<li>域名只支持https协议</li>\n<li>域名不能使用ip地址或localhost</li>\n<li>域名必须经过ICP备案</li>\n<li>服务器域名一个月内最多可以申请修改五次</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1）-发送get请求\"><a href=\"#1）-发送get请求\" class=\"headerlink\" title=\"1）.发送get请求\"></a>1）.发送get请求</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//触摸事件</span></span><br><span class=\"line\">   <span class=\"attr\">tagFirst</span>: <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">sendget</span>()</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">       wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">           <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://www.escook.cn/api/get&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">methods</span>:<span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">             <span class=\"attr\">name</span>: <span class=\"string\">&quot;zs&quot;</span>,</span><br><span class=\"line\">             <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"attr\">success</span>:<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">             <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"title function_\">sendget</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">         <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://devapi.qweather.com/v7/weather/now?&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">methods</span>:<span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">         <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">           <span class=\"attr\">location</span>: <span class=\"string\">&quot;119.41,30.58&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">key</span>: <span class=\"string\">&quot;03ab5adfffc84f7dbd95c66c53ed6223&quot;</span>,</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         <span class=\"attr\">success</span>:<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">           <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//如果都写在sendget里报错，第二个不在合法域名列表</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同样get只能用data传参</li>\n<li>页面加载需要的数据放在onload里</li>\n</ul>\n<h3 id=\"2）-跳过合法域名校验\"><a href=\"#2）-跳过合法域名校验\" class=\"headerlink\" title=\"2）.跳过合法域名校验\"></a>2）.跳过合法域名校验</h3><ul>\n<li>http接口的协议</li>\n<li>1</li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>详情-本地设置-不校验合法域名…</p>\n<p>–仅仅能在开发调试阶段使用</p>\n<h3 id=\"3）跨越和ajax\"><a href=\"#3）跨越和ajax\" class=\"headerlink\" title=\"3）跨越和ajax\"></a>3）跨越和ajax</h3><ul>\n<li>不存在跨域</li>\n</ul>\n<h5 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h5><ul>\n<li>不叫ajax请求，叫网络数据请求</li>\n</ul>\n<h2 id=\"16）视图逻辑\"><a href=\"#16）视图逻辑\" class=\"headerlink\" title=\"16）视图逻辑\"></a>16）视图逻辑</h2><h3 id=\"1-导航跳转\"><a href=\"#1-导航跳转\" class=\"headerlink\" title=\"1.导航跳转\"></a>1.导航跳转</h3><ol>\n<li>声明式导航<ol>\n<li><navigator></li>\n</ol>\n</li>\n<li>编程式导航<ol>\n<li>调用小程序的导航api</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"1-导航页面\"><a href=\"#1-导航页面\" class=\"headerlink\" title=\"1.导航页面\"></a>1.导航页面</h4><h6 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h6><ul>\n<li>url表示跳转的页面地址<ul>\n<li>路径必须以&#x2F;开头</li>\n</ul>\n</li>\n<li>open-type 表示跳转的方式，switchTab–跳转tabBar页面，未写的话无法跳转</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;navigator url=&#x27;/pages/index/index&#x27; open-type=&quot;switchTab&quot;&gt;111</span><br><span class=\"line\">&lt;/navigator&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是跳转到logs就没效果,即switchTab只能跳tabBaar页面</p>\n<ul>\n<li>其他页面，open-type:navigate,可以省略不写</li>\n</ul>\n<h6 id=\"后退导航\"><a href=\"#后退导航\" class=\"headerlink\" title=\"后退导航\"></a>后退导航</h6><ul>\n<li>open-type:navigateBack</li>\n<li>delta 表示后退的层级,为数字，默认为1</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;navigator open-type=&#x27;navigateBack&#x27; delta=&quot;1&quot;&gt;&lt;/navigator&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h6><p>1.跳转到普通页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​      <span class=\"attr\">url</span>: <span class=\"string\">&#x27;../logs/logs&#x27;</span></span><br><span class=\"line\">\t<span class=\"comment\">//success 成功的回调</span></span><br><span class=\"line\">    <span class=\"comment\">//fail 失败的回调</span></span><br><span class=\"line\">   <span class=\"comment\">//complete 借口调用结束的回调,成败都会执行</span></span><br><span class=\"line\">​     &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>2.跳转到tabBar页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">switchBar</span>(&#123;</span><br><span class=\"line\"><span class=\"attr\">url</span>:<span class=\"string\">&#x27;...&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>3.后退</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateBack</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">delta</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">//默认为1，delta</span></span><br><span class=\"line\">    <span class=\"comment\">//其他属性同上</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-导航传参\"><a href=\"#2-导航传参\" class=\"headerlink\" title=\"2.导航传参\"></a>2.导航传参</h4><h6 id=\"1-声明式导航传参\"><a href=\"#1-声明式导航传参\" class=\"headerlink\" title=\"1.声明式导航传参\"></a>1.声明式导航传参</h6><p><navigator url='url?a=1&b=2'></navigator></p>\n<h6 id=\"2-编程式导航传参\"><a href=\"#2-编程式导航传参\" class=\"headerlink\" title=\"2.编程式导航传参\"></a>2.编程式导航传参</h6><p>在url参数后面传递参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;?a=a&amp;b=2&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">delta</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">//默认为1，delta</span></span><br><span class=\"line\">    <span class=\"comment\">//其他属性同上</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-在onload中接收导航参数\"><a href=\"#3-在onload中接收导航参数\" class=\"headerlink\" title=\"3.在onload中接收导航参数\"></a>3.在onload中接收导航参数</h6><ul>\n<li>可以直接在onload中直接拿到</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">onload</span>:<span class=\"keyword\">function</span>(<span class=\"params\">options</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(options)</span><br><span class=\"line\">    <span class=\"comment\">//一般这个参数都会转移到data里面</span></span><br><span class=\"line\">    <span class=\"comment\">//query:&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setDate</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">query</span>:options,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-页面事件\"><a href=\"#2-页面事件\" class=\"headerlink\" title=\"2.页面事件\"></a>2.页面事件</h3><h4 id=\"1-下拉刷新事件\"><a href=\"#1-下拉刷新事件\" class=\"headerlink\" title=\"1.下拉刷新事件\"></a>1.下拉刷新事件</h4><p>定义：下拉滑动操作，重新加载页面数据</p>\n<p>使用：</p>\n<ol>\n<li>​    全局开启<ol>\n<li>enablePullDownRefresh:true</li>\n<li>不推荐</li>\n</ol>\n</li>\n<li>局部开启下拉刷新<ol>\n<li>在页面的json文件中配置</li>\n<li>enablePullDownRefresh:true</li>\n</ol>\n</li>\n<li>配置样式<ol>\n<li>backgroundColor:””  下拉刷新的样式</li>\n<li>backgroundTextStyle:”dark’   -loadding的样式</li>\n</ol>\n</li>\n<li>监听下拉刷新事件<ol>\n<li>在内置的onPullDownRefresh</li>\n<li>刷新时触发的函数</li>\n</ol>\n</li>\n<li>上拉触底事件<ol>\n<li>通过上拉滑动加载更多的数据–分类上用的较多</li>\n<li>onReachButton() 函数</li>\n<li>可以调节触底距离，<ul>\n<li>可以配置距离</li>\n<li>onReachBottomDistance:50px;</li>\n<li>默认为50px</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><h2 id=\"17-自定义编译模式\"><a href=\"#17-自定义编译模式\" class=\"headerlink\" title=\"17)自定义编译模式\"></a>17)自定义编译模式</h2><ul>\n<li>优化开发过程</li>\n<li>使代码的变化造成的效果以最方便的方式展示在我们面前</li>\n<li>普通编译-添加编译模式-</li>\n</ul>\n<h2 id=\"18）生命周期\"><a href=\"#18）生命周期\" class=\"headerlink\" title=\"18）生命周期\"></a>18）生命周期</h2><p>创建-运行-销毁的整个阶段</p>\n<h3 id=\"1-应用生命周期（函数）-小程序\"><a href=\"#1-应用生命周期（函数）-小程序\" class=\"headerlink\" title=\"1.应用生命周期（函数）-小程序\"></a>1.应用生命周期（函数）-小程序</h3><h4 id=\"在app-js声明\"><a href=\"#在app-js声明\" class=\"headerlink\" title=\"在app.js声明\"></a>在app.js声明</h4><ul>\n<li>onLauch-小程序初始化执行，全局只触发一次</li>\n<li>onShow-小程序启动，或从后台进入前台触发</li>\n<li>onHide-小程序从前台进入后台触发</li>\n</ul>\n<h4 id=\"前台和后台\"><a href=\"#前台和后台\" class=\"headerlink\" title=\"前台和后台\"></a>前台和后台</h4><p>前台：小程序正在运行,home键</p>\n<p>后台：调试旁边-切后台</p>\n<h3 id=\"2-页面生命周期-函数-页面\"><a href=\"#2-页面生命周期-函数-页面\" class=\"headerlink\" title=\"2.页面生命周期(函数)-页面\"></a>2.页面生命周期(函数)-页面</h3><h4 id=\"页面的-js文件\"><a href=\"#页面的-js文件\" class=\"headerlink\" title=\"页面的.js文件\"></a>页面的.js文件</h4><ul>\n<li><p><strong>onLoad</strong>   </p>\n<ul>\n<li>options,</li>\n<li>可以在此处获取数据</li>\n<li>只会调用一次</li>\n<li>加载数据，转存参数</li>\n</ul>\n</li>\n<li><p>onShow</p>\n<ul>\n<li>展示的时候触发</li>\n</ul>\n</li>\n<li><p><strong>onReady</strong></p>\n<ul>\n<li>监听页面初次调用完成，只调用一次</li>\n<li>可以修改，eg:wx.setNavigationBarTitle</li>\n</ul>\n</li>\n<li><p>onHide</p>\n<ul>\n<li>监听页面隐藏</li>\n</ul>\n</li>\n<li><p>onUnload</p>\n<ul>\n<li>页面卸载</li>\n</ul>\n<p>注意：onLoad,onReady</p>\n</li>\n</ul>\n<p>1</p>\n<h2 id=\"19）wxs脚本\"><a href=\"#19）wxs脚本\" class=\"headerlink\" title=\"19）wxs脚本\"></a>19）wxs脚本</h2><p>定义：小程序独有的脚本语言，结合wxml,可以构建页面的结构</p>\n<p>应用场景：wxml里面无法调用页面.js中定义的函数，但是wxml可以调用wxs中定义的函数，典型场景就是过滤器</p>\n<p>不改变数据本身，只是在展示时根据需求自定义样式</p>\n<h3 id=\"1-wxs与js的区别\"><a href=\"#1-wxs与js的区别\" class=\"headerlink\" title=\"1.wxs与js的区别\"></a>1.wxs与js的区别</h3><ul>\n<li>有自己的数据类型<ul>\n<li>number,string,boolean,object,function,array,date,regexp</li>\n</ul>\n</li>\n<li>不支持es6<ul>\n<li>不支持let,const,结构赋值，对象简写，展开运算符，箭头函数，</li>\n<li>支持var，普通函数写法</li>\n</ul>\n</li>\n<li>支持CommonJs规范<ul>\n<li>module</li>\n<li>require()函数</li>\n<li>module.exports对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-wxs写法\"><a href=\"#2-wxs写法\" class=\"headerlink\" title=\"2.wxs写法\"></a>2.wxs写法</h3><ol>\n<li><p>内嵌wxs脚本</p>\n<ul>\n<li>必须指定module属性，表示名称</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view&gt;&#123;&#123;m1.toUppper(username)&#125;&#125;&lt;/view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;wxs module=&#x27;m1&#x27;&gt;</span><br><span class=\"line\">module.exports.toUpperCase(str)&#123;</span><br><span class=\"line\">\treturn str.toUpperCase()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/wxs&gt;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>外联.wxs-类似于js</p>\n<ul>\n<li>module 脚本名称</li>\n<li>src 路径，必须为相对路径</li>\n</ul>\n</li>\n<li></li>\n<li><p>1</p>\n</li>\n</ol>\n<h2 id=\"20\"><a href=\"#20\" class=\"headerlink\" title=\"20)\"></a>20)</h2>"},{"title":"Vue 父组件——子组件通信","author":"codefish","date":"2021-12-20T06:13:36.000Z","top_img":"/img/9.jpg","cover":"/img/9.jpg","_content":"\n开发中用到最多的场景，父子组件通信，分发事件，组件传值。\n\n## Props 父组件向子组件通信\n\n```js\n//找到找到父组件使用子组件的地方，为其添加父组件传递给子组件的数据\n<parent> \n    title:'props传值',\n    date:'2020/03 '\n</parent>\n\n//* 在子组件接收两个参数\nexport default {\n\tname:'child',\n    props:['title','date']\n}\n\n//这样之后就可以在子组件像使用Vue date 一样使用title 和 date\n```\n\n## $emit 子组件向父组件通信\n\n```js\n//$emit 方法是Vue的一个实例方法，他的用法如下\nvm.$emit(eventName,[...args])\n// 参数\n1）{string} eventName\n2) [...args]\n\n//第一个参数eventName 为事件名称\n//事件名称对应的事件是在 父组件中通过v-on监听一个native Dom事件（可以理解是一个类似click这样的自定义事件）\n\n\n当我们在子组件中执行$emit时，就会触发父组件对应的event\n\n1）首先我们在子组件中使用$emit方法去编写代码（不传递第二个参数），触发父组件的event\n\n\n```\n\n\n\n\n\n```js\n//子组件\n<template>\n  <div class=\"home\">\n    <p>这里是Home组件</p>\n    <el-button type=\"primary\" v-on:click='btnClickHandler(\"Yes\")'>Yes</el-button>\n    <el-button type=\"primary\" v-on:click='btnClickHandler(\"No\")'>No</el-button>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'Home',\n  methods: {\n    btnClickHandler: function(param){\n        if(param == \"Yes\"){\n            this.$emit('sayYes');\n        }else if(param == \"No\"){\n            this.$emit('sayNo');\n        }\n    }\n  }\n}\n</script>\n\n//父组件\n<home\n        v-on:sayYes='val=\"yes\"'\n        v-on:sayNo='val=\"no\"'>\n</home>\n//val是父组件data里面的数据\n\n```\n\n## $parent\n\n**$parent**是vue的一个**实例属性**，它表示的就是当前组件的父实例。\n\n假如父组件中有一个方法为**sayYes**，那么在子组件中就可以直接使用**this.$parent.sayYes**去调用父组件的方法。\n\n","source":"_posts/组件通信.md","raw":"---\n\ntitle: Vue 父组件——子组件通信\ntags: [props,emit,parents]\nauthor: codefish\ndate: 2021-12-20 14:13:36\ncategories: vue\ntop_img: /img/9.jpg\ncover: /img/9.jpg\n\n---\n\n开发中用到最多的场景，父子组件通信，分发事件，组件传值。\n\n## Props 父组件向子组件通信\n\n```js\n//找到找到父组件使用子组件的地方，为其添加父组件传递给子组件的数据\n<parent> \n    title:'props传值',\n    date:'2020/03 '\n</parent>\n\n//* 在子组件接收两个参数\nexport default {\n\tname:'child',\n    props:['title','date']\n}\n\n//这样之后就可以在子组件像使用Vue date 一样使用title 和 date\n```\n\n## $emit 子组件向父组件通信\n\n```js\n//$emit 方法是Vue的一个实例方法，他的用法如下\nvm.$emit(eventName,[...args])\n// 参数\n1）{string} eventName\n2) [...args]\n\n//第一个参数eventName 为事件名称\n//事件名称对应的事件是在 父组件中通过v-on监听一个native Dom事件（可以理解是一个类似click这样的自定义事件）\n\n\n当我们在子组件中执行$emit时，就会触发父组件对应的event\n\n1）首先我们在子组件中使用$emit方法去编写代码（不传递第二个参数），触发父组件的event\n\n\n```\n\n\n\n\n\n```js\n//子组件\n<template>\n  <div class=\"home\">\n    <p>这里是Home组件</p>\n    <el-button type=\"primary\" v-on:click='btnClickHandler(\"Yes\")'>Yes</el-button>\n    <el-button type=\"primary\" v-on:click='btnClickHandler(\"No\")'>No</el-button>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'Home',\n  methods: {\n    btnClickHandler: function(param){\n        if(param == \"Yes\"){\n            this.$emit('sayYes');\n        }else if(param == \"No\"){\n            this.$emit('sayNo');\n        }\n    }\n  }\n}\n</script>\n\n//父组件\n<home\n        v-on:sayYes='val=\"yes\"'\n        v-on:sayNo='val=\"no\"'>\n</home>\n//val是父组件data里面的数据\n\n```\n\n## $parent\n\n**$parent**是vue的一个**实例属性**，它表示的就是当前组件的父实例。\n\n假如父组件中有一个方法为**sayYes**，那么在子组件中就可以直接使用**this.$parent.sayYes**去调用父组件的方法。\n\n","slug":"组件通信","published":1,"updated":"2025-01-07T02:30:25.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0crc001q572ob4t77tqv","content":"<p>开发中用到最多的场景，父子组件通信，分发事件，组件传值。</p>\n<h2 id=\"Props-父组件向子组件通信\"><a href=\"#Props-父组件向子组件通信\" class=\"headerlink\" title=\"Props 父组件向子组件通信\"></a>Props 父组件向子组件通信</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找到找到父组件使用子组件的地方，为其添加父组件传递给子组件的数据</span></span><br><span class=\"line\">&lt;parent&gt; </span><br><span class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;props传值&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">date</span>:<span class=\"string\">&#x27;2020/03 &#x27;</span></span><br><span class=\"line\">&lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//* 在子组件接收两个参数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;child&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">props</span>:[<span class=\"string\">&#x27;title&#x27;</span>,<span class=\"string\">&#x27;date&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这样之后就可以在子组件像使用Vue date 一样使用title 和 date</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"emit-子组件向父组件通信\"><a href=\"#emit-子组件向父组件通信\" class=\"headerlink\" title=\"$emit 子组件向父组件通信\"></a>$emit 子组件向父组件通信</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//$emit 方法是Vue的一个实例方法，他的用法如下</span></span><br><span class=\"line\">vm.$emit(eventName,[...args])</span><br><span class=\"line\"><span class=\"comment\">// 参数</span></span><br><span class=\"line\"><span class=\"number\">1</span>）&#123;string&#125; eventName</span><br><span class=\"line\"><span class=\"number\">2</span>) [...args]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一个参数eventName 为事件名称</span></span><br><span class=\"line\"><span class=\"comment\">//事件名称对应的事件是在 父组件中通过v-on监听一个native Dom事件（可以理解是一个类似click这样的自定义事件）</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">当我们在子组件中执行$emit时，就会触发父组件对应的event</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>）首先我们在子组件中使用$emit方法去编写代码（不传递第二个参数），触发父组件的event</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;home&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是Home组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&#x27;btnClickHandler(&quot;Yes&quot;)&#x27;</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&#x27;btnClickHandler(&quot;No&quot;)&#x27;</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">btnClickHandler</span>: <span class=\"keyword\">function</span>(<span class=\"params\">param</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span>(param == <span class=\"string\">&quot;Yes&quot;</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;sayYes&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(param == <span class=\"string\">&quot;No&quot;</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;sayNo&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">home</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">v-on:sayYes</span>=<span class=\"string\">&#x27;val=&quot;yes&quot;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">v-on:sayNo</span>=<span class=\"string\">&#x27;val=&quot;no&quot;&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">home</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//val是父组件data里面的数据</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"$parent\"></a>$parent</h2><p><strong>$parent</strong>是vue的一个<strong>实例属性</strong>，它表示的就是当前组件的父实例。</p>\n<p>假如父组件中有一个方法为<strong>sayYes</strong>，那么在子组件中就可以直接使用<strong>this.$parent.sayYes</strong>去调用父组件的方法。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>开发中用到最多的场景，父子组件通信，分发事件，组件传值。</p>\n<h2 id=\"Props-父组件向子组件通信\"><a href=\"#Props-父组件向子组件通信\" class=\"headerlink\" title=\"Props 父组件向子组件通信\"></a>Props 父组件向子组件通信</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找到找到父组件使用子组件的地方，为其添加父组件传递给子组件的数据</span></span><br><span class=\"line\">&lt;parent&gt; </span><br><span class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;props传值&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">date</span>:<span class=\"string\">&#x27;2020/03 &#x27;</span></span><br><span class=\"line\">&lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//* 在子组件接收两个参数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&#x27;child&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">props</span>:[<span class=\"string\">&#x27;title&#x27;</span>,<span class=\"string\">&#x27;date&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这样之后就可以在子组件像使用Vue date 一样使用title 和 date</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"emit-子组件向父组件通信\"><a href=\"#emit-子组件向父组件通信\" class=\"headerlink\" title=\"$emit 子组件向父组件通信\"></a>$emit 子组件向父组件通信</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//$emit 方法是Vue的一个实例方法，他的用法如下</span></span><br><span class=\"line\">vm.$emit(eventName,[...args])</span><br><span class=\"line\"><span class=\"comment\">// 参数</span></span><br><span class=\"line\"><span class=\"number\">1</span>）&#123;string&#125; eventName</span><br><span class=\"line\"><span class=\"number\">2</span>) [...args]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一个参数eventName 为事件名称</span></span><br><span class=\"line\"><span class=\"comment\">//事件名称对应的事件是在 父组件中通过v-on监听一个native Dom事件（可以理解是一个类似click这样的自定义事件）</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">当我们在子组件中执行$emit时，就会触发父组件对应的event</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>）首先我们在子组件中使用$emit方法去编写代码（不传递第二个参数），触发父组件的event</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;home&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是Home组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&#x27;btnClickHandler(&quot;Yes&quot;)&#x27;</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&#x27;btnClickHandler(&quot;No&quot;)&#x27;</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">btnClickHandler</span>: <span class=\"keyword\">function</span>(<span class=\"params\">param</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span>(param == <span class=\"string\">&quot;Yes&quot;</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;sayYes&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(param == <span class=\"string\">&quot;No&quot;</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;sayNo&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">home</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">v-on:sayYes</span>=<span class=\"string\">&#x27;val=&quot;yes&quot;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">v-on:sayNo</span>=<span class=\"string\">&#x27;val=&quot;no&quot;&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">home</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//val是父组件data里面的数据</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"$parent\"></a>$parent</h2><p><strong>$parent</strong>是vue的一个<strong>实例属性</strong>，它表示的就是当前组件的父实例。</p>\n<p>假如父组件中有一个方法为<strong>sayYes</strong>，那么在子组件中就可以直接使用<strong>this.$parent.sayYes</strong>去调用父组件的方法。</p>\n"},{"title":"防抖与节流浅析","date":"2022-04-22T14:32:37.000Z","top_img":"/img/8.jpg","cover":"/img/8.jpg","_content":"\n尽管现在已有很多相关工具库，对于其的理解学习也不能中断\n\n## 防抖与节流\n\n防抖：将多次触发变为一次触发\n\n节流：减少一段时间的触发频率\n\n---\n\n防抖：通过setTiemout 限制执行次数\n\n```js\n//防抖函数包裹目标函数\ndebounce(\n\tsubmit(){\n\t\t\n\t}\n)\n\nfunction debance(fn){\n    let t = null\n\treturn function(){\n        if(t){\n\t\t\tclearTimeout(t)\n        }\n        //限制fn的执行\n\t\tt = setTImeout(()=>{\n\t\tfn()\n        },1000)\n    }\n}\n\n//只要t定时器存在，就清除掉定时器\n//多次点击只会执行一次\n\n//存在两个问题\n1.arguments传参数\n2.this指向\n\t//包裹之前\n当用户点击submit时候会传递参数，event,把实参传递到\n\t//包裹之后 \n当前event为。。。\n\n解决方案：\n1.不可取写法：\nfunction debounce(fn){\n\tlet a = null;\n    return function(e){\n\t\tif(t){\n\t\tclearTimeout(t)\n        }\n        console.log(this)\n        //此处的this指向button\n        t = setTimeout(function()=>{\n         //fn(e) 不可取\n        fn.apply(null,argument)\n        //正解\n                       },1000)\n    }\n}\n\t//但是不知道此处参数个数\n正解：\n\t//通过arguments对象\nargunments只在函数内部\n通过箭头函数解决次问题，箭头函数没有arguments，因而他拿到的是外层函数的arguments\n\n\n//那是否会延时执行定时器\n```\n\n*** 怎么让第一次点击不走延迟\n\n- 判断t 是否为null ,如果为null直接执行，但不是最佳方案 \n\n  ```js\n  - let firstCLick = !t;\n  \n  if(firstClick){\n  \n  \n  \n  }\n  ```\n\n  \n\n- \n\n---\n\n节流\n\n","source":"_posts/防抖与节流.md","raw":"---\ntitle: 防抖与节流浅析\ndate: 2022-04-22 22:32:37\ntags: js\ncategories: js\ntop_img: /img/8.jpg\ncover: /img/8.jpg\n---\n\n尽管现在已有很多相关工具库，对于其的理解学习也不能中断\n\n## 防抖与节流\n\n防抖：将多次触发变为一次触发\n\n节流：减少一段时间的触发频率\n\n---\n\n防抖：通过setTiemout 限制执行次数\n\n```js\n//防抖函数包裹目标函数\ndebounce(\n\tsubmit(){\n\t\t\n\t}\n)\n\nfunction debance(fn){\n    let t = null\n\treturn function(){\n        if(t){\n\t\t\tclearTimeout(t)\n        }\n        //限制fn的执行\n\t\tt = setTImeout(()=>{\n\t\tfn()\n        },1000)\n    }\n}\n\n//只要t定时器存在，就清除掉定时器\n//多次点击只会执行一次\n\n//存在两个问题\n1.arguments传参数\n2.this指向\n\t//包裹之前\n当用户点击submit时候会传递参数，event,把实参传递到\n\t//包裹之后 \n当前event为。。。\n\n解决方案：\n1.不可取写法：\nfunction debounce(fn){\n\tlet a = null;\n    return function(e){\n\t\tif(t){\n\t\tclearTimeout(t)\n        }\n        console.log(this)\n        //此处的this指向button\n        t = setTimeout(function()=>{\n         //fn(e) 不可取\n        fn.apply(null,argument)\n        //正解\n                       },1000)\n    }\n}\n\t//但是不知道此处参数个数\n正解：\n\t//通过arguments对象\nargunments只在函数内部\n通过箭头函数解决次问题，箭头函数没有arguments，因而他拿到的是外层函数的arguments\n\n\n//那是否会延时执行定时器\n```\n\n*** 怎么让第一次点击不走延迟\n\n- 判断t 是否为null ,如果为null直接执行，但不是最佳方案 \n\n  ```js\n  - let firstCLick = !t;\n  \n  if(firstClick){\n  \n  \n  \n  }\n  ```\n\n  \n\n- \n\n---\n\n节流\n\n","slug":"防抖与节流","published":1,"updated":"2025-01-07T02:30:25.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0crf001u572ob0udaorg","content":"<p>尽管现在已有很多相关工具库，对于其的理解学习也不能中断</p>\n<h2 id=\"防抖与节流\"><a href=\"#防抖与节流\" class=\"headerlink\" title=\"防抖与节流\"></a>防抖与节流</h2><p>防抖：将多次触发变为一次触发</p>\n<p>节流：减少一段时间的触发频率</p>\n<hr>\n<p>防抖：通过setTiemout 限制执行次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//防抖函数包裹目标函数</span></span><br><span class=\"line\"><span class=\"title function_\">debounce</span>(</span><br><span class=\"line\">\t<span class=\"title function_\">submit</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debance</span>(<span class=\"params\">fn</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"literal\">null</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">clearTimeout</span>(t)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//限制fn的执行</span></span><br><span class=\"line\">\t\tt = <span class=\"title function_\">setTImeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//只要t定时器存在，就清除掉定时器</span></span><br><span class=\"line\"><span class=\"comment\">//多次点击只会执行一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//存在两个问题</span></span><br><span class=\"line\"><span class=\"number\">1.</span><span class=\"variable language_\">arguments</span>传参数</span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"variable language_\">this</span>指向</span><br><span class=\"line\">\t<span class=\"comment\">//包裹之前</span></span><br><span class=\"line\">当用户点击submit时候会传递参数，event,把实参传递到</span><br><span class=\"line\">\t<span class=\"comment\">//包裹之后 </span></span><br><span class=\"line\">当前event为。。。</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：</span><br><span class=\"line\"><span class=\"number\">1.</span>不可取写法：</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clearTimeout</span>(t)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        <span class=\"comment\">//此处的this指向button</span></span><br><span class=\"line\">        t = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">         <span class=\"comment\">//fn(e) 不可取</span></span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,argument)</span><br><span class=\"line\">        <span class=\"comment\">//正解</span></span><br><span class=\"line\">                       &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//但是不知道此处参数个数</span></span><br><span class=\"line\">正解：</span><br><span class=\"line\">\t<span class=\"comment\">//通过arguments对象</span></span><br><span class=\"line\">argunments只在函数内部</span><br><span class=\"line\">通过箭头函数解决次问题，箭头函数没有<span class=\"variable language_\">arguments</span>，因而他拿到的是外层函数的<span class=\"variable language_\">arguments</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//那是否会延时执行定时器</span></span><br></pre></td></tr></table></figure>\n\n<p>*** 怎么让第一次点击不走延迟</p>\n<ul>\n<li><p>判断t 是否为null ,如果为null直接执行，但不是最佳方案 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"keyword\">let</span> firstCLick = !t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(firstClick)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li></li>\n</ul>\n<hr>\n<p>节流</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>尽管现在已有很多相关工具库，对于其的理解学习也不能中断</p>\n<h2 id=\"防抖与节流\"><a href=\"#防抖与节流\" class=\"headerlink\" title=\"防抖与节流\"></a>防抖与节流</h2><p>防抖：将多次触发变为一次触发</p>\n<p>节流：减少一段时间的触发频率</p>\n<hr>\n<p>防抖：通过setTiemout 限制执行次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//防抖函数包裹目标函数</span></span><br><span class=\"line\"><span class=\"title function_\">debounce</span>(</span><br><span class=\"line\">\t<span class=\"title function_\">submit</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debance</span>(<span class=\"params\">fn</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"literal\">null</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">clearTimeout</span>(t)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//限制fn的执行</span></span><br><span class=\"line\">\t\tt = <span class=\"title function_\">setTImeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//只要t定时器存在，就清除掉定时器</span></span><br><span class=\"line\"><span class=\"comment\">//多次点击只会执行一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//存在两个问题</span></span><br><span class=\"line\"><span class=\"number\">1.</span><span class=\"variable language_\">arguments</span>传参数</span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"variable language_\">this</span>指向</span><br><span class=\"line\">\t<span class=\"comment\">//包裹之前</span></span><br><span class=\"line\">当用户点击submit时候会传递参数，event,把实参传递到</span><br><span class=\"line\">\t<span class=\"comment\">//包裹之后 </span></span><br><span class=\"line\">当前event为。。。</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：</span><br><span class=\"line\"><span class=\"number\">1.</span>不可取写法：</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clearTimeout</span>(t)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        <span class=\"comment\">//此处的this指向button</span></span><br><span class=\"line\">        t = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">         <span class=\"comment\">//fn(e) 不可取</span></span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,argument)</span><br><span class=\"line\">        <span class=\"comment\">//正解</span></span><br><span class=\"line\">                       &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//但是不知道此处参数个数</span></span><br><span class=\"line\">正解：</span><br><span class=\"line\">\t<span class=\"comment\">//通过arguments对象</span></span><br><span class=\"line\">argunments只在函数内部</span><br><span class=\"line\">通过箭头函数解决次问题，箭头函数没有<span class=\"variable language_\">arguments</span>，因而他拿到的是外层函数的<span class=\"variable language_\">arguments</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//那是否会延时执行定时器</span></span><br></pre></td></tr></table></figure>\n\n<p>*** 怎么让第一次点击不走延迟</p>\n<ul>\n<li><p>判断t 是否为null ,如果为null直接执行，但不是最佳方案 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"keyword\">let</span> firstCLick = !t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(firstClick)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li></li>\n</ul>\n<hr>\n<p>节流</p>\n"},{"title":"js原型的那些事","author":"codefish","date":"2021-12-28T12:05:35.000Z","top_img":"/img/7.jpg","cover":"/img/7.jpg","_content":"\n#### 面向对象\n\n​\t\t将所有的物体抽象为一个类，每一个具体的个体是类的实例化对象。构造函数是创建类的方法，可以无限制创建类，相当于工厂。\n\n​\t\t数据类型中的类是一种数据类型，而面向对象是一种编程思想，更高级的还有函数式编程。面向对象里面也有属性和方法。有构造函数创建。为了避免资源的浪费，再构造函数里面创建实例化对象的属性，再构造函数的原型上创建对象的方法。\n\n- ​\t模板： ——> 构造函数是用来生成对象的，\n- ​    php python 是一种面向对象的编程语言     ->    以类为创建对象的模板\n- ​     JavaScript 是基于对象的编程语言   ->    以构造函数为模板 ->动态语言：没有定义数据类型，需要时才会去处理\n\n\n\n##### 1.构造函数\n\n创建构造函数\n\n- 不能使用箭头函数\n- 首字符大写的函数\n- 建议不使用函数表达式，如果以函数表达式创建箭头函数，后面进行继承操作的时候，由于需要给子的构造函数还原，若没有名字，则还原之后他的constructor 不具名。\n\n```js\nconst Animal = function(){}\nconst Cat = function(){}\n```\n\n\n\n- 在构造函数中，一般只写实例化对象的属性，将实例化对象的方法写在构造函数的原型上，形如\n\n- ```js\n  function Animal(name,sex){\n      this.name = name;\n      this.sex = sex;\n  }\n  \n  Animal.prototype.play = function(){\n      console.log('play');\n  }\n  ```\n\n\n\nnew 关键字\n\n- ​\t\t原理：\n\n  - 创建一个空对象 \n  - 空的原型\n  - this 的指向变为空对象\n\n- ```js \n  const cat = new Cat('实际参数')\n  //若不需要传递参数，则后面的（）可以省略\n  //形如\n  const cat = new Car\n  ```\n\n  在构造函数中使用this 关键字，this 指向未来即将生成的实例化对象\n\n  ```js\n  //为了保证实例化对象的时候，使用new 关键字，可以在构造函数内部使用，严格模式\n  //如果在实例化对象的时候，没有使用new 关键字系统就会报错\n  'use strict'    ....\n  若实例化时没有加new，实例化对象为未定义，而对象的属性直接报错\n  ```\n\n  ```js\n  function Car(){\n      this.name = 'nem';\n      this.sex = 'cute';\n  }\n  \n  const car =Car();\n  console.log(car);\n  // underfinded\n  ```\n\n\n\n- 构造函数返回值\n  - 构造函数的返回值如果时基础数据类型，对实例化对象没有影响。\n  - 如果构造函数的返回值是引用数据类型，则会覆盖掉构造函数内部的属性。\n    - 故构造函数不能有返回值\n\nnew.target命令\n\n函数内部可以使用`new.target`属性。如果当前函数是`new`命令调用，`new.target`指向当前函数，否则为`undefined`。\n\n```js\nfunction f() {\n  console.log(new.target === f);\n}\nf() // false\nnew f() // true\n```\n\n使用这个属性，可以判断函数调用的时候，是否使用`new`命令。\n\n```js\nfunction f() {\n  if (!new.target) {\n    throw new Error('请使用 new 命令调用！');\n  }\n  // ...\n}\nf() // Uncaught Error: 请使用 new 命令调用！\n```\n\n上面代码中，构造函数`f`调用时，没有使用`new`命令，就抛出一个错误。\n\n\n\nObject.create( ) 创建实例对象\n\n通过 Object.create 创建的对象原型为空。\n\n```js\n//用于继承\nFn1.prototype = Oject.create( Fn2.prototype )\n```\n\n- 如果需要一个构造函数的内容的部分包含另一个构造函数的内容，并且又有自己的\n\n  属性，该怎么写\n\n  ```js\n  function Animal(name,sex){\n      this.name = name;\n      this.sex = sex;\n  }\n  \n  function Cat(name,sex,scorlls){\n      Animal.call(this,name,sex);\n      this.scorlls = scorlls;\n  }\n  \n  //此处的call也可替换为apply，但后面参数要写成数组的形式\n  Animal.apply( this,[name,sex])\n  ```\n\n\n\n##### 2.原型和原型链\n\n一、prototype\n\n在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。并且这个属性是一个对象数据类型的值.\n\n除了underfinded 和 null 以外，所有的数据类型的原型都是Oject\n\n\n\n`Person           ------     prototype ---\t\t\t\t\tPerosn.prototype`\n\n`(构造函数)\t\t\t\t\t\t\t\t           --->   \t\t\t\t\t\t(实现原理)`\n\n\n\n二、__proto__\n\n这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。\n\n\n\n三、constructor\n\n每个原型都有一个constructor属性，指向该关联的构造函数。\n\n```js\nfunction Person() {\n\n}\nconsole.log(Person===Person.prototype.constructor)  //true\n\n//现在基本已不被使用\nobj.__proto__ = obj.construcror.prototype\n被右边的写法替代\n```\n\n\n\n![image-20211222192440398](E:/%25E6%25A1%258C%25E9%259D%25A2/---MD---/%25E5%25AD%25A6%25E4%25B9%25A0/mdimages/image-20211222192440398.png)\n\n四、实例与原型\n\n 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。\n\n五、原型的原型\n\n 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：\n\n```\nvar obj = new Object();\nobj.name = 'Kevin'\nconsole.log(obj.name) // Kevin\n```\n\n其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 __proto__ 指向构造函数的 prototype ，所以我们再更新下关系图：\n\n```js\n//原型的最上面是object\n//object 的上面是 null\n```\n\n\n\n六、原型链\n\n 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》\n\n```js\n//而原型链中就是实例对象和原型对象之间的链接。每个函数都有一个prototype属性，这个prototype属性就是我们的原型对象，我们拿这个函数通过new构造函数创建出来的实例对象，这个实例对象自己会有一个指针(_proto_)指向他的构造函数的原型对象！这样构造函数和实例对象之间就通过( _proto_ )连接在一起形成了一条链子。\n```\n\n在JavaScript中 实例化对象与原型之间的链接，叫做原型链，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法，然后层层递进，就构成了实例与原型的链条，这就是所谓的原型链\n\n###### 1).为什么要使用原型链呢？\n\n1.为了实现继承，简化代码，实现代码重用！\n2.只要是这个链条上的内容，都可以被访问和使用到！\n\n###### 2).使用原型链有什么作用？\n\n继承\nprototype用来实现基于原型的继承与属性的共享\n避免了代码冗余，公用的属性和方法，可以放到原型对象中，这样，通过该构造函数实例化的所有对象都可以使用该对象的构造函数中的属性和方法！\n减少了内存占用\n\n###### 3).原型链的特点\n\n**就近原则**，当我们要使用一个值时，程序会优先查找离自己最近的，也就是本身有没有，如果自己没有，他就会沿着原型链向上查找，如果还没有找到，它还会沿着原型链继续向上查找，找到到达Object\n**引用类型，**当我们使用或者修改原型链上的值时，其实使用的是同一个值！\nJS中每个函数都存在原型对象属性prototype。并且所有函数的默认原型都是Object的实例。\n每个继承父函数的实例对象都包含一个内部属性_proto_。该属性包含一个指针，指向父函数的prototype。若父函数的原型对象的_proto_属性为再上一层函数。在此过程中就形成了原型链。\n\n###### 4).ES5继承\n\n```js\n//Es5 继承时，函数尽量不使用函数声明语法\nfunction Animal(name,sex){\n    this.name = name;\n    this.sex = sex;\n}\n\nAnimal.prototype.play = function(){\n    console.log('play');\n}\n\nfunction Cat(name,sex,scorlls){\n    Animal.call(this,name,sex);\n    this.scorlls = scorlls;\n}\n\nCat.prototype = Object.create(Animal.prototype);\n// Cat.prototype.constructor = Cat;\nCat.prototype.constructor = Cat;\n\nconst cat = new Cat('cat','like','ball');\nconst ani = new Animal('any','dislike')\n\n\n// Cat.prototype.constructor = Cat;\ncat.play();\n// Animal.play()\nani.play()\nconsole.log(cat,ani.constructor.prototype)\n\n//如果子对象存在自己的方法，则应该写在\nCat.prototype = Object.create(Animal.prototype)\n//写在前面的话一旦赋值给空白对象，方法就会丢失\n```\n\n###### 5).ES6继承（语法糖）\n\n```js\nclass Animal{\n    constructor(name,sex){\n\t\tthis.name = name;\n        this.sex = sex;\n    }\n    eat(){\n\t  console.log('吃东西');\n    }\n}\n\nclass cat extends Animal {\n\tconstructor(pz,name,sex){\n\tsuper(name,sex);\n    this.pz = pz;\n    }\n    miao(){\n\t\tconsole.log('喵...');\n    }\n}\n\nconstructor(pz,name,sex){\n\tsuper(name,sex);\n  //  里面的参数不需要对应，可以是任意顺序\n```\n\n能被继承\n\nextends的主要用于子类继承父类,继承之后子类拥有父类的的所有方法包括,静态方法和属性\n\n```js\n class A {\n      // 静态属性\n      static info = '见过你的美,还能爱上谁?';\n      // 静态方法\n      static love() {\n        console.log('小姐姐,看见你就犯困,为情所困,为你所困!');\n      }\n      // 普通方法,调用静态属性\n      say() {\n        console.log('小姐姐,' + A.info);\n      }\n    }\n    class B extends A {\n      run() {\n        console.log('类B的方法..');\n      }\n    }\n    //使用类名 父类中普通方法调用\n    B.love();\n```\n\n###### 6).原型链覆盖\n\n```js\nfn.prototype = { ...}\n//这样写原来对象上的方法和属性都被覆盖掉\n```\n\n##### 3.proto,prototype 和constructor之间的关系\n\n```js\nclass Animal{\n    constructor(name,sex){\n\t\tthis.name = name;\n        this.sex = sex;\n    }\n    eat(){\n\t  console.log('吃东西');\n    }\n}\nAnimal.prototype.say = function (){\n\tconsole,log('this is a animal')\n}\n\nconst cat = new Animal\n\n//1.在这里Animal 就是一个构建工程，相当于construcor\n//2.new 关键字声明的cat,就是构造函数的实例化对象\n//3.say 就是定义在构造函数上的原型上的方法，通过Animal这个构造工厂构造出来的实例化对象都具有say这个方法\n\n//关系\ncat.constructor.prototype = cat.proto__ = Object.getPrototypeOf(cat)\n\n//所有拿到实例化对象的原型有三种方法\n//1.cat.__proto__   不推荐使用\n//2.cat.constructor.prototype   不推荐\n//3.Object.getPrototypeOf(cat)  官方推荐\n```\n\n##### 4.call bind apply\n\n```js\n//第一个参数 都是this 的指向，后面的参数则都是传递的参数\n// call 和 bind 传递参数都是： a,b,c...的形式\n  //而apply后面传递的参数应该为数组形式，就算是单个数据也要写成数组的形式 ：['a']\n//bind和call存在的区别在于，call和apply都会立即执行函数，而bind则不会。因此可以用bind写事件处理函数\n```\n\n```js\n // Array.prototype ---》数组的实例化对象的原型 ---》this 指向数组的实例化对象\n    function fn1(a,b,c) {\n      // arguments  foreach\n      // es5中非常重要的写法\n      Array.prototype.forEach.call(arguments,function(item) {\n        console.log(item);\n      })\n    }\n    fn1('哈哈哈', '嘿嘿嘿', '呵呵呵');\n```\n\n```js\nconst btn = document.querySelector('#btn');\n    // call apply bind 改变this指向\n    // call(this,值1,值2....) apply(this, [值1, 值2...]) bind(this, 值1, 值2....)\n    // 从表面上看bind方法和call方法完全一致，但是\n    // bind方法可以再调用之后不执行函数，而call和apply只要调用就立刻执行\n    const obj = {\n      a: 100,\n    }\n    function fn1(user) {\n      console.log('你好', user);\n      console.log(this.a); // window.a\n    }\n    // 让fn1的this指向obj 使用call方法，只要运行代码，程序就会立刻执行\n    // fn1.call(obj, '张三');\n    // fn1.apply(obj, ['张三']);\n    // 我的需要: fn1作为btn的事件处理函数，点击按钮之后再执行\n    // fn1需要改变this指向，同时需要向fn1中传值\n    btn.onclick = fn1.bind(obj, '张三');\n```\n\n![image-20211223194857541](../%25E6%25A1%258C%25E9%259D%25A2/---MD---/%25E5%25AD%25A6%25E4%25B9%25A0/mdimages/image-20211223194857541.png)\n\n```js\nfunction Person(name,age){\n    //this == obj\n    this.name = name;\n    this.age = age;\n}\nver person = new Person('deng',100)\nvar obj = {}\nPerson.call(obj,'cheng',300)\n//test  ---> test.call()\n\n//默认函数运行，相当于隐式运行.call( )\n//把Person时传入obj，相当于this == obj this.name = name ,,this.age = age\n```\n\n```js\nfunction Person(name,age){\n    //this == obj\n    this.name = name;\n    this.age = age;\n}\nfunction Student(){\n}\n```\n\n\n\n","source":"_posts/面向对象以及原型.md","raw":"---\ntitle: js原型的那些事\nauthor: codefish\ndate: 2021-12-28 20:05:35\ncategories: js\ntags: [prototype,constrctor,promise]\ntop_img: /img/7.jpg\ncover: /img/7.jpg\n---\n\n#### 面向对象\n\n​\t\t将所有的物体抽象为一个类，每一个具体的个体是类的实例化对象。构造函数是创建类的方法，可以无限制创建类，相当于工厂。\n\n​\t\t数据类型中的类是一种数据类型，而面向对象是一种编程思想，更高级的还有函数式编程。面向对象里面也有属性和方法。有构造函数创建。为了避免资源的浪费，再构造函数里面创建实例化对象的属性，再构造函数的原型上创建对象的方法。\n\n- ​\t模板： ——> 构造函数是用来生成对象的，\n- ​    php python 是一种面向对象的编程语言     ->    以类为创建对象的模板\n- ​     JavaScript 是基于对象的编程语言   ->    以构造函数为模板 ->动态语言：没有定义数据类型，需要时才会去处理\n\n\n\n##### 1.构造函数\n\n创建构造函数\n\n- 不能使用箭头函数\n- 首字符大写的函数\n- 建议不使用函数表达式，如果以函数表达式创建箭头函数，后面进行继承操作的时候，由于需要给子的构造函数还原，若没有名字，则还原之后他的constructor 不具名。\n\n```js\nconst Animal = function(){}\nconst Cat = function(){}\n```\n\n\n\n- 在构造函数中，一般只写实例化对象的属性，将实例化对象的方法写在构造函数的原型上，形如\n\n- ```js\n  function Animal(name,sex){\n      this.name = name;\n      this.sex = sex;\n  }\n  \n  Animal.prototype.play = function(){\n      console.log('play');\n  }\n  ```\n\n\n\nnew 关键字\n\n- ​\t\t原理：\n\n  - 创建一个空对象 \n  - 空的原型\n  - this 的指向变为空对象\n\n- ```js \n  const cat = new Cat('实际参数')\n  //若不需要传递参数，则后面的（）可以省略\n  //形如\n  const cat = new Car\n  ```\n\n  在构造函数中使用this 关键字，this 指向未来即将生成的实例化对象\n\n  ```js\n  //为了保证实例化对象的时候，使用new 关键字，可以在构造函数内部使用，严格模式\n  //如果在实例化对象的时候，没有使用new 关键字系统就会报错\n  'use strict'    ....\n  若实例化时没有加new，实例化对象为未定义，而对象的属性直接报错\n  ```\n\n  ```js\n  function Car(){\n      this.name = 'nem';\n      this.sex = 'cute';\n  }\n  \n  const car =Car();\n  console.log(car);\n  // underfinded\n  ```\n\n\n\n- 构造函数返回值\n  - 构造函数的返回值如果时基础数据类型，对实例化对象没有影响。\n  - 如果构造函数的返回值是引用数据类型，则会覆盖掉构造函数内部的属性。\n    - 故构造函数不能有返回值\n\nnew.target命令\n\n函数内部可以使用`new.target`属性。如果当前函数是`new`命令调用，`new.target`指向当前函数，否则为`undefined`。\n\n```js\nfunction f() {\n  console.log(new.target === f);\n}\nf() // false\nnew f() // true\n```\n\n使用这个属性，可以判断函数调用的时候，是否使用`new`命令。\n\n```js\nfunction f() {\n  if (!new.target) {\n    throw new Error('请使用 new 命令调用！');\n  }\n  // ...\n}\nf() // Uncaught Error: 请使用 new 命令调用！\n```\n\n上面代码中，构造函数`f`调用时，没有使用`new`命令，就抛出一个错误。\n\n\n\nObject.create( ) 创建实例对象\n\n通过 Object.create 创建的对象原型为空。\n\n```js\n//用于继承\nFn1.prototype = Oject.create( Fn2.prototype )\n```\n\n- 如果需要一个构造函数的内容的部分包含另一个构造函数的内容，并且又有自己的\n\n  属性，该怎么写\n\n  ```js\n  function Animal(name,sex){\n      this.name = name;\n      this.sex = sex;\n  }\n  \n  function Cat(name,sex,scorlls){\n      Animal.call(this,name,sex);\n      this.scorlls = scorlls;\n  }\n  \n  //此处的call也可替换为apply，但后面参数要写成数组的形式\n  Animal.apply( this,[name,sex])\n  ```\n\n\n\n##### 2.原型和原型链\n\n一、prototype\n\n在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。并且这个属性是一个对象数据类型的值.\n\n除了underfinded 和 null 以外，所有的数据类型的原型都是Oject\n\n\n\n`Person           ------     prototype ---\t\t\t\t\tPerosn.prototype`\n\n`(构造函数)\t\t\t\t\t\t\t\t           --->   \t\t\t\t\t\t(实现原理)`\n\n\n\n二、__proto__\n\n这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。\n\n\n\n三、constructor\n\n每个原型都有一个constructor属性，指向该关联的构造函数。\n\n```js\nfunction Person() {\n\n}\nconsole.log(Person===Person.prototype.constructor)  //true\n\n//现在基本已不被使用\nobj.__proto__ = obj.construcror.prototype\n被右边的写法替代\n```\n\n\n\n![image-20211222192440398](E:/%25E6%25A1%258C%25E9%259D%25A2/---MD---/%25E5%25AD%25A6%25E4%25B9%25A0/mdimages/image-20211222192440398.png)\n\n四、实例与原型\n\n 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。\n\n五、原型的原型\n\n 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：\n\n```\nvar obj = new Object();\nobj.name = 'Kevin'\nconsole.log(obj.name) // Kevin\n```\n\n其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 __proto__ 指向构造函数的 prototype ，所以我们再更新下关系图：\n\n```js\n//原型的最上面是object\n//object 的上面是 null\n```\n\n\n\n六、原型链\n\n 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》\n\n```js\n//而原型链中就是实例对象和原型对象之间的链接。每个函数都有一个prototype属性，这个prototype属性就是我们的原型对象，我们拿这个函数通过new构造函数创建出来的实例对象，这个实例对象自己会有一个指针(_proto_)指向他的构造函数的原型对象！这样构造函数和实例对象之间就通过( _proto_ )连接在一起形成了一条链子。\n```\n\n在JavaScript中 实例化对象与原型之间的链接，叫做原型链，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法，然后层层递进，就构成了实例与原型的链条，这就是所谓的原型链\n\n###### 1).为什么要使用原型链呢？\n\n1.为了实现继承，简化代码，实现代码重用！\n2.只要是这个链条上的内容，都可以被访问和使用到！\n\n###### 2).使用原型链有什么作用？\n\n继承\nprototype用来实现基于原型的继承与属性的共享\n避免了代码冗余，公用的属性和方法，可以放到原型对象中，这样，通过该构造函数实例化的所有对象都可以使用该对象的构造函数中的属性和方法！\n减少了内存占用\n\n###### 3).原型链的特点\n\n**就近原则**，当我们要使用一个值时，程序会优先查找离自己最近的，也就是本身有没有，如果自己没有，他就会沿着原型链向上查找，如果还没有找到，它还会沿着原型链继续向上查找，找到到达Object\n**引用类型，**当我们使用或者修改原型链上的值时，其实使用的是同一个值！\nJS中每个函数都存在原型对象属性prototype。并且所有函数的默认原型都是Object的实例。\n每个继承父函数的实例对象都包含一个内部属性_proto_。该属性包含一个指针，指向父函数的prototype。若父函数的原型对象的_proto_属性为再上一层函数。在此过程中就形成了原型链。\n\n###### 4).ES5继承\n\n```js\n//Es5 继承时，函数尽量不使用函数声明语法\nfunction Animal(name,sex){\n    this.name = name;\n    this.sex = sex;\n}\n\nAnimal.prototype.play = function(){\n    console.log('play');\n}\n\nfunction Cat(name,sex,scorlls){\n    Animal.call(this,name,sex);\n    this.scorlls = scorlls;\n}\n\nCat.prototype = Object.create(Animal.prototype);\n// Cat.prototype.constructor = Cat;\nCat.prototype.constructor = Cat;\n\nconst cat = new Cat('cat','like','ball');\nconst ani = new Animal('any','dislike')\n\n\n// Cat.prototype.constructor = Cat;\ncat.play();\n// Animal.play()\nani.play()\nconsole.log(cat,ani.constructor.prototype)\n\n//如果子对象存在自己的方法，则应该写在\nCat.prototype = Object.create(Animal.prototype)\n//写在前面的话一旦赋值给空白对象，方法就会丢失\n```\n\n###### 5).ES6继承（语法糖）\n\n```js\nclass Animal{\n    constructor(name,sex){\n\t\tthis.name = name;\n        this.sex = sex;\n    }\n    eat(){\n\t  console.log('吃东西');\n    }\n}\n\nclass cat extends Animal {\n\tconstructor(pz,name,sex){\n\tsuper(name,sex);\n    this.pz = pz;\n    }\n    miao(){\n\t\tconsole.log('喵...');\n    }\n}\n\nconstructor(pz,name,sex){\n\tsuper(name,sex);\n  //  里面的参数不需要对应，可以是任意顺序\n```\n\n能被继承\n\nextends的主要用于子类继承父类,继承之后子类拥有父类的的所有方法包括,静态方法和属性\n\n```js\n class A {\n      // 静态属性\n      static info = '见过你的美,还能爱上谁?';\n      // 静态方法\n      static love() {\n        console.log('小姐姐,看见你就犯困,为情所困,为你所困!');\n      }\n      // 普通方法,调用静态属性\n      say() {\n        console.log('小姐姐,' + A.info);\n      }\n    }\n    class B extends A {\n      run() {\n        console.log('类B的方法..');\n      }\n    }\n    //使用类名 父类中普通方法调用\n    B.love();\n```\n\n###### 6).原型链覆盖\n\n```js\nfn.prototype = { ...}\n//这样写原来对象上的方法和属性都被覆盖掉\n```\n\n##### 3.proto,prototype 和constructor之间的关系\n\n```js\nclass Animal{\n    constructor(name,sex){\n\t\tthis.name = name;\n        this.sex = sex;\n    }\n    eat(){\n\t  console.log('吃东西');\n    }\n}\nAnimal.prototype.say = function (){\n\tconsole,log('this is a animal')\n}\n\nconst cat = new Animal\n\n//1.在这里Animal 就是一个构建工程，相当于construcor\n//2.new 关键字声明的cat,就是构造函数的实例化对象\n//3.say 就是定义在构造函数上的原型上的方法，通过Animal这个构造工厂构造出来的实例化对象都具有say这个方法\n\n//关系\ncat.constructor.prototype = cat.proto__ = Object.getPrototypeOf(cat)\n\n//所有拿到实例化对象的原型有三种方法\n//1.cat.__proto__   不推荐使用\n//2.cat.constructor.prototype   不推荐\n//3.Object.getPrototypeOf(cat)  官方推荐\n```\n\n##### 4.call bind apply\n\n```js\n//第一个参数 都是this 的指向，后面的参数则都是传递的参数\n// call 和 bind 传递参数都是： a,b,c...的形式\n  //而apply后面传递的参数应该为数组形式，就算是单个数据也要写成数组的形式 ：['a']\n//bind和call存在的区别在于，call和apply都会立即执行函数，而bind则不会。因此可以用bind写事件处理函数\n```\n\n```js\n // Array.prototype ---》数组的实例化对象的原型 ---》this 指向数组的实例化对象\n    function fn1(a,b,c) {\n      // arguments  foreach\n      // es5中非常重要的写法\n      Array.prototype.forEach.call(arguments,function(item) {\n        console.log(item);\n      })\n    }\n    fn1('哈哈哈', '嘿嘿嘿', '呵呵呵');\n```\n\n```js\nconst btn = document.querySelector('#btn');\n    // call apply bind 改变this指向\n    // call(this,值1,值2....) apply(this, [值1, 值2...]) bind(this, 值1, 值2....)\n    // 从表面上看bind方法和call方法完全一致，但是\n    // bind方法可以再调用之后不执行函数，而call和apply只要调用就立刻执行\n    const obj = {\n      a: 100,\n    }\n    function fn1(user) {\n      console.log('你好', user);\n      console.log(this.a); // window.a\n    }\n    // 让fn1的this指向obj 使用call方法，只要运行代码，程序就会立刻执行\n    // fn1.call(obj, '张三');\n    // fn1.apply(obj, ['张三']);\n    // 我的需要: fn1作为btn的事件处理函数，点击按钮之后再执行\n    // fn1需要改变this指向，同时需要向fn1中传值\n    btn.onclick = fn1.bind(obj, '张三');\n```\n\n![image-20211223194857541](../%25E6%25A1%258C%25E9%259D%25A2/---MD---/%25E5%25AD%25A6%25E4%25B9%25A0/mdimages/image-20211223194857541.png)\n\n```js\nfunction Person(name,age){\n    //this == obj\n    this.name = name;\n    this.age = age;\n}\nver person = new Person('deng',100)\nvar obj = {}\nPerson.call(obj,'cheng',300)\n//test  ---> test.call()\n\n//默认函数运行，相当于隐式运行.call( )\n//把Person时传入obj，相当于this == obj this.name = name ,,this.age = age\n```\n\n```js\nfunction Person(name,age){\n    //this == obj\n    this.name = name;\n    this.age = age;\n}\nfunction Student(){\n}\n```\n\n\n\n","slug":"面向对象以及原型","published":1,"updated":"2025-01-07T02:30:25.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5lv0crg001w572odckxbu62","content":"<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>​        将所有的物体抽象为一个类，每一个具体的个体是类的实例化对象。构造函数是创建类的方法，可以无限制创建类，相当于工厂。</p>\n<p>​        数据类型中的类是一种数据类型，而面向对象是一种编程思想，更高级的还有函数式编程。面向对象里面也有属性和方法。有构造函数创建。为了避免资源的浪费，再构造函数里面创建实例化对象的属性，再构造函数的原型上创建对象的方法。</p>\n<ul>\n<li>​    模板： ——&gt; 构造函数是用来生成对象的，</li>\n<li>​    php python 是一种面向对象的编程语言     -&gt;    以类为创建对象的模板</li>\n<li>​     JavaScript 是基于对象的编程语言   -&gt;    以构造函数为模板 -&gt;动态语言：没有定义数据类型，需要时才会去处理</li>\n</ul>\n<h5 id=\"1-构造函数\"><a href=\"#1-构造函数\" class=\"headerlink\" title=\"1.构造函数\"></a>1.构造函数</h5><p>创建构造函数</p>\n<ul>\n<li>不能使用箭头函数</li>\n<li>首字符大写的函数</li>\n<li>建议不使用函数表达式，如果以函数表达式创建箭头函数，后面进行继承操作的时候，由于需要给子的构造函数还原，若没有名字，则还原之后他的constructor 不具名。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Animal</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Cat</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>在构造函数中，一般只写实例化对象的属性，将实例化对象的方法写在构造函数的原型上，形如</p>\n</li>\n<li><pre><code class=\"js\">function Animal(name,sex)&#123;\n    this.name = name;\n    this.sex = sex;\n&#125;\n\nAnimal.prototype.play = function()&#123;\n    console.log(&#39;play&#39;);\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new 关键字</span><br><span class=\"line\"></span><br><span class=\"line\">- ​\t\t原理：</span><br><span class=\"line\"></span><br><span class=\"line\">  - 创建一个空对象 </span><br><span class=\"line\">  - 空的原型</span><br><span class=\"line\">  - this 的指向变为空对象</span><br><span class=\"line\"></span><br><span class=\"line\">- ```js </span><br><span class=\"line\">  const cat = new Cat(&#x27;实际参数&#x27;)</span><br><span class=\"line\">  //若不需要传递参数，则后面的（）可以省略</span><br><span class=\"line\">  //形如</span><br><span class=\"line\">  const cat = new Car</span><br></pre></td></tr></table></figure>\n\n在构造函数中使用this 关键字，this 指向未来即将生成的实例化对象\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了保证实例化对象的时候，使用new 关键字，可以在构造函数内部使用，严格模式</span></span><br><span class=\"line\"><span class=\"comment\">//如果在实例化对象的时候，没有使用new 关键字系统就会报错</span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>    ....</span><br><span class=\"line\">若实例化时没有加<span class=\"keyword\">new</span>，实例化对象为未定义，而对象的属性直接报错</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;nem&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = <span class=\"string\">&#x27;cute&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> car =<span class=\"title class_\">Car</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car);</span><br><span class=\"line\"><span class=\"comment\">// underfinded</span></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n<li><p>构造函数返回值</p>\n<ul>\n<li>构造函数的返回值如果时基础数据类型，对实例化对象没有影响。</li>\n<li>如果构造函数的返回值是引用数据类型，则会覆盖掉构造函数内部的属性。<ul>\n<li>故构造函数不能有返回值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>new.target命令</p>\n<p>函数内部可以使用<code>new.target</code>属性。如果当前函数是<code>new</code>命令调用，<code>new.target</code>指向当前函数，否则为<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span>.<span class=\"property\">target</span> === f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">f</span>() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用这个属性，可以判断函数调用的时候，是否使用<code>new</code>命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">new</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请使用 new 命令调用！&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// Uncaught Error: 请使用 new 命令调用！</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，构造函数<code>f</code>调用时，没有使用<code>new</code>命令，就抛出一个错误。</p>\n<p>Object.create( ) 创建实例对象</p>\n<p>通过 Object.create 创建的对象原型为空。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于继承</span></span><br><span class=\"line\"><span class=\"title class_\">Fn1</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Oject</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Fn2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> )</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果需要一个构造函数的内容的部分包含另一个构造函数的内容，并且又有自己的</p>\n<p>属性，该怎么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cat</span>(<span class=\"params\">name,sex,scorlls</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">scorlls</span> = scorlls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//此处的call也可替换为apply，但后面参数要写成数组的形式</span></span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"title function_\">apply</span>( <span class=\"variable language_\">this</span>,[name,sex])</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"2-原型和原型链\"><a href=\"#2-原型和原型链\" class=\"headerlink\" title=\"2.原型和原型链\"></a>2.原型和原型链</h5><p>一、prototype</p>\n<p>在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。并且这个属性是一个对象数据类型的值.</p>\n<p>除了underfinded 和 null 以外，所有的数据类型的原型都是Oject</p>\n<p><code>Person           ------     prototype ---                    Perosn.prototype</code></p>\n<p><code>(构造函数)                                           ---&gt;                           (实现原理)</code></p>\n<p>二、<strong>proto</strong></p>\n<p>这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。</p>\n<p>三、constructor</p>\n<p>每个原型都有一个constructor属性，指向该关联的构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>===<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//现在基本已不被使用</span></span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span> = obj.<span class=\"property\">construcror</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">被右边的写法替代</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"E:/%25E6%25A1%258C%25E9%259D%25A2/---MD---/%25E5%25AD%25A6%25E4%25B9%25A0/mdimages/image-20211222192440398.png\" alt=\"image-20211222192440398\"></p>\n<p>四、实例与原型</p>\n<p> 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p>\n<p>五、原型的原型</p>\n<p> 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = new Object();</span><br><span class=\"line\">obj.name = &#x27;Kevin&#x27;</span><br><span class=\"line\">console.log(obj.name) // Kevin</span><br></pre></td></tr></table></figure>\n\n<p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>proto</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原型的最上面是object</span></span><br><span class=\"line\"><span class=\"comment\">//object 的上面是 null</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>六、原型链</p>\n<p> 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//而原型链中就是实例对象和原型对象之间的链接。每个函数都有一个prototype属性，这个prototype属性就是我们的原型对象，我们拿这个函数通过new构造函数创建出来的实例对象，这个实例对象自己会有一个指针(_proto_)指向他的构造函数的原型对象！这样构造函数和实例对象之间就通过( _proto_ )连接在一起形成了一条链子。</span></span><br></pre></td></tr></table></figure>\n\n<p>在JavaScript中 实例化对象与原型之间的链接，叫做原型链，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法，然后层层递进，就构成了实例与原型的链条，这就是所谓的原型链</p>\n<h6 id=\"1-为什么要使用原型链呢？\"><a href=\"#1-为什么要使用原型链呢？\" class=\"headerlink\" title=\"1).为什么要使用原型链呢？\"></a>1).为什么要使用原型链呢？</h6><p>1.为了实现继承，简化代码，实现代码重用！<br>2.只要是这个链条上的内容，都可以被访问和使用到！</p>\n<h6 id=\"2-使用原型链有什么作用？\"><a href=\"#2-使用原型链有什么作用？\" class=\"headerlink\" title=\"2).使用原型链有什么作用？\"></a>2).使用原型链有什么作用？</h6><p>继承<br>prototype用来实现基于原型的继承与属性的共享<br>避免了代码冗余，公用的属性和方法，可以放到原型对象中，这样，通过该构造函数实例化的所有对象都可以使用该对象的构造函数中的属性和方法！<br>减少了内存占用</p>\n<h6 id=\"3-原型链的特点\"><a href=\"#3-原型链的特点\" class=\"headerlink\" title=\"3).原型链的特点\"></a>3).原型链的特点</h6><p><strong>就近原则</strong>，当我们要使用一个值时，程序会优先查找离自己最近的，也就是本身有没有，如果自己没有，他就会沿着原型链向上查找，如果还没有找到，它还会沿着原型链继续向上查找，找到到达Object<br><strong>引用类型，</strong>当我们使用或者修改原型链上的值时，其实使用的是同一个值！<br>JS中每个函数都存在原型对象属性prototype。并且所有函数的默认原型都是Object的实例。<br>每个继承父函数的实例对象都包含一个内部属性_proto_。该属性包含一个指针，指向父函数的prototype。若父函数的原型对象的_proto_属性为再上一层函数。在此过程中就形成了原型链。</p>\n<h6 id=\"4-ES5继承\"><a href=\"#4-ES5继承\" class=\"headerlink\" title=\"4).ES5继承\"></a>4).ES5继承</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Es5 继承时，函数尽量不使用函数声明语法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">play</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;play&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cat</span>(<span class=\"params\">name,sex,scorlls</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">scorlls</span> = scorlls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"comment\">// Cat.prototype.constructor = Cat;</span></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>(<span class=\"string\">&#x27;cat&#x27;</span>,<span class=\"string\">&#x27;like&#x27;</span>,<span class=\"string\">&#x27;ball&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ani = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;any&#x27;</span>,<span class=\"string\">&#x27;dislike&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cat.prototype.constructor = Cat;</span></span><br><span class=\"line\">cat.<span class=\"title function_\">play</span>();</span><br><span class=\"line\"><span class=\"comment\">// Animal.play()</span></span><br><span class=\"line\">ani.<span class=\"title function_\">play</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cat,ani.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果子对象存在自己的方法，则应该写在</span></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"><span class=\"comment\">//写在前面的话一旦赋值给空白对象，方法就会丢失</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-ES6继承（语法糖）\"><a href=\"#5-ES6继承（语法糖）\" class=\"headerlink\" title=\"5).ES6继承（语法糖）\"></a>5).ES6继承（语法糖）</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;吃东西&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">pz,name,sex</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>(name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pz</span> = pz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">miao</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;喵...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">pz,name,sex</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>(name,sex);</span><br><span class=\"line\">  <span class=\"comment\">//  里面的参数不需要对应，可以是任意顺序</span></span><br></pre></td></tr></table></figure>\n\n<p>能被继承</p>\n<p>extends的主要用于子类继承父类,继承之后子类拥有父类的的所有方法包括,静态方法和属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 静态属性</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> info = <span class=\"string\">&#x27;见过你的美,还能爱上谁?&#x27;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"title function_\">love</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,看见你就犯困,为情所困,为你所困!&#x27;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 普通方法,调用静态属性</span></span><br><span class=\"line\">     <span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,&#x27;</span> + A.<span class=\"property\">info</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;类B的方法..&#x27;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//使用类名 父类中普通方法调用</span></span><br><span class=\"line\">   B.<span class=\"title function_\">love</span>();</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"6-原型链覆盖\"><a href=\"#6-原型链覆盖\" class=\"headerlink\" title=\"6).原型链覆盖\"></a>6).原型链覆盖</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123; ...&#125;</span><br><span class=\"line\"><span class=\"comment\">//这样写原来对象上的方法和属性都被覆盖掉</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-proto-prototype-和constructor之间的关系\"><a href=\"#3-proto-prototype-和constructor之间的关系\" class=\"headerlink\" title=\"3.proto,prototype 和constructor之间的关系\"></a>3.proto,prototype 和constructor之间的关系</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;吃东西&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>,<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this is a animal&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.在这里Animal 就是一个构建工程，相当于construcor</span></span><br><span class=\"line\"><span class=\"comment\">//2.new 关键字声明的cat,就是构造函数的实例化对象</span></span><br><span class=\"line\"><span class=\"comment\">//3.say 就是定义在构造函数上的原型上的方法，通过Animal这个构造工厂构造出来的实例化对象都具有say这个方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关系</span></span><br><span class=\"line\">cat.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = cat.<span class=\"property\">proto__</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(cat)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所有拿到实例化对象的原型有三种方法</span></span><br><span class=\"line\"><span class=\"comment\">//1.cat.__proto__   不推荐使用</span></span><br><span class=\"line\"><span class=\"comment\">//2.cat.constructor.prototype   不推荐</span></span><br><span class=\"line\"><span class=\"comment\">//3.Object.getPrototypeOf(cat)  官方推荐</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-call-bind-apply\"><a href=\"#4-call-bind-apply\" class=\"headerlink\" title=\"4.call bind apply\"></a>4.call bind apply</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一个参数 都是this 的指向，后面的参数则都是传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">// call 和 bind 传递参数都是： a,b,c...的形式</span></span><br><span class=\"line\">  <span class=\"comment\">//而apply后面传递的参数应该为数组形式，就算是单个数据也要写成数组的形式 ：[&#x27;a&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">//bind和call存在的区别在于，call和apply都会立即执行函数，而bind则不会。因此可以用bind写事件处理函数</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype ---》数组的实例化对象的原型 ---》this 指向数组的实例化对象</span></span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a,b,c</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// arguments  foreach</span></span><br><span class=\"line\">     <span class=\"comment\">// es5中非常重要的写法</span></span><br><span class=\"line\">     <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>,<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">fn1</span>(<span class=\"string\">&#x27;哈哈哈&#x27;</span>, <span class=\"string\">&#x27;嘿嘿嘿&#x27;</span>, <span class=\"string\">&#x27;呵呵呵&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// call apply bind 改变this指向</span></span><br><span class=\"line\">    <span class=\"comment\">// call(this,值1,值2....) apply(this, [值1, 值2...]) bind(this, 值1, 值2....)</span></span><br><span class=\"line\">    <span class=\"comment\">// 从表面上看bind方法和call方法完全一致，但是</span></span><br><span class=\"line\">    <span class=\"comment\">// bind方法可以再调用之后不执行函数，而call和apply只要调用就立刻执行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">user</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你好&#x27;</span>, user);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>); <span class=\"comment\">// window.a</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 让fn1的this指向obj 使用call方法，只要运行代码，程序就会立刻执行</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1.call(obj, &#x27;张三&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1.apply(obj, [&#x27;张三&#x27;]);</span></span><br><span class=\"line\">    <span class=\"comment\">// 我的需要: fn1作为btn的事件处理函数，点击按钮之后再执行</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1需要改变this指向，同时需要向fn1中传值</span></span><br><span class=\"line\">    btn.<span class=\"property\">onclick</span> = fn1.<span class=\"title function_\">bind</span>(obj, <span class=\"string\">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/codefish/../%25E6%25A1%258C%25E9%259D%25A2/---MD---/%25E5%25AD%25A6%25E4%25B9%25A0/mdimages/image-20211223194857541.png\" alt=\"image-20211223194857541\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//this == obj</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ver person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;deng&#x27;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(obj,<span class=\"string\">&#x27;cheng&#x27;</span>,<span class=\"number\">300</span>)</span><br><span class=\"line\"><span class=\"comment\">//test  ---&gt; test.call()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认函数运行，相当于隐式运行.call( )</span></span><br><span class=\"line\"><span class=\"comment\">//把Person时传入obj，相当于this == obj this.name = name ,,this.age = age</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//this == obj</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>​        将所有的物体抽象为一个类，每一个具体的个体是类的实例化对象。构造函数是创建类的方法，可以无限制创建类，相当于工厂。</p>\n<p>​        数据类型中的类是一种数据类型，而面向对象是一种编程思想，更高级的还有函数式编程。面向对象里面也有属性和方法。有构造函数创建。为了避免资源的浪费，再构造函数里面创建实例化对象的属性，再构造函数的原型上创建对象的方法。</p>\n<ul>\n<li>​    模板： ——&gt; 构造函数是用来生成对象的，</li>\n<li>​    php python 是一种面向对象的编程语言     -&gt;    以类为创建对象的模板</li>\n<li>​     JavaScript 是基于对象的编程语言   -&gt;    以构造函数为模板 -&gt;动态语言：没有定义数据类型，需要时才会去处理</li>\n</ul>\n<h5 id=\"1-构造函数\"><a href=\"#1-构造函数\" class=\"headerlink\" title=\"1.构造函数\"></a>1.构造函数</h5><p>创建构造函数</p>\n<ul>\n<li>不能使用箭头函数</li>\n<li>首字符大写的函数</li>\n<li>建议不使用函数表达式，如果以函数表达式创建箭头函数，后面进行继承操作的时候，由于需要给子的构造函数还原，若没有名字，则还原之后他的constructor 不具名。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Animal</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Cat</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>在构造函数中，一般只写实例化对象的属性，将实例化对象的方法写在构造函数的原型上，形如</p>\n</li>\n<li><pre><code class=\"js\">function Animal(name,sex)&#123;\n    this.name = name;\n    this.sex = sex;\n&#125;\n\nAnimal.prototype.play = function()&#123;\n    console.log(&#39;play&#39;);\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new 关键字</span><br><span class=\"line\"></span><br><span class=\"line\">- ​\t\t原理：</span><br><span class=\"line\"></span><br><span class=\"line\">  - 创建一个空对象 </span><br><span class=\"line\">  - 空的原型</span><br><span class=\"line\">  - this 的指向变为空对象</span><br><span class=\"line\"></span><br><span class=\"line\">- ```js </span><br><span class=\"line\">  const cat = new Cat(&#x27;实际参数&#x27;)</span><br><span class=\"line\">  //若不需要传递参数，则后面的（）可以省略</span><br><span class=\"line\">  //形如</span><br><span class=\"line\">  const cat = new Car</span><br></pre></td></tr></table></figure>\n\n在构造函数中使用this 关键字，this 指向未来即将生成的实例化对象\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了保证实例化对象的时候，使用new 关键字，可以在构造函数内部使用，严格模式</span></span><br><span class=\"line\"><span class=\"comment\">//如果在实例化对象的时候，没有使用new 关键字系统就会报错</span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>    ....</span><br><span class=\"line\">若实例化时没有加<span class=\"keyword\">new</span>，实例化对象为未定义，而对象的属性直接报错</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Car</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;nem&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = <span class=\"string\">&#x27;cute&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> car =<span class=\"title class_\">Car</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(car);</span><br><span class=\"line\"><span class=\"comment\">// underfinded</span></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n<li><p>构造函数返回值</p>\n<ul>\n<li>构造函数的返回值如果时基础数据类型，对实例化对象没有影响。</li>\n<li>如果构造函数的返回值是引用数据类型，则会覆盖掉构造函数内部的属性。<ul>\n<li>故构造函数不能有返回值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>new.target命令</p>\n<p>函数内部可以使用<code>new.target</code>属性。如果当前函数是<code>new</code>命令调用，<code>new.target</code>指向当前函数，否则为<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span>.<span class=\"property\">target</span> === f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">f</span>() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用这个属性，可以判断函数调用的时候，是否使用<code>new</code>命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">new</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请使用 new 命令调用！&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// Uncaught Error: 请使用 new 命令调用！</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，构造函数<code>f</code>调用时，没有使用<code>new</code>命令，就抛出一个错误。</p>\n<p>Object.create( ) 创建实例对象</p>\n<p>通过 Object.create 创建的对象原型为空。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于继承</span></span><br><span class=\"line\"><span class=\"title class_\">Fn1</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Oject</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Fn2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> )</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果需要一个构造函数的内容的部分包含另一个构造函数的内容，并且又有自己的</p>\n<p>属性，该怎么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cat</span>(<span class=\"params\">name,sex,scorlls</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">scorlls</span> = scorlls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//此处的call也可替换为apply，但后面参数要写成数组的形式</span></span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"title function_\">apply</span>( <span class=\"variable language_\">this</span>,[name,sex])</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"2-原型和原型链\"><a href=\"#2-原型和原型链\" class=\"headerlink\" title=\"2.原型和原型链\"></a>2.原型和原型链</h5><p>一、prototype</p>\n<p>在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。并且这个属性是一个对象数据类型的值.</p>\n<p>除了underfinded 和 null 以外，所有的数据类型的原型都是Oject</p>\n<p><code>Person           ------     prototype ---                    Perosn.prototype</code></p>\n<p><code>(构造函数)                                           ---&gt;                           (实现原理)</code></p>\n<p>二、<strong>proto</strong></p>\n<p>这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。</p>\n<p>三、constructor</p>\n<p>每个原型都有一个constructor属性，指向该关联的构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>===<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//现在基本已不被使用</span></span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span> = obj.<span class=\"property\">construcror</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">被右边的写法替代</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"E:/%25E6%25A1%258C%25E9%259D%25A2/---MD---/%25E5%25AD%25A6%25E4%25B9%25A0/mdimages/image-20211222192440398.png\" alt=\"image-20211222192440398\"></p>\n<p>四、实例与原型</p>\n<p> 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p>\n<p>五、原型的原型</p>\n<p> 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = new Object();</span><br><span class=\"line\">obj.name = &#x27;Kevin&#x27;</span><br><span class=\"line\">console.log(obj.name) // Kevin</span><br></pre></td></tr></table></figure>\n\n<p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>proto</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原型的最上面是object</span></span><br><span class=\"line\"><span class=\"comment\">//object 的上面是 null</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>六、原型链</p>\n<p> 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//而原型链中就是实例对象和原型对象之间的链接。每个函数都有一个prototype属性，这个prototype属性就是我们的原型对象，我们拿这个函数通过new构造函数创建出来的实例对象，这个实例对象自己会有一个指针(_proto_)指向他的构造函数的原型对象！这样构造函数和实例对象之间就通过( _proto_ )连接在一起形成了一条链子。</span></span><br></pre></td></tr></table></figure>\n\n<p>在JavaScript中 实例化对象与原型之间的链接，叫做原型链，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法，然后层层递进，就构成了实例与原型的链条，这就是所谓的原型链</p>\n<h6 id=\"1-为什么要使用原型链呢？\"><a href=\"#1-为什么要使用原型链呢？\" class=\"headerlink\" title=\"1).为什么要使用原型链呢？\"></a>1).为什么要使用原型链呢？</h6><p>1.为了实现继承，简化代码，实现代码重用！<br>2.只要是这个链条上的内容，都可以被访问和使用到！</p>\n<h6 id=\"2-使用原型链有什么作用？\"><a href=\"#2-使用原型链有什么作用？\" class=\"headerlink\" title=\"2).使用原型链有什么作用？\"></a>2).使用原型链有什么作用？</h6><p>继承<br>prototype用来实现基于原型的继承与属性的共享<br>避免了代码冗余，公用的属性和方法，可以放到原型对象中，这样，通过该构造函数实例化的所有对象都可以使用该对象的构造函数中的属性和方法！<br>减少了内存占用</p>\n<h6 id=\"3-原型链的特点\"><a href=\"#3-原型链的特点\" class=\"headerlink\" title=\"3).原型链的特点\"></a>3).原型链的特点</h6><p><strong>就近原则</strong>，当我们要使用一个值时，程序会优先查找离自己最近的，也就是本身有没有，如果自己没有，他就会沿着原型链向上查找，如果还没有找到，它还会沿着原型链继续向上查找，找到到达Object<br><strong>引用类型，</strong>当我们使用或者修改原型链上的值时，其实使用的是同一个值！<br>JS中每个函数都存在原型对象属性prototype。并且所有函数的默认原型都是Object的实例。<br>每个继承父函数的实例对象都包含一个内部属性_proto_。该属性包含一个指针，指向父函数的prototype。若父函数的原型对象的_proto_属性为再上一层函数。在此过程中就形成了原型链。</p>\n<h6 id=\"4-ES5继承\"><a href=\"#4-ES5继承\" class=\"headerlink\" title=\"4).ES5继承\"></a>4).ES5继承</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Es5 继承时，函数尽量不使用函数声明语法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Animal</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">play</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;play&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cat</span>(<span class=\"params\">name,sex,scorlls</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Animal</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">scorlls</span> = scorlls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"comment\">// Cat.prototype.constructor = Cat;</span></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>(<span class=\"string\">&#x27;cat&#x27;</span>,<span class=\"string\">&#x27;like&#x27;</span>,<span class=\"string\">&#x27;ball&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ani = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;any&#x27;</span>,<span class=\"string\">&#x27;dislike&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cat.prototype.constructor = Cat;</span></span><br><span class=\"line\">cat.<span class=\"title function_\">play</span>();</span><br><span class=\"line\"><span class=\"comment\">// Animal.play()</span></span><br><span class=\"line\">ani.<span class=\"title function_\">play</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cat,ani.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果子对象存在自己的方法，则应该写在</span></span><br><span class=\"line\"><span class=\"title class_\">Cat</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"><span class=\"comment\">//写在前面的话一旦赋值给空白对象，方法就会丢失</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-ES6继承（语法糖）\"><a href=\"#5-ES6继承（语法糖）\" class=\"headerlink\" title=\"5).ES6继承（语法糖）\"></a>5).ES6继承（语法糖）</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;吃东西&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">pz,name,sex</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>(name,sex);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pz</span> = pz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">miao</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;喵...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">pz,name,sex</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">super</span>(name,sex);</span><br><span class=\"line\">  <span class=\"comment\">//  里面的参数不需要对应，可以是任意顺序</span></span><br></pre></td></tr></table></figure>\n\n<p>能被继承</p>\n<p>extends的主要用于子类继承父类,继承之后子类拥有父类的的所有方法包括,静态方法和属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 静态属性</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> info = <span class=\"string\">&#x27;见过你的美,还能爱上谁?&#x27;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"title function_\">love</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,看见你就犯困,为情所困,为你所困!&#x27;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 普通方法,调用静态属性</span></span><br><span class=\"line\">     <span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;小姐姐,&#x27;</span> + A.<span class=\"property\">info</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;类B的方法..&#x27;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//使用类名 父类中普通方法调用</span></span><br><span class=\"line\">   B.<span class=\"title function_\">love</span>();</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"6-原型链覆盖\"><a href=\"#6-原型链覆盖\" class=\"headerlink\" title=\"6).原型链覆盖\"></a>6).原型链覆盖</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123; ...&#125;</span><br><span class=\"line\"><span class=\"comment\">//这样写原来对象上的方法和属性都被覆盖掉</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-proto-prototype-和constructor之间的关系\"><a href=\"#3-proto-prototype-和constructor之间的关系\" class=\"headerlink\" title=\"3.proto,prototype 和constructor之间的关系\"></a>3.proto,prototype 和constructor之间的关系</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,sex</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">sex</span> = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">eat</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;吃东西&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Animal</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>,<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this is a animal&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.在这里Animal 就是一个构建工程，相当于construcor</span></span><br><span class=\"line\"><span class=\"comment\">//2.new 关键字声明的cat,就是构造函数的实例化对象</span></span><br><span class=\"line\"><span class=\"comment\">//3.say 就是定义在构造函数上的原型上的方法，通过Animal这个构造工厂构造出来的实例化对象都具有say这个方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关系</span></span><br><span class=\"line\">cat.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = cat.<span class=\"property\">proto__</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(cat)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所有拿到实例化对象的原型有三种方法</span></span><br><span class=\"line\"><span class=\"comment\">//1.cat.__proto__   不推荐使用</span></span><br><span class=\"line\"><span class=\"comment\">//2.cat.constructor.prototype   不推荐</span></span><br><span class=\"line\"><span class=\"comment\">//3.Object.getPrototypeOf(cat)  官方推荐</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-call-bind-apply\"><a href=\"#4-call-bind-apply\" class=\"headerlink\" title=\"4.call bind apply\"></a>4.call bind apply</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一个参数 都是this 的指向，后面的参数则都是传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">// call 和 bind 传递参数都是： a,b,c...的形式</span></span><br><span class=\"line\">  <span class=\"comment\">//而apply后面传递的参数应该为数组形式，就算是单个数据也要写成数组的形式 ：[&#x27;a&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">//bind和call存在的区别在于，call和apply都会立即执行函数，而bind则不会。因此可以用bind写事件处理函数</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype ---》数组的实例化对象的原型 ---》this 指向数组的实例化对象</span></span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">a,b,c</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// arguments  foreach</span></span><br><span class=\"line\">     <span class=\"comment\">// es5中非常重要的写法</span></span><br><span class=\"line\">     <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>,<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">fn1</span>(<span class=\"string\">&#x27;哈哈哈&#x27;</span>, <span class=\"string\">&#x27;嘿嘿嘿&#x27;</span>, <span class=\"string\">&#x27;呵呵呵&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// call apply bind 改变this指向</span></span><br><span class=\"line\">    <span class=\"comment\">// call(this,值1,值2....) apply(this, [值1, 值2...]) bind(this, 值1, 值2....)</span></span><br><span class=\"line\">    <span class=\"comment\">// 从表面上看bind方法和call方法完全一致，但是</span></span><br><span class=\"line\">    <span class=\"comment\">// bind方法可以再调用之后不执行函数，而call和apply只要调用就立刻执行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">      <span class=\"attr\">a</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">user</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你好&#x27;</span>, user);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>); <span class=\"comment\">// window.a</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 让fn1的this指向obj 使用call方法，只要运行代码，程序就会立刻执行</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1.call(obj, &#x27;张三&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1.apply(obj, [&#x27;张三&#x27;]);</span></span><br><span class=\"line\">    <span class=\"comment\">// 我的需要: fn1作为btn的事件处理函数，点击按钮之后再执行</span></span><br><span class=\"line\">    <span class=\"comment\">// fn1需要改变this指向，同时需要向fn1中传值</span></span><br><span class=\"line\">    btn.<span class=\"property\">onclick</span> = fn1.<span class=\"title function_\">bind</span>(obj, <span class=\"string\">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/codefish/../%25E6%25A1%258C%25E9%259D%25A2/---MD---/%25E5%25AD%25A6%25E4%25B9%25A0/mdimages/image-20211223194857541.png\" alt=\"image-20211223194857541\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//this == obj</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ver person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;deng&#x27;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(obj,<span class=\"string\">&#x27;cheng&#x27;</span>,<span class=\"number\">300</span>)</span><br><span class=\"line\"><span class=\"comment\">//test  ---&gt; test.call()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//默认函数运行，相当于隐式运行.call( )</span></span><br><span class=\"line\"><span class=\"comment\">//把Person时传入obj，相当于this == obj this.name = name ,,this.age = age</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//this == obj</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"js内置对象map,set,generate,iterator","author":"codefish","date":"2024-01-07T12:20:34.000Z","top_img":"/img/13.jpg","cover":"/img/13.jpg","_content":"\n开发中问题调试, 一直是一个业务开发痛点, 根据前端的应用载体可分为, \n\n1. web应用\n2. 小程序\n3. h5\n   1. app内嵌h5\n   2. 微信h5 | 微信公众号\n\n### web调试\n\n1. 一般在开发过程中, 大多采用**console, debugger断点方式**\n2. 线上环境调试\n   1. 本地连接线上数据进行调试\n   2. 线上查看控制台是否有报错(一般是使用了某些没有的定义的变量或者方法)\n   3. 线上调试正在运行的源代码, 进行debugger调试\n   4. 各种浏览器tools: Vue devtools , React developer tools, react redux \n\n\n\n### 小程序调试\n\n基本和上述一致,  只是载体从浏览器变为了开发者工具或者真机, 需要注意的是,  如果需要测试唤起调试, 需要编译好小程序后, 手机扫描, 设置唤起扫码的版本\n\n\n\n### h5调试\n\n1. #### 内嵌h5\n\n   如果有对应程序的debug包, 可以直接抓包, 如果不能抓包, 网页检查器也是不能使用的\n\n   - 接口调试 / 网页错误\n\n     - 抓包工具charles fiddler\n\n     - 网页调试功能 \n\n       - safari可以使用网页检查器(和web应用一样全可以调试)\n\n       - chorme devices可以调试任何网页, 前提是app没有限制 \n\n         Eg: [chorme devices](chrome://inspect/#devices) : chrome://inspect/#devices\n\n2. #### 微信h5, 微信公众号\n\n   1. 主要使用微信开发者工具\n\n3. \n\n\n\n\n\n###### 关于工具的使用不赘述, 可以自行搜索\n\n注意\n\n- charles证书有效期为一年, 网页检查器部分机型不装证书可能没有效果\n- 线上源代码调试的时候, 搜索关键字建议用中文, 函数名都会被转为别的名字, 会搜索不到\n\n\n\n\n\n\n\n\n\n","source":"_posts/开发代码调试, 问题定位.md","raw":"---\n\n\n\ntitle: js内置对象map,set,generate,iterator\n\ntags: [map,set,generate,iterator]\n\nauthor: codefish\n\ndate: 2024-01-07 20:20:34\n\ncategories: js\n\ntop_img: /img/13.jpg\n\ncover: /img/13.jpg\n\n\n\n---\n\n开发中问题调试, 一直是一个业务开发痛点, 根据前端的应用载体可分为, \n\n1. web应用\n2. 小程序\n3. h5\n   1. app内嵌h5\n   2. 微信h5 | 微信公众号\n\n### web调试\n\n1. 一般在开发过程中, 大多采用**console, debugger断点方式**\n2. 线上环境调试\n   1. 本地连接线上数据进行调试\n   2. 线上查看控制台是否有报错(一般是使用了某些没有的定义的变量或者方法)\n   3. 线上调试正在运行的源代码, 进行debugger调试\n   4. 各种浏览器tools: Vue devtools , React developer tools, react redux \n\n\n\n### 小程序调试\n\n基本和上述一致,  只是载体从浏览器变为了开发者工具或者真机, 需要注意的是,  如果需要测试唤起调试, 需要编译好小程序后, 手机扫描, 设置唤起扫码的版本\n\n\n\n### h5调试\n\n1. #### 内嵌h5\n\n   如果有对应程序的debug包, 可以直接抓包, 如果不能抓包, 网页检查器也是不能使用的\n\n   - 接口调试 / 网页错误\n\n     - 抓包工具charles fiddler\n\n     - 网页调试功能 \n\n       - safari可以使用网页检查器(和web应用一样全可以调试)\n\n       - chorme devices可以调试任何网页, 前提是app没有限制 \n\n         Eg: [chorme devices](chrome://inspect/#devices) : chrome://inspect/#devices\n\n2. #### 微信h5, 微信公众号\n\n   1. 主要使用微信开发者工具\n\n3. \n\n\n\n\n\n###### 关于工具的使用不赘述, 可以自行搜索\n\n注意\n\n- charles证书有效期为一年, 网页检查器部分机型不装证书可能没有效果\n- 线上源代码调试的时候, 搜索关键字建议用中文, 函数名都会被转为别的名字, 会搜索不到\n\n\n\n\n\n\n\n\n\n","slug":"开发代码调试, 问题定位","published":1,"updated":"2025-01-07T12:10:59.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5mfjbjd0000os325pwceai2","content":"<p>开发中问题调试, 一直是一个业务开发痛点, 根据前端的应用载体可分为, </p>\n<ol>\n<li>web应用</li>\n<li>小程序</li>\n<li>h5<ol>\n<li>app内嵌h5</li>\n<li>微信h5 | 微信公众号</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"web调试\"><a href=\"#web调试\" class=\"headerlink\" title=\"web调试\"></a>web调试</h3><ol>\n<li>一般在开发过程中, 大多采用<strong>console, debugger断点方式</strong></li>\n<li>线上环境调试<ol>\n<li>本地连接线上数据进行调试</li>\n<li>线上查看控制台是否有报错(一般是使用了某些没有的定义的变量或者方法)</li>\n<li>线上调试正在运行的源代码, 进行debugger调试</li>\n<li>各种浏览器tools: Vue devtools , React developer tools, react redux</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"小程序调试\"><a href=\"#小程序调试\" class=\"headerlink\" title=\"小程序调试\"></a>小程序调试</h3><p>基本和上述一致,  只是载体从浏览器变为了开发者工具或者真机, 需要注意的是,  如果需要测试唤起调试, 需要编译好小程序后, 手机扫描, 设置唤起扫码的版本</p>\n<h3 id=\"h5调试\"><a href=\"#h5调试\" class=\"headerlink\" title=\"h5调试\"></a>h5调试</h3><ol>\n<li><h4 id=\"内嵌h5\"><a href=\"#内嵌h5\" class=\"headerlink\" title=\"内嵌h5\"></a>内嵌h5</h4><p>如果有对应程序的debug包, 可以直接抓包, 如果不能抓包, 网页检查器也是不能使用的</p>\n<ul>\n<li><p>接口调试 &#x2F; 网页错误</p>\n<ul>\n<li><p>抓包工具charles fiddler</p>\n</li>\n<li><p>网页调试功能 </p>\n<ul>\n<li><p>safari可以使用网页检查器(和web应用一样全可以调试)</p>\n</li>\n<li><p>chorme devices可以调试任何网页, 前提是app没有限制 </p>\n<p>Eg: <a href=\"chrome://inspect/#devices\">chorme devices</a> : chrome:&#x2F;&#x2F;inspect&#x2F;#devices</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"微信h5-微信公众号\"><a href=\"#微信h5-微信公众号\" class=\"headerlink\" title=\"微信h5, 微信公众号\"></a>微信h5, 微信公众号</h4><ol>\n<li>主要使用微信开发者工具</li>\n</ol>\n</li>\n<li></li>\n</ol>\n<h6 id=\"关于工具的使用不赘述-可以自行搜索\"><a href=\"#关于工具的使用不赘述-可以自行搜索\" class=\"headerlink\" title=\"关于工具的使用不赘述, 可以自行搜索\"></a>关于工具的使用不赘述, 可以自行搜索</h6><p>注意</p>\n<ul>\n<li>charles证书有效期为一年, 网页检查器部分机型不装证书可能没有效果</li>\n<li>线上源代码调试的时候, 搜索关键字建议用中文, 函数名都会被转为别的名字, 会搜索不到</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"帽子戏法","link":"https://mzxf1025.gitee.io","avatar":"https://mzxf1025.gitee.io/mzxf1025.gitee.io/57.png","descr":"一个优秀，很不错的开发"},{"name":"俊劫的学习基地","descr":"一个前端学习资源很多的小混子","avatar":"http://alexwjj.github.io/img/logo.png","link":"http://alexwjj.github.io/","bgColor":"#CBEAFA","textColor":"#6854A1"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱","siteshot":"https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anzhiy.cn.jpg"}]},{"class_name":"学习","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"学檬大大","link":"https://space.bilibili.com/11348179/?spm_id_from=333.999.0.0","avatar":"https://ts1.cn.mm.bing.net/th/id/R-C.b83b8760323c27beb700be11fa9bbb58?rik=TyYOSoGCuCv6NQ&riu=http%3a%2f%2fpic.ntimg.cn%2ffile%2f20191121%2f11992437_225130060607_2.jpg&ehk=g1FZdmG457NsU0zXfz0Lk9ojna%2bgf61uKiCDazorBUA%3d&risl=&pid=ImgRaw&r=0","descr":"日系摄影师-PS后期,摄像up主"},{"name":"nest","link":"https://docs.nestjs.cn/","avatar":"https://docs.nestjs.cn/_media/icon.svg","descr":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。"},{"name":"typeorm","link":"https://typeorm.biunav.com/","avatar":"https://typeorm.biunav.com/images/favicon.ico","descr":"支持多重继承模式、级联、索引、事务、迁移和自动迁移、连接池、主从复制、遵循所有可能的最佳实践"},{"name":"rap2","link":"http://rap2.taobao.org/account/login","avatar":"http://rap2.taobao.org/favicon.png","descr":"RAP接口管理平台"},{"name":"nav","link":"http://hao.shejidaren.com/","avatar":"http://hao.shejidaren.com/images/favicon.ico","descr":"设计导航"},{"name":"腾讯云开发手册","link":"https://cloud.tencent.com/developer/doc/1158","avatar":"https://cloudcache.tencent-cloud.com/qcloud/portal/kit/images/slice/logo.23996906.svg","descr":"技术手册"},{"name":"安仔弹吉他","link":"https://mp.weixin.qq.com/s/Nv7392SysnuEUV4erYv44w","avatar":"https://tse4-mm.cn.bing.net/th/id/OIP-C.WsK5qvetfPedFQqdOFGeBwAAAA?w=190&h=190&c=7&r=0&o=5&dpr=1.12&pid=1.7","descr":"一个吉他教学公众号"}]},{"class_name":"emoji","class_desc":"能看一下午抓螃蟹","link_list":[{"name":"思乡渔夫","link":"https://space.bilibili.com/391943536/?spm_id_from=333.999.0.0","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP-C.uG6O9D-mVJqPPg12m7m3_wHaEK?pid=ImgDet&rs=1","descr":"一个抓螃蟹挖堤坝的up主"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"马哥导航","link":"https://mgnav.com/","avatar":"https://mgnav.com/favicon.ico","descr":"导航资源"},{"name":"在线之家","link":"https://zxzj.vip/","avatar":"https://zxzj.vip/statics/img/favicon.ico","descr":"美剧在线观看"},{"name":"pexels","link":"https://www.pexels.com/zh-cn/","avatar":"https://www.pexels.com/favicon.ico","descr":"高清图片资源"},{"name":"unsplash","link":"https://unsplash.com/","avatar":"https://unsplash.com/apple-touch-icon.png","descr":"高清图片资源"},{"name":"阿虚","link":"https://axutongxue.com/","avatar":"https://axutongxue.com/favicon.ico","descr":"百宝箱"}]}]}},"excerpt":"","more":"<p>开发中问题调试, 一直是一个业务开发痛点, 根据前端的应用载体可分为, </p>\n<ol>\n<li>web应用</li>\n<li>小程序</li>\n<li>h5<ol>\n<li>app内嵌h5</li>\n<li>微信h5 | 微信公众号</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"web调试\"><a href=\"#web调试\" class=\"headerlink\" title=\"web调试\"></a>web调试</h3><ol>\n<li>一般在开发过程中, 大多采用<strong>console, debugger断点方式</strong></li>\n<li>线上环境调试<ol>\n<li>本地连接线上数据进行调试</li>\n<li>线上查看控制台是否有报错(一般是使用了某些没有的定义的变量或者方法)</li>\n<li>线上调试正在运行的源代码, 进行debugger调试</li>\n<li>各种浏览器tools: Vue devtools , React developer tools, react redux</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"小程序调试\"><a href=\"#小程序调试\" class=\"headerlink\" title=\"小程序调试\"></a>小程序调试</h3><p>基本和上述一致,  只是载体从浏览器变为了开发者工具或者真机, 需要注意的是,  如果需要测试唤起调试, 需要编译好小程序后, 手机扫描, 设置唤起扫码的版本</p>\n<h3 id=\"h5调试\"><a href=\"#h5调试\" class=\"headerlink\" title=\"h5调试\"></a>h5调试</h3><ol>\n<li><h4 id=\"内嵌h5\"><a href=\"#内嵌h5\" class=\"headerlink\" title=\"内嵌h5\"></a>内嵌h5</h4><p>如果有对应程序的debug包, 可以直接抓包, 如果不能抓包, 网页检查器也是不能使用的</p>\n<ul>\n<li><p>接口调试 &#x2F; 网页错误</p>\n<ul>\n<li><p>抓包工具charles fiddler</p>\n</li>\n<li><p>网页调试功能 </p>\n<ul>\n<li><p>safari可以使用网页检查器(和web应用一样全可以调试)</p>\n</li>\n<li><p>chorme devices可以调试任何网页, 前提是app没有限制 </p>\n<p>Eg: <a href=\"chrome://inspect/#devices\">chorme devices</a> : chrome:&#x2F;&#x2F;inspect&#x2F;#devices</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"微信h5-微信公众号\"><a href=\"#微信h5-微信公众号\" class=\"headerlink\" title=\"微信h5, 微信公众号\"></a>微信h5, 微信公众号</h4><ol>\n<li>主要使用微信开发者工具</li>\n</ol>\n</li>\n<li></li>\n</ol>\n<h6 id=\"关于工具的使用不赘述-可以自行搜索\"><a href=\"#关于工具的使用不赘述-可以自行搜索\" class=\"headerlink\" title=\"关于工具的使用不赘述, 可以自行搜索\"></a>关于工具的使用不赘述, 可以自行搜索</h6><p>注意</p>\n<ul>\n<li>charles证书有效期为一年, 网页检查器部分机型不装证书可能没有效果</li>\n<li>线上源代码调试的时候, 搜索关键字建议用中文, 函数名都会被转为别的名字, 会搜索不到</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm5lv0ck60009572ocdhx7aa5","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5lv0cks000f572o138tha2v"},{"post_id":"cm5lv0ccy0001572oafu8ac4c","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5lv0ckt000i572ohnrfhx4r"},{"post_id":"cm5lv0ckp000d572oh0itfwul","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5lv0cku000j572ob4hb7lk6"},{"post_id":"cm5lv0cg00003572oelfa6ubb","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5lv0ckv000m572ohb2w2kn6"},{"post_id":"cm5lv0ckr000e572o45ktd26n","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5lv0ckv000n572oczef1767"},{"post_id":"cm5lv0chh0007572oczevb3ke","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5lv0ckw000p572ocqql6l82"},{"post_id":"cm5lv0cki000a572oh6918i5v","category_id":"cm5lv0ckv000k572o1zic8wk0","_id":"cm5lv0ckw000r572o6hgs71py"},{"post_id":"cm5lv0cr7001g572o3xhf4fjr","category_id":"cm5lv0cr8001i572oglpf8qs2","_id":"cm5lv0cre001r572oe6ikgyll"},{"post_id":"cm5lv0cr7001h572o1yjp0xnc","category_id":"cm5lv0crb001n572oftsd9ybt","_id":"cm5lv0crh001z572o24402kob"},{"post_id":"cm5lv0crf001u572ob0udaorg","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5lv0crh0022572o8ekq2818"},{"post_id":"cm5lv0cr8001k572og9xsc9qr","category_id":"cm5lv0cr8001i572oglpf8qs2","_id":"cm5lv0cry0026572oehl23ldb"},{"post_id":"cm5lv0crg001w572odckxbu62","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5lv0crz0028572o65weauis"},{"post_id":"cm5lv0cra001l572oe3gl24gp","category_id":"cm5lv0crg001y572o05zx1kjv","_id":"cm5lv0crz002a572o3tvaauq7"},{"post_id":"cm5lv0crb001m572ob50nbp8c","category_id":"cm5lv0crh0024572o39wi5qhd","_id":"cm5lv0cs3002c572oa93ofhoh"},{"post_id":"cm5lv0crc001p572o9p746v9j","category_id":"cm5lv0crz0029572ofxcqcbsv","_id":"cm5lv0cs7002f572ocvpeb3zo"},{"post_id":"cm5lv0crc001q572ob4t77tqv","category_id":"cm5lv0crg001y572o05zx1kjv","_id":"cm5lv0cse002h572o07el1rhs"},{"post_id":"cm5mfjbjd0000os325pwceai2","category_id":"cm5lv0cgk0004572ohppah81p","_id":"cm5mfjbjh0003os32al5h3imb"}],"PostTag":[{"post_id":"cm5lv0ccy0001572oafu8ac4c","tag_id":"cm5lv0ch10005572o40sqbgxt","_id":"cm5lv0ckw000q572o9kjobokq"},{"post_id":"cm5lv0ccy0001572oafu8ac4c","tag_id":"cm5lv0ckl000c572oexan6fj7","_id":"cm5lv0ckx000s572o4y0sb90k"},{"post_id":"cm5lv0ccy0001572oafu8ac4c","tag_id":"cm5lv0ckt000h572o0lfa72rn","_id":"cm5lv0ckx000u572o82k1cntl"},{"post_id":"cm5lv0ccy0001572oafu8ac4c","tag_id":"cm5lv0ckv000l572o3wyyg49f","_id":"cm5lv0ckx000v572o5249512t"},{"post_id":"cm5lv0cg00003572oelfa6ubb","tag_id":"cm5lv0ckw000o572ohkb9ab6x","_id":"cm5lv0cky000x572odgyf23qy"},{"post_id":"cm5lv0cg00003572oelfa6ubb","tag_id":"cm5lv0ckx000t572o9gdcanp6","_id":"cm5lv0cky000y572oagcwea6w"},{"post_id":"cm5lv0chh0007572oczevb3ke","tag_id":"cm5lv0ckx000w572odw4kdcq7","_id":"cm5lv0cl00012572oetqmc9mj"},{"post_id":"cm5lv0chh0007572oczevb3ke","tag_id":"cm5lv0cky000z572o8e6h40v8","_id":"cm5lv0cl00013572o74cx5qf0"},{"post_id":"cm5lv0chh0007572oczevb3ke","tag_id":"cm5lv0ckz0010572oh75uatz5","_id":"cm5lv0cl10015572o01mz2rqy"},{"post_id":"cm5lv0cki000a572oh6918i5v","tag_id":"cm5lv0cl00011572oa9ry6hdw","_id":"cm5lv0cl30017572o7qvc3pt9"},{"post_id":"cm5lv0cki000a572oh6918i5v","tag_id":"cm5lv0cl00014572ogg5h1gkf","_id":"cm5lv0cl30018572og0zggevg"},{"post_id":"cm5lv0ckp000d572oh0itfwul","tag_id":"cm5lv0cl30016572o8rc8e46c","_id":"cm5lv0cl3001a572oaz1i491o"},{"post_id":"cm5lv0ckr000e572o45ktd26n","tag_id":"cm5lv0cl30019572oh13e916a","_id":"cm5lv0cl4001d572o2mu261nj"},{"post_id":"cm5lv0ckr000e572o45ktd26n","tag_id":"cm5lv0cl3001b572o8fqm93sx","_id":"cm5lv0cl5001e572o531agrob"},{"post_id":"cm5lv0ckr000e572o45ktd26n","tag_id":"cm5lv0ckz0010572oh75uatz5","_id":"cm5lv0cl5001f572ofnszbjz7"},{"post_id":"cm5lv0cr7001g572o3xhf4fjr","tag_id":"cm5lv0cr8001j572o5afhdm23","_id":"cm5lv0crg001v572oe11jf49o"},{"post_id":"cm5lv0cr7001g572o3xhf4fjr","tag_id":"cm5lv0crb001o572o5eq498op","_id":"cm5lv0crg001x572obtim1obx"},{"post_id":"cm5lv0crf001u572ob0udaorg","tag_id":"cm5lv0ckx000t572o9gdcanp6","_id":"cm5lv0crh0021572o4acqcxne"},{"post_id":"cm5lv0cr7001h572o1yjp0xnc","tag_id":"cm5lv0cre001t572o8f168gum","_id":"cm5lv0crh0023572o5hvi90z3"},{"post_id":"cm5lv0cr8001k572og9xsc9qr","tag_id":"cm5lv0crh0020572o8j3c1nhe","_id":"cm5lv0crz0027572occ5dhe8i"},{"post_id":"cm5lv0cra001l572oe3gl24gp","tag_id":"cm5lv0cri0025572o9rpi9krq","_id":"cm5lv0csf002m572o4b8e6jnu"},{"post_id":"cm5lv0cra001l572oe3gl24gp","tag_id":"cm5lv0cs1002b572oa55u985a","_id":"cm5lv0csf002n572oawt38xnk"},{"post_id":"cm5lv0cra001l572oe3gl24gp","tag_id":"cm5lv0cs6002e572oczrk2m3n","_id":"cm5lv0csf002p572o2djo7f8n"},{"post_id":"cm5lv0cra001l572oe3gl24gp","tag_id":"cm5lv0cs8002g572oc4tc1qyq","_id":"cm5lv0csf002q572o1ti2hv0s"},{"post_id":"cm5lv0cra001l572oe3gl24gp","tag_id":"cm5lv0cse002i572o5ryb3nti","_id":"cm5lv0csf002s572o7bju980v"},{"post_id":"cm5lv0cra001l572oe3gl24gp","tag_id":"cm5lv0cse002j572ocjrsfaap","_id":"cm5lv0csf002t572oh9ejascv"},{"post_id":"cm5lv0cra001l572oe3gl24gp","tag_id":"cm5lv0cse002k572oc4qq4v95","_id":"cm5lv0csg002v572ofwfs08nx"},{"post_id":"cm5lv0crb001m572ob50nbp8c","tag_id":"cm5lv0csf002l572oes7f2dea","_id":"cm5lv0csg002w572o4sylbes2"},{"post_id":"cm5lv0crb001m572ob50nbp8c","tag_id":"cm5lv0csf002o572o05zhf8zt","_id":"cm5lv0csg002x572oa0kq2phe"},{"post_id":"cm5lv0crc001p572o9p746v9j","tag_id":"cm5lv0csf002r572oc47q5j34","_id":"cm5lv0csg002z572ob1hp8s4n"},{"post_id":"cm5lv0crc001p572o9p746v9j","tag_id":"cm5lv0csg002u572ofa7ch4z3","_id":"cm5lv0csg0030572o0iwjggi6"},{"post_id":"cm5lv0crc001q572ob4t77tqv","tag_id":"cm5lv0csg002y572o1lf7091l","_id":"cm5lv0csp0034572oekbx3bf6"},{"post_id":"cm5lv0crc001q572ob4t77tqv","tag_id":"cm5lv0csg0031572odj2xc8hl","_id":"cm5lv0csp0035572o46fa2zqr"},{"post_id":"cm5lv0crc001q572ob4t77tqv","tag_id":"cm5lv0csg0032572o4l3j1h71","_id":"cm5lv0csp0037572odu2sfvld"},{"post_id":"cm5lv0crg001w572odckxbu62","tag_id":"cm5lv0csp0033572o3kbj9gvt","_id":"cm5lv0csq0038572oad7ch3sy"},{"post_id":"cm5lv0crg001w572odckxbu62","tag_id":"cm5lv0csp0036572oedtr9eks","_id":"cm5lv0csq0039572o7djzc17h"},{"post_id":"cm5lv0crg001w572odckxbu62","tag_id":"cm5lv0ckz0010572oh75uatz5","_id":"cm5lv0csq003a572o0p6wcjv8"},{"post_id":"cm5mfjbjd0000os325pwceai2","tag_id":"cm5lv0ch10005572o40sqbgxt","_id":"cm5mfjbjh0001os32cujqa7x9"},{"post_id":"cm5mfjbjd0000os325pwceai2","tag_id":"cm5lv0ckl000c572oexan6fj7","_id":"cm5mfjbjh0002os327anuf47g"},{"post_id":"cm5mfjbjd0000os325pwceai2","tag_id":"cm5lv0ckt000h572o0lfa72rn","_id":"cm5mfjbjh0004os328r3tdm70"},{"post_id":"cm5mfjbjd0000os325pwceai2","tag_id":"cm5lv0ckv000l572o3wyyg49f","_id":"cm5mfjbjh0005os3205i6czbr"}],"Tag":[{"name":"map","_id":"cm5lv0ch10005572o40sqbgxt"},{"name":"set","_id":"cm5lv0ckl000c572oexan6fj7"},{"name":"generate","_id":"cm5lv0ckt000h572o0lfa72rn"},{"name":"iterator","_id":"cm5lv0ckv000l572o3wyyg49f"},{"name":"ts","_id":"cm5lv0ckw000o572ohkb9ab6x"},{"name":"js","_id":"cm5lv0ckx000t572o9gdcanp6"},{"name":"箭头函数","_id":"cm5lv0ckx000w572odw4kdcq7"},{"name":"解构赋值","_id":"cm5lv0cky000z572o8e6h40v8"},{"name":"promise","_id":"cm5lv0ckz0010572oh75uatz5"},{"name":"git","_id":"cm5lv0cl00011572oa9ry6hdw"},{"name":"gitee","_id":"cm5lv0cl00014572ogg5h1gkf"},{"name":"javaScript","_id":"cm5lv0cl30016572o8rc8e46c"},{"name":"宏任务","_id":"cm5lv0cl30019572oh13e916a"},{"name":"微任务","_id":"cm5lv0cl3001b572o8fqm93sx"},{"name":"sql","_id":"cm5lv0cr8001j572o5afhdm23"},{"name":"mysql","_id":"cm5lv0crb001o572o5eq498op"},{"name":"react redux","_id":"cm5lv0cre001t572o8f168gum"},{"name":"node","_id":"cm5lv0crh0020572o8j3c1nhe"},{"name":"ref","_id":"cm5lv0cri0025572o9rpi9krq"},{"name":"reactive","_id":"cm5lv0cs1002b572oa55u985a"},{"name":"reandonly","_id":"cm5lv0cs6002e572oczrk2m3n"},{"name":"vite","_id":"cm5lv0cs8002g572oc4tc1qyq"},{"name":"Suspence","_id":"cm5lv0cse002i572o5ryb3nti"},{"name":"provide","_id":"cm5lv0cse002j572ocjrsfaap"},{"name":"Teleport","_id":"cm5lv0cse002k572oc4qq4v95"},{"name":"webpack5","_id":"cm5lv0csf002l572oes7f2dea"},{"name":"vue","_id":"cm5lv0csf002o572o05zhf8zt"},{"name":"微信小程序","_id":"cm5lv0csf002r572oc47q5j34"},{"name":"wx","_id":"cm5lv0csg002u572ofa7ch4z3"},{"name":"props","_id":"cm5lv0csg002y572o1lf7091l"},{"name":"emit","_id":"cm5lv0csg0031572odj2xc8hl"},{"name":"parents","_id":"cm5lv0csg0032572o4l3j1h71"},{"name":"prototype","_id":"cm5lv0csp0033572o3kbj9gvt"},{"name":"constrctor","_id":"cm5lv0csp0036572oedtr9eks"}]}}